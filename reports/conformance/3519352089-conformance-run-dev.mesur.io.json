{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2c66799a-841c-4285-9c59-1f021f875588",
        "name": "Clear Cache",
        "item": [
          {
            "id": "eb7bcc45-776f-4349-a3c9-6988ef9dea9a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "efb6c9e8-2435-4908-bc6c-4ec5c3481ce6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "91d6afae-fff1-447b-8b30-8bcd91a75e4f"
                }
              }
            ]
          },
          {
            "id": "ed3989df-9d6b-44c3-b234-34104c40af23",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7aeb74fa-d9e5-4fd6-a42a-0746d4638157",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5587c99c-12a8-4ad7-b5ac-ae13d4478df6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6d341261-0b7e-4a19-87df-5dfe8d37a99e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9fdeca34-182f-4699-b58b-9056e30ef7d8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fe701d22-9d58-4e8d-bd1d-c7becab5e112",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "67e30525-1c56-475b-b977-73b213254033",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "604a444a-c307-460e-a75d-7c9e6a82abfe"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4093ea53-d8d0-4d93-a73c-3dd3b702e04f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1e277bf4-d886-4b98-81bc-cf5ce906c123"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f6ea86ee-6991-4cc6-8871-51268000bcb8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "42bd3060-741c-4203-af43-5c3337f4ebea"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b56d7d54-8869-4376-83fa-277fd22d8084",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f3e19305-f1e2-4b88-8117-cf7d5bab5fb7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cd7ddd43-ed10-4715-9421-10aff4870544",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "23b2244d-f4d0-4ecd-88a2-4de0f1ca90af"
            }
          }
        ]
      },
      {
        "id": "f16c2809-afbe-4caa-825c-ca2bcddd1057",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "425e58ce-326f-4f02-afea-cba0907814d9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d2e2a423-88df-4729-bfc5-8c87dddf65ad",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5058119b-7bb5-481a-bd4e-555c96e269ab",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed6da3d-6917-4350-ac54-c98e42113b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bdbde293-d24a-4db1-aab7-70a816b55e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f16f4c-9c62-4230-b385-7d35632e26b4",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1ecc96-3c1b-4d4a-a360-997692ed40a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc67102d-6cf8-4399-82e9-ab38679fc271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee4aef7a-f206-41d4-b251-3c9858481331",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed08faa2-e4af-4c40-b82e-732fa64d87cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "215890f8-ae9b-4a91-9878-df0a7ca49809"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "302d5c26-e9e6-4589-a1c2-25f311910b64",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ddbafd30-641e-4e3a-8bf6-f651702448ae",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7149516e-0aa9-484b-a26b-834c102886b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fa4b318-124e-4b24-974a-f8a8889ad809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc8bb60-281b-455c-b71d-a0f2e66240fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "709f92a2-2901-4216-87b8-be5a60b1e3d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24e8d51-8c27-4f3d-8e19-a24882a29965",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "483af657-ec29-4183-b737-6c1ca00b3c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a544c000-1fd5-4221-a48b-f113e70d201a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc0bcf1-db95-4115-92db-06c942323f8a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "6b0469b7-eb3f-4037-83ff-3f03fa35cc4c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "697481be-1266-4ef4-a0ba-0e6ec9250519",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ee6992e4-da20-44f2-ba77-551271bc71b2",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4d466a6-6746-4139-a304-1143b52adf3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "1eefb383-6000-42e9-90e8-bf1a646d8747"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fa651280-8b4a-4cd8-99bc-6ab84402b4eb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "05eb74d4-db18-4f51-8010-b7308104ca49"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dfa22b96-4148-4216-8fa9-1481a2008cd0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "319b6224-5399-476f-a11f-c38ecb283bee"
            }
          }
        ]
      },
      {
        "id": "2c6cbe0f-568e-4205-8360-ecc0a7698681",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "08e0a3eb-04e8-402b-b531-54249bfb3d67",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fc1c5449-31b0-465c-8fb9-0ea4307b5f2b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4f7f8f14-bce1-4fd7-b8cb-463991bd1f6d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c26abf6-0cad-4604-8fa9-073350391f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9693fa2-b8e6-407e-8a0c-2cd4951b8ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea47f4c-c144-43ed-8c0c-668150989c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f788913a-cc77-4a8e-b6b7-632945da9c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59f319f-0f3e-46ec-b068-8055edc85f7e",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68cca6cc-4810-4afe-9efa-8adcfdc12370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28e1ba40-cdce-4e66-bcd9-f5b095eaadcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2774862b-aa9a-4913-b023-db11a367aa3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8fcc653f-e9bf-4ee8-a647-bad6b3076f90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef42796-e66f-45d8-a8a5-f7c7d9a580ae",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16720ac9-6be3-48d5-ad1d-19f7ca3d6fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c754c83b-a336-4a8b-98ca-5b1bce3bf61b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7800d4-6aa4-4028-a9b6-65c239844979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0861ace3-bab6-4756-9c05-97ecdcebf0cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36400b2c-f776-41c7-a3aa-0102d0048760",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e41076a9-e5c0-4890-af3b-7ebebcfe6f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ed902a3-6fd6-427b-b8eb-d290c9b57694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "966cb30b-6002-4b86-9292-30e67ad46253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e28541c9-a64c-458b-8610-b20574b4038d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d43e1da-a6c7-4654-9c87-5569295d47e8",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "095fb172-471c-4daa-8678-8761c725d0d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5916ff1e-b39c-4c5b-aa04-37b970e99207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f246123-b9d9-427e-bb40-5a85ecc9b4c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c4c5ce2-eb39-4d7d-933b-20121f4d0fa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84876567-866f-4941-8a65-994aba0bb556",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "210b872a-82fd-4db6-b885-bb0501a4aff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e3a660e-6aef-40a7-b689-2c5cd9f0487a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f74b4e0-cbdc-45e1-bad0-0df2d6e926a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a99858fd-fa14-4a7f-8e7b-dd3a35b2bdfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8db1064-6171-489b-8c7c-fa5baa849db9",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db33c773-cfc1-482b-a675-395ae7ab3ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea73cca-ea4e-46bc-ae58-d8308223cc91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d59d1f7-ea2f-4053-9f34-cce4a2fac774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eea1dae2-f735-44b5-8c80-55651a0f8b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9bd2da-f5e3-40c0-a352-606f74ffdb2a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ab3ac7b-9c0c-4736-9b67-3ba258afa26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52d0c6b4-6427-47d4-8ea3-ceec7e977235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa338f1-0b94-456b-a3a3-43fcc4b99570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eceb4727-f3f0-4158-92fd-8bdc6a4cd6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842138cc-d7b1-421f-ba4c-29b2c6d1018f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba25bcbd-79ad-4943-92e4-a10c7fedfcdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac8ed5a1-49cf-4693-905d-4260172c32ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17bab12e-204c-4a38-a512-bbeabf8bb21b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17208155-e5aa-42f0-ad8c-f7b9a08cd1ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a3bf2da-fb8c-4933-b77f-ada0f4c1b4ca",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff97756-8e6a-49a6-9849-ee174016231d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c2ae8a5-eed2-42f1-8bfc-659b48b08e20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae734d9a-7177-4c8a-a9fc-435c0473cdd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a727ce40-8667-4685-8d55-0d281f2d0b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c83a80-c27d-4001-8ffe-c5f9f2a709a4",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f8dbf42-a363-43e9-bdd1-024746de27da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78bf00f5-761c-480e-9503-5289b165cb67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72475a9-0d9a-45b6-91be-41644096ba1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff800c93-68e6-4a2e-9e3f-f67d44900e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "823bb0e2-4c3f-440d-9007-6b9727e34f93",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e11260b-f2e3-4a23-b2dc-2026d8b5ce75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a131bde-db76-4597-98f0-37dc2d0fae2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28495b5b-5893-4af4-8f8a-f1d60da91a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f87b68e-7c96-42d4-b5bb-c5c49b49cd69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e19e95-64f5-445b-b0fe-73141d48e598",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "037c54cb-604a-4c64-a127-ab0f7a46f8fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23c958c2-7748-4672-92a5-69c9621adf81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb397c8a-f409-4fe3-bb35-eaad2843cbcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0295615d-14aa-400e-a1d4-1f3ed1ac1ff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5672db1-17ff-4ce5-89f6-12a96d2344e0",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1103b5b6-9611-461a-a061-d905b1e576f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94632b7f-26a0-4f03-ae20-f9d8d2f85b03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d473e88-983a-4f6c-a233-0aa4fda3da8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d6f1a25-89ce-4e60-a80e-9c3e8820a022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e22c6f1b-f514-4017-809b-81db1e012ae9",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa05496a-d8f8-4258-acd8-ef72841d7e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15f0bff0-bb81-4ad1-a276-71c237365ca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99caa54-8a77-49bb-ad13-8f4f53dedcfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ed94690-5021-47de-9ce3-60630e63f398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7243927-8f20-4e24-ada5-57903b89117b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cacf9754-198a-4d8b-b167-63f5f829992f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee654f9d-44c3-47e0-a762-3d890cee7109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e7eac25-e95d-40b5-907e-6058b24afc4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ba2bde2-cc49-4d43-90f7-f54c4324cb6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01133e7d-269d-440b-a14f-ee23221b8d9f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4539b1-896a-46d4-9cbf-f648fa4c0ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9b1d938-c30a-49f3-b223-1b12185f12a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22d9ce9-a779-4a94-9c26-a83a0a93a7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2afce3b5-dcc7-49d4-8a40-99955b1c58ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a0d57b-f436-4d4b-8656-5d45ee92c43a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47817e46-5fd9-48f9-8034-864f9b5e7422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c2865c5-e87d-497b-ba50-41f8e6c197b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09923004-5230-465e-86f5-207c8fb97e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "25e3725a-8e33-4716-95d1-2239a8f7d3fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d4f2776-2744-41e8-a7b8-22be12a1237d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47c737ec-ce86-443f-88b3-1a1dcf567ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56422a81-b2e6-4c68-a07f-31a8e17e20b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e7572d-ee7d-4b56-8203-60664247406a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d45e285-bfa0-4244-afe2-008b683f3ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "436d2368-f586-496e-8a4a-8a13932bc989",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd8d87d-bece-466a-8d17-f6e8a7003be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dd32c85-b6b9-4a20-8a72-e007430921d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b090a7ab-d7a5-4236-b11b-0878a50fad8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "41279e3c-287b-475b-8e34-7d777969d20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5de7ac-8aba-4663-9893-c881732cfe15",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2067b033-7fc6-4e99-89ad-0b9b1459179b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e070c79c-cde1-4ad7-a9eb-b1dc7bc59d52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc3d39e-4813-454f-ba57-db0e334faaa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63b81821-9958-43ea-ab31-a13283b1e4d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1582d822-403a-419c-9f69-79e5fd44f8d7",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cef5b11-bccc-4618-aa0f-bd9759c51649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faaf05c9-4f93-4e17-8244-b8792c517e2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d692af-e771-44d0-b0a2-05689b41f3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e4d862f-9d27-4560-bbf3-75b2ff85d0d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359503f2-b6cc-425a-9698-c77abfbfde1d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d62e46-fe86-4170-be99-60e9ffb6c21f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4af4593e-7906-4dcf-9bcb-76dffc03f7d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6301c74-804b-4161-9f8e-e2dbf8f370e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3c7cf49e-afdb-45c2-a98d-736c87ec847c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746b7048-6505-4abc-b36b-afcb506964fa",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e7071f-6b27-4a8d-b1ea-a326b1a383e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28372643-56c1-44d1-851a-451522fe46b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfa0ea9-d761-43da-9996-b9749db35a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5397264f-13f6-4b75-8821-fd7d5363ec08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85412b5d-c85f-4f2f-b4da-64e334d306f2",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2b99b9-0b5c-4d84-88f7-b77ab866f0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4c0d282-d999-4d4d-960e-8f40f27b38e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb82ce2-7df5-4480-9fc5-628bed0b2e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "450b8409-9fe5-4835-8196-1578926ca1a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f3e14d3-befc-4106-9573-92c5cb3db9cf",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57cc5b96-1510-4347-a819-f5b5337bc219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8446b821-5b9b-4893-bbe8-1e1ffd01c4c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "759fe48c-92d5-4638-8edf-e6965756d708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "557faea1-5ddd-4aa3-ae7e-14046ce34467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9042970-d0e9-4d46-a7f1-06eeb5d5f278",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e6df8c-5e75-4619-8e73-355c34d9f515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "404a65c4-03b5-4dfd-b5b3-3a03c0706f2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "244e2c5d-1bd3-458d-a114-4a93c7004a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9360c241-a9ec-4786-b68b-764b2a88fd78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c62ea07-a9a9-4e46-a1ee-f72b562c8d31",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d385f2-df90-495e-8dcf-10e8c9171e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b2de3b-86c3-4234-bd02-4f248203a4ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3b0cdb-1a25-406d-ba81-c52a6fb373a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a681c010-2d22-4752-93e0-12677cbe0959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ec2455-c9ff-46be-b5ab-6ffa603c0ebb",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6d708d-c4b8-4df1-ae32-f4eb7441285d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5cbe53f-05ec-410f-892e-88064be11017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df97a7e-1789-4b31-aa4a-1cc40724ed36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7e549a3-bdad-4fe9-9a0d-a907c462e114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a87f5c-74b5-469f-863b-1f78c7ca02d6",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f043a5-215e-448c-a9be-35ed4d6a77f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21598814-8fd7-407b-a73c-9f909e91fd51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf29f6e-c037-4f27-99a7-9060f325a7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe58b660-eafe-49e1-a9fd-d88d9c2351f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7d39b5-1284-4866-afca-4ce53357b47f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23797964-c0a8-41e7-8d01-16d2e43bbd11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "355b91bf-60c6-4485-a279-532dd1e6c381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03dedea6-4263-4f71-a8e1-dd847736f803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "00a8ccd6-d0eb-4a94-a285-1ee735d3cf15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec47ffa-7101-4f4d-ba9f-2d6cb50dd576",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a5739d0-ecb3-4eb2-8672-cab1e3001522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acf130a6-1342-4e06-95b9-700c9ca1c9ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a0ae55-c8ab-42c1-9530-0dbd6b0118cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6a26421-59d8-4667-b94e-1d44355265b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2fd5353-e27b-4304-9080-d1f49df52ee8",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07dcc5eb-c86f-4d42-87e1-a73631bd485c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e86df471-98fb-4a83-8a01-00823ec3a0a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6affc90-ffad-4849-8148-79934898f3b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "46810129-a6c0-4ba7-84e8-2818db2379a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc59b7f5-24b8-4d73-bf76-9fbfba20e64e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de87a4ce-2c53-4b5b-b2a4-16c178445dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cedc734-150c-498c-974d-256f5998fca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a025dc8-9910-48d6-a525-9720b23b7a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b185bf30-dec3-4c25-8596-38619643874b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a73d64b-d7ab-4331-8397-863fc2c27176",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e2a563-e0cb-46da-b182-8a56461ea212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc69164c-43ab-451d-9019-ba24f76717ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de187dbc-bc4c-446f-8db1-eaf4f94b45b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "4a8a7af9-fb60-4504-b5e3-b120dbb751a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555fd605-db9a-4e70-8732-30e1895c59c4",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e174ffb8-1d6b-45f0-9af1-2da102a9145e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f21e0a44-76b3-413a-be80-a3cf6ce38c3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c967e2d-5bef-4996-8acd-08c22b40ff99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c41611e2-d3a3-4917-90f9-76caa5bdd56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa797af4-38ce-448a-9840-877ade71987f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c1161f0-e7b3-47b1-b823-130179e3c971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea38fcbf-25d5-43c7-a6cf-5943416c0c48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5bfb8ae-8b3c-48dc-965a-baa3971ed585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "19842e0d-2ca4-42a5-9ac5-a3c06990ebb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6aad94c-3320-4f67-abb6-3a6c694c0e8e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a491e09-2871-4dd9-80f7-e5edbb23e089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50225672-5386-4d51-9cd7-35008fc7ff58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e18803ee-8893-4364-b491-19a1851bc575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "48292e49-4b23-4aff-874f-b8a826d4263e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698e87c9-e4fb-4c0e-bebe-9c8619792a73",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f47754a9-b484-4ab5-ae41-61fe8411cb21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d7adecb-8f0f-44d8-b585-5c69cc41d8f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "002ac4b0-ff5a-4070-afd2-21ac689809ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c96d9c8-e7f2-43d8-aa84-c86b4cd4f37a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e776ce9b-8758-4e6b-b97f-bc14e950c29a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc083fc-9eac-4194-99eb-41ac3830b81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b16d5720-3750-40b7-868a-cbdfb4de4d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f855a0-6b6b-496e-b6b1-6bb1dc435c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0409506d-dc68-446d-ac17-f9c4bd055c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7e7bbd-d52c-4ac5-9bb3-4d354b5801c0",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad29ffc-69ed-48b2-a191-89828d45da5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0fb39e5-27af-41e0-bdfa-40ada9d4d5aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf7c5be-5f90-464c-a01e-de83c3258d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "757c90f1-7c31-4f12-ae97-d285c130865d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8307d947-ea8d-4657-b031-b94a7576a011",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0020ab31-c689-41fa-a3a1-ec421d89e42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae318b01-2e5b-4e9b-97a2-11cd7e36a109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f741d37c-e38a-410e-91d0-8b690db9f47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d4763451-e408-443d-b9e8-3b4d6afa7f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a69a6bb-897c-4429-bfe7-393b681031c1",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8de891f-d6eb-4b2d-bf84-b3c66b97147b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1631727-ad08-412c-b4c1-c4e6a959d62f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe11e815-e85c-45a0-bb4a-9959acab1b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a33cb7bf-1f84-4a1d-bb46-419da850eecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f17de488-1996-4983-a948-1d74fe649807",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b65c8e9-5b75-4c0c-9f79-fcc27bf5b890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "436507c2-bf7d-48c7-8e44-6be94dada833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d8e025-cd65-44f4-889c-4d04b425b9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bba4eed-334c-4f6a-977e-a79e09c26001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e1e1b06-badb-46c2-8e84-67cc84691c56",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6e8602-e4fb-48a3-a3e3-79671bc3501d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ae12005-f842-46c1-afb7-067d002432fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e31070a1-0ac4-4e77-bf47-630f23483260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c6e86e2-67fd-45dc-978f-6c9c8751fa01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf44e7dc-b6a0-4345-af78-b61ab2753db8",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de58fba-aec6-413b-ba95-87ceac1e1896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f8328ec-7f88-474e-a408-c0e783cff5b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2dfb43-603e-4696-9923-5d174fc4d249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c3cebab-ef4d-4583-920c-26f08c783119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0fa9d9d-a9e4-48e1-a46f-527cef3a8000",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f866545-e691-4948-9d58-88287c4ebe52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5e4d75e-8646-4703-9a62-438974705524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9e60d5-0e09-4923-bc7a-e180c7516164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6e4f9fe-5e92-4f2a-b715-1526edcf34f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f82c93-ed4e-4757-b983-81da2f8d201e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e4ce685-ea6d-4f69-8dbc-2a1157fe2380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a603b61e-fb6f-4521-aa07-dcf23aaa69b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b7bd9b6-108b-4f27-a75a-c0ed0f29793f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9b52df1-00ff-484d-89ae-f6c80c37999e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14c11a5-f2bc-4ff1-b455-b2e3e6364cdd",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "086f9e87-d7c3-4188-9801-404ff3c278fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aeac6f6-2c77-4e8a-8195-5ec306f4120c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2253c06-8348-4725-9684-bf0e783d1c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3104dd21-3c5b-4266-aa96-98a8402aea1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c82072-fffb-425c-b5e0-5bedc1559498",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c1d0ca-e631-42bb-af74-41c60cb7262e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d711bf9d-c7e9-432d-a683-c2fab660dc65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275af49c-aa2d-4264-9e54-d3ccd23d8876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "640c4937-3197-430d-906a-03675c7d2d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822c340a-42b2-4d2d-8dbc-47a662cb48c6",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65cfd7d4-2e1b-4bf0-bcb9-e0870730dd60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a17f316-9fd5-4eb0-80b1-0223d7c1b800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c47b4ed-8d52-44c7-878d-c6cbf201d224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae1dc787-a7e5-4f39-a68d-fa2eb67eb840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b5536a-43da-49bf-bbde-d48fcd3b2861",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d96522-f15e-4d1a-b56c-55d65b1f952e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d56112e-2665-46a9-b385-26ba8606d545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8300962f-4991-40ba-be76-53b8151bfcfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb17409b-253d-4ad5-af0b-b3bae1d5b367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea93fe7f-896e-44fa-be9b-cdab015809c9",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6135cfdb-a02a-4849-86ea-0ae7b8993f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a780e1-d25d-43e2-8d6c-58bd28f54652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29218264-268d-4517-8d7a-b00bf8f489e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcd65fdc-a7c6-4e96-995a-5818c0a6a055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb3214c-b9e4-4d78-8025-1f375fb4ac76",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "005ab30e-b2d0-427e-8ca3-decd4b9a7f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2938c58-82b9-4961-a197-89cc802a8005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db962f5d-39ca-4d53-a343-04ca32579a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2335156-0942-485f-a7c0-b3f5ecdb0714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6832cd92-0744-4da5-8ab3-82738975f721",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "492bd6b1-3f08-46bf-8c87-dd4d13508f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09051c8f-de80-4eaf-a05b-5a5f735652cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa02eb9-68f8-4f2a-ba78-8615a0c52fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "86566386-5176-449c-81b6-6371cce90ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adccb8e2-efd6-41b3-893e-dc5b3a62e67e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e5b4663-fa30-491d-b444-a318b421b817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47cca2b3-a4c6-4235-a54b-915f83f49ab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3de530-17ab-4819-b625-f4907d89b0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "fc6cf02c-e9fb-4464-8f51-24a7903eeaed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e44f8922-e5b8-429c-82e3-89f6b000ee74",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f8117b-938d-4d59-9a1e-30715e95f8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c5aeca3-266f-4030-8a28-0c22f0f7808b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f318955d-3c59-4162-a158-4d146ff1f93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a15dd8f-bc3d-4ba3-aa2b-a6cbf35cfb67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e352cd45-4ce9-4722-9977-d35de7a06d4a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e888e341-bd69-4827-ab98-78156670fd6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab2bc864-728e-44d6-82be-19b861f336b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3891bf6-e6da-4037-a84d-76e9801685ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "54671942-63b3-443e-a3f2-dea34b964001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d1456b-ec22-482f-a690-b9df1a30b2ba",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "252b3021-c05d-44fa-861e-ee9a33cc8fa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ac6c089-b97a-4dbf-851c-07f116e817cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b3a5da2-79c5-4ce6-9d2d-f92611c5f3b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0968da1d-d37b-40c3-87bf-3a583c77e437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e72e9d75-87fc-415f-8540-ea3babf46835",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49e7ae3-78d5-4ee2-93e3-4de96a807358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8d31eda-c46d-4c92-979f-06b192d4e62f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec09875e-a704-42c7-99dc-1c36a6700c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a374c87-e49b-422e-bec6-29d66a2b4781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e8c28a-b018-487f-91e8-f6e4fddff9ac",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed11fd00-242e-4404-a22c-91fd663882b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c825fe3-ff66-434a-aa89-5a6f07e0947e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a5de63-83f3-46d8-a466-c0093fe8738b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbea129b-6582-44f9-bcab-75014fed5701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636a690e-a2a8-47c1-b10d-9eecc4495bad",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ccdee40-f1e4-4996-bee0-da4375a936c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b4f2cee-098a-4a78-b206-9bc2e65bdf84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a847eaa5-62ab-4729-94e6-1c60675b7660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c7bb579-9d22-49c8-97d0-9025f188aed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd41c17-514e-4060-a070-0820b6f51c30",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef6b1828-103e-4a00-860c-1ecc9bebd478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5df4e71e-633c-4784-aefa-4062bd97336f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7104ad1-e346-4a74-b27a-74391e2a489c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "83644856-14ef-41bf-8df7-85dcaf9d407a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2517e2f9-5b2a-46ea-97cd-92c466063136",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "209ae33a-d87f-4628-b12f-d417b905df7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab9b0716-8a7f-461a-95d6-0e2a6ca2a7d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd99476-0418-40eb-87f2-f00f2d565c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d779e133-d7a0-4fbf-aa9a-7f2ebc0fc60c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24207021-640e-45da-9d52-b66bfe7b822c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf0f6c5-a7cd-4575-ae89-99b3b5b8c589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2232941-0352-4ee8-9a77-ea757abfe9bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba60f0b-384d-49cb-99cf-523dec98fbd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4fc6fba-4716-410c-b6c0-bd2645229008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f861cd52-b866-40fb-ab45-7273acd8bd58",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdfad32b-0d30-4499-a389-3ea4e778e61d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "008b53bd-6093-4084-bd11-23e0f0fb0872"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d1e37b-f75f-4702-9239-a90e86fae21f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e3bb69e-78be-4349-bb07-6173c8e249d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3db48c-ccd1-41a7-ab83-4f9ab0e43569",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b093afea-43dc-402a-a32b-530daf536a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1259288-58f6-4bfa-811a-1f052d52c117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31404d2c-0cdb-4b97-8a55-9fd48d0ca5db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a4bacd33-0aac-4167-98ed-dae4a79e2cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f27995-c8cd-449b-a62a-90709c856795",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "205a30a4-0de7-4207-85f3-fab5cd8ed2da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfef2929-9e4b-4f28-8363-6bf68cbe2de3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f878ad4-1e20-4979-9e87-ad86cf4b6656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4916fae3-eabd-4427-ab38-1ca3cfdff765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dff67c0b-7542-42b2-a454-8aa4d4719e5a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ebe1f1-c39b-435b-8b7c-4371cfe2d3c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9437175-4a25-4f04-baa5-a723378975c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d4099c-3ac0-4559-b760-c176641e2dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfd25d92-2f43-4751-8ee3-1c94da3a358e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17cf2e23-64a6-4d6c-aff9-95dfc1576f5b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd0e3a5-b1e1-4191-a15d-a2d25f6c3c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "366e7c4b-eaf9-420c-9f42-5f6fd70c17c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49fb5f8d-aa83-40e7-b328-7e55850c934e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "955604d6-ced7-4545-9a85-3ea84bf0a16c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee4b8d6-e0b1-426f-9316-dd963df95285",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77400ee9-0118-4d7a-a903-d4ac14a540e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abb99d88-7f70-4c55-850d-a1b5f142c587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d42be2-2c80-4d90-8ac0-f45df4ed849f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "11e9c367-5d6c-412f-8198-4a74db12d1d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef8df90-f0e3-4e35-b514-f7c7277e3d13",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce79cce8-99cd-4c05-88c1-c08f7cba9020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21c5b210-7200-49ef-8b16-d917e1fa9915"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a39461-a7fa-414f-8b4f-e0eb12e8b034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "954729a4-f685-4dc7-88d7-26a7c77d50e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cdf3649-e36f-4a10-bd9c-6bed30ece998",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde59677-95bf-4009-ba63-e980b59ce383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa69978-f6f5-4ca0-82a4-5e96bf0ddc08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df2321f-f99e-4b6b-a58e-3967bb72d0ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "613f93d0-1bdb-4a64-8112-150be67f7bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c872b96-2123-4c84-8eb2-d6cc50107c93",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d4c296-866e-46bf-8d9d-7c829790c517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37dd7491-6c8b-4a5e-bef4-6d76b2230089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503a1676-1f5a-4be5-8dde-aec084200053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aa117a85-a786-46e7-a402-cfbba73dd1eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24daec9-3a3f-4255-ab92-5e5bb7e00da8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1445a9b5-13ee-4aca-9ee0-1715a77674e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89573ecc-decd-44ca-a1db-cb5f60b0e50a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f57f7ab-0a2e-4da4-a320-a251c17b3da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7fda1db-b4ad-4b88-9ee1-91c06a7563ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f65b540-9e9a-4fd1-a7ae-c65f4dd60b0b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f8da38-43f9-46bf-bcfc-62ff37e290e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a28bc4b9-047b-4bdb-a6ca-c54ed4935971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c01a1a2-661e-410c-a763-b5bd37c699e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b50e5daa-f8b5-4e25-81ab-6f99dbb08649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03588dcd-1f5a-4ff9-98e6-4eae0fc7bf05",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b342a7-fe1e-4fdb-b970-790ca16de7bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a40b39f-3fed-4e3d-a5ae-f3aedb3a9c56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1897b00-cd3b-4932-880f-aaa5f9951d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "baa0043b-9a99-4271-a802-cdb9806d65b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "981cf3bd-64f4-4b6f-986c-0952cbadf6b0",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be63bb5-5d6b-4083-b6eb-4527adec855c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded66bcd-e1f6-4c62-a793-5685e71aa220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21118131-5ebe-4b57-a66f-bd0103177fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6b7c109-b5e5-4ed5-a8a6-7c564f12252d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364c4c65-5dfc-4863-bd35-70cd323d9844",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87eefa1a-81d7-412c-aa66-c541292345a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce6f0214-53c5-4f98-9ceb-749af2a7a5e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4950294a-abba-4375-9d17-7fc1331b4e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "204ca748-7ec6-4918-9191-25dd4ec84d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a4b10bd-affe-4b21-aed5-5b6741c5e878",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d2cfdc5-060f-40f5-9cca-a47e589f4378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e8f0042-27d9-46e1-8876-8707eb0ec5d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db365f6-c687-4ea1-ac3d-cbc67d68e815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dbc1d0f0-d48b-4c48-9050-11e7d26c235a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46537eaa-c648-4f9c-a264-7cff25f68eee",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b261733e-d663-4d10-8b95-5b36305f0665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a55e18b-bebc-474b-8326-96529656a87a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8a25ab-3c98-42f3-8f5f-bb3a5a4542b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b264f115-bf97-4975-86bd-93a648179e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c666a0ae-f744-4030-be3d-04255cba2fb9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32818817-9014-4a54-8c6a-5fce484a0829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fe7bfc1-9d5d-4ad7-954e-e50523b6445f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa609564-96ae-4eb8-94c0-7053ffd285ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ba480e1-fe62-4e8b-bddc-dcea799f0e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461efa9a-52a3-4285-8ce2-5b908b7785c5",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a69bf2-dd7d-45e5-a523-21981e9e246a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d346f803-a70f-46d0-a70f-9c01b1207e6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9766138b-7160-4c8d-843e-bdf4fb684f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d975d5e4-9f2d-4ba1-87f6-1fd29821afa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ca3709-6988-456c-a63a-77584da4ca79",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fade85f-833a-4b0e-901e-d18e6619ce0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ec54142-78be-4876-9f99-69b2697b7b61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb457727-4a35-45ba-96bd-71e03fbf459d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e332ad0-41ee-4452-8e29-8e244926b582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "670ecb62-64ef-49ba-8d3e-aafbf660bc48",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7cb3b86-2065-4ad8-a213-045ad3471a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba4b4716-df75-45f7-94ae-a725cc36b166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e94d9778-15f6-444c-9d81-5420ff752fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4f201473-a379-4aa8-9b60-05653b703b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "391c3cd7-4ad0-4c5b-8065-c3a05313fbc4",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa61d1df-453b-4626-be2c-9a82c7310348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daa8185b-1428-4125-9de8-f13dfe1f79f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f898fc-a5ee-4e51-90ec-ed7e62acaa3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f6c57a3-757c-4b30-87a7-aa15189a3b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "010eadd4-8477-4364-8362-b523c97794fa",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12fceece-5b95-45f2-903a-8e1570f73476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e38af10-1914-43f8-959d-91d682524563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de31d20e-8bb9-4929-91f2-9d96e91f67a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e1308b0-f01e-4dc8-8adc-a26e9c5e646f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ccef2c-8537-4fbe-9d75-e0d9dc45f587",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87b6c74e-c916-4f37-9653-e534861f77c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "091e313f-f647-41f5-a17a-36d587cd4e9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85512a7a-b30e-452b-9014-02ec04bb3a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d29d5849-d8ac-48d0-ba61-0592ab1093ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "045536cf-f6d5-47b0-a271-ebccbb79481a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "112ead0b-2487-4d5e-8743-00cc09106ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e79f0b9e-9c63-43a3-ab6b-fddf3526b5c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5043033e-769b-48c3-b435-8bb48c43e51d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "58135263-2af5-4edb-8015-3904ee8dd0d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d7294c0-3c91-4b95-9280-1ea991a06cb1",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b75a24-c352-48f6-98be-2942f6d50b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4d3be1d-7ea1-4b42-a834-7ea4d43867f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a10cc714-6c51-400b-b0f7-2154dff0edcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c08ad855-4993-4bf0-ab6a-426721fc2a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf4be47c-1840-4d9d-b788-b2e4c2327e8c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a906c6a9-17aa-4bfa-a1eb-08c3ca344e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9cc0cf7-a531-429f-971b-4693c6eb07d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1617bc6-b603-442c-a722-7db66f390672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "624014aa-8d07-4c27-9972-89710c116abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54f0bdb-45af-4ad6-a2c6-d80ecf75abcb",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d7f8cf-649e-45a4-bfd2-ccdc99058087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5681cc78-8a2b-4290-b31e-06bab5b145b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "810f033c-62c4-42f4-b35f-54195bf98376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5018fce6-8b85-4c32-8138-9b48d411fe34"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0322c402-9cf6-4ab1-bbae-dafd4d28aca5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1f8ded75-8be3-43a5-b3fe-cbf55689dd69",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0f825a-25c0-4207-8842-0bc76884dd04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a557944a-66cd-450e-8f41-5befae79c915"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a88839e-8d7b-4cca-981c-6a16991b40d8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "e9feab3b-f79f-46bc-973b-a0fe2b62ad6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339cc2dc-54e7-4926-8459-d2de3d418827",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "173989c2-4b86-4221-bd50-e80e41283054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b4bd94fb-c278-4d06-bbfe-72afa6fd2c52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4fdd6c0-0006-4590-a5e6-3ed5dff53d23",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "4e3344fe-e729-41d3-8432-e445d6462d96"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "732b9b92-9434-4291-83e3-2deafd4eec95",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc8c0d45-10f1-4de8-9dea-2ad613db7f60"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c47bf681-a93c-4c99-ba18-dd63ccc5c536",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4821d6e-644f-42fb-b6c2-e3db8bdf7ea9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ca8fd76a-3976-4413-a2d9-6e82d442f267",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8ed3763f-1a5a-4c06-8396-c74ebc513b6a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d5fab75c-a743-4583-b86c-055822481e57",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c546f6ce-c4a0-40b4-8ec0-c768e8a691ec"
                }
              }
            ]
          },
          {
            "id": "2d0f9c3c-4bc3-4bf9-8161-19a7ac347cbf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fea1e032-65fb-4f84-944a-0ac0e7d95f1a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4821472b-3735-403a-a29a-ccaae7a70e47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0e88a6ff-db1e-4e74-8291-41b2b9954c34"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3f73906-7f1b-44e1-a30b-9f330f12c3e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "54c5daac-cc77-4436-9b56-cfe229b73203"
                    }
                  }
                ]
              },
              {
                "id": "612a88ad-04e7-4bb4-a940-30c3cbc89b9d",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6883f459-3adf-40b5-b316-27480469ad78",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "435a3048-0b10-427e-89fc-9eaeb4eab8e6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dbc3eb63-b150-4a1c-86d3-ce1bf9cbfffe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "549d1531-b95f-4bb2-997d-4de5f87d7d56"
                    }
                  }
                ]
              },
              {
                "id": "1ddf30a5-462b-4132-b230-18b23a810b64",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "acfa7f8d-df02-4b02-b9d8-65750f170e83",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5ec77f27-a42b-4d6f-8d54-7767c2e7b16e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26a55264-df41-4acb-9a74-9fecf56b1c1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9d53d3bc-8fb6-4398-b07d-8da3baa7f0de"
                    }
                  }
                ]
              },
              {
                "id": "3b0bd870-9e05-4382-ab16-53ecd8b883eb",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "279aadb4-7ca4-4d93-97b2-04d21d33aa17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "95b76ce2-7fa7-4aa1-a702-6c7c99648c24"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b0eb894-143f-4562-983b-edc190817983",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "9c13b2c6-0409-44ce-9d6c-7cc4af45befd"
                    }
                  }
                ]
              },
              {
                "id": "a73ee603-f1b2-47f3-94bd-f69e248d4c20",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc936f4e-9bfe-4ddd-a247-decb5835776f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "92e69c44-2f09-4e19-8a55-b9a2fd5c9854"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "366ea070-e21e-4aaf-a47f-7341f62026c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ab912eb9-13fe-4321-b5ff-d2e9b78b7596"
                    }
                  }
                ]
              },
              {
                "id": "a672de00-c843-4a4a-814b-113702d010f3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4d04ced-6c4e-473f-964f-6512da368f57",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "51f2a36f-0ef6-455b-b3d3-5a87541fed90"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9522eb6f-1468-4164-9634-689495e057f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f1c02f76-a122-4775-a3cb-c6a55c6cde82"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6eac9ccc-472e-4724-80e2-6049f47b1ea5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4fe1aa03-0c04-4404-a49b-19a0356efb23"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "478d5e07-f059-40fc-bb12-9c76da22ee75",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bf579eac-6ffa-4f79-a41b-d454d9d0c04e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "24600f70-e70e-4a56-9c19-ee3b8202f39d",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "bb86ac12-5733-4dff-bac7-9cca326b6843"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84d60aae-b605-4c30-8dd7-3fdffafc63b0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e95404ca-06ca-4607-91ee-69c4dda1666a"
            }
          }
        ]
      },
      {
        "id": "59272f46-a05e-4bd2-83f2-b25aec8b216e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "89333767-0c6b-4ff5-ad23-2c1b018d4d16",
            "name": "Negative Testing",
            "item": [
              {
                "id": "663b0dc0-0e36-4ea2-81b3-97d9614b1ff0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e03c7255-8484-45cd-974e-007e28be572f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f2f544-e156-4bbb-b56e-6073590a2b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83a0a40a-36b2-4981-b801-832c728f3974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54ed3733-518d-4c41-937f-da07967c42eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9130c446-5a30-44ca-9d52-c822cd489a13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cd41cc5-5f5a-4c10-81a3-8a7c1f3dae81",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1b70d8-634c-49eb-a8ef-b57f869a2111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e297b32-d15b-4c00-a35d-838bc5b2e76a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c69e0ec-4ba0-4c8b-bb25-7f1658341dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa998841-4771-4e77-ba2c-1c08f2735d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c678b2c-5f4a-4bb7-851a-fd5cad60a94f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78088718-5e9a-4321-853f-18d8346d1ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dce97e7e-762a-4896-8779-05a3b5a636ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0750f36d-f101-41df-82c2-869599454e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6928d7d8-2ab4-436e-9641-f7f7be5b16c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a127c3de-3cdb-4a24-b585-87b38b686d9c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ceab53-d918-4ec0-9e4d-92d483797b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbc44ef9-7b62-4a16-bd73-9cc753cac660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fadbc6b-c7c0-4188-b23d-bb08c4bdde64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "38671c21-987a-4b75-9540-eb7bfddb94a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5514a873-4629-42d6-a0e9-750840336665",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0da8938-8a0b-471f-8756-76d1f64c4713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26d6f1b9-84f2-4ab1-818d-d18702672ef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5a36a3-df11-4e3e-8c4e-4c1e742a9f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3284e7a-24cd-48ce-868f-2ef0d2c3e86f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99f9ad0-f299-4e71-9503-48439a10ca54",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04546dd1-b41c-4114-ad2c-bf862c7ca1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f21c5724-dac4-4dd7-82a2-86afe67ea954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a82d2c8-9d38-46db-a84e-76cd9a098215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2c35dbc-c2d4-441d-a806-a49192a1b8f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01a59689-5cf0-48f5-93a0-4235625879cb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda8dca7-4198-4acf-8d4c-8424ec5e42fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f861813-fbd3-423f-bb8d-a1681c240c96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f32dea-28a8-4699-9101-f016c8143ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7161c2cc-d196-4923-8113-e1975bcc4abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b472fa-9edf-4f4b-ab4c-19909dd45355",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72af1b0a-983c-422e-b072-00b7ce7d7097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b09c250-f212-44c7-8572-7e5dd0e4b26a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc39c581-8c2f-4a43-9827-d6fc67560b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa165e92-529e-43e2-ad57-7ea2909029f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20af589d-6628-4c02-b3db-7db99176d4e9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc422bbb-d426-499f-a20f-48217e23e578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "054bdf5b-e798-46af-83c1-b97b5c3b551b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4726b64a-3013-4b0e-ae76-59307d0193b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "05a828f2-0be6-4087-a7c8-8e6d634ca840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f1ffe66-009a-4703-a395-238d45e47da1",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b93f87b9-bcb2-4be2-a0ed-099e44c21ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9026baaf-5808-46f6-b0c1-b08c4a9be685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9387c615-91a5-4cf7-8e40-df00df7358cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4490bd8e-6c14-4459-b876-836861fbaa89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94eb2da-d9db-4368-9569-27dbca0e2ad0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c20d0fc3-b5b8-4f15-a4e8-e12af7c13f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec1e4938-e0ed-4e6a-a7b4-a1280e7dfbe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a66873de-2cdd-49b8-a826-8b88d2b1b15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "02578c1c-1cac-4b2d-8b90-aff12765b7e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1444c218-4549-46d8-a9d0-62a97b55ad2b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f01ed97-196c-42be-a1bb-e5af9240403a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22f467a6-193d-4eea-802a-4be44022463d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a02ac94-5e2a-446b-b4aa-be121ccb854c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7602279d-6e28-4fff-945c-d8f3015eb7e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e8a2de-e971-48eb-a459-985e053f2e24",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f66d5aa3-f54b-47b9-b896-155528ae00ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cc1d349-42ab-4db0-95fc-cb67a41e4039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ba9ff4-84dd-4848-a6c4-ffdd3983e5b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f87ca80-29c0-440c-b4f9-f4f718de0f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e432978-dce9-4607-9c03-aef6ff18b445",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7a9a2b-4e19-4ad0-a3ca-8973a0abe0d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aa34cae-a2ea-4bd6-864f-8ba17605cd2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c1c49b-360c-4214-b238-6288330e0ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d7a3ad7-0d8b-4108-846f-74f1c05499ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f281be2-3026-42ed-8343-e767d31241f3",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4585f5d5-5ba8-4c35-b825-6d93a7c44c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b8ad579-f993-4ef7-8bdc-9ec72ef848a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb4003d-550a-4cdc-9c06-9ef457d70f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ceddad82-7e43-43a2-9194-559462e8daeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb344e46-f80c-457c-9d1b-1babbb6b026b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0d414f-4878-4aea-a4c5-8d9ee1974495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6295bf6e-8cff-49b8-8e3b-d9d8f21aea61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a15d33-e8de-4667-9d5d-3294c2c222ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f598227-4020-401e-b17c-eb721d738008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb7ca84-df13-4500-8c1a-af7db5160f9e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8950f5f-4abe-4a4b-9719-26c1784d3139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15b0d829-3309-44b4-af5a-6cb6ca650ab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab45692c-c29a-492a-8913-9d887bfa303d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "862cd0e7-7353-4fc1-85cc-e2e411f1fa02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69e2803-5dc8-4670-9b1c-359028fe3083",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf983f72-125e-47bd-b11f-e70d5ab7e3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "795d4b97-d0ba-4b93-8f8e-6966e4b89d38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a36b173f-907c-497e-98d6-f957ffefda0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bda76f49-cf74-4a3b-b70a-5d92b8de437a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72f225ee-6507-4436-b26b-f27a9fe7467b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c255ae-0b9b-4077-8ba0-7f513f2f5667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0df2eaad-48bf-4310-8404-fd6a611415c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "914116cd-ddaa-497d-8435-bcf2bca01871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77a98a35-1bb9-4f85-bd95-8ebe33183615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b1196a-5aba-44b9-8de8-91afa544088a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abb0a5e-642c-4d82-9c27-99e62bb5e37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed17e8a-11c4-4254-8ada-b7ad48bf15b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681fadd6-b0e3-46ed-9765-bfb633488acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39644ddb-3c00-4345-8f1c-359e059a3631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a211331-db6a-4315-8123-488e654f128e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b94bc7-884c-49d3-a60f-3974e582291a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "126d6b9d-56e5-428a-b653-e6ec38ad401e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f3613e-44f2-4c44-8159-ef6dd5b6e28f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdd0d256-e6a6-4f5a-a5dd-f131c1593432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec6d3b9-48f7-406d-9e40-a60707b72edb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62ec9ff5-b2c1-4064-b147-8ea7922152ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bde33a97-4740-46cc-bbb6-982e7c2add41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6abe2d55-86e8-46e6-81e5-c72f6e1e6c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a54e556-1bd4-4b7b-9018-4372a179ef32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4188bad-a93a-4da2-9e49-7747a7634b99",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "252e89d6-4ae2-40f4-9bb7-3affec2d9de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a8a8e96-fb0c-417e-bc25-82fde566f5ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc4e499-8e8f-485b-b249-348551140ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32efb6c5-b2a9-4dcd-9568-74b67745871f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6586db-ac63-4d25-b03a-ecf7eef94ec0",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "664619d9-bbcf-41c7-a124-ccd447b88dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "287ae77e-1fba-4148-a61d-5c03e075ca0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e608c97-4ade-45ab-91c0-e2b06a1b66a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c337e553-ff35-42c0-b093-aba41fddd23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8361a3-a5e9-4c91-ac3c-0c7b8dcc27ac",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c28b28-de5b-4f5e-b0b9-0bbd823a233e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0134330a-11ee-4d35-88f3-1ee3dec91395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3472df14-0288-4cb8-8be8-f7509f6acd25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0aaf7cd-bddc-4f4d-83c3-5c19a23c6960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5b805a-e675-4fc3-b151-8de1fb287557",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "912a680d-86e4-4c2f-aa91-b2072c563977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4764701c-2dab-47cf-a94f-ce7dfc5f79f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "946e2220-0d3a-4dbc-bc86-a035d84e12b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db066bac-a40f-4ce5-9e04-89ffb80423c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a19642a-7ba7-44c5-9cea-38032fd0ed4c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffbf6965-7b2c-4541-973c-cd6ecd30f636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03e4ed08-4276-43f6-a536-64a9e7cbf767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69545dc3-05db-4ed6-ab2e-1ae39ced7873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51948621-935e-4800-bbab-3f86a7300295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dac72cb-8c6e-4b15-878e-4979ea4ee2d9",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b3071e-4fd1-4eeb-820b-29459c7724a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a98dece2-b81c-44f4-9bb9-3cff06450a32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49758cc-b963-40cc-a926-eb362de30e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de2fec6c-3ecc-4f3b-b33f-7fa4fe42c518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95932f95-5785-4b7c-943a-a5f649f50756",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40ac9b8-f1a1-4f24-b5bf-991bef60fb61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0f0fd23-40f2-4538-b028-8826631459de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bd465b8-3a1a-42bd-bcec-6537c5e254c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1970adc4-d6b1-4b9f-b2db-edbe031a3b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63dfa4ff-4618-4862-adce-b0d8f258b2ee",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f875032-21b5-488a-8c75-792ce7059b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55729036-1925-4dc4-a2a7-bab8d83a2d76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02321cc1-de65-48ae-adcf-8cda9d4e99de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2d69fac-1772-49c2-a795-b03d824ed4c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a098adf4-70c8-43c7-a973-81fe84d1ddcb",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3857a1-0f4e-475b-a30e-cf818dfbd0ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5393879c-2a0e-417e-a704-f8a87636b979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f3e337-6453-4b9f-973d-c9fab56935d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b398b0e3-29ae-4d4a-8929-baca024e77bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "181119c3-ec11-4423-b4f1-ee09c4f6ea79",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d1f92fa-eb43-46ed-8bdb-ea924d016bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02ebb811-25cf-429e-9208-faf8018e6960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1517935f-1adf-4a4c-be6e-bba9527751da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "881b34fd-7d52-4bd9-949c-3b7310194335"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e0b6b163-6738-4c6f-a6a4-d282094818a9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "70746ff5-5a94-46bb-b274-e4b9dc1e9521",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c35f87-da0b-474e-b585-b8efbeee3f78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1b719a4-c9f9-4fa9-935c-abeef08c1163"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "793bb934-b012-4bd1-8ef2-b5436f3c75f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b705c7da-5db7-437f-91e4-cf9465f72437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bca33e6-4d78-41c6-8fd5-6d37d93de3c6",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9522eb5b-84af-4040-94dc-025d89f8f331",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "cf667a9c-eb33-41b8-a8b1-8654e7b0bf5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f6a8ad-ae5f-40de-9823-8ed369907c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "47c8c085-4a25-4754-975a-efad312fad93"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c489eaa3-49d2-4908-9fff-7a9a868e7eee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f6d0df21-9d34-4019-a056-0f4f1b90ccca"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3beff2d9-a43a-4f5e-a3bd-452e24c3f7be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cefdf267-acd8-4911-bba7-abb54d53a051"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83270520-d7f3-4496-b321-be524e80a68d",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ec52ab9a-d778-455f-ae49-ee8206041f5f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3764492b-f0e1-4b58-838c-d0717d5e56d0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "31d981dd-9de7-43ec-bf35-627662236970"
            }
          }
        ]
      },
      {
        "id": "b2429a15-562a-40b1-8380-e3835c6f767d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7c30de97-615c-4090-a1c6-0c30c54c7ffb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "319bbe08-36cc-4cec-a663-598bce8d1f12",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6c45bbc3-647a-4174-bd03-0bfff3db28f9",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d559787f-4742-48b2-8258-a9e3c504cb96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f81a07a5-9cdb-401c-b426-7646631f82c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02514e3-80ed-4d12-ad95-cffa0f8af585",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e09161-ec36-4fd9-a810-f22bc1866c73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fee6227-751b-4074-abb1-80fc8343975a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a20d536-9bab-4c00-97ca-489b7cea02a2",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55047a2b-e349-419f-a333-db71fdd3411d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9d57f2a-c301-4dd3-a770-bc7aaee9f59a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3f30f8-7754-4b07-9e23-4d1ab1ed5ff6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21dbb0bc-1554-4afc-b296-034b7b7dfe00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7171285-4d14-46a9-b80c-6121db95f19d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5439fe0b-fc70-442e-bdb7-008a175f4380",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb562caf-6ebd-4e69-9445-fde99c728721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aa0c3c5-7c84-4397-a224-013322a4455e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0760f94-c929-4de4-9b64-06ad3b716ca2",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3cd892a-897c-4545-851b-37ba4d4379bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10971815-5f6b-4d63-8aa7-992c96f2316d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "920467ce-4dcb-452d-b2c6-551d13ac25a1",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad14555f-8cc3-4232-bc94-e0723a61a595",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "305ddad6-54b7-42ee-b2ac-fa83c418b7d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d1f09b-c235-4ebd-a98e-acd19a57f021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12c4e7f3-afad-4bcc-be64-77ba173074ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e12d6218-cdec-4085-8b76-a61519b9a80a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94fc46ef-96ce-463d-955f-63b4387afef4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4695f6c8-e68c-428f-bbde-571cd39d5561"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddffff09-7aa7-4f96-a0c7-0a3d34b5225c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6f0447d-f5e4-43aa-9307-138646bc8bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f662176-56ed-416a-b6ee-8c828cfb8ae7",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c662dd2d-ff2d-46c7-99b9-2591417a5b5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2481c42-365e-4023-871b-3594c7a2c733"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "231dd0a6-32ba-48d2-87a2-2179cc513b46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e80ea67-ba9a-442a-84ed-21ce611e60ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7771361c-e94d-4173-af09-c5a16942a5b0",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3039a582-b7de-4f6a-bff9-5cca5bc88119",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbb893b8-5071-40a0-9150-4de8e1c34e4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee41e734-3109-425a-a005-64e1926e4335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d462faf-643a-4916-b720-69b9cb462192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d6a28a8-0e72-41a7-80ae-40f8cecab96f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51f1f536-e735-4d65-891f-78a57e8fb067",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be991bdb-48bf-4df1-8366-79b9f4ca3cc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73c6391-96fc-496d-a695-8f12c5221ccb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e42146d2-25f3-449c-aa3e-e1d99015084b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f1d168a-cff4-4aa7-8d8b-6360bd70549b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de67bfa0-fc8c-432c-b1da-50ff95db2dc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "825b2592-7832-4113-9624-530699b30356"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a86d3fb-c889-4c26-853a-882eca91002e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59fca850-4a82-4ff4-b86e-230d383f0b29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd2a0d8e-0657-4b9b-b0c4-361b7a0bfb84",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f358cc-c12a-4cd5-b2f9-8f1ff8b211ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7407be2-87ad-4991-a811-27b8125695a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9db303c-8825-4a42-89ee-cd2495b9413b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a8853ff-b691-4c0d-ac48-8a5ece7adc54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80d2845-c007-4632-bac3-998178f949ba",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5464001c-0c58-44f9-a76e-f8e5a8b5ec0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea1c10a6-dc8b-45d3-82f0-93383446e917"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60a629a-9a2e-49aa-9dbc-51e0855097bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a9f71c5-a60d-49ac-82db-16bcaede7268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c2e65a-f499-4d67-86d7-ade242b96657",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd21eca7-e7b7-48e7-8af1-23a0410014a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6835352b-83a9-48c7-abc3-36932b385673"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e81803d-0e62-4ea6-9674-e99a180e824e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7c40b3a-a203-48d7-978b-5c73ee99a102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be76b50-bcf8-479f-af5f-978ab8fb63e4",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ebd13ba-56ed-45c2-8d44-b9585624889d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63c86d46-7d20-47fc-bb2a-c05a1526357e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d264bf-aa2e-425b-b7c7-7d00ebd2c115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5e0c5af-b376-4207-b8c8-4d864bf94102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36bfe917-39b0-4604-9cbf-6cc06185af46",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd87a5f4-ae81-461c-b7e1-7d9d2b8ca7d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0cafe21-c0c8-42da-b0f2-b884d9af2459"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed74cf1-d1e7-471a-958e-be0af9db9b39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c390768-8b22-415b-acfd-6c3d17ca1db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c5e6c4-cb0c-4272-bd7d-d7cb447a1628",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd3b6c1-8be4-4af4-a156-24c3b67e5e09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e636c09a-76f6-4a2f-a0e3-d1ce102f343d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea28325-d36d-4a24-97f8-933f28140f68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b845a807-8f3e-4c29-b63c-02e4668b9150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f777325-970e-4994-b971-deeb59a8a857",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e7db79-7620-42ae-a9ef-befc9fea4629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60bffa30-bad2-4d34-8dab-29f1eedce7d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b25e95b-6f0f-4f99-a59e-7d0550fb69d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8a42874-48ac-45fb-a4f4-639532166e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d0d41c-ad0f-473c-9a53-d8c68dcb3d92",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3971e236-0750-4571-b26e-82e90689fec7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc20ad8e-d310-40a4-b49d-5eb3cfbb86d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c31ebbc3-75ab-429c-b77a-c6672219f2d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7badc436-3ac8-4327-a5a6-d32df373fedb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a0768d-5091-4138-acea-660f199d162b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b54a2c-45fa-4cb1-9920-b4c187136c92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da895576-7991-4acc-bbb1-5035e9c15b70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d655cb-c584-40a3-b791-1778b221816f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "298d0bff-0e98-4b2f-8aea-2f889efd50bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8361f3-5a04-46b5-943c-ef692df712a0",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef4b237-9080-41e0-a70e-fa2564e4881a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bfb39cd-1d60-4854-b1bf-39c3a0c8202f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7ebc40-4c64-4eba-a128-b76c01a29e70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1875d59a-86ec-4e15-baa3-7f659deef6a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49eba078-00da-4a00-b01a-ab423753e261",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f12d81a-b36a-4493-acb7-10a106ed33b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c210ebc2-be2e-4e84-927d-88a8e8ac174e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f90bfbd3-9a7a-42fb-ba02-dcc7a5199900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55712756-bd0e-41bf-84ab-df0cbdec9701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c802d3cb-7087-4f67-8868-af0088aacd90",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ba9d4e1-53a8-4cfc-8c2b-63f7b4cf3228",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57ef6148-7973-4ec0-a926-3336fffa8940"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e559d605-4be4-4cce-b906-6edf7060cf00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aa3630e-cae8-4ac7-b38f-af9d1cd259f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f88a2c7-6e2e-4317-b244-d64fa9250a5f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba75ae88-c723-475a-9f40-eaa329c981b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd8e58a7-c2bd-42a5-844c-6169cf166a92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d38922-eae7-435a-a15b-3ffa7ecee728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6005b06-49e0-461a-8c42-6b21b07ba523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0ddcefa-1b80-4592-8091-af4c5d52fad7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a470fe-7c8b-448e-b68a-8d0ea990c2f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2143ddac-2fdb-42a6-9110-7d33bc961dd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "547c6349-6a06-4868-91d5-cba9c6120f88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd1cd1e6-2390-432c-949d-6f4f6d4ec2c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3983c13b-ee0f-4153-bb90-ecd44bea6c45",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be33ef16-d05f-473d-9f2e-fcae401101e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68220e5e-43b4-4118-a7e0-142444b3c290"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae289be-0fce-4951-86c2-f216490e2929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba21d06f-ad69-4029-8e4b-d13ce79c5be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a851614b-1246-44d6-bec4-07b5dedea115",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d3bc69-82cd-48d3-ab07-4569092d7033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f8f3e8b-f576-40d3-82a0-8336ce456b93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8eb71e0-c723-4362-a264-12329005f5bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f896b25-9087-42a9-ab7f-915e8dc40b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fdbb26c-b876-43e8-8045-a6d251ea2f4b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7628c866-794b-4a7e-8a92-4b172a0ad847",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01a15eb7-a28d-4375-987b-b0a105032b2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4af1b8-106c-4668-b8bd-4d5a713216e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b06f21e3-fda1-4cd3-9742-76bb79b2f72f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f71bf8c0-c39f-400a-9fbf-18e83b541142",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff826437-fd76-4d99-90ff-e6a2661e2adf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9635ad0-9b5e-47d6-949b-e3d2ba032878"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1004de3-ab5f-40cb-aef0-b3c0f8f8ea5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74130cb8-2f27-43fb-bcb2-1cd9b9ffdba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be99d5a-6d0d-4b47-83e7-4425e2cec46a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c59bce-7184-4c7b-9623-1532a58655b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8123b19f-82cd-4e7f-ab51-ccda43e8153d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de75106d-1fc1-425c-838c-f8e8c38f463b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b76b7d4-fdb0-4648-9620-d93fecafe0db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b8f395-a60a-41f6-9edf-416286b8b7fc",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a66d7b-3be6-495b-85ae-1afd238a21c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49a5cf27-e2be-45b4-a3bc-46f3205a6708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91fefe64-9796-42a0-bdcf-3c4aaa3774c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bed99877-ebd4-4f63-9534-0ce954c06d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6afa253c-d72a-4be1-8971-e2d402834013",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3f7ca3-be7b-45da-85d7-69f2a4ef52fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51121620-053c-4429-a0a4-48d0176d126c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e7518d-d640-4486-a4e1-97c7de688e9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20d021b6-4398-47b8-84d1-fc592793e56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21674eab-366e-4e94-9a1d-091ac8843b77",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c039646e-9cc4-4f1e-98a2-c2542a0ad7ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bfe9f40-c008-42b4-90bf-86219d3c330c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bd9e1b9-036d-4be7-9cd8-d162e1b7f06a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08392fd6-581e-4378-ab1d-b85169f8181d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb763f1-f220-4982-83be-3c3b6fe28ca1",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6e859d-1920-490d-a5db-316cbc4bed82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8329242-eba3-4e6d-a31a-476d65e6077b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9da281b-0fe5-4f45-b917-244035d09068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb3f18d-9422-448b-b2c4-947e5a0c8eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0fb880a-a197-405d-8ce2-1685fcf5c90f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00bda721-064a-427c-893f-8cbe18afbf9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d60c464d-842a-4726-9a5a-5b4dd8a6dcfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29decae1-e654-46a5-b72f-eaec24e1d2d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb4f89ea-a03b-457a-a1a4-3814c2ca5149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733f7d54-ad47-49ed-9de3-eae9cedd1787",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cbabbb8-0c44-45f6-8b51-9b21aff872a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6ca93ab-cd6c-43f2-a45a-5656f48bc20f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dfee81f-a4a7-464b-b26b-99cec32dfc47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3900e23-e834-47c7-949a-5a375c34909b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce3bc22d-3401-480d-9904-506750d4745f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce1e9a7-a486-4fd9-b4dd-0c63d9ec009f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b10a7d8-c371-40a1-b567-09d216f64972"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70292ea7-8c8a-4f1a-b819-7e9182ea0053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beaa7b31-d1e1-4bdb-b46a-c0fbb59bfca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1e32133-179d-4532-b4f8-2287e2b45d1b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d382827-8cd9-4889-aa5d-5b2e9566811d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7abe23c0-9507-47e1-8ec3-d9190ed22f95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3a3e6f-7a12-452f-b326-abf62fb7016e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cd6811f-e21a-4479-80c4-372123c22b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a42aeba-7463-474b-82f9-219513b3be88",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10403fff-2b22-4cc1-980e-9623c1f9086f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf0f23b1-1d9d-4b8b-bcda-e5fb51023890"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6abd8ba4-c8e4-44da-a199-594eff5c1758",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85947bf4-962a-42bc-93ab-353d49ab4344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80a5afd-6337-4a0b-bf83-109fd0e20db5",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8e1bee6-9228-43c6-8e0b-e67743b8bbc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54064952-83ab-42ac-b350-07b6258d2e8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08eec93a-a3f5-47f5-b582-46c68eb73ac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d0d29c-1233-45a3-9c75-62b3f81b8148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b179075a-e390-4e7d-84ef-7111ac27aa36",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f5fed64-552e-4539-b39c-f1994a9df5fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "061dcc78-329a-4b15-aa1f-4d4a58c7f694"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3df6267-f049-4849-981a-ea746c50b6a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c33c74f-6d30-415a-88b6-7b166eb15f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc595de4-933d-4ff2-8250-868140842086",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520526eb-d14c-4932-8a5e-110123ea2525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9355eb63-7380-43a0-9f04-4e85e035d900"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b37aa31-99b1-4dd7-abe0-e03a35fab10e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "885bc9e4-47de-4a90-a03d-be668fe32eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d418b72-e619-41a0-bca8-754b16a28cbd",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fbd093f-0e9c-4c1e-bab4-0c0f128c40a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c555a9a-5767-4369-8b21-c25feb608ee4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81df35e3-c249-428d-9371-51fb798a29e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22a8fe93-a73a-42ee-ab19-a6d6741f5fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b18b894f-e6c5-448f-87e1-b66a9908c877",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f8cf14-5634-4884-b140-0cb2615ce52b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4206182c-275a-4c7c-9587-88d61aed20f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ab17c8-184d-49f3-bd02-14c076ba48ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "682fb19a-5fbe-4e53-81e6-29719e11c031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2c7a58-7e36-435c-81f9-6da9ce25af9f",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1dc423-a2eb-475f-865b-3351497c5d2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a53de64c-7896-4d3c-b7b5-dbd7870f2b76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "accec211-82ea-4e06-b340-2da576136019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d222793a-35ff-4148-8eb8-aeb830c92fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87fe909f-1f27-4452-9df6-588dd0ffa7c3",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7c2c677-509b-429f-a9d6-7d473eb15ae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1153149-d6b2-45eb-966d-863b356b38ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be9528b-e6e5-440a-a3de-b81f05bbfdab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecad66e4-a2cc-40a3-b4fd-89a0f0a661ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c19b7b5-5a0b-4490-988b-23ca93fab5c4",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e368fd3-4ebd-48c7-8ae1-be969f0174ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7aa6b5f-36c3-4db9-8ff1-5f0f666f11ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b6041d-1c11-47c7-bc6b-2aa53636f61f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f6bbbac-df02-40b6-a249-465f3f1f41f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6843b425-10df-4613-9102-2d02903e50a8",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4350b200-8058-4537-a5d1-0dcf56f31e92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49e2a5aa-924f-4358-95a2-21f07eb443dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b2a361d-a30d-4fe8-b563-77b8c9507fcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "965fe962-b8d3-4ee5-b5f3-6fa6f578e124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa3f2606-61d7-40e6-9853-ab29c9e46331",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed527aa0-ad28-4e9c-be2b-be904dd18ffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abf0063e-36ce-4dd5-88df-5f426c38ac75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ff1933-49e1-4f37-9ac5-3f0397888fcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef6795fc-f3aa-4411-a22c-bff04f3f6ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db259e8-aa92-41ba-8d31-6ba3dda29175",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40af1001-600b-4a93-8bf8-fdf568884ca3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea8815e8-d1a0-4660-a2ed-fd3aec9f7235"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a9e88a-5859-49ab-9794-8e36b2265880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "741d9eea-c3ee-49d9-9052-2da981dfffad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd91f8f4-5bfd-4f62-b5e5-fbbaf70dc9e5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b30d2f-a745-46d4-9ef3-c6893788943f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e71e88ba-99f3-4eb0-8ec4-59cc04824a20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c122be90-07e9-4b8c-b59d-7fc73d3dfa63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fff3441-0da1-4941-8498-c4b8ccf07f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb5f64a-1e0c-44cc-b6ce-0ea2cb5dc943",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe82f61-dc05-481c-ad51-315671b96d7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce6da186-2bb9-443c-a038-85274e90723b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e155291d-a4a8-49f9-86e9-0848a4d1d74f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fed25f8c-63f5-4cf8-aa22-5f2cf96970a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff244d84-e923-4a3a-8b45-e4a4c99932ab",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2fc3a81-ad3e-48d1-9455-1e8c589826f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef5f3c8f-7664-4ece-888e-e5411ce21960"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a93556f4-55da-41e8-8f0c-62874e492e05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77c6c54e-28b1-4de2-8690-a29b690658bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a000d69d-b0eb-419b-9972-558fd9ee4968",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8c14b16-5d23-40bd-9881-9b430ba27eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eca839c-5512-46c0-a100-eff66ebfedb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce18c59-d62c-44fa-8e93-0e65e26b07fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "768111a2-c1fc-4a55-ab20-6e6b44fe1227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c245f041-a5f4-4176-910a-695c09cc568b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f05818f-1b61-4c23-8c17-64ab3d68120a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c32337f4-4b0a-4f9e-b62c-b1331c58185d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd909deb-b59c-416b-8a3a-0a89fec62858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1480b09d-5035-4a58-b957-1f4ea0c3988f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea151302-ebfb-4fa1-80f7-533811e70949",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ce234e-15d7-494a-8a6f-559e4de2cb15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bbbd488-d95a-4258-952a-43276b40c400"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22652610-ab03-4fe5-9b23-379fb831f014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ed56593-9c0b-4dfc-905b-264a297b18d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82576c63-b953-42f3-b832-9352de938fbd",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76dadb67-ad5c-41f4-a9cb-c06519d559f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65396959-729c-478c-a86a-2317b16bc1a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a976c5-7329-457b-9c32-ce1c2ba8e53b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33c931f7-8a9d-4e60-895b-dfa981f14759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f6128e-4b3c-4a25-a45a-acf6c7e20c3c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0169b6f1-e32e-4b63-9614-10f4a809eb8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da721a80-a046-4ffa-9ba3-986761d867be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "577f795a-e180-4583-ad19-754ceb8201ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5076cbd-02bb-4687-abd9-2cfa0671320d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15694c4d-8e1d-47bd-89b1-cb3efaf0853d",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d395a2d-5353-4f36-8bc3-1a4412a737f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b92a5446-39cf-40af-8a00-d4402640636f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1343cf06-682d-465d-9739-d98f9bbf73ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "578a543e-c6b0-4fd1-b94e-b72ef57631d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea98cd1c-42fb-4bb5-8ef1-ec4747f7af29",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ffce4c7-8826-4656-aeae-b806e930f86f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00d7959f-804e-4104-88ba-ceb41478dadd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b082491-e4ea-478d-baf1-e252a8af1a3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c09df7a-2389-410e-8d4f-2e235c02eaaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f2cc6f-595c-4bb3-a3c9-cca0762e9cb4",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd187d0-2762-49a4-b061-0627b76fdbac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46514c19-74fa-4a20-9a82-c67dc662d664"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69ae697-1e46-4f66-aa1b-e0855bd2676e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03a52452-98cc-4ffa-978b-43dff019a5ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad92c3a-98e2-4f04-baab-20de79c48a15",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f145d6-7a9e-4cf0-8b7f-9df05c63351a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6af1af6-70d1-4ef2-837b-4f18c364933b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4516de39-e676-4e78-8d42-d31c2f4ed56e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c24dff7-ea2f-4c4b-b3d0-dd6027654ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17dd5f43-4b8c-4fd3-a468-da63f2fdd16b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eded386a-95ed-40f2-995a-c332c1b7338c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f69b93b-c14c-4d99-b3a3-db1e128e503d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c874310-cdea-4f91-a5fb-9ecc73c1436e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27ee536d-9671-47af-b6a7-7ba86558d245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc0fc8c-b0ae-4e08-8dce-486fa3e5ecbd",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61310cfa-e469-4c01-85d6-541d704aad10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49215954-046b-4bf1-90c6-2a97d47a1e07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b5339e8-31bd-4a16-9b77-f8082e14aa04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d658066-4835-4d57-a254-003aa9601a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb763a2-d4a1-4ccf-9862-dc3866f942c3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6601f1b9-eb2d-45ce-bd74-8a7a7df6568b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a3b9aaa-2fd4-4711-be99-deb00ccc25fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9c138f-fb50-4254-8244-266e3c30d062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7cd042c-31fe-42ca-9fc9-04e0159f8830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a212eb9-cd42-48e5-a241-10c03f6050fc",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "010a9c9e-59a8-4338-8d31-bbf0b14cbf78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee6ad52d-9896-4968-93f8-de181b162fb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5632d810-21cd-42bb-9b7b-980d9760b1ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebacc48d-e784-43ff-b0eb-b4cc47e72e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cad9d7f-3b77-4f1f-b1ec-a372cb5e8ccd",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de384539-2166-42e5-bb0a-fad060efc9ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "035985df-6a4a-43c9-be7c-4f2dbb718795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5e9e49-4276-4403-89a5-408cf9bd4a82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8765176e-8675-49a4-8046-87ea99eb7de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c419744-4498-464d-b96b-ba9be5edd891",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42229f0b-fa60-4fab-9fde-01d510a43e1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d787ded-cf25-4b0e-816c-495ed8e46028"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38280c60-7b1a-496f-b2d2-79adec039cb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b831f75-aabb-4e4e-a1bf-0e26af9be409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f75c02-12fa-48de-9385-294833e6b2b4",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8932e71a-6a2b-429d-87e7-00fbe20f2e31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1db3e34-8d7c-4df6-acf8-d43d7ce45621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe0bece-1a74-4b70-a0cf-2158ee185f17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "643fa06c-529e-4ca6-aedb-15070f4033f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f9f6b7-17c0-4b22-b073-32f28e296059",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a306a35-4c6d-4b19-9a74-3a303718fd08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6093e6a-e33a-4cd4-9ba2-cdcbbb6a2436"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c74f0b-7630-4332-a5f7-63936b60b70c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "493080a6-35a6-448f-9372-6133e9368f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9617d7a-1adc-4a54-ae4f-e36153de77ed",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c8bb0d-afee-42a1-a9c0-8c497c963d03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d2843d6-ee95-456c-bc84-2e556fcf4441"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd89fa59-79ee-4db9-bfb0-3d8510bd80af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18670dd4-466e-44f8-9850-e6af1726e666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa882df-9f5c-4f91-a94a-43ee12612c41",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1817d39b-f783-4ade-aa94-f1f144d306a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f123f45-924a-4d1f-90ec-5c1532ec0392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7cd35f3-0954-42bf-a766-27702610f4aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d46fb125-2c34-4230-9370-92035e893165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db929a82-5dd4-46dc-8a2f-1da8d6301dfa",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0168c97-4bad-4525-a73b-d88741dd5b13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0dd149f-9c90-4f6b-837b-11fed14a83ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bebdcf73-96fa-4809-86d7-e22810e44b44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "104653b1-dfd2-440b-95b3-b5cd77758f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d7354f-0b5b-4ed7-9d26-e7a6c3c373a3",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bcad994-c507-471e-a531-954c4504057d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45027180-b2e9-458e-9e74-74239cf544fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "660d519b-bc97-41b6-9519-c8e752db3903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23d7cd70-84d4-4e39-8cea-c4831be10e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5797b452-bd0f-420f-9a84-027cb6d0350a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "162ab917-6e6c-44a3-8a6f-62aa33cce6eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1a73f3e-df8a-4d30-a5a6-ef27d76cdf6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ff5f83-ddd8-48b8-94b9-4f23d668f0da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bdf331d-d846-49c0-a934-4a825a50dba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ed7948-a34c-4769-8812-0ed18b9dc32e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90a388a-acc2-48f8-a457-5718185682c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8483696e-b105-4d44-a780-8ec8b7c660b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b00b15-aaae-4b35-ad60-914038c24e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9f6a2ac-4e33-4131-81ff-2db5629748d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "175fdea2-3e5b-4eca-bf4d-7181c7b2c320",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d42bb1-aafa-4f65-9c32-3983cd2b081c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72c583c4-fd1c-457e-b293-f14e5ef50be7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "383d4421-65aa-44c1-a3f9-e877d268fa81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ef77c85-8dfe-410c-b556-4e4502cfa54e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a869470-8fc6-46f5-9dff-bf4088fdd12f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03668116-0fcf-4cb8-a9bd-5e02fe6257c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f61d6a6d-328b-45ce-b5e1-abeedc56aa41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67719f7f-430c-4f35-a7f0-063473979dc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd9e018d-f810-453d-b64a-df5c69e181b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46525c24-4651-4df7-b8c1-d7136158c75c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d743b28c-676a-4e92-af67-c70af832ba05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "109fd942-417b-4dda-b659-0d1bc6c6ccc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a2ab40-01db-400c-bad9-d25e82a0caf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36742a7f-accb-4ddd-a542-df466877b6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7cc77e5-b2fe-4244-8643-3795b3dfd97c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bbe5337-e774-4a5c-b64d-c2c0e9f26951",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef37bd5f-328f-4945-aa67-c44493da4564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "978d1371-91d6-4593-a785-3f9e609a7020",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af0504e2-3654-4b76-98ee-3513d3ebba87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac3bc02f-94e9-4c82-9402-9858bb606e29",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aadc0d3-d794-4215-8e69-4fbc38d2ffe3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1243621-76c1-4a87-8d17-4d2d9875715a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5f241b-768f-4134-bc9b-3b4fec35ab11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c34a2c26-5bed-48e8-abc4-cf8c3ab9b881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4beb2075-58c4-4939-a6ca-63d87327d221",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e62900-172d-4a4f-bc3a-b8b9e878513f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "252b409d-340d-4395-87bc-7ed9c536eba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7052b3c6-c0fb-454e-b8f2-78ea9f4b89f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3dd9330-9ea5-40f4-b51c-a9b8a25cd491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2e7d58-2f60-4448-93b7-3136176ce052",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e8d9923-c25d-40b8-828e-9b1b92e21de0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fd9d963-a903-4709-b7d5-11f41e17d324"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a7b3430-a69f-41a7-b356-2605a1eb8c92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66df9579-6ce8-4d1a-b51b-1b5583e37499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b40228a-dd95-4476-aad5-4c80306ae9be",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526128f2-3faf-48e8-92ef-9b1c867249fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21d72b5e-9b19-4514-a240-3b050f57e32c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3cf976-60b1-4780-b70a-20b1e411798f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2781eec9-ad89-41c8-b4e8-ca9f4a659410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f2da46-9f96-496c-bced-bba1b4b74fbf",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8507ca-c426-412b-9fd9-3555899abe37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e8ce586-15fd-40b4-8efd-e4b490697580"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf2140e-1bca-4f47-b6c6-a8a26fee04bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f90434f3-86e5-4cec-b709-789564591ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa334b5-3c50-47ee-8032-e55dbd75c54a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd0866c-2e8b-4170-8c42-5f7dc0164b5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "544ffc34-fc03-41bf-a002-f53bf8089f7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc0e138-110c-47c5-b8bf-c12b80eb8166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6b9b760-b78b-4120-be44-d344ac7e1655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd4423df-5438-4a49-a192-7f1c8e05beee",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcbba32e-86b7-4291-a9a9-8546102ee416",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1223a8bc-4261-4b6a-9500-65867cf31762"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ecb3b17-3d91-4a85-bc4a-395158a8d899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5767e56-0c8e-4e23-8042-9134414760e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383b2d55-ce53-480e-a9f7-bba40b033ba7",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f84542b-d27c-4893-b721-9149e97bc669",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10fb3cc6-0f98-49cd-b2e8-090db223022a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdfb7737-caa3-42c3-8535-8244378dab25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49b91d97-a98d-4991-acfd-e961f1d59d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d163ae3-98de-4a8a-8d47-48fa02086f34",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "962f4d9d-6b58-4df8-8d71-83a0aee13d04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f483ebc-7daf-4061-8d44-562e3796de84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d23afdd-6476-436a-ba2c-6d6aa13de6b3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea71c3c-beae-42ee-90bb-249ab001c7fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de479b7-7436-4397-9db3-8ab2ec52773b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0482f4d2-8e26-4c8c-893f-13a58278816a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e74f4d54-6398-45c6-8568-d879864663f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "368f985c-c090-4a87-98e8-11733a210dd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef84613e-a787-4f27-89ea-92b823bc6879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7281bfc0-6b96-4be8-b8f4-56d4dd8cfa9a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c65edac-2d2a-44b0-bc7a-684ec89c7ae4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09e1d3fb-904e-4304-88f5-68cba70c61ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de346a62-c997-4e1a-adce-fa0476f9111e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52a6804b-48d2-4863-931a-b65900b0b54b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9107bc22-a31c-4d5c-89b0-9c6420d0cc95",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "100b4052-4bd7-42a9-a16f-8e2202a50954",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5ce59f7-cfa9-44e6-a4fb-d993a11777b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d3710a3-1229-4609-826c-c70f8639fb0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a1ad1fd-496d-4a56-b11c-d366fc43ef76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17452ac4-2bad-4ad6-9ff2-3be36bf96e8f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f64595d6-45e1-4013-b982-8a754bae94bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82a561e4-9a31-4971-b38b-c4b3db6caae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad87d6c2-4968-4a32-80d5-2a670f55dcaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03c917a0-6870-4270-ab4a-58385514a8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d0e7e44-02ff-4b47-bb5c-6eb758fa6184",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e700cd1e-99eb-429a-9847-ecca145a6ecc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4225c0ca-0170-430e-9238-55509e7139dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc04d7ef-d0f9-49eb-ba6f-fd603211841b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "978e4da9-56a9-4b65-b6a0-7dd64044408d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "745e45d5-dc06-4491-81c1-acdb48acf48a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "562be0b6-639a-474a-9491-33fe29ce0265",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d28baa9-8518-47f6-819e-1a5b436c381c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b51800-cf24-4422-ab12-0261b8f294aa",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "468628ef-96d3-425f-9507-594fa65b953c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741f7107-4b07-4783-9a7c-c6eacea5db0c",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a89d3e-3583-4403-8dd3-ab90b8aa8eda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79fa54c3-2d32-4595-9eeb-1b8a62a56228"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "962a8a62-4e44-47be-8227-870930085fd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c15f036-d973-474b-956e-f6ded03debc3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3818577b-94c9-41a3-9138-00466e531824",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "668e6ac6-b19e-43e5-a099-92b0bde60ed9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c742c8bc-4092-4bf1-98bf-f2e6f51247ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "383c6a83-5f8b-4c80-9b6e-dacd10cc5017"
                    }
                  }
                ]
              },
              {
                "id": "3bf08c27-70d2-4cd9-9670-24fce70c088d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f64e1d0a-1718-477f-8f16-fdd60e6ae48b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b338b738-fce2-49bd-a860-ffd6b66ae968",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5158e2f3-5982-4bea-8411-6bf9167b843e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30408753-1288-4953-96db-c88e66e913b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "331b1125-1394-4864-ad38-ab4c191fff85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "201af55e-cf9a-425d-93c6-aaa36162bf0c",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b06d64-d84e-4be8-99a2-a99fbe6c7bdb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "44cd8dfd-383c-487c-b4ec-94ca87f3483c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee394660-eb2a-40a5-818c-47719de38f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6ff0096-5b58-4906-b900-1ced39a79a52"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d1442855-64b1-43d1-be26-13edb2a2a3ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6beb5894-e326-4021-8c18-b8ad5f40bc7d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d8ea99a-f358-437f-8304-2dc054283828",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "02c1713c-149f-4566-9ea0-30e2583d8810"
                    }
                  }
                ]
              },
              {
                "id": "814835f1-7f55-46dd-a1d4-3ad0139690a0",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4eaad58d-1c9a-45ee-80f7-55da647b3006",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "500a4827-5b59-4482-b40b-86b60d5b60f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b16910a5-b907-4c5f-8bb3-37b8abcff38a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716f32e7-a75d-4ec9-b24f-88e3956dbaba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b90461f6-03d0-4858-b816-dbf0dc179e3e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "12bd3f89-071d-4938-a064-28f885a30843",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ed833edd-ce32-4170-8c2b-e8ab988e0230",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "54e2888f-543c-46ef-8127-cd151367add0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "529785cd-d611-4d13-a3a5-a6eb5e17b36a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4943164-9378-4154-a791-ca8e0c4bb9e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5bcdc46a-ccac-4d9b-82cb-3b4c9d98980c"
                    }
                  }
                ]
              },
              {
                "id": "6de2a03c-1147-46c4-9555-be7affa96fb5",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9af72d1c-affa-4f26-afc4-52b6c2fc1de1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c280dbac-5884-442a-b41e-85cce84c229a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58592324-59a8-403d-9bc4-433ef4149f5b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "91ab0bff-e995-482e-ad66-0c1dc0572173"
                    }
                  }
                ]
              },
              {
                "id": "82492c7c-567f-432f-bc7c-bec489eb02c5",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e92da60-1648-43a1-8edf-3923e1780ece",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "259ef799-047e-41b2-9fe4-cd48cb2b7602"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25c80e54-d562-4f7f-9c3e-694201a6cdbb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89c6e2ec-670f-4214-9de8-d8cc280313ba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7f6a3e1f-30ba-4ebf-a50d-da5e4654467b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "48a33d1e-954d-4be5-b939-a8e09a5368c7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "db180292-6e0e-476e-8e15-82efb1991545",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f41e39e5-8ba5-43b5-9bfc-d666fcf79c07"
            }
          }
        ]
      },
      {
        "id": "ff681651-1231-478f-8e1e-34fbba0b5297",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a90197f6-8b5a-447c-8df2-adc9e1af8500",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ad0fbbe3-aaa0-4166-9970-9d495bd6a70b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ac07852d-e3c9-4abd-8826-d7129ce50318",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e417d9-d5a0-4772-8772-535abdcbf4d8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "472c23f8-ad18-4425-99c8-90bc57a079bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "371469aa-d4b5-438b-9f18-2590275cc064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aec1e64f-8636-496d-808a-e5d860a69caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e689d4-55a4-4257-9262-8cc72e4e1b9a",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f5e63f-7e87-4c97-ba1d-c6339accc710",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7cb581b4-9c0c-46a3-bf30-6c2a180d54a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c56d4eb-c3a9-4537-921f-390f81171ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4bb3a38c-32f6-49f1-8280-abb978b28c46"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74d7c4ac-fe84-492f-bd12-ea79dca3ad82",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8050fbad-3d3b-4b58-9945-d97e47a2aa11"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a189cdd-0cbe-4a05-8d73-debe47689595",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0622094-3c19-4d54-85e3-bacc02638b1a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fd7818a7-2ef3-4cca-a52b-db277a84df5d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "34ffc475-ebd6-49f7-855b-9363637efc2f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d50ca93-154f-4905-8657-a446e355792d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8f9475d1-1ef7-4f0c-b5dd-3d27e44af76e"
            }
          }
        ]
      },
      {
        "id": "93181e0c-e8a1-4c40-9a3b-183da28df67f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b7072b9c-ebf0-43ac-b9aa-48ed289fcee0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "11cabba4-cbf0-496e-aae1-a2233b2f5462",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "241864e3-a8c5-4aef-8db5-0cef12806412",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "567d4893-25c5-42c1-bc85-0386149272c7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3ba1f082-7a44-4675-8a85-2606835e7ae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c60f78-0f98-4da1-9d9a-fc730745dc7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "005d11b8-0efa-4588-9bac-223306465f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "615e101a-90a7-4a6c-9287-0dffecb37897",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a899e14-7620-4225-a50b-0b688e15ab1e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "23a6fdc2-886f-40fd-bdfa-83f9483cf483"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f67757-2dfe-4190-9470-dfe14b36779c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45de104a-8301-42c5-8632-bd685a3943a1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa13cd9b-48cd-439d-8ebb-ac7d9ddf90fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abc385bf-c5b1-4d0f-b967-959c88c84dc5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "111e58f5-d955-4348-9588-8a5ef3dc2170",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48a45d80-7087-40af-bce7-2b32f26cd90a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f88f563f-eb81-4cdb-bcc5-e68b8c28714c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9b799333-4749-4446-a2e2-54fa6cec67c2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "45a34e28-9137-4ea8-adcc-91131810c4a6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "268179f1-88ec-474c-9ba2-3bac6b3bf3da"
            }
          }
        ]
      },
      {
        "id": "986f4208-154c-4b90-8aa8-ea9b2d290c3c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "19a06caf-bdef-4670-b3e9-18d106007f97",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ccdda34-87b9-4a7a-905a-c20c0a28fcda",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "04c813de-ff44-4a1a-9b51-2ea43dfc1be4",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb60b0df-17c8-40a5-8849-f5f93a8dc5f9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "52b70a5a-aa00-4341-a324-93ebb2fa5980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e709c1fc-c028-4952-9bc1-a6d10a9bcc74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40641010-29c6-43a5-9729-e58ca93dd54f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a80c2f-149b-40f0-b3ad-8481ddb2dee8",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7553d44-bae7-4891-854b-ec2b3ca26c80",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d63c8e77-d70e-412a-b3d5-fa672996a69d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5edd630a-1098-4b1a-8d9b-a889b4b36cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e78b837-5b48-4f98-8491-1bf548f39ccb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fdebacfa-d8c7-4fdb-82f5-62d0082c88e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e1a670c-9703-4720-bf95-2640947a7ade"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0071e672-36b5-4b67-a5ff-9623ee3a8ad1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc7239c9-edca-409b-81fb-a6d2969343e8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "079cbd0d-3d93-4e90-bc27-acb0cbc29513",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2ef7fde0-5378-476e-a483-f60e0f5751a4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5e346910-f097-4c14-8edf-21137aeaf3cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "47f8a490-6572-46d5-ba2a-2b276badd738"
            }
          }
        ]
      },
      {
        "id": "8e598a9c-4842-41f5-93bb-763dd8e7eede",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "57cd37c1-cd50-4aef-82fc-98a8c327f8c2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "33589ed7-44f0-4ca4-87e6-f3dbcef5dd86",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c6c22d55-933b-404f-b70a-8b75cede9d95",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5735c94f-d5ff-4492-9da0-6f691a494c6f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9455cd21-66be-4cbd-9e3b-2c779f3cd7d6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 97.79310344827586,
      "responseMin": 15,
      "responseMax": 808,
      "responseSd": 115.31284828351752,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1669077944493,
      "completed": 1669077982627
    },
    "executions": [
      {
        "id": "eb7bcc45-776f-4349-a3c9-6988ef9dea9a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "bfac6c63-a5ba-4f03-9b1e-0e808eef18d6",
          "httpRequestId": "1adbdaca-5ba5-4e42-9614-f69aa847c137"
        },
        "item": {
          "id": "eb7bcc45-776f-4349-a3c9-6988ef9dea9a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "7d9ccffe-8afb-41b3-bd13-5010fead2db7",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 0
        }
      },
      {
        "id": "ed3989df-9d6b-44c3-b234-34104c40af23",
        "cursor": {
          "ref": "6751a9a6-50eb-49cb-81e0-9627be32481d",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a417d0b8-b449-4997-8ac4-bac030f22c32"
        },
        "item": {
          "id": "ed3989df-9d6b-44c3-b234-34104c40af23",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a1e40cea-8f5f-40c6-8e15-1574ffda0f7c",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "fe701d22-9d58-4e8d-bd1d-c7becab5e112",
        "cursor": {
          "ref": "320460d1-cee2-4339-9272-33e40046ec1a",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d45102ab-8d45-4762-9c1b-6cf8ca10829d"
        },
        "item": {
          "id": "fe701d22-9d58-4e8d-bd1d-c7becab5e112",
          "name": "did_json"
        },
        "response": {
          "id": "9a2feccb-8d19-45e0-a6bc-3702b3dfd4c5",
          "status": "OK",
          "code": 200,
          "responseTime": 228,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5058119b-7bb5-481a-bd4e-555c96e269ab",
        "cursor": {
          "ref": "5b8ef5b3-0eec-40a2-b16a-341ed05fe6ad",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2e524450-4fc7-4c54-8ff9-903f2ba572fb"
        },
        "item": {
          "id": "5058119b-7bb5-481a-bd4e-555c96e269ab",
          "name": "did:invalid"
        },
        "response": {
          "id": "e6c026f1-0ed9-4afe-b891-bd6de6f37b84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5058119b-7bb5-481a-bd4e-555c96e269ab",
        "cursor": {
          "ref": "5b8ef5b3-0eec-40a2-b16a-341ed05fe6ad",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2e524450-4fc7-4c54-8ff9-903f2ba572fb"
        },
        "item": {
          "id": "5058119b-7bb5-481a-bd4e-555c96e269ab",
          "name": "did:invalid"
        },
        "response": {
          "id": "e6c026f1-0ed9-4afe-b891-bd6de6f37b84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f16f4c-9c62-4230-b385-7d35632e26b4",
        "cursor": {
          "ref": "d18c08cb-57a2-41f8-b283-e0b6c289f0e7",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e91b30eb-74d6-4063-a8e3-bb585f9eafbd"
        },
        "item": {
          "id": "68f16f4c-9c62-4230-b385-7d35632e26b4",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "295447b8-1340-4770-9deb-c86c3f9a71d7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 306,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee4aef7a-f206-41d4-b251-3c9858481331",
        "cursor": {
          "ref": "cd7e0d1f-029f-4fdd-b600-f801ec8a2344",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e3ca2e96-3b4f-409b-8f73-267cfa9342c7"
        },
        "item": {
          "id": "ee4aef7a-f206-41d4-b251-3c9858481331",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8c0c3b77-ba7f-4426-9ea6-b88e9d7ae6cd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 41,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddbafd30-641e-4e3a-8bf6-f651702448ae",
        "cursor": {
          "ref": "08720c58-0849-4dbf-b4a9-008ad789bf13",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "191b3622-a57c-4a61-9166-1d957df694e5"
        },
        "item": {
          "id": "ddbafd30-641e-4e3a-8bf6-f651702448ae",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "bac65a37-dbc8-4d1c-bb08-cee887403128",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24e8d51-8c27-4f3d-8e19-a24882a29965",
        "cursor": {
          "ref": "c688eb62-8b52-4b7c-a258-e09336d37e72",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0d573e1e-32c5-4369-a2a9-cd7495fbe8c0"
        },
        "item": {
          "id": "b24e8d51-8c27-4f3d-8e19-a24882a29965",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3d986fd1-51a7-429e-b15d-ec3328308a11",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 46,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24e8d51-8c27-4f3d-8e19-a24882a29965",
        "cursor": {
          "ref": "c688eb62-8b52-4b7c-a258-e09336d37e72",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0d573e1e-32c5-4369-a2a9-cd7495fbe8c0"
        },
        "item": {
          "id": "b24e8d51-8c27-4f3d-8e19-a24882a29965",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3d986fd1-51a7-429e-b15d-ec3328308a11",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 46,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee6992e4-da20-44f2-ba77-551271bc71b2",
        "cursor": {
          "ref": "e8b50408-3e74-41d5-a2e4-4c5487721fcc",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "cfca862f-352f-4d0a-b61d-9f54b9b235a5"
        },
        "item": {
          "id": "ee6992e4-da20-44f2-ba77-551271bc71b2",
          "name": "identifiers"
        },
        "response": {
          "id": "69728f4b-9e22-47ed-aa75-689f6922b495",
          "status": "OK",
          "code": 200,
          "responseTime": 210,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f7f8f14-bce1-4fd7-b8cb-463991bd1f6d",
        "cursor": {
          "ref": "d570b647-809a-4f97-9172-5897e4aefc12",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "93a82187-907c-4762-90c1-c2d1156b8139"
        },
        "item": {
          "id": "4f7f8f14-bce1-4fd7-b8cb-463991bd1f6d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "49cc0b89-1d0b-4501-ad35-ba40fad8f55e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f7f8f14-bce1-4fd7-b8cb-463991bd1f6d",
        "cursor": {
          "ref": "d570b647-809a-4f97-9172-5897e4aefc12",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "93a82187-907c-4762-90c1-c2d1156b8139"
        },
        "item": {
          "id": "4f7f8f14-bce1-4fd7-b8cb-463991bd1f6d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "49cc0b89-1d0b-4501-ad35-ba40fad8f55e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59f319f-0f3e-46ec-b068-8055edc85f7e",
        "cursor": {
          "ref": "83c520ef-841c-4f63-89d3-6e2a60c3a086",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1ae0deda-93a1-486e-90d8-1a9d3680f910"
        },
        "item": {
          "id": "d59f319f-0f3e-46ec-b068-8055edc85f7e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b1b5c535-cea5-4f92-a2ec-49b12ebfd0c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef42796-e66f-45d8-a8a5-f7c7d9a580ae",
        "cursor": {
          "ref": "8e2608d4-ecdc-4720-bd90-318441379616",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f6f49dc6-1a70-42f5-b69a-d378ab0f6b73"
        },
        "item": {
          "id": "0ef42796-e66f-45d8-a8a5-f7c7d9a580ae",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ac75ca61-005e-472e-bfd7-25141b0a10c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36400b2c-f776-41c7-a3aa-0102d0048760",
        "cursor": {
          "ref": "cbab3218-3f58-4a69-8c23-253fbd79a90b",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "72b8e43d-5541-4171-a72e-74da52294343"
        },
        "item": {
          "id": "36400b2c-f776-41c7-a3aa-0102d0048760",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ea4b2b94-eeea-48b6-b2d1-e7a59e79c600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d43e1da-a6c7-4654-9c87-5569295d47e8",
        "cursor": {
          "ref": "fa072a95-68c6-41b5-b2a3-a80d9042718f",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c2f97157-6c2b-4cae-b582-f89045b6ce5c"
        },
        "item": {
          "id": "8d43e1da-a6c7-4654-9c87-5569295d47e8",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "9bbf82bc-c179-4a36-98c8-ee87e2eacba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84876567-866f-4941-8a65-994aba0bb556",
        "cursor": {
          "ref": "38e113b3-cbec-4b94-964d-52e3af5d2cd7",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "86aed913-1e0f-40bb-bb45-66750e5e8cfb"
        },
        "item": {
          "id": "84876567-866f-4941-8a65-994aba0bb556",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7ee13390-30a4-4ee9-b107-5f51912735dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8db1064-6171-489b-8c7c-fa5baa849db9",
        "cursor": {
          "ref": "2788c74b-5883-40ef-96b9-78220e4eeeb7",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2c0a3c57-4175-489c-9adb-6a910fea107d"
        },
        "item": {
          "id": "b8db1064-6171-489b-8c7c-fa5baa849db9",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "919298ef-4773-4864-84f5-86c84dd5fa31",
          "status": "Created",
          "code": 201,
          "responseTime": 456,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "2f9bd2da-f5e3-40c0-a352-606f74ffdb2a",
        "cursor": {
          "ref": "a3d2a52b-5718-4c64-b155-0e285da4aa23",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "28c1671d-929c-4d96-8d2c-14e093e9d651"
        },
        "item": {
          "id": "2f9bd2da-f5e3-40c0-a352-606f74ffdb2a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d9d17ca5-6410-4ddf-9d98-e43bfa96c41b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842138cc-d7b1-421f-ba4c-29b2c6d1018f",
        "cursor": {
          "ref": "0a47db57-ec70-496d-b83e-6dea5b939979",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d9de6126-fc10-41ff-ab50-87d92f1ff21b"
        },
        "item": {
          "id": "842138cc-d7b1-421f-ba4c-29b2c6d1018f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "175d3c2b-1d5f-4c15-8a16-88c02dfc73b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a3bf2da-fb8c-4933-b77f-ada0f4c1b4ca",
        "cursor": {
          "ref": "024f589d-8c4b-4117-a254-7d08a84e6ea2",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "561c3309-f5a3-4920-bf7f-392df72021fb"
        },
        "item": {
          "id": "1a3bf2da-fb8c-4933-b77f-ada0f4c1b4ca",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "aaa64943-9272-4014-aa41-3752f341f234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1c83a80-c27d-4001-8ffe-c5f9f2a709a4",
        "cursor": {
          "ref": "c1ee0cdc-52d9-4ed7-9231-1b5c4ffc0443",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "764e2424-28ea-4153-86fc-96301d50beaa"
        },
        "item": {
          "id": "a1c83a80-c27d-4001-8ffe-c5f9f2a709a4",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "137cae27-6bbf-46bd-bb27-f795375b1c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "823bb0e2-4c3f-440d-9007-6b9727e34f93",
        "cursor": {
          "ref": "f6906e98-dedb-4156-b9be-1132805a8354",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8a3f58af-a5c1-4312-961c-9f1aaea15b3c"
        },
        "item": {
          "id": "823bb0e2-4c3f-440d-9007-6b9727e34f93",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "204b9232-779d-433b-a6a5-720fbc72e737",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "14e19e95-64f5-445b-b0fe-73141d48e598",
        "cursor": {
          "ref": "ad55f747-8620-4d4d-ad1e-38291aa6d823",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f23d39f2-d3dc-467c-9520-e9a62cc1d18d"
        },
        "item": {
          "id": "14e19e95-64f5-445b-b0fe-73141d48e598",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3eb851e1-04ec-4af0-b0ec-ee927c687416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5672db1-17ff-4ce5-89f6-12a96d2344e0",
        "cursor": {
          "ref": "4ca31550-956b-47e6-a394-d290d09e3ca9",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "14d33bb4-8d2f-43df-85d9-8ac3eb77c9dd"
        },
        "item": {
          "id": "f5672db1-17ff-4ce5-89f6-12a96d2344e0",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "eb81cf72-d394-4ecf-8f40-4049e9200b17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e22c6f1b-f514-4017-809b-81db1e012ae9",
        "cursor": {
          "ref": "c517bacb-1082-4265-81c1-092fd2a13a1b",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8ef461fd-e2a9-4144-9df5-44b186fc4e58"
        },
        "item": {
          "id": "e22c6f1b-f514-4017-809b-81db1e012ae9",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "22088cf7-1102-4cfc-9a33-9dcf7a931fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7243927-8f20-4e24-ada5-57903b89117b",
        "cursor": {
          "ref": "26c37b57-9bc6-48c2-84e7-135193a0e86e",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3883f59b-4192-416e-ae51-ca66dd7f92a8"
        },
        "item": {
          "id": "e7243927-8f20-4e24-ada5-57903b89117b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "4ca4279b-86cf-49b6-8e62-cdf35d1d0310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01133e7d-269d-440b-a14f-ee23221b8d9f",
        "cursor": {
          "ref": "b41b3569-dead-4037-b039-db305ed466fe",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "83231894-3ab5-4df5-afe9-31db14f0d3cf"
        },
        "item": {
          "id": "01133e7d-269d-440b-a14f-ee23221b8d9f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f83af471-ff9f-4e34-929a-6487fa0dfbad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a0d57b-f436-4d4b-8656-5d45ee92c43a",
        "cursor": {
          "ref": "d47eee3b-a818-4b1a-bf9b-27924a0970d5",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "41d678a0-3784-4784-b800-74e543a1e45e"
        },
        "item": {
          "id": "91a0d57b-f436-4d4b-8656-5d45ee92c43a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6cf109e1-db8e-4cbe-8530-482394ee9bd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d4f2776-2744-41e8-a7b8-22be12a1237d",
        "cursor": {
          "ref": "415158a7-b023-40fe-8b33-badb9e6e33c5",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9a5aa566-2a56-415d-8472-2e24917c4782"
        },
        "item": {
          "id": "3d4f2776-2744-41e8-a7b8-22be12a1237d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "96ac2d83-e0cb-49ce-942c-ed46b77aed70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "436d2368-f586-496e-8a4a-8a13932bc989",
        "cursor": {
          "ref": "4dd930c8-efe6-4d37-8d63-cd13e8efe03b",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "598184c2-57e9-4e6c-b868-f1a160633f59"
        },
        "item": {
          "id": "436d2368-f586-496e-8a4a-8a13932bc989",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "42678fbe-105f-48ce-bd12-f758fda464b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5de7ac-8aba-4663-9893-c881732cfe15",
        "cursor": {
          "ref": "732a7606-593c-4c59-8a08-6c7962309099",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "820ac672-bb98-4829-882e-3636feeaa534"
        },
        "item": {
          "id": "ff5de7ac-8aba-4663-9893-c881732cfe15",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1c401653-d9dc-4fee-8e6c-2ab72441381d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1582d822-403a-419c-9f69-79e5fd44f8d7",
        "cursor": {
          "ref": "c2eef85b-d06a-46e1-a531-9fd1f1d01d71",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "03ca27e1-99d4-44de-8926-d403c3ee16ea"
        },
        "item": {
          "id": "1582d822-403a-419c-9f69-79e5fd44f8d7",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "800171a7-85d6-4f5a-a763-9da88acc3df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "359503f2-b6cc-425a-9698-c77abfbfde1d",
        "cursor": {
          "ref": "b2157d1c-68a7-4d2a-ab74-a1e02ef4433e",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6d6cecf4-db19-4a57-b859-fa90a87cf44b"
        },
        "item": {
          "id": "359503f2-b6cc-425a-9698-c77abfbfde1d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e1a63379-bb7c-4947-bd91-5f250d40ab8d",
          "status": "Created",
          "code": 201,
          "responseTime": 460,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "746b7048-6505-4abc-b36b-afcb506964fa",
        "cursor": {
          "ref": "08d38d47-f02d-49f5-8c1d-a75bd1ebfe40",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6253a342-4af6-40af-ae79-913d5123cf69"
        },
        "item": {
          "id": "746b7048-6505-4abc-b36b-afcb506964fa",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "cfff337d-e9e8-40a5-acb3-54d3f057ce9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85412b5d-c85f-4f2f-b4da-64e334d306f2",
        "cursor": {
          "ref": "2afce66b-049b-41b1-8e30-d53333b51d6a",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "add9276a-1e57-4cac-bf26-fb4fb55cdc90"
        },
        "item": {
          "id": "85412b5d-c85f-4f2f-b4da-64e334d306f2",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0a1adb5b-05cb-4871-81ef-8f79a60f4be9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f3e14d3-befc-4106-9573-92c5cb3db9cf",
        "cursor": {
          "ref": "4377d8ee-a391-45af-a414-da46e23fd52f",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f2a2bc85-d86d-4bfa-81c8-95186df45552"
        },
        "item": {
          "id": "3f3e14d3-befc-4106-9573-92c5cb3db9cf",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b0009005-6403-4dbd-8864-f38a08845633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9042970-d0e9-4d46-a7f1-06eeb5d5f278",
        "cursor": {
          "ref": "505ae2da-cda9-4490-b6c9-b56e190e3feb",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e14d0b30-dc99-474c-8ee3-925c58e1619d"
        },
        "item": {
          "id": "c9042970-d0e9-4d46-a7f1-06eeb5d5f278",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "229a8089-3120-47d9-b68f-44df350ce5c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c62ea07-a9a9-4e46-a1ee-f72b562c8d31",
        "cursor": {
          "ref": "ccf62165-b826-458a-bfad-c96106e57475",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "47f4bbad-0449-4702-82fd-d55785f7187f"
        },
        "item": {
          "id": "9c62ea07-a9a9-4e46-a1ee-f72b562c8d31",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "41ffe70f-61b5-4c65-8640-c76aece32010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01ec2455-c9ff-46be-b5ab-6ffa603c0ebb",
        "cursor": {
          "ref": "4b338dd0-61a2-465c-91a4-dfab72ab82af",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e33d83d1-a5d6-4775-baf8-49d2a7bb618a"
        },
        "item": {
          "id": "01ec2455-c9ff-46be-b5ab-6ffa603c0ebb",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3bac8678-e685-4dfe-bb70-8075f91f71b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a87f5c-74b5-469f-863b-1f78c7ca02d6",
        "cursor": {
          "ref": "0f89682f-50b0-4d25-9908-f87f0e281101",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "bf3dacf0-06fa-4c50-9fb9-368722fc8593"
        },
        "item": {
          "id": "36a87f5c-74b5-469f-863b-1f78c7ca02d6",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f8e0ab31-4ffe-4fe2-9f6d-197f2fd21583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7d39b5-1284-4866-afca-4ce53357b47f",
        "cursor": {
          "ref": "a3428c42-7536-48d5-b02d-21361a965aa8",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4e20b745-9a26-42bc-92a2-68e77b666bdb"
        },
        "item": {
          "id": "6a7d39b5-1284-4866-afca-4ce53357b47f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "ea8f3a87-696a-40d2-b229-6522b68fee70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec47ffa-7101-4f4d-ba9f-2d6cb50dd576",
        "cursor": {
          "ref": "a8b2b578-759f-4b34-b4c7-cee240a0982e",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "7488ef30-819a-46ae-970c-aa600689c5e3"
        },
        "item": {
          "id": "fec47ffa-7101-4f4d-ba9f-2d6cb50dd576",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7ef64ff0-79df-4f88-9670-776ec101e137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2fd5353-e27b-4304-9080-d1f49df52ee8",
        "cursor": {
          "ref": "024edef9-72f2-4047-b7f5-bb0d54a814f3",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b2e5a667-d0d2-41ca-828e-400ca7bd26a5"
        },
        "item": {
          "id": "c2fd5353-e27b-4304-9080-d1f49df52ee8",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c0c0e810-a4b5-4caf-8f8e-0406f423bce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc59b7f5-24b8-4d73-bf76-9fbfba20e64e",
        "cursor": {
          "ref": "48513e11-55f8-4350-9860-fa195818a2e8",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6df3f687-b5dc-4db0-aa48-4af01b47dee8"
        },
        "item": {
          "id": "cc59b7f5-24b8-4d73-bf76-9fbfba20e64e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6b1958e9-7033-4569-9cf8-b1d4a47ad182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a73d64b-d7ab-4331-8397-863fc2c27176",
        "cursor": {
          "ref": "23f604d5-a7f8-482e-8ba1-3326c7dd23e5",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9927aa7a-d19e-43d2-a4ca-aec89f93c569"
        },
        "item": {
          "id": "8a73d64b-d7ab-4331-8397-863fc2c27176",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b9702208-f93e-4fd2-afda-39d8e2d51624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "555fd605-db9a-4e70-8732-30e1895c59c4",
        "cursor": {
          "ref": "116e20cf-ef28-429a-b660-f55fdddf3b88",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b5bf3ce2-5e27-47f3-8714-8d53819e53a6"
        },
        "item": {
          "id": "555fd605-db9a-4e70-8732-30e1895c59c4",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3f8cf001-9302-443a-abd4-d7f16a158711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 282,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "fa797af4-38ce-448a-9840-877ade71987f",
        "cursor": {
          "ref": "126b80a1-78ad-4672-a0c6-571c076aa35d",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b75d9c5a-fe29-40da-b2a3-e352a6468952"
        },
        "item": {
          "id": "fa797af4-38ce-448a-9840-877ade71987f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "304e68cb-618a-46ab-8796-060cf4a9c126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6aad94c-3320-4f67-abb6-3a6c694c0e8e",
        "cursor": {
          "ref": "7516c880-2e25-4e85-8c49-6cbdcb5b0316",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "504c201c-569b-43d1-b332-e8ddb7c7e263"
        },
        "item": {
          "id": "c6aad94c-3320-4f67-abb6-3a6c694c0e8e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e9ba438d-15ef-4424-95ef-4ac5ad0bdfcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "698e87c9-e4fb-4c0e-bebe-9c8619792a73",
        "cursor": {
          "ref": "fb2533fc-31bd-4795-8b8b-2910d68531c9",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a9fc78d6-d2ee-47ba-8017-60dc18c1f825"
        },
        "item": {
          "id": "698e87c9-e4fb-4c0e-bebe-9c8619792a73",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "13d3f1ae-3646-471b-8b97-7490664105d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e776ce9b-8758-4e6b-b97f-bc14e950c29a",
        "cursor": {
          "ref": "16dc61f3-4757-4eaf-8774-0f50e91532ac",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "67ff1509-38e7-40ea-9d0c-4f71a45fe4dd"
        },
        "item": {
          "id": "e776ce9b-8758-4e6b-b97f-bc14e950c29a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "bc7cbd65-9eb5-463a-9954-bb2ad8985f22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7e7bbd-d52c-4ac5-9bb3-4d354b5801c0",
        "cursor": {
          "ref": "36d5f6ed-b723-4fcd-a713-70a4cf22f6d2",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "bcf16a56-0b0d-45e0-876c-273ca0afba94"
        },
        "item": {
          "id": "ec7e7bbd-d52c-4ac5-9bb3-4d354b5801c0",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "dd41f645-021e-44eb-ba6e-8f4e6130d2af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8307d947-ea8d-4657-b031-b94a7576a011",
        "cursor": {
          "ref": "dd8568c1-66ac-4522-ba02-86be38fdcf15",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "245c7082-c7d7-4d31-a4b1-d70ae10df552"
        },
        "item": {
          "id": "8307d947-ea8d-4657-b031-b94a7576a011",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3c5d6bf8-60eb-4c00-859f-68714b348e15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a69a6bb-897c-4429-bfe7-393b681031c1",
        "cursor": {
          "ref": "f454b1c0-76d2-4433-bfbd-2312112a07e8",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "df633958-2791-4ae8-82a0-9f9eb3b532b0"
        },
        "item": {
          "id": "8a69a6bb-897c-4429-bfe7-393b681031c1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "890bb4db-dedf-4f68-b603-d83d81b20a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "f17de488-1996-4983-a948-1d74fe649807",
        "cursor": {
          "ref": "52fb48b1-ccc4-422d-a11e-240829f97cff",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "3a832ddf-ad7e-410b-a521-afc128516e2f"
        },
        "item": {
          "id": "f17de488-1996-4983-a948-1d74fe649807",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3366bb6c-37f2-41bf-ace3-99522c916e9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e1e1b06-badb-46c2-8e84-67cc84691c56",
        "cursor": {
          "ref": "31838dcb-3e50-4525-8138-962d7ca0282d",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "475040f9-c5fe-48c1-9f0f-a24079c1dae0"
        },
        "item": {
          "id": "6e1e1b06-badb-46c2-8e84-67cc84691c56",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "5e28f2e7-c622-4892-b7d0-22f3d8e65288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf44e7dc-b6a0-4345-af78-b61ab2753db8",
        "cursor": {
          "ref": "2a423009-390a-4233-bade-1934d3579a53",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "2cc3d745-d8d4-471d-be7a-a436f565fa63"
        },
        "item": {
          "id": "cf44e7dc-b6a0-4345-af78-b61ab2753db8",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "519ee10d-acc1-48fe-aedd-5cc47b857a81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0fa9d9d-a9e4-48e1-a46f-527cef3a8000",
        "cursor": {
          "ref": "a55b0ddb-0589-47b1-92c1-f2c05e3d9c27",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "671e26d1-e8d1-44ca-8c21-b9c859ff123a"
        },
        "item": {
          "id": "f0fa9d9d-a9e4-48e1-a46f-527cef3a8000",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "874bd240-84c3-4545-91ee-a794a894c63d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f82c93-ed4e-4757-b983-81da2f8d201e",
        "cursor": {
          "ref": "cc67276d-a052-41cd-8dd3-721b714cf5fa",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "20a6c9fe-d943-48c8-8a22-6fd6944d15b8"
        },
        "item": {
          "id": "94f82c93-ed4e-4757-b983-81da2f8d201e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "26a55e7a-e457-4dff-95a2-41bd36b853b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14c11a5-f2bc-4ff1-b455-b2e3e6364cdd",
        "cursor": {
          "ref": "0b6c3c34-3cbc-49b5-8e4c-25ee163d9cbc",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3a284890-a8aa-43ee-a0b1-d2d595170d52"
        },
        "item": {
          "id": "a14c11a5-f2bc-4ff1-b455-b2e3e6364cdd",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b5d198cc-8017-444b-b034-36d3ed74fa69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c82072-fffb-425c-b5e0-5bedc1559498",
        "cursor": {
          "ref": "979acf7a-2e39-4def-8e07-58446232bc91",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9edecabe-5aae-41dd-8760-3a08ee4e8ad1"
        },
        "item": {
          "id": "53c82072-fffb-425c-b5e0-5bedc1559498",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1c1cdb1d-827a-4c12-9aa3-43323eec16ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "822c340a-42b2-4d2d-8dbc-47a662cb48c6",
        "cursor": {
          "ref": "110f8f85-7662-473f-9f6a-ac487e95240f",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "7f725a0c-b4b8-4660-b71f-6b6844968144"
        },
        "item": {
          "id": "822c340a-42b2-4d2d-8dbc-47a662cb48c6",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "669737c2-1ad7-4c32-9f21-d798bbe4eae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68b5536a-43da-49bf-bbde-d48fcd3b2861",
        "cursor": {
          "ref": "ac36b687-5297-4805-abf9-1a804b864af7",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "bcb44b00-0ae8-4abb-9084-753e567ba45a"
        },
        "item": {
          "id": "68b5536a-43da-49bf-bbde-d48fcd3b2861",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ebc34c1d-cabb-4e01-a4bc-0d4e14928940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea93fe7f-896e-44fa-be9b-cdab015809c9",
        "cursor": {
          "ref": "1711bd66-60ba-40fa-9427-d67d6f423a91",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "fde9d90e-2ef3-4226-ab54-e487d6d999c5"
        },
        "item": {
          "id": "ea93fe7f-896e-44fa-be9b-cdab015809c9",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f1ae3da5-5821-4612-b15b-d24b5e2f2a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffb3214c-b9e4-4d78-8025-1f375fb4ac76",
        "cursor": {
          "ref": "b8b9b409-a901-495d-8665-cacbc91c1fae",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9660d6a7-910a-4f8d-b60e-d601f826940c"
        },
        "item": {
          "id": "ffb3214c-b9e4-4d78-8025-1f375fb4ac76",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "775e71ef-dc53-4342-9e0c-5e6cbafa2963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6832cd92-0744-4da5-8ab3-82738975f721",
        "cursor": {
          "ref": "ceae79b0-3bad-43e1-abc8-6f3ab3dc1e31",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "136080a1-11ed-4065-99b7-559e277d6a10"
        },
        "item": {
          "id": "6832cd92-0744-4da5-8ab3-82738975f721",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "00d38a12-415d-43d4-9701-57f99363e6e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adccb8e2-efd6-41b3-893e-dc5b3a62e67e",
        "cursor": {
          "ref": "856e37f7-8f3f-406e-8245-28e53ef6e8b6",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ddaa9e40-6931-4dea-9245-7ded7e89c591"
        },
        "item": {
          "id": "adccb8e2-efd6-41b3-893e-dc5b3a62e67e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "9c5e3cb9-8107-414b-a478-8dea136f8e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e44f8922-e5b8-429c-82e3-89f6b000ee74",
        "cursor": {
          "ref": "a8da6a10-41d7-4aa6-89ec-e78ddfbe1973",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ecc5a73b-7e02-483d-849d-7eacea731977"
        },
        "item": {
          "id": "e44f8922-e5b8-429c-82e3-89f6b000ee74",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "5b615743-f126-4a73-bdab-deb523163f06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e352cd45-4ce9-4722-9977-d35de7a06d4a",
        "cursor": {
          "ref": "be7ac861-2e42-4114-9ae3-10520684cd66",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "fbab5cb7-6174-4b72-978e-6c23b8be0d66"
        },
        "item": {
          "id": "e352cd45-4ce9-4722-9977-d35de7a06d4a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f328a262-1214-48d0-b20b-854e5a53120b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2d1456b-ec22-482f-a690-b9df1a30b2ba",
        "cursor": {
          "ref": "84199af2-baf8-4df1-a880-2159a4daecd2",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b62be6b5-19b7-4c3c-adfd-84475d8a2e96"
        },
        "item": {
          "id": "f2d1456b-ec22-482f-a690-b9df1a30b2ba",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "6c6474e1-2668-4292-9cb6-dcff3ed54692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e72e9d75-87fc-415f-8540-ea3babf46835",
        "cursor": {
          "ref": "1d1c9921-af19-4118-8922-88058db0bc82",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b7f370b9-a6cd-4ec5-a0ff-98088595ab5a"
        },
        "item": {
          "id": "e72e9d75-87fc-415f-8540-ea3babf46835",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a9440f7d-c8eb-4c60-9482-ba3f035ec888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e8c28a-b018-487f-91e8-f6e4fddff9ac",
        "cursor": {
          "ref": "a98564af-ea82-48f5-aa9f-927628d754f7",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b974e10f-d5e7-4ce0-be58-e8143798b690"
        },
        "item": {
          "id": "32e8c28a-b018-487f-91e8-f6e4fddff9ac",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5cb94dc1-44a2-45af-bad0-42219ccd4e26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636a690e-a2a8-47c1-b10d-9eecc4495bad",
        "cursor": {
          "ref": "686eeaba-cf5c-4cae-a79a-58e86e9646d8",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "422a56d7-bf97-43f8-ad76-3296b158c89b"
        },
        "item": {
          "id": "636a690e-a2a8-47c1-b10d-9eecc4495bad",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "4434cc2e-2e29-49ba-8d31-1e09807ffa12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd41c17-514e-4060-a070-0820b6f51c30",
        "cursor": {
          "ref": "cbc5fad3-8ac3-4c51-812b-0f4973aab782",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "ce017ff6-3395-4e2b-9e67-2e0a28bff0bc"
        },
        "item": {
          "id": "4cd41c17-514e-4060-a070-0820b6f51c30",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "546568d3-170a-4135-9f5a-e09ef7a2f0c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2517e2f9-5b2a-46ea-97cd-92c466063136",
        "cursor": {
          "ref": "b0695cf3-63f7-4952-b995-25c91f07ee58",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9f1a205a-5c99-4231-893e-97a88551ad2f"
        },
        "item": {
          "id": "2517e2f9-5b2a-46ea-97cd-92c466063136",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4203c747-6354-4b4c-95de-929d76ff960e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24207021-640e-45da-9d52-b66bfe7b822c",
        "cursor": {
          "ref": "79ddfd17-8c0d-4478-be00-bf717b4601d6",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ed2669bd-94c4-4f6d-8cbd-3abb94bfd580"
        },
        "item": {
          "id": "24207021-640e-45da-9d52-b66bfe7b822c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "21a830bb-7be3-4dea-852e-4996a6a24746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f861cd52-b866-40fb-ab45-7273acd8bd58",
        "cursor": {
          "ref": "ba30de47-50e2-4e5c-afdb-8e13f78602e1",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b8022b66-d654-425e-80d2-6818dd107833"
        },
        "item": {
          "id": "f861cd52-b866-40fb-ab45-7273acd8bd58",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "653dfd95-0c29-4ff5-97fe-9a8a929b6152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a3db48c-ccd1-41a7-ab83-4f9ab0e43569",
        "cursor": {
          "ref": "0c7e9645-11a9-41af-8f2a-c1671468a48f",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "08d10378-85f3-4ea9-be3e-ff0b295b5c23"
        },
        "item": {
          "id": "9a3db48c-ccd1-41a7-ab83-4f9ab0e43569",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "690ce563-92d0-4bde-b52d-988845cc00a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f27995-c8cd-449b-a62a-90709c856795",
        "cursor": {
          "ref": "d0c0d295-7b4d-4e42-8f72-0b91d42ad402",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ea1e9b35-893b-4e2d-92e3-e42ae5a2eed1"
        },
        "item": {
          "id": "f7f27995-c8cd-449b-a62a-90709c856795",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1377510d-838d-4409-99dc-b8db0ff66a41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dff67c0b-7542-42b2-a454-8aa4d4719e5a",
        "cursor": {
          "ref": "066fbb37-a760-4490-aeb1-d9d5f326ff73",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "290c55a6-3d62-41c3-874d-aa7e22fb5dfc"
        },
        "item": {
          "id": "dff67c0b-7542-42b2-a454-8aa4d4719e5a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "fe9bb05f-7abc-4f67-b6fc-b1f33ae1f1df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17cf2e23-64a6-4d6c-aff9-95dfc1576f5b",
        "cursor": {
          "ref": "aca11825-b45c-4865-b54c-9d43c41c915a",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "ad4defd4-45ed-4f70-9d2e-6e70a1b38ce6"
        },
        "item": {
          "id": "17cf2e23-64a6-4d6c-aff9-95dfc1576f5b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "35277650-620e-4d67-8f82-781bd2de6cc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee4b8d6-e0b1-426f-9316-dd963df95285",
        "cursor": {
          "ref": "8a530338-7ecf-4b0f-8c61-28d5ded3bdd3",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c053471e-870d-4169-bb29-25eaa6730c7f"
        },
        "item": {
          "id": "4ee4b8d6-e0b1-426f-9316-dd963df95285",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "cd765ef4-7217-4107-917e-f9749746621c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef8df90-f0e3-4e35-b514-f7c7277e3d13",
        "cursor": {
          "ref": "8b95b9d9-0979-4edf-8590-68ee746393b7",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f055fcbd-93df-4b83-a5e6-23142b7cff75"
        },
        "item": {
          "id": "aef8df90-f0e3-4e35-b514-f7c7277e3d13",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "fbb25fb1-ab11-4a0f-a31f-5ee8b2c942f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cdf3649-e36f-4a10-bd9c-6bed30ece998",
        "cursor": {
          "ref": "12bf48c0-391b-4877-92c3-a470c4cb0eab",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1d32be68-5d89-4dac-9434-4addaef8d7d4"
        },
        "item": {
          "id": "8cdf3649-e36f-4a10-bd9c-6bed30ece998",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e0fd995f-2842-41c0-b6d0-44da3d980a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c872b96-2123-4c84-8eb2-d6cc50107c93",
        "cursor": {
          "ref": "fe742867-1f0a-44a1-a103-4756fb30e4da",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "da9e6460-db4d-42ba-bb1e-6b9694de2d63"
        },
        "item": {
          "id": "4c872b96-2123-4c84-8eb2-d6cc50107c93",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1e06b009-00c0-47d8-9f1f-a03273c3855d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 256,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24daec9-3a3f-4255-ab92-5e5bb7e00da8",
        "cursor": {
          "ref": "d8ff038f-08de-4a30-acae-e7a376f2482e",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8ad9ff6f-8e87-40cb-a756-87cf28ae56a7"
        },
        "item": {
          "id": "f24daec9-3a3f-4255-ab92-5e5bb7e00da8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b32a1478-c9d7-4cf2-adfc-d0758385e58c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f65b540-9e9a-4fd1-a7ae-c65f4dd60b0b",
        "cursor": {
          "ref": "80c15b65-4ff7-498b-83f1-f10a4b357b22",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0f86006d-d376-4a0e-aa6f-429393a2bc4f"
        },
        "item": {
          "id": "6f65b540-9e9a-4fd1-a7ae-c65f4dd60b0b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "334c83d0-8699-480b-8a4c-465877a553e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03588dcd-1f5a-4ff9-98e6-4eae0fc7bf05",
        "cursor": {
          "ref": "07d5006b-42b6-449d-82e7-f40b24d976c2",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7f2cc074-12f0-42f9-950e-b05eec6ab38a"
        },
        "item": {
          "id": "03588dcd-1f5a-4ff9-98e6-4eae0fc7bf05",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f9369bb0-e445-4fe0-9b87-fb8610d57df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "981cf3bd-64f4-4b6f-986c-0952cbadf6b0",
        "cursor": {
          "ref": "4e45d04f-8e54-4c39-9e6a-eaa014a51c22",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "16ec8a06-d602-456d-8258-edfb356dfa6d"
        },
        "item": {
          "id": "981cf3bd-64f4-4b6f-986c-0952cbadf6b0",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "781804b7-5709-4021-aad6-da5b1523e4d9",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "364c4c65-5dfc-4863-bd35-70cd323d9844",
        "cursor": {
          "ref": "fbd3ba54-885f-4788-9550-bdc8e897a349",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ac877f4e-9355-4b93-a565-5c2667a892b0"
        },
        "item": {
          "id": "364c4c65-5dfc-4863-bd35-70cd323d9844",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f3b9c876-d3fb-48d9-8648-6a6a938bd4b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a4b10bd-affe-4b21-aed5-5b6741c5e878",
        "cursor": {
          "ref": "811175d8-68d1-44ef-8d12-9d2d3f3855f0",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "46dfe0ff-e452-45c6-b36f-78a4db03ee9c"
        },
        "item": {
          "id": "5a4b10bd-affe-4b21-aed5-5b6741c5e878",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "aba20daf-bfbb-4d51-b01d-c499eb10fd10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46537eaa-c648-4f9c-a264-7cff25f68eee",
        "cursor": {
          "ref": "04ba046d-9df8-40f0-bcf3-8fc082a24aba",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c3a7e9e7-a125-4554-b0b8-27fd352768f2"
        },
        "item": {
          "id": "46537eaa-c648-4f9c-a264-7cff25f68eee",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "33827dfc-e7c5-4eb8-b304-508a1dd6f96e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c666a0ae-f744-4030-be3d-04255cba2fb9",
        "cursor": {
          "ref": "d5cbdf3d-88b6-4b46-8d4a-8a6f0a1085ed",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "078c3988-d5fe-4d4b-b321-faee31ac870a"
        },
        "item": {
          "id": "c666a0ae-f744-4030-be3d-04255cba2fb9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1540a993-8f07-490d-9133-5a038638c6fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461efa9a-52a3-4285-8ce2-5b908b7785c5",
        "cursor": {
          "ref": "6dbc12be-7903-4cb1-9696-eef1d0e919a4",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "246b0b9b-1474-4ab2-b9cd-e1737f886846"
        },
        "item": {
          "id": "461efa9a-52a3-4285-8ce2-5b908b7785c5",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "835249e3-6703-4f09-9a99-d53fd8533a09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ca3709-6988-456c-a63a-77584da4ca79",
        "cursor": {
          "ref": "2ca9ff28-118f-437f-ace7-fc92bcad6256",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d0366cff-b217-4123-b187-ab0eefa73f65"
        },
        "item": {
          "id": "b8ca3709-6988-456c-a63a-77584da4ca79",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "7391c117-8ec4-4add-8666-0af22773f427",
          "status": "Created",
          "code": 201,
          "responseTime": 427,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "670ecb62-64ef-49ba-8d3e-aafbf660bc48",
        "cursor": {
          "ref": "77f9bb08-48e0-4bcc-a5e5-7fac873eda67",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2a6e7f46-d3ab-4c68-a68a-44280ad943ec"
        },
        "item": {
          "id": "670ecb62-64ef-49ba-8d3e-aafbf660bc48",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d1765ff7-4193-4558-b5ef-061af13b27ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391c3cd7-4ad0-4c5b-8065-c3a05313fbc4",
        "cursor": {
          "ref": "b4ca4ae4-ed47-492c-a918-4a1d05e190fe",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1424a646-fab9-4b78-870e-d5535f584817"
        },
        "item": {
          "id": "391c3cd7-4ad0-4c5b-8065-c3a05313fbc4",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "5cc9138e-cc8f-4b16-9a30-7a58f2b2fa59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "010eadd4-8477-4364-8362-b523c97794fa",
        "cursor": {
          "ref": "8037fbd9-a80e-4e81-82e9-aacc376bb932",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "051c8ff5-3944-4cad-96f7-67af1492edcc"
        },
        "item": {
          "id": "010eadd4-8477-4364-8362-b523c97794fa",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c702b120-2bd0-495c-a101-2fae73cde199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ccef2c-8537-4fbe-9d75-e0d9dc45f587",
        "cursor": {
          "ref": "d13a3b92-9006-42bf-8e51-a7eea2512323",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b13596f5-4921-42a2-a37c-332be1ff8a4f"
        },
        "item": {
          "id": "40ccef2c-8537-4fbe-9d75-e0d9dc45f587",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b53c2ae7-d1bc-4e9a-a09f-38284c80a0e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "045536cf-f6d5-47b0-a271-ebccbb79481a",
        "cursor": {
          "ref": "912e9cbc-3b05-49d5-881a-03af999de6de",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "68dd4f97-cb1b-47d1-bcff-bd6559b55c5a"
        },
        "item": {
          "id": "045536cf-f6d5-47b0-a271-ebccbb79481a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d4aa1954-0643-43d3-abba-883006c36a3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d7294c0-3c91-4b95-9280-1ea991a06cb1",
        "cursor": {
          "ref": "a3da44cf-b9e7-4077-beb1-9c7304a4d450",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "33c6b852-a5cd-4540-af7f-ccbf033f984b"
        },
        "item": {
          "id": "1d7294c0-3c91-4b95-9280-1ea991a06cb1",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "63ef2ce0-b226-4559-b693-80dc8bee2151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf4be47c-1840-4d9d-b788-b2e4c2327e8c",
        "cursor": {
          "ref": "dc8ff0ff-20b3-4f3c-b2f9-14ca3c9f2418",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "39a6aa50-7423-4b27-b8ab-9ce13ed88972"
        },
        "item": {
          "id": "bf4be47c-1840-4d9d-b788-b2e4c2327e8c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "dd63609b-38d2-4a2a-bc14-2416105cac69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d54f0bdb-45af-4ad6-a2c6-d80ecf75abcb",
        "cursor": {
          "ref": "bcf0c18e-dece-432f-98aa-a5722338281c",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "1d21a783-c884-4160-9300-771b9e93044b"
        },
        "item": {
          "id": "d54f0bdb-45af-4ad6-a2c6-d80ecf75abcb",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3ebf10f1-53ac-43ba-9d12-db2ea07d54e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f8ded75-8be3-43a5-b3fe-cbf55689dd69",
        "cursor": {
          "ref": "89bdbc69-5635-4d69-8d51-02ec31eb02c0",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "62b35d50-2136-4ee0-9f5d-6be5062e11ed"
        },
        "item": {
          "id": "1f8ded75-8be3-43a5-b3fe-cbf55689dd69",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6d348c9e-90cd-4b2a-9213-0c07b3dc8a5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "339cc2dc-54e7-4926-8459-d2de3d418827",
        "cursor": {
          "ref": "f69008e9-6f08-4044-949d-4d85b8c8cb9d",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a44e39a2-3406-42a3-b3fc-117adb2a1518"
        },
        "item": {
          "id": "339cc2dc-54e7-4926-8459-d2de3d418827",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "09731d8f-41cb-4f05-a6bb-b62a2be82e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "fea1e032-65fb-4f84-944a-0ac0e7d95f1a",
        "cursor": {
          "ref": "ad8d1392-b408-4c1e-9ed4-a08ef7fec927",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1d8410db-c44d-4481-92f7-f8343db705fb"
        },
        "item": {
          "id": "fea1e032-65fb-4f84-944a-0ac0e7d95f1a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9805770b-c226-4182-b836-8134bac1a928",
          "status": "Created",
          "code": 201,
          "responseTime": 460,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "612a88ad-04e7-4bb4-a940-30c3cbc89b9d",
        "cursor": {
          "ref": "2eb7a867-7ffb-41d6-8d1a-79ee0fc6b39c",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d7d3b05d-0e64-4890-a701-bfbdaa22e4e7"
        },
        "item": {
          "id": "612a88ad-04e7-4bb4-a940-30c3cbc89b9d",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "632ced22-254d-4e35-824f-e05c048768af",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ddf30a5-462b-4132-b230-18b23a810b64",
        "cursor": {
          "ref": "f1bef883-13fb-4d01-ab4e-3756c36b9951",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "90ae537e-58b7-4309-a00c-d00a8ca7105d"
        },
        "item": {
          "id": "1ddf30a5-462b-4132-b230-18b23a810b64",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2df3924f-3b77-4ad2-8cc8-e67074d7b338",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0bd870-9e05-4382-ab16-53ecd8b883eb",
        "cursor": {
          "ref": "af8d94e5-ff5a-4a29-8373-af1e1c105e92",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "425b7aee-361c-4b6f-b54b-b700f25b66d0"
        },
        "item": {
          "id": "3b0bd870-9e05-4382-ab16-53ecd8b883eb",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1a5c0e60-8cca-4bb8-b921-587fbbe76bd7",
          "status": "Created",
          "code": 201,
          "responseTime": 406,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73ee603-f1b2-47f3-94bd-f69e248d4c20",
        "cursor": {
          "ref": "44323e3f-96dc-4e4d-9072-e63804fa3015",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c0452527-191e-4f70-9fb5-e60f10112b34"
        },
        "item": {
          "id": "a73ee603-f1b2-47f3-94bd-f69e248d4c20",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b6bf7967-b7e8-4783-9a94-f287b5bc924e",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "a672de00-c843-4a4a-814b-113702d010f3",
        "cursor": {
          "ref": "f9303f5a-f3be-4ca2-8dd5-3016d1903025",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5d185e05-b056-4b0a-8224-87539b855fe1"
        },
        "item": {
          "id": "a672de00-c843-4a4a-814b-113702d010f3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "31b2763d-f8f2-41cd-ae20-3362560e2c9e",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e03c7255-8484-45cd-974e-007e28be572f",
        "cursor": {
          "ref": "4db4d4a9-e3a4-4c94-aca1-420c9e3509f8",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bd9d7618-32e4-4411-8f8a-087cf665276c"
        },
        "item": {
          "id": "e03c7255-8484-45cd-974e-007e28be572f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "367cc932-f902-4d48-9c5c-ee248d17b3fb",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "e03c7255-8484-45cd-974e-007e28be572f",
        "cursor": {
          "ref": "4db4d4a9-e3a4-4c94-aca1-420c9e3509f8",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bd9d7618-32e4-4411-8f8a-087cf665276c"
        },
        "item": {
          "id": "e03c7255-8484-45cd-974e-007e28be572f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "367cc932-f902-4d48-9c5c-ee248d17b3fb",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "7cd41cc5-5f5a-4c10-81a3-8a7c1f3dae81",
        "cursor": {
          "ref": "29d8c94b-799d-482a-b750-0dbed582bcaf",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "59503a27-8bb7-4c5d-9514-5d3d1bb949ac"
        },
        "item": {
          "id": "7cd41cc5-5f5a-4c10-81a3-8a7c1f3dae81",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "72941ef5-7989-4197-b443-9c23aa81a9ce",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "1c678b2c-5f4a-4bb7-851a-fd5cad60a94f",
        "cursor": {
          "ref": "2828e2d0-91af-4b2e-a01a-3ff0becaa065",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "050e2295-75ff-4c95-9391-95c1e561d643"
        },
        "item": {
          "id": "1c678b2c-5f4a-4bb7-851a-fd5cad60a94f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "707e788f-42cb-46eb-a447-762b60e49c3c",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "a127c3de-3cdb-4a24-b585-87b38b686d9c",
        "cursor": {
          "ref": "48c97e59-0352-42ce-a2af-d7d9b35d97ba",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0cf1513c-b683-49b0-9c10-83b7cd072983"
        },
        "item": {
          "id": "a127c3de-3cdb-4a24-b585-87b38b686d9c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4f7c311e-1216-4c57-8a09-b3e449e108f5",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "5514a873-4629-42d6-a0e9-750840336665",
        "cursor": {
          "ref": "3e694203-5494-4850-a52f-5f24654776a3",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "de18742b-e6b6-4639-9eb9-c7ac4089005b"
        },
        "item": {
          "id": "5514a873-4629-42d6-a0e9-750840336665",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c32ceb3b-20a7-4530-835d-44df76fb8aea",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "b99f9ad0-f299-4e71-9503-48439a10ca54",
        "cursor": {
          "ref": "470c6663-f79c-4905-ba16-3212d9441020",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "90fbe366-1b59-4271-8588-cd8ddfb6a3ed"
        },
        "item": {
          "id": "b99f9ad0-f299-4e71-9503-48439a10ca54",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1b19b1c7-a5b9-4f58-9bdf-62af2542c312",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "01a59689-5cf0-48f5-93a0-4235625879cb",
        "cursor": {
          "ref": "fb408d02-39b6-4243-b7c7-373c761b6b5e",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ebe9379d-d8dd-46a0-a814-0b133b938d95"
        },
        "item": {
          "id": "01a59689-5cf0-48f5-93a0-4235625879cb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2dd300c4-3abe-4e52-a557-0c09f8f04af0",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "18b472fa-9edf-4f4b-ab4c-19909dd45355",
        "cursor": {
          "ref": "86121817-c2ea-4069-aad7-97a306053335",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a7b69de8-9b81-4dd4-9041-608b69e9d709"
        },
        "item": {
          "id": "18b472fa-9edf-4f4b-ab4c-19909dd45355",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4c0d3046-6104-469a-b0d5-aa909ecad872",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "20af589d-6628-4c02-b3db-7db99176d4e9",
        "cursor": {
          "ref": "2051bcc3-4063-42a9-8e28-e113630802d0",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "19faa92f-b696-4059-b410-8721f2af5c0a"
        },
        "item": {
          "id": "20af589d-6628-4c02-b3db-7db99176d4e9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "845f7472-7c12-4f84-9439-91bbe0d3f086",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "0f1ffe66-009a-4703-a395-238d45e47da1",
        "cursor": {
          "ref": "4b664a9a-eec5-4d08-ae3d-9e9a67d52efd",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "80b7df6f-c631-4f25-8846-e4ddcde1f2ab"
        },
        "item": {
          "id": "0f1ffe66-009a-4703-a395-238d45e47da1",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8a6d2adb-4cb3-48ed-83d4-939d1ef7540c",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "b94eb2da-d9db-4368-9569-27dbca0e2ad0",
        "cursor": {
          "ref": "6ab51948-ff8d-4b5a-bf92-06e2691f48ad",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "fc31ae5a-6c0e-4a98-a1b9-ba656702f621"
        },
        "item": {
          "id": "b94eb2da-d9db-4368-9569-27dbca0e2ad0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5895f824-f7e5-41c4-9187-caae41f5180e",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "1444c218-4549-46d8-a9d0-62a97b55ad2b",
        "cursor": {
          "ref": "b97728f0-7395-443c-9027-7969206b5f9a",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "4b67844e-9ecd-49ba-9304-4fa9d8b200b4"
        },
        "item": {
          "id": "1444c218-4549-46d8-a9d0-62a97b55ad2b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e4f03786-9a45-48d8-b337-d85a1649bd2e",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "d5e8a2de-e971-48eb-a459-985e053f2e24",
        "cursor": {
          "ref": "2419b46f-ceae-4ebd-85f1-ba5dee51e339",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9a6c93c1-ba35-428a-8592-7041be38db8e"
        },
        "item": {
          "id": "d5e8a2de-e971-48eb-a459-985e053f2e24",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ffc5095b-6068-47a6-b81b-8fd42cd1b95f",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "2e432978-dce9-4607-9c03-aef6ff18b445",
        "cursor": {
          "ref": "fe97a36c-d466-4e5e-a3cb-50c3bfad3c14",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "58cccba6-6b0f-4302-8320-c421b06b887a"
        },
        "item": {
          "id": "2e432978-dce9-4607-9c03-aef6ff18b445",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8464b822-6699-459a-8f95-2b2232e7ab60",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "4f281be2-3026-42ed-8343-e767d31241f3",
        "cursor": {
          "ref": "4b9ff2ee-2930-4e6a-80a2-d0112c206dea",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "37b2994c-ae5a-49b9-b73b-bd2c20c3f6cd"
        },
        "item": {
          "id": "4f281be2-3026-42ed-8343-e767d31241f3",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9d04bd26-a27d-46f5-b83d-b3852465caf3",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "eb344e46-f80c-457c-9d1b-1babbb6b026b",
        "cursor": {
          "ref": "e5af9bb3-2a34-4639-898b-f2dc782de2b4",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7fbf2ace-ef27-4d14-8aca-94fb4226eafd"
        },
        "item": {
          "id": "eb344e46-f80c-457c-9d1b-1babbb6b026b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a79a72cc-47e4-41ca-8ddf-18acf5559c41",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "5cb7ca84-df13-4500-8c1a-af7db5160f9e",
        "cursor": {
          "ref": "dd17367c-2310-49aa-a27f-f697a7b7d7b1",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1fbe5d61-13f7-4e69-ab33-851ba262060c"
        },
        "item": {
          "id": "5cb7ca84-df13-4500-8c1a-af7db5160f9e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "cdc0d9ed-b6a0-4358-b241-772f7c24343d",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "e69e2803-5dc8-4670-9b1c-359028fe3083",
        "cursor": {
          "ref": "0b90e6f2-56ea-4065-b3d9-68e8d10765cf",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0a3daf39-642a-46a9-92d2-d9263b9380ab"
        },
        "item": {
          "id": "e69e2803-5dc8-4670-9b1c-359028fe3083",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f41afcc2-67b4-4b92-b74c-6237251a5be2",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "72f225ee-6507-4436-b26b-f27a9fe7467b",
        "cursor": {
          "ref": "bde35847-7299-4e8c-b1ca-e6b709f7bde1",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "3d7c0b70-c40d-4848-80e8-5ec524b76ac7"
        },
        "item": {
          "id": "72f225ee-6507-4436-b26b-f27a9fe7467b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3afb74dd-1358-4625-936e-ea081db0c3b5",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "71b1196a-5aba-44b9-8de8-91afa544088a",
        "cursor": {
          "ref": "f5d4c24b-5623-4a64-9827-a6a55d472020",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7da8d6f9-0f2b-49c7-b088-e4b52bae405c"
        },
        "item": {
          "id": "71b1196a-5aba-44b9-8de8-91afa544088a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a4d82110-a490-4752-97a3-fac9170cf01f",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "1a211331-db6a-4315-8123-488e654f128e",
        "cursor": {
          "ref": "66fbfa26-51cd-4429-ad4d-ce87838507c3",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "80a44d8f-1e44-4ffd-b1c1-9cac3dddf7d6"
        },
        "item": {
          "id": "1a211331-db6a-4315-8123-488e654f128e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "dbe8d429-892e-49e1-8cf1-8f4559e2c3b1",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "eec6d3b9-48f7-406d-9e40-a60707b72edb",
        "cursor": {
          "ref": "12866cc9-3388-4779-a642-9c986638dd3b",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e6fd8742-abc2-48a5-b1b6-47df2b09bf00"
        },
        "item": {
          "id": "eec6d3b9-48f7-406d-9e40-a60707b72edb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "bcc28e7a-de6b-420c-9c96-2d51f0be253f",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "f4188bad-a93a-4da2-9e49-7747a7634b99",
        "cursor": {
          "ref": "93306acd-83d6-4f2f-a268-92f1a9ae1053",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "adc85850-6b7c-4f79-a383-cd953b3c849f"
        },
        "item": {
          "id": "f4188bad-a93a-4da2-9e49-7747a7634b99",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "225d78f3-49a4-411a-b237-d98b92cafc1e",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "3f6586db-ac63-4d25-b03a-ecf7eef94ec0",
        "cursor": {
          "ref": "faaa8715-f5f7-4ef1-a995-67ad9c03ed61",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "cefef364-0595-4392-b5d7-e311ec8bd1b3"
        },
        "item": {
          "id": "3f6586db-ac63-4d25-b03a-ecf7eef94ec0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7d41bb8e-7bf6-4b2c-82be-68a3412fd55a",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "ed8361a3-a5e9-4c91-ac3c-0c7b8dcc27ac",
        "cursor": {
          "ref": "cba9fad6-15d8-4175-80fe-c29dbf22ed29",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "258fb8e7-11d7-4615-9781-a213568de6e6"
        },
        "item": {
          "id": "ed8361a3-a5e9-4c91-ac3c-0c7b8dcc27ac",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c166fb2e-b81a-4cda-b7bc-6cb5424c7245",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "aa5b805a-e675-4fc3-b151-8de1fb287557",
        "cursor": {
          "ref": "92b0832d-a220-4dae-bfa7-29102888b5ae",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "77111ca0-4830-4ea4-92f1-4006f932bf72"
        },
        "item": {
          "id": "aa5b805a-e675-4fc3-b151-8de1fb287557",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4db43031-a0d3-4a2b-99ee-2a0d1622cc5a",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "9a19642a-7ba7-44c5-9cea-38032fd0ed4c",
        "cursor": {
          "ref": "f0ecb40b-755a-47cb-a565-e4e139df198e",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e6070a98-7389-4a5b-a388-89e84f3a703e"
        },
        "item": {
          "id": "9a19642a-7ba7-44c5-9cea-38032fd0ed4c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e7b09918-d780-4d54-82af-086dba2f7672",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "4dac72cb-8c6e-4b15-878e-4979ea4ee2d9",
        "cursor": {
          "ref": "8ebd38f8-fd24-4255-b1e1-b3fc16a6e947",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "bfab8cd6-0926-436f-9c4a-1918230acdca"
        },
        "item": {
          "id": "4dac72cb-8c6e-4b15-878e-4979ea4ee2d9",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "02f057ea-cc63-4512-8fbf-2b3f2662a2eb",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "95932f95-5785-4b7c-943a-a5f649f50756",
        "cursor": {
          "ref": "4c4c232b-8a6b-48aa-ad08-596b10ff5420",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5050179b-5fea-4c22-8368-4b020effa62f"
        },
        "item": {
          "id": "95932f95-5785-4b7c-943a-a5f649f50756",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ae97b2cd-0871-4635-8430-eb58fe56a75e",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "63dfa4ff-4618-4862-adce-b0d8f258b2ee",
        "cursor": {
          "ref": "00e08509-1d51-444a-9c56-aa64da497602",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6b6b4e1e-d6b6-46f6-9273-1c65823eb852"
        },
        "item": {
          "id": "63dfa4ff-4618-4862-adce-b0d8f258b2ee",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "cac33f11-0ffa-4025-bbf3-76c72eccf4b0",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "a098adf4-70c8-43c7-a973-81fe84d1ddcb",
        "cursor": {
          "ref": "11e71216-b541-436a-aee2-d2f4b22503b1",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f76fcd48-c4f7-4365-9053-2fb25d8f6536"
        },
        "item": {
          "id": "a098adf4-70c8-43c7-a973-81fe84d1ddcb",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "59489b82-24b3-43f9-9d4e-829560d0c54a",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "181119c3-ec11-4423-b4f1-ee09c4f6ea79",
        "cursor": {
          "ref": "9ddd1840-e23a-45f5-9d17-402098f066ec",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "128baa6d-f318-40bd-b7bd-0748ac221751"
        },
        "item": {
          "id": "181119c3-ec11-4423-b4f1-ee09c4f6ea79",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ac18822e-e826-4f53-bfe2-0ee3251c8a5b",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "70746ff5-5a94-46bb-b274-e4b9dc1e9521",
        "cursor": {
          "ref": "d9d423e8-40a4-4093-9501-eaf3db307ce3",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "192924d5-4c5c-415f-b752-49db69a07d79"
        },
        "item": {
          "id": "70746ff5-5a94-46bb-b274-e4b9dc1e9521",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b2c6e435-c072-4071-b468-601b028d46e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bca33e6-4d78-41c6-8fd5-6d37d93de3c6",
        "cursor": {
          "ref": "dd7bc989-ceef-4e7b-a146-e9d93c5b2dfb",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4ed0a418-00cc-4550-b5e1-43bc201fe39c"
        },
        "item": {
          "id": "2bca33e6-4d78-41c6-8fd5-6d37d93de3c6",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "a27cf708-e0f3-4da0-bf33-30fd38d6ec00",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c45bbc3-647a-4174-bd03-0bfff3db28f9",
        "cursor": {
          "ref": "2a23f163-63e3-4318-a6f2-ed5029a0be78",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "110b60d7-402f-46ee-b21c-2d9d52a30119"
        },
        "item": {
          "id": "6c45bbc3-647a-4174-bd03-0bfff3db28f9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8a31e0d8-1fee-49f6-9601-d413a5568d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c45bbc3-647a-4174-bd03-0bfff3db28f9",
        "cursor": {
          "ref": "2a23f163-63e3-4318-a6f2-ed5029a0be78",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "110b60d7-402f-46ee-b21c-2d9d52a30119"
        },
        "item": {
          "id": "6c45bbc3-647a-4174-bd03-0bfff3db28f9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8a31e0d8-1fee-49f6-9601-d413a5568d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a02514e3-80ed-4d12-ad95-cffa0f8af585",
        "cursor": {
          "ref": "dd006350-9c62-4a7d-a8e7-49f7c6332d48",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "624a663b-fae8-4b4a-9855-d9e399778eec"
        },
        "item": {
          "id": "a02514e3-80ed-4d12-ad95-cffa0f8af585",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "8cd33822-a5c0-45fa-b4a1-9db2273b60dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a20d536-9bab-4c00-97ca-489b7cea02a2",
        "cursor": {
          "ref": "43e6ee97-eeca-40cb-b1f7-e086f93d0ba7",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "061b13ee-a28a-4aef-b4a0-14c8315e805a"
        },
        "item": {
          "id": "7a20d536-9bab-4c00-97ca-489b7cea02a2",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "cd6e9cff-56bd-49d9-92bb-9436a748c209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3f30f8-7754-4b07-9e23-4d1ab1ed5ff6",
        "cursor": {
          "ref": "85776a76-ad92-4fad-8952-a7d490706b96",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1ff893c0-f6a3-4b84-9252-2e2dba7f98c1"
        },
        "item": {
          "id": "ab3f30f8-7754-4b07-9e23-4d1ab1ed5ff6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b3070512-7e82-4bcf-a56d-114726686f8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5439fe0b-fc70-442e-bdb7-008a175f4380",
        "cursor": {
          "ref": "af70a3ef-e64a-434f-9e98-36059d917221",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "08e7765d-8467-4ca4-84e9-c36a2960ec27"
        },
        "item": {
          "id": "5439fe0b-fc70-442e-bdb7-008a175f4380",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f53477de-2ea9-40b0-868b-a222e174f999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0760f94-c929-4de4-9b64-06ad3b716ca2",
        "cursor": {
          "ref": "aad0a91c-7024-4209-9e77-adf521b0ae17",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9289098f-290c-4638-9632-cb5594875178"
        },
        "item": {
          "id": "e0760f94-c929-4de4-9b64-06ad3b716ca2",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9b86bde5-e5de-4868-bb68-d57c047696f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "920467ce-4dcb-452d-b2c6-551d13ac25a1",
        "cursor": {
          "ref": "aeaac5e0-265a-4b04-933d-82c924bae80b",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6a4a13fa-339d-48bd-8954-f5223ef6ad68"
        },
        "item": {
          "id": "920467ce-4dcb-452d-b2c6-551d13ac25a1",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b002dd15-2e30-4afd-8d7e-dbadd5aaef13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 808,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e12d6218-cdec-4085-8b76-a61519b9a80a",
        "cursor": {
          "ref": "55b50e2a-062d-4fdd-a29a-c7a7e8575041",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "1d7924d2-e8ce-4dcc-a586-bb9b54998553"
        },
        "item": {
          "id": "e12d6218-cdec-4085-8b76-a61519b9a80a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0b4f5ea4-70fd-40d2-a78d-c4b3cacc390d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f662176-56ed-416a-b6ee-8c828cfb8ae7",
        "cursor": {
          "ref": "e5f3b159-bea7-42ff-9f1f-148f79e9a912",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ec46fbbe-00f1-4a8a-a1cd-7aae69dfbcb5"
        },
        "item": {
          "id": "7f662176-56ed-416a-b6ee-8c828cfb8ae7",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f66cd6c2-50a1-4f10-b0d6-6243900cb198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7771361c-e94d-4173-af09-c5a16942a5b0",
        "cursor": {
          "ref": "3c5df45c-a347-4ac9-9563-99fb6c2c54d7",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "983df185-84fb-44ed-857c-1a1ced8885f7"
        },
        "item": {
          "id": "7771361c-e94d-4173-af09-c5a16942a5b0",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a3a50c52-aee4-41cf-93f5-e823996aac3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d6a28a8-0e72-41a7-80ae-40f8cecab96f",
        "cursor": {
          "ref": "02de934e-664a-43db-8cb3-8d243e5ec416",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "5421e1c5-11d9-4642-a952-fc222e317f47"
        },
        "item": {
          "id": "5d6a28a8-0e72-41a7-80ae-40f8cecab96f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "72006126-ff0e-44fc-989b-a5a5dacace5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f1d168a-cff4-4aa7-8d8b-6360bd70549b",
        "cursor": {
          "ref": "83474f6b-c555-4afb-8450-b07d5bc06337",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "63342248-1e1c-4eb2-8030-f7d36aa43291"
        },
        "item": {
          "id": "8f1d168a-cff4-4aa7-8d8b-6360bd70549b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "df9f196c-b1f8-4a21-a29e-377390c1ee2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd2a0d8e-0657-4b9b-b0c4-361b7a0bfb84",
        "cursor": {
          "ref": "02002a34-cda9-46b2-9561-4f167540286f",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d492ba0a-640f-4150-83e1-71fb78bc14e3"
        },
        "item": {
          "id": "fd2a0d8e-0657-4b9b-b0c4-361b7a0bfb84",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "db2ce6ac-88ee-4386-a7c4-c43c34998ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80d2845-c007-4632-bac3-998178f949ba",
        "cursor": {
          "ref": "dcdd7f1b-9609-4fd6-9ba8-53e2161e4b2e",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1b57f268-94e4-456b-a271-9512d2c31b12"
        },
        "item": {
          "id": "f80d2845-c007-4632-bac3-998178f949ba",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d6e0af6a-99fa-4c8b-b126-ad4222ef33cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c2e65a-f499-4d67-86d7-ade242b96657",
        "cursor": {
          "ref": "6f5eab1d-8882-42f2-a918-4d92808d5aa3",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b1875fe5-cce7-4176-87d6-b2cb17e8d058"
        },
        "item": {
          "id": "24c2e65a-f499-4d67-86d7-ade242b96657",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "54bcea7b-922c-429b-a77d-0b73f08dfcf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be76b50-bcf8-479f-af5f-978ab8fb63e4",
        "cursor": {
          "ref": "c0076dd5-a02a-49d2-ad4e-d672f7cc75b7",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "98f2c961-cf53-4ec9-b1ea-821ea9289f93"
        },
        "item": {
          "id": "5be76b50-bcf8-479f-af5f-978ab8fb63e4",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c34c008a-85be-4a5a-9679-6618aa2f0f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36bfe917-39b0-4604-9cbf-6cc06185af46",
        "cursor": {
          "ref": "34220bb0-e2a0-451d-9366-439b6cdb1d1a",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "8f78972f-240a-4a05-862f-e051f4da1843"
        },
        "item": {
          "id": "36bfe917-39b0-4604-9cbf-6cc06185af46",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "10418485-cca4-4de1-98e5-55fddf2e258c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c5e6c4-cb0c-4272-bd7d-d7cb447a1628",
        "cursor": {
          "ref": "895de7dc-ab4f-45d4-8932-f85f8ecf4b6c",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1bf87c4e-524c-4809-a118-c1d1cef1de7f"
        },
        "item": {
          "id": "23c5e6c4-cb0c-4272-bd7d-d7cb447a1628",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "bbd548ec-369d-4dde-966a-77025e05ba6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f777325-970e-4994-b971-deeb59a8a857",
        "cursor": {
          "ref": "654341c8-2b03-4716-9331-97d034e164fd",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "2a5c10d8-82eb-4840-89a3-bebd4f6bd9c1"
        },
        "item": {
          "id": "2f777325-970e-4994-b971-deeb59a8a857",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "5883f2fa-5ef1-49a5-810d-4cf337222acd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 232,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d0d41c-ad0f-473c-9a53-d8c68dcb3d92",
        "cursor": {
          "ref": "a9cc97b5-c6be-473c-950f-db0097c77e13",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "64640b37-151b-4b29-954a-609e0853673a"
        },
        "item": {
          "id": "b4d0d41c-ad0f-473c-9a53-d8c68dcb3d92",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b3c43748-fcf4-4be0-bd2a-8faa7c6a37e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a0768d-5091-4138-acea-660f199d162b",
        "cursor": {
          "ref": "b4854d75-65e0-4863-a32b-5a807ab7562b",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b6e264a0-c834-4f1e-9c1a-edc72747ff13"
        },
        "item": {
          "id": "80a0768d-5091-4138-acea-660f199d162b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4e01ba4e-6fc0-4681-b326-2628218972db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8361f3-5a04-46b5-943c-ef692df712a0",
        "cursor": {
          "ref": "cd904bd4-dc58-469a-9c08-de82f533810d",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "47b76ee5-6806-4630-81a2-1d96035e4d50"
        },
        "item": {
          "id": "4b8361f3-5a04-46b5-943c-ef692df712a0",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d1f2ff84-13f8-46e1-8e58-04dd06c044d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49eba078-00da-4a00-b01a-ab423753e261",
        "cursor": {
          "ref": "f007cde0-1775-4e89-b17e-b48c8f2a4f67",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d6974a42-dbd7-4d11-9be5-2880a61c29ae"
        },
        "item": {
          "id": "49eba078-00da-4a00-b01a-ab423753e261",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "027565c2-c2cd-4eca-9dc9-37896767f7f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c802d3cb-7087-4f67-8868-af0088aacd90",
        "cursor": {
          "ref": "f626e7e0-b07d-47ea-b4e1-9a30f3fbfbb1",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "9aae96fd-f2ee-4769-8161-fb40260ea8b1"
        },
        "item": {
          "id": "c802d3cb-7087-4f67-8868-af0088aacd90",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4f35f5fb-b090-46b6-a9de-32ecfa59a7e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f88a2c7-6e2e-4317-b244-d64fa9250a5f",
        "cursor": {
          "ref": "dca4138b-805c-495f-8d98-2985e44bc96c",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "af97b84e-1d53-499a-9778-42047fffdd23"
        },
        "item": {
          "id": "6f88a2c7-6e2e-4317-b244-d64fa9250a5f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "84ab12ed-137e-4c54-af89-0e7a686cd320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0ddcefa-1b80-4592-8091-af4c5d52fad7",
        "cursor": {
          "ref": "d20cb9b4-865f-4e3d-8cf4-89dde8affde9",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3f9e256a-7e21-40cd-b180-adbfd2b4aef7"
        },
        "item": {
          "id": "d0ddcefa-1b80-4592-8091-af4c5d52fad7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9d41a0ea-18a0-4c42-8680-7d1ba5286933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3983c13b-ee0f-4153-bb90-ecd44bea6c45",
        "cursor": {
          "ref": "b5c6407a-bd59-48d7-bd6b-0b3ad6026d9d",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "9e826a50-783f-4de0-9d69-deba372e4386"
        },
        "item": {
          "id": "3983c13b-ee0f-4153-bb90-ecd44bea6c45",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c8df7908-fba6-46c5-ba04-d842ab3eb2d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a851614b-1246-44d6-bec4-07b5dedea115",
        "cursor": {
          "ref": "237ec962-6614-43a8-8fa8-018493faa19a",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a28dd024-5990-464f-b143-9c068463a4e1"
        },
        "item": {
          "id": "a851614b-1246-44d6-bec4-07b5dedea115",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "0ff76854-3b8a-4d23-8d1b-dc1411206ce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fdbb26c-b876-43e8-8045-a6d251ea2f4b",
        "cursor": {
          "ref": "0ad81921-036d-4600-91b2-1ff1cadccc94",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "dff2e9bb-fcc8-4f14-a0a2-8a983f499803"
        },
        "item": {
          "id": "7fdbb26c-b876-43e8-8045-a6d251ea2f4b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "647aa5d8-c1fd-47a5-91a7-912ffd44695a",
          "status": "OK",
          "code": 200,
          "responseTime": 191,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "f71bf8c0-c39f-400a-9fbf-18e83b541142",
        "cursor": {
          "ref": "370547d2-022e-4f22-b8db-1a916da6b3b2",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4a18ab2f-b81c-4a9a-bb8d-548a8a539e7d"
        },
        "item": {
          "id": "f71bf8c0-c39f-400a-9fbf-18e83b541142",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a40bdca0-92a1-4ad9-b777-84e7a95157d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be99d5a-6d0d-4b47-83e7-4425e2cec46a",
        "cursor": {
          "ref": "c3dfa914-6ac0-4d62-9119-ac56defa8c87",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "378ccb34-a62a-4e43-9df5-4fce3f297822"
        },
        "item": {
          "id": "6be99d5a-6d0d-4b47-83e7-4425e2cec46a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "4f07c1fc-c1a2-461c-ace6-e5df506604a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b8f395-a60a-41f6-9edf-416286b8b7fc",
        "cursor": {
          "ref": "05cdee52-fd64-4fda-8808-d4ceedb1bd79",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "4ea356ea-ccab-4b7c-b5a4-dfa7292fe8a7"
        },
        "item": {
          "id": "f2b8f395-a60a-41f6-9edf-416286b8b7fc",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "7e2171fe-d6a2-4b3c-a3ba-b605b4f479b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6afa253c-d72a-4be1-8971-e2d402834013",
        "cursor": {
          "ref": "75673855-a90f-4549-a9ed-d6827aaf7a4f",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8d2286c1-d711-46d3-9bc0-3a7943e75a31"
        },
        "item": {
          "id": "6afa253c-d72a-4be1-8971-e2d402834013",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d8635ab3-b00e-4e5b-9e73-dba7828d29ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21674eab-366e-4e94-9a1d-091ac8843b77",
        "cursor": {
          "ref": "fff44673-b703-46ba-9d71-c51d34398432",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e681eb0e-2ec5-4ff2-b339-bf322dc281ca"
        },
        "item": {
          "id": "21674eab-366e-4e94-9a1d-091ac8843b77",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "df137079-ca23-4646-b802-c8f92e96acc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bb763f1-f220-4982-83be-3c3b6fe28ca1",
        "cursor": {
          "ref": "9a540a27-9c76-4de8-9f7f-b7ba8b6f639a",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "614d1a74-8a4f-48d1-82e0-6a66c0211f81"
        },
        "item": {
          "id": "8bb763f1-f220-4982-83be-3c3b6fe28ca1",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4f5fc0fb-a055-43de-ab18-81a0295fe99b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0fb880a-a197-405d-8ce2-1685fcf5c90f",
        "cursor": {
          "ref": "84298fed-9ba0-427e-84f8-1ff11d819483",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4568c9ad-9521-4ef1-b6ed-16465532fc84"
        },
        "item": {
          "id": "a0fb880a-a197-405d-8ce2-1685fcf5c90f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "cce15b72-b098-4a70-a436-4fd1b5f39b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733f7d54-ad47-49ed-9de3-eae9cedd1787",
        "cursor": {
          "ref": "c430a624-0838-4987-a1b3-3f566a78d3c8",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "77979a14-95f7-4c4b-ab93-bd455d89cf15"
        },
        "item": {
          "id": "733f7d54-ad47-49ed-9de3-eae9cedd1787",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f6375fe8-2671-4f2e-a81e-efebe997bc33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce3bc22d-3401-480d-9904-506750d4745f",
        "cursor": {
          "ref": "21236724-044c-45de-b622-b4a552a70c43",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "aa1b3214-06af-4259-8835-35a274c15e25"
        },
        "item": {
          "id": "ce3bc22d-3401-480d-9904-506750d4745f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f04a452c-8797-4b92-9a18-ad08996614b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1e32133-179d-4532-b4f8-2287e2b45d1b",
        "cursor": {
          "ref": "17a6f4db-d511-4cb1-9246-d3793f6077da",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "bd6c987a-d0fc-4533-8daf-54d6ccfc98f4"
        },
        "item": {
          "id": "d1e32133-179d-4532-b4f8-2287e2b45d1b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e75208f0-2a6e-4813-b3d9-6516ae60aeaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a42aeba-7463-474b-82f9-219513b3be88",
        "cursor": {
          "ref": "757dd163-8d6e-4322-9223-a0afa03e2765",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "05b3578a-e63c-47ed-b4e1-d6a304f8008c"
        },
        "item": {
          "id": "2a42aeba-7463-474b-82f9-219513b3be88",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f00cfc04-749d-466f-9bba-c2c487252d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80a5afd-6337-4a0b-bf83-109fd0e20db5",
        "cursor": {
          "ref": "39683de8-fde9-40ee-905d-6352631dac5e",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2b037cfe-7171-4096-ab04-c0e001c2cb0c"
        },
        "item": {
          "id": "f80a5afd-6337-4a0b-bf83-109fd0e20db5",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b1c65602-347b-44e2-8b22-19ae5b839a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b179075a-e390-4e7d-84ef-7111ac27aa36",
        "cursor": {
          "ref": "6f43273d-8a53-4416-8118-eb471cdf6bf6",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f97c0ab3-1bbe-4e96-8bd1-2ad5bb5a593d"
        },
        "item": {
          "id": "b179075a-e390-4e7d-84ef-7111ac27aa36",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "cbd64042-c796-4eeb-b553-47f623bb35a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc595de4-933d-4ff2-8250-868140842086",
        "cursor": {
          "ref": "dab43924-0108-4d4e-b600-ad6e2fa4641f",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9a82dea4-bc36-4ca8-b54e-55efc54fc878"
        },
        "item": {
          "id": "cc595de4-933d-4ff2-8250-868140842086",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "798ea8a2-b4a3-4822-a9af-5a8b9566ffeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 222,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d418b72-e619-41a0-bca8-754b16a28cbd",
        "cursor": {
          "ref": "ced6570d-62d8-4b3c-bdfa-b0885bc4d461",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9de736f9-8877-43e4-ab19-0328f3e2ac2f"
        },
        "item": {
          "id": "3d418b72-e619-41a0-bca8-754b16a28cbd",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "2d6227e6-999f-4bc0-9786-41daae9ff270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 282,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b18b894f-e6c5-448f-87e1-b66a9908c877",
        "cursor": {
          "ref": "80741d36-a8ef-446c-8eb3-eb27631b9cba",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "df4206b0-9ce4-4d91-979b-67c37a836b6d"
        },
        "item": {
          "id": "b18b894f-e6c5-448f-87e1-b66a9908c877",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0039c0da-818d-455b-97c8-a15d9e65c433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2c7a58-7e36-435c-81f9-6da9ce25af9f",
        "cursor": {
          "ref": "59a5f36e-641f-4f8d-b036-3bd0fa8e3bbd",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "12632453-341e-4fdf-91ad-dfaf592552aa"
        },
        "item": {
          "id": "5b2c7a58-7e36-435c-81f9-6da9ce25af9f",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1672e605-4692-4557-b050-7ebe999102b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 257,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87fe909f-1f27-4452-9df6-588dd0ffa7c3",
        "cursor": {
          "ref": "10bc400f-ddfd-49d2-9925-ca7efe5127f3",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "929e6d8c-e9d9-4910-b504-6fac5b9797f4"
        },
        "item": {
          "id": "87fe909f-1f27-4452-9df6-588dd0ffa7c3",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a38584c8-698d-47ca-be3d-212de14379a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 306,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c19b7b5-5a0b-4490-988b-23ca93fab5c4",
        "cursor": {
          "ref": "dc236970-8a2f-4719-becf-974f371b9832",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "bb9a57dc-4d28-4d6a-8553-9f357ea34fdd"
        },
        "item": {
          "id": "2c19b7b5-5a0b-4490-988b-23ca93fab5c4",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9848bbaf-ff21-4b16-99db-1e7f2e764b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6843b425-10df-4613-9102-2d02903e50a8",
        "cursor": {
          "ref": "953de93f-e789-46bf-9baf-da1fe991cca9",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "174ee87f-ca3e-4743-8ea6-4b5015a6aea8"
        },
        "item": {
          "id": "6843b425-10df-4613-9102-2d02903e50a8",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1757d04b-c189-4688-ab4d-6ff3a68376fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa3f2606-61d7-40e6-9853-ab29c9e46331",
        "cursor": {
          "ref": "8a44601f-dd2a-4883-8e9d-adf2eec321d5",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b9cbaf90-58a3-45d6-844a-b80da903cbf7"
        },
        "item": {
          "id": "fa3f2606-61d7-40e6-9853-ab29c9e46331",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e482c207-9afe-4c63-99e8-0c3b0acb35b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db259e8-aa92-41ba-8d31-6ba3dda29175",
        "cursor": {
          "ref": "88d47325-19ac-4df1-bdb2-749c83a4a88b",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "385fd813-d266-4dca-8677-6b123d49fb08"
        },
        "item": {
          "id": "5db259e8-aa92-41ba-8d31-6ba3dda29175",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "bee4512e-5139-470a-ba78-0daa4d2414a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd91f8f4-5bfd-4f62-b5e5-fbbaf70dc9e5",
        "cursor": {
          "ref": "2d87b846-b3eb-4ffb-91c0-6f1fad9a90a6",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b27ea569-1360-4bc4-8c3c-32d4b3d5be1b"
        },
        "item": {
          "id": "fd91f8f4-5bfd-4f62-b5e5-fbbaf70dc9e5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "eb893df5-687b-423c-952b-3c4d33eab6c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb5f64a-1e0c-44cc-b6ce-0ea2cb5dc943",
        "cursor": {
          "ref": "edb4fcc4-15b4-4d67-99eb-a1bb684fc4da",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "47a9f052-2c22-480b-b286-56d6d9d7704f"
        },
        "item": {
          "id": "0bb5f64a-1e0c-44cc-b6ce-0ea2cb5dc943",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "09e02837-4df7-4c54-8906-7c1920d1e02a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff244d84-e923-4a3a-8b45-e4a4c99932ab",
        "cursor": {
          "ref": "501dcb1e-5a62-47ba-8c10-2b8607605e09",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "07d3b146-4d0e-4698-9df4-33704ead1dc6"
        },
        "item": {
          "id": "ff244d84-e923-4a3a-8b45-e4a4c99932ab",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b0af8e98-4f25-4841-bbc7-31cfde146e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a000d69d-b0eb-419b-9972-558fd9ee4968",
        "cursor": {
          "ref": "7448afb2-60eb-461f-8301-fdec11310f77",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "2aa41edc-2388-43a5-afdd-76e455c6903a"
        },
        "item": {
          "id": "a000d69d-b0eb-419b-9972-558fd9ee4968",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b758b068-cda5-44a4-afc9-696142c46055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c245f041-a5f4-4176-910a-695c09cc568b",
        "cursor": {
          "ref": "49e32151-d9f1-4b51-aea2-e4f4e423f93c",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "18c01b09-0545-46f8-ac26-83ceb72693e9"
        },
        "item": {
          "id": "c245f041-a5f4-4176-910a-695c09cc568b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "dc48a77c-80b9-4bab-9728-24278127d586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea151302-ebfb-4fa1-80f7-533811e70949",
        "cursor": {
          "ref": "5b55391b-ed1a-4a5c-9990-14acca40024f",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "385881b6-8660-4f59-9588-412085cf03d7"
        },
        "item": {
          "id": "ea151302-ebfb-4fa1-80f7-533811e70949",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8821c726-c886-43d8-9a08-11afd007288f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82576c63-b953-42f3-b832-9352de938fbd",
        "cursor": {
          "ref": "f5ade8b6-deee-4add-b637-34fd8c6ba904",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9390a287-a31c-4f3f-aec7-5c6cdabbe4d8"
        },
        "item": {
          "id": "82576c63-b953-42f3-b832-9352de938fbd",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3bb65fb5-0d7b-4f7f-8111-afbe6d662e2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65f6128e-4b3c-4a25-a45a-acf6c7e20c3c",
        "cursor": {
          "ref": "4a02ebc5-cf92-474c-ae61-b2ea57997f5c",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "03c1ec52-e65e-41df-943b-510ae3918eb3"
        },
        "item": {
          "id": "65f6128e-4b3c-4a25-a45a-acf6c7e20c3c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "27ef9b30-457d-4edc-ac0f-c9fdbfa9a628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15694c4d-8e1d-47bd-89b1-cb3efaf0853d",
        "cursor": {
          "ref": "bd782e51-359e-46ad-bdc5-4198db789e30",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "02dd822c-62fb-4079-aab9-0803062a134a"
        },
        "item": {
          "id": "15694c4d-8e1d-47bd-89b1-cb3efaf0853d",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f54da416-2dde-444d-882f-4d87846f1139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea98cd1c-42fb-4bb5-8ef1-ec4747f7af29",
        "cursor": {
          "ref": "b47b76a8-1193-46c1-a83f-26c9901a4ba2",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3f97fbbd-98f8-4b98-bb46-6925601a0fcb"
        },
        "item": {
          "id": "ea98cd1c-42fb-4bb5-8ef1-ec4747f7af29",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8169bf30-fe8d-4d19-a076-d29d59a3e753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f2cc6f-595c-4bb3-a3c9-cca0762e9cb4",
        "cursor": {
          "ref": "704b97c0-930b-4921-aa29-92336b38dd1b",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "161e8369-7a59-4455-ad46-07f7822a98eb"
        },
        "item": {
          "id": "d8f2cc6f-595c-4bb3-a3c9-cca0762e9cb4",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "25775947-be9d-48a1-aa81-13a138793f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 236,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad92c3a-98e2-4f04-baab-20de79c48a15",
        "cursor": {
          "ref": "1c04a6a1-d637-4e70-8d60-45bd10e825fe",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "13650bcf-cc68-49f0-b76c-21f57c8b6c7b"
        },
        "item": {
          "id": "cad92c3a-98e2-4f04-baab-20de79c48a15",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "03429b84-1295-4ea6-8366-098b06935d8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17dd5f43-4b8c-4fd3-a468-da63f2fdd16b",
        "cursor": {
          "ref": "3f25e719-dd4c-4e64-8216-debd19f230e8",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a3db9730-104d-4a1e-9805-829f0ff2b47c"
        },
        "item": {
          "id": "17dd5f43-4b8c-4fd3-a468-da63f2fdd16b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "81f6ade9-6cbb-445f-87a6-fb2a18a1af3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc0fc8c-b0ae-4e08-8dce-486fa3e5ecbd",
        "cursor": {
          "ref": "830ff601-6fd5-4645-b7a6-8e190ce85a47",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "89bd7859-c803-4d6e-baf9-de0941e2f697"
        },
        "item": {
          "id": "acc0fc8c-b0ae-4e08-8dce-486fa3e5ecbd",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ec9aa235-915e-429b-9f5e-c32ec82fa5a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb763a2-d4a1-4ccf-9862-dc3866f942c3",
        "cursor": {
          "ref": "02e359dc-ea68-4842-906f-5223db7df032",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a7500f6d-d611-484a-9171-c344f7d7f7ae"
        },
        "item": {
          "id": "dcb763a2-d4a1-4ccf-9862-dc3866f942c3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "bd954115-4a80-47b7-be76-17943ddc8293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a212eb9-cd42-48e5-a241-10c03f6050fc",
        "cursor": {
          "ref": "11dd1981-4b9a-473b-9857-56c8e2872724",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "24fb3b61-0bc9-49b7-b759-7f08d621f7da"
        },
        "item": {
          "id": "3a212eb9-cd42-48e5-a241-10c03f6050fc",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "91608fbc-d2bb-4c85-9345-038d4023179d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cad9d7f-3b77-4f1f-b1ec-a372cb5e8ccd",
        "cursor": {
          "ref": "262b35ec-deed-4816-9ea7-f54364df4d49",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "5e563704-9709-41f5-bfcb-b170028b9b7e"
        },
        "item": {
          "id": "4cad9d7f-3b77-4f1f-b1ec-a372cb5e8ccd",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a8a0d446-57e1-4316-91f5-fa9bf2dc2391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c419744-4498-464d-b96b-ba9be5edd891",
        "cursor": {
          "ref": "43ddb951-ac76-4a49-9d3c-51b0566c910c",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f1b63e39-fe98-4abd-a60f-c97c12652605"
        },
        "item": {
          "id": "1c419744-4498-464d-b96b-ba9be5edd891",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "196f5ef9-81d3-4862-b744-58ee2613bd13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f75c02-12fa-48de-9385-294833e6b2b4",
        "cursor": {
          "ref": "5a3d927f-940f-4ec3-87e4-a51aeb5a0a26",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "81ea2ca3-38ef-4524-9042-b85b94b3a4fe"
        },
        "item": {
          "id": "32f75c02-12fa-48de-9385-294833e6b2b4",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "364db790-c7d9-4a88-8c71-6012234279c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f9f6b7-17c0-4b22-b073-32f28e296059",
        "cursor": {
          "ref": "7ec46952-6546-4c6f-8856-29b1ba855a1f",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3cdd57b8-6ccc-4acf-ad89-b27c962859ff"
        },
        "item": {
          "id": "a6f9f6b7-17c0-4b22-b073-32f28e296059",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8a85f80a-5f52-4561-a1a4-bf939a6cad21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9617d7a-1adc-4a54-ae4f-e36153de77ed",
        "cursor": {
          "ref": "bac5782b-7082-4c05-af79-537bbab94b59",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ab80bac7-4db5-4dee-b2a9-514d1693a750"
        },
        "item": {
          "id": "b9617d7a-1adc-4a54-ae4f-e36153de77ed",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "04c97302-21b0-46de-9fce-140ab7925494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa882df-9f5c-4f91-a94a-43ee12612c41",
        "cursor": {
          "ref": "a19b2361-045d-444a-b63d-ea4528ca1bb3",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "90dfc498-8056-4f09-ac09-1e36e26fdca6"
        },
        "item": {
          "id": "6fa882df-9f5c-4f91-a94a-43ee12612c41",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4069477f-6dbc-4e21-9e3f-7277e6e28580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db929a82-5dd4-46dc-8a2f-1da8d6301dfa",
        "cursor": {
          "ref": "ac2b459d-bfbd-4e36-8f6b-60d150c34d32",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "643ffb92-914c-4eec-a85c-88ae27475d9d"
        },
        "item": {
          "id": "db929a82-5dd4-46dc-8a2f-1da8d6301dfa",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ef4d8002-25cc-4536-9f1f-37b848c3460f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d7354f-0b5b-4ed7-9d26-e7a6c3c373a3",
        "cursor": {
          "ref": "e26ce64e-beaf-4585-9417-a4bda299eced",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3ea7f73f-0ca1-4298-a046-8353e6460ca4"
        },
        "item": {
          "id": "47d7354f-0b5b-4ed7-9d26-e7a6c3c373a3",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "90c7b5a1-b7b2-46b0-b5ab-1b9137717f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5797b452-bd0f-420f-9a84-027cb6d0350a",
        "cursor": {
          "ref": "cd1e6caf-2523-4f0d-bd95-bf6eff0dab0b",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7c5e1da8-9eb2-4184-ae72-67639fefe9a1"
        },
        "item": {
          "id": "5797b452-bd0f-420f-9a84-027cb6d0350a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "bdd0dcd0-e0fe-481b-b598-3153f827611d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ed7948-a34c-4769-8812-0ed18b9dc32e",
        "cursor": {
          "ref": "02f179bb-5df4-4d45-a8d4-c1f04569759a",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "732ee073-d337-4255-80cf-827aa57c58a1"
        },
        "item": {
          "id": "04ed7948-a34c-4769-8812-0ed18b9dc32e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "7c6db173-1a58-4038-bfb5-e7b560659b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "175fdea2-3e5b-4eca-bf4d-7181c7b2c320",
        "cursor": {
          "ref": "fa26470d-193b-4194-9169-bba4072305bc",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c9d8c963-ceb6-4e96-bc2e-2e8cf67e8f1b"
        },
        "item": {
          "id": "175fdea2-3e5b-4eca-bf4d-7181c7b2c320",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e0c2c041-0f5e-4e4a-b53f-7bac70f70169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a869470-8fc6-46f5-9dff-bf4088fdd12f",
        "cursor": {
          "ref": "b3eff3a3-17d6-4a3e-af85-120f09b4b1a4",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "5eb30e2f-4c74-4662-a83c-ed8da72ece15"
        },
        "item": {
          "id": "3a869470-8fc6-46f5-9dff-bf4088fdd12f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "dcb85d69-57ad-40ff-9dd6-21a1feb2562c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46525c24-4651-4df7-b8c1-d7136158c75c",
        "cursor": {
          "ref": "db46fec5-3ff6-49f2-b465-b1ff1a2c66c6",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d59ae674-9b09-44bf-b650-1cc78dcbae38"
        },
        "item": {
          "id": "46525c24-4651-4df7-b8c1-d7136158c75c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7992f1dd-c1e4-4722-979f-f7297d110228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7cc77e5-b2fe-4244-8643-3795b3dfd97c",
        "cursor": {
          "ref": "20cd0269-cb46-4600-a6e5-ac184bb00fc5",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "305960c7-f443-4176-8624-17e216366801"
        },
        "item": {
          "id": "f7cc77e5-b2fe-4244-8643-3795b3dfd97c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "478c48e7-743f-4b02-98b7-506141ee68e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac3bc02f-94e9-4c82-9402-9858bb606e29",
        "cursor": {
          "ref": "7bad7ddd-e687-4117-ab53-18db2b170f81",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9b74974b-2688-4d55-816d-062367d8ed61"
        },
        "item": {
          "id": "ac3bc02f-94e9-4c82-9402-9858bb606e29",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "bf8b3686-3f61-47e5-8b65-2fda0b905d95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4beb2075-58c4-4939-a6ca-63d87327d221",
        "cursor": {
          "ref": "478a39aa-dafc-4dd2-8266-e2984984b044",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "0967cfb9-2b03-4b43-bda8-bb8a0b88d893"
        },
        "item": {
          "id": "4beb2075-58c4-4939-a6ca-63d87327d221",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "3faed18d-c9a1-49ac-a6b1-a0dc7cf33303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2e7d58-2f60-4448-93b7-3136176ce052",
        "cursor": {
          "ref": "ca77f298-a0c9-4963-9a0d-24dc7e1f3c3f",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3f210726-73dd-4800-b65d-456d51a767a2"
        },
        "item": {
          "id": "7c2e7d58-2f60-4448-93b7-3136176ce052",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "31541f43-c758-4c3b-961b-00e077b0413b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b40228a-dd95-4476-aad5-4c80306ae9be",
        "cursor": {
          "ref": "9351243f-4ecd-4cba-8e8f-69d3a5efc2b6",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b7a0f612-564a-4dcc-9125-710b63b6db14"
        },
        "item": {
          "id": "8b40228a-dd95-4476-aad5-4c80306ae9be",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "04bc1e65-7dd9-4458-a807-32a8db490373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f2da46-9f96-496c-bced-bba1b4b74fbf",
        "cursor": {
          "ref": "e67a47db-1652-4ccb-8cd7-4654ec7d44fb",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "13b5ea22-e245-4956-b23a-408eaaac9513"
        },
        "item": {
          "id": "38f2da46-9f96-496c-bced-bba1b4b74fbf",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b9f971df-f2af-4ca7-823d-2e926b90c592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fa334b5-3c50-47ee-8032-e55dbd75c54a",
        "cursor": {
          "ref": "455eded7-de29-4ab2-87d0-f37d4b89b8f8",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6c746648-7083-4371-95c7-42e3c17659b4"
        },
        "item": {
          "id": "5fa334b5-3c50-47ee-8032-e55dbd75c54a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "35409fb3-9668-44af-911a-ea056dcfcff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd4423df-5438-4a49-a192-7f1c8e05beee",
        "cursor": {
          "ref": "b85416b7-c7cb-4976-84a9-f1233b412eb9",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3c38726e-c023-47da-910f-95ca88326806"
        },
        "item": {
          "id": "fd4423df-5438-4a49-a192-7f1c8e05beee",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d0876eba-d213-4619-a2a0-5997258d29dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "383b2d55-ce53-480e-a9f7-bba40b033ba7",
        "cursor": {
          "ref": "9163fb9b-b7c7-4a83-aff9-413343dbd532",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0673a6c7-a1ae-4778-8cab-379f1b8ec41e"
        },
        "item": {
          "id": "383b2d55-ce53-480e-a9f7-bba40b033ba7",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1e7fac88-2a32-46a4-bb33-f3a6eb313d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d163ae3-98de-4a8a-8d47-48fa02086f34",
        "cursor": {
          "ref": "d52f8d6b-7f2f-4f7e-9a1e-ed1131747bc4",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ebe862f8-c0ed-484e-a27b-53bc97c32316"
        },
        "item": {
          "id": "0d163ae3-98de-4a8a-8d47-48fa02086f34",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0633a237-3751-4c05-aca6-86aedd40cfb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de479b7-7436-4397-9db3-8ab2ec52773b",
        "cursor": {
          "ref": "f2355fdc-aa04-446c-bae5-71a32e586173",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e140a59e-e784-4e5e-aaa2-2f6d722013f3"
        },
        "item": {
          "id": "9de479b7-7436-4397-9db3-8ab2ec52773b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "10cb06be-0074-413d-8da0-dc9b3c7763f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7281bfc0-6b96-4be8-b8f4-56d4dd8cfa9a",
        "cursor": {
          "ref": "2dcd09dd-f83f-40d9-85d1-0ef9b0e3165c",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "06d066c5-999d-4dfd-8a1d-f4d8efa71f06"
        },
        "item": {
          "id": "7281bfc0-6b96-4be8-b8f4-56d4dd8cfa9a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "58621a5b-ab43-44e9-aab2-5cc09c9cb6e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9107bc22-a31c-4d5c-89b0-9c6420d0cc95",
        "cursor": {
          "ref": "914493c8-0bc1-43e8-9710-d47faeda123f",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9d76fb39-d6e6-43fc-9c9e-e72aebcf2fa0"
        },
        "item": {
          "id": "9107bc22-a31c-4d5c-89b0-9c6420d0cc95",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "32e0861b-fa5a-42f5-8956-179fea06f622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17452ac4-2bad-4ad6-9ff2-3be36bf96e8f",
        "cursor": {
          "ref": "f51c6920-1324-4ccd-a4c4-2b8d4e3abf6a",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b00d4ee5-5d59-4612-83b8-361c64046340"
        },
        "item": {
          "id": "17452ac4-2bad-4ad6-9ff2-3be36bf96e8f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d6c6be59-7e29-4b96-8fa8-7e9caa8ec3c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d0e7e44-02ff-4b47-bb5c-6eb758fa6184",
        "cursor": {
          "ref": "1061495c-a79d-40fc-85e8-755665195cde",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c4a6f6d9-62b9-4790-a83b-6adcd0261443"
        },
        "item": {
          "id": "1d0e7e44-02ff-4b47-bb5c-6eb758fa6184",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "73c46f0d-f1b2-48ff-b49d-2d7b5f6eae36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "745e45d5-dc06-4491-81c1-acdb48acf48a",
        "cursor": {
          "ref": "6a404423-7966-460c-9b18-8548d378b0eb",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5289a76e-e51b-47f1-9189-ebdd56431419"
        },
        "item": {
          "id": "745e45d5-dc06-4491-81c1-acdb48acf48a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "13f4102e-c3b6-4df2-b3f8-8fbc15e0df7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "741f7107-4b07-4783-9a7c-c6eacea5db0c",
        "cursor": {
          "ref": "0f0d053f-af1d-4d99-b0f7-321d3028155a",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8cfbe8b5-c32b-4c15-82f4-1fda902686bd"
        },
        "item": {
          "id": "741f7107-4b07-4783-9a7c-c6eacea5db0c",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2315fc78-babb-4352-ad20-d6cb075c0468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f64e1d0a-1718-477f-8f16-fdd60e6ae48b",
        "cursor": {
          "ref": "69b41b64-4a85-4357-895e-cbcc0eacdd09",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3088c262-2bcc-4a23-bac7-cfb5156ef372"
        },
        "item": {
          "id": "f64e1d0a-1718-477f-8f16-fdd60e6ae48b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a189bf8a-f756-4b20-8a2a-5fc042df171f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "201af55e-cf9a-425d-93c6-aaa36162bf0c",
        "cursor": {
          "ref": "32153a90-60e8-46bb-883e-8adee3ee43f1",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "610b800b-0738-42e2-844f-42cb9cb94d16"
        },
        "item": {
          "id": "201af55e-cf9a-425d-93c6-aaa36162bf0c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "fc1a24da-fc79-4c52-b492-222439b36574",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 40,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eaad58d-1c9a-45ee-80f7-55da647b3006",
        "cursor": {
          "ref": "2b0acb12-c28a-4f4e-9701-3872b6a590c4",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "7d4726bd-bcbc-4655-9f17-458350331693"
        },
        "item": {
          "id": "4eaad58d-1c9a-45ee-80f7-55da647b3006",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "5db5e99d-ddb1-490c-9add-a304817fa6bc",
          "status": "OK",
          "code": 200,
          "responseTime": 293,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed833edd-ce32-4170-8c2b-e8ab988e0230",
        "cursor": {
          "ref": "a25bd04c-3306-407b-a980-0643d3bc9637",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7d96a8ce-9147-4bcd-8484-3fcd5775adaa"
        },
        "item": {
          "id": "ed833edd-ce32-4170-8c2b-e8ab988e0230",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8bca9b66-caf7-4486-aa27-ea6c90b425c2",
          "status": "OK",
          "code": 200,
          "responseTime": 372,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de2a03c-1147-46c4-9555-be7affa96fb5",
        "cursor": {
          "ref": "8930dc72-51fa-4260-8ad0-1aeebc303a3c",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "fcc53ea2-f40f-406b-9ae7-31f8ca956f86"
        },
        "item": {
          "id": "6de2a03c-1147-46c4-9555-be7affa96fb5",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "9b16297e-7c72-4231-aa48-588984927694",
          "status": "OK",
          "code": 200,
          "responseTime": 672,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "82492c7c-567f-432f-bc7c-bec489eb02c5",
        "cursor": {
          "ref": "7f51fd13-7a25-476f-a6d8-48d33cc4f6d8",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "359472e4-5d65-4d7a-8fff-663e5f4c0b56"
        },
        "item": {
          "id": "82492c7c-567f-432f-bc7c-bec489eb02c5",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d5742a82-d88f-42cb-8d84-ee82825de330",
          "status": "OK",
          "code": 200,
          "responseTime": 357,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac07852d-e3c9-4abd-8826-d7129ce50318",
        "cursor": {
          "ref": "c95bc9d5-8815-4380-8bf8-fe43940e1532",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a11c5f46-3c39-4697-93d8-2261fc8d395f"
        },
        "item": {
          "id": "ac07852d-e3c9-4abd-8826-d7129ce50318",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "21591fee-32bc-4ec0-ab54-5ad976be89d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac07852d-e3c9-4abd-8826-d7129ce50318",
        "cursor": {
          "ref": "c95bc9d5-8815-4380-8bf8-fe43940e1532",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a11c5f46-3c39-4697-93d8-2261fc8d395f"
        },
        "item": {
          "id": "ac07852d-e3c9-4abd-8826-d7129ce50318",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "21591fee-32bc-4ec0-ab54-5ad976be89d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac07852d-e3c9-4abd-8826-d7129ce50318",
        "cursor": {
          "ref": "c95bc9d5-8815-4380-8bf8-fe43940e1532",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a11c5f46-3c39-4697-93d8-2261fc8d395f"
        },
        "item": {
          "id": "ac07852d-e3c9-4abd-8826-d7129ce50318",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "21591fee-32bc-4ec0-ab54-5ad976be89d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e689d4-55a4-4257-9262-8cc72e4e1b9a",
        "cursor": {
          "ref": "2f527d0b-29a4-43c2-901f-2be603b7dd22",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "caee70fb-3a49-45fc-9698-6b5ed79dac0a"
        },
        "item": {
          "id": "02e689d4-55a4-4257-9262-8cc72e4e1b9a",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "f72bc817-3a18-4859-aae1-302c131c709b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 50,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "241864e3-a8c5-4aef-8db5-0cef12806412",
        "cursor": {
          "ref": "75cff4f9-bbc7-4d44-b272-dfa83f862ea5",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6493ead7-17d2-4e69-98c2-7fe9790b3bb4"
        },
        "item": {
          "id": "241864e3-a8c5-4aef-8db5-0cef12806412",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ea2de33d-01c9-4d11-a189-7e4c797ae075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "241864e3-a8c5-4aef-8db5-0cef12806412",
        "cursor": {
          "ref": "75cff4f9-bbc7-4d44-b272-dfa83f862ea5",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6493ead7-17d2-4e69-98c2-7fe9790b3bb4"
        },
        "item": {
          "id": "241864e3-a8c5-4aef-8db5-0cef12806412",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ea2de33d-01c9-4d11-a189-7e4c797ae075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "615e101a-90a7-4a6c-9287-0dffecb37897",
        "cursor": {
          "ref": "abfac88f-31b3-4bcc-a930-882c5443571c",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2803ad51-8d0e-4b70-b43d-8bd3a7685867"
        },
        "item": {
          "id": "615e101a-90a7-4a6c-9287-0dffecb37897",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "942aa5af-287a-4929-9799-4f2c1eec70d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "04c813de-ff44-4a1a-9b51-2ea43dfc1be4",
        "cursor": {
          "ref": "9d125d2d-e0af-40b4-8287-4c01a9d4f563",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "57c157f8-b955-46b6-bc4c-0005d2f4c716"
        },
        "item": {
          "id": "04c813de-ff44-4a1a-9b51-2ea43dfc1be4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8b88a3de-1f3f-4e3a-8065-82e0a48c0955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "04c813de-ff44-4a1a-9b51-2ea43dfc1be4",
        "cursor": {
          "ref": "9d125d2d-e0af-40b4-8287-4c01a9d4f563",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "57c157f8-b955-46b6-bc4c-0005d2f4c716"
        },
        "item": {
          "id": "04c813de-ff44-4a1a-9b51-2ea43dfc1be4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8b88a3de-1f3f-4e3a-8065-82e0a48c0955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "72a80c2f-149b-40f0-b3ad-8481ddb2dee8",
        "cursor": {
          "ref": "f406f208-b79e-48f9-a5da-1066a73feaf3",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "657bbabe-fc79-45a5-8d10-1e3a6e0a2746"
        },
        "item": {
          "id": "72a80c2f-149b-40f0-b3ad-8481ddb2dee8",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "8b9fe034-a1bb-483f-9d6b-e04a43ea4fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}