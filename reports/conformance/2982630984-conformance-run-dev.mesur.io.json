{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "382232d1-011a-4c24-93f2-680c23bb8293",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a3cef7ca-6227-4ddf-be6a-11dfdf41f62f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "96918216-7fc1-4c2b-a00d-2cc3599f9a62",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "59d6ab37-fbb6-402a-bd04-f0fd7863e902",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "078b2bed-12bc-447d-bc09-6d4b3187d92c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "b0f77927-975f-42fa-8d3a-4f7b2e638cf8",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "299faded-571a-4346-afa0-fa939c040e2e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6d251b7b-b78e-4adb-a7a4-b2b2bcb1632f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "75795bc3-c5e8-4558-8b1c-ae8ee91e6c84",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d40678cd-10c2-40b2-9576-99775d276a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cde8d53d-9d43-4f8c-9aeb-090a7fefeb47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f1114e-08ed-47b4-b990-51fcf656410a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b8c350-70f1-4d33-ac18-f5d4b7b3d624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46861229-c11b-4cdb-a861-1034ad50f993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ae7828-0304-47ac-967f-a79617c2b853",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41452f5e-9b5b-4d91-a063-7f326f8da519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c76d754-5e2f-4c39-b294-c3d97dd25ea1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "dfaa12dc-2190-4dee-9b6f-60605fe79d7b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "44439ff2-e7c3-426b-a6bc-91123659cec6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90504a2-bbae-40de-a30b-1a81a300bd41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "529679b6-afb3-486f-be77-f65164c35118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a9e1726-e2d4-4ce6-a148-f97c10e636b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c85a95b5-245c-40b0-9d02-a1c3f65259d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5100b483-6fd7-4b64-a090-433974a4895b",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd915d44-c244-43f7-9e2a-4f210ea1c138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "663627d2-5af7-4f28-b411-1ac486b0f06a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59178a70-8cd3-4a2b-b306-ed4ae946314c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "24b9fe8e-33c7-4da2-8efe-e447fadf6f2a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bf40f02b-9b9f-44ca-a8b2-65f95aa28e1f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8d3f2f21-1218-42db-a75d-85867ca1af48",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d76dc90-9fc8-451b-9d36-eb40699afe14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2c491f98-d209-4067-9cf1-007c6b1007cb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "305e3b87-39f4-4c06-963e-26e8c70ab567",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "cab26a24-ac97-45f4-98fc-95423ab07a11"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "57bbde94-2cf4-46c4-8577-14c14f1380b9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6a05d9bf-1ed0-4dfa-9568-4d5de671fc21"
            }
          }
        ]
      },
      {
        "id": "8a2585b6-9427-4f3e-b08a-36d6173db2a3",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "511fff5b-78bd-45a6-9060-40201f6586da",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c7f460cf-a987-47f4-9ef7-8d31913168e3",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "efd4e10e-1d3e-4369-ba3f-bd4b7379e6ae",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8d5dcd-52c3-42ab-9032-c8a5502d130d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ab89d93-f11b-4b8a-827f-94e788dede63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191c9d18-11e7-4f6a-8207-5adcae066498",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32f75bcc-a09a-4e10-9917-6d2b0d86ef0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "509d2b54-cf27-4d16-bc4f-3b5fac5a7283",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e95aff-5017-48d8-ae0c-b3f1f95b06d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8af6db47-5cf6-441e-8094-2307bd9b2850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d16949c-d6d9-4535-a818-74546e6a3787",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "375facd9-82a8-4230-ad8f-9384ffc0e129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23909d53-67d7-41f7-82d3-748fcdc3098f",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "003200a7-fc3b-4889-8b2d-9521b5f56080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e694d9ac-e117-4e4b-a170-7c87195afe66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134961e9-25bd-4210-bb9c-805bcd272099",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "775f9d3d-aeb0-44e5-848f-ea251578e29b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e03b51b5-5f15-4bb4-b7a3-b72363d2a2ae",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49073fc6-1138-4935-ba0c-cdb29b35ba7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d5031c7-01f2-4430-8874-53c32d6c4ee9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fc4f21d-616f-4322-b426-cda089c7170c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cfa3caa-d953-4b43-9708-a6f0a27ffe47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1333307b-b228-412c-be3e-115f1637f980",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "544d5498-b431-4ab0-98b6-3ce4893cdace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e44c439-817f-44a1-bf4c-4e46888f65a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13bcddc8-a00c-4a8f-955d-a9fe41cb1dda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dccb7d5-f66a-475d-bfbf-cd9015beff95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c907052e-46bc-4b02-87b9-b6c882d52d69",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c195860b-dac5-4b30-9890-70a954d8f433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11b13291-b21b-4d0b-93f0-4b648f346de9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a144f37-276f-4fa4-87a4-9e862c5207e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1969392-ef50-4361-af6d-70481c0c2b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0e4530-a871-4f1b-a347-bc0cd632290c",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71b08de-c897-4abc-89d7-5e34b5fcb612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0158580-a6b1-4ed6-aa2b-c1bd4de3b601"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ebb68c-4266-4665-8483-3f11d12c92a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f81ad4e-7cf7-4a32-9ee0-0137bd086cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d9f477f-1b1e-409c-bf3d-1dd803dbe67c",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "682a4c11-4109-4925-b0d3-a638e70c598e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d003d93-2931-4ffe-8420-72aad87c3d10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa60278-7457-4051-bc52-97aa2f1bf72d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21effdec-50b2-4fc7-b625-c3d3b2f14b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a2dddf-19b8-4454-ba06-e9e0ac60e3c5",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8078fe8a-c750-4971-8c5c-ad7472614d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf9d1c13-4ae8-4199-9467-7cc61f7da839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c552b69c-4a8f-43cb-ad87-c01dfabe4347",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "942f2569-013f-4429-8d23-307b81de2269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d1a25a-3b4a-46f0-8df3-2c0541e7bf3a",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f3ffef2-781d-4cb3-83ec-7739d5d5e31d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a7ef5d1-8be8-474c-bf2b-ee4759646e9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc1d7a0-c69c-4f95-aba5-3e3d52ba4411",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74253e3b-3b3a-4cfe-a8de-e5ab92180267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e375a508-d77a-4d3d-8437-1f512553b0f1",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31cde7a4-5214-4851-a05e-b10dcac2b5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0caf9a7-f9a6-44c8-be2c-f8285a6d35d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c87adaa-e0ea-4abe-b0e4-bf4540486732",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "e73745a8-f3ab-456e-83b5-12a8c4440747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d05f3bb-f7f2-43ae-8461-fca58f6e8121",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1f213cb-8d56-4838-b504-95abe7a5e75c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3d161b2-e74a-400a-b1c7-6be95f3d845c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa8036c-fd47-40fd-97b5-eec3d697d21f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "0c811c64-95cd-4266-90c8-2ab78fde5626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13a1d9e-6f07-4a21-9bc3-737bf7d764b7",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b6ef95-b82e-4723-9fe0-54a760e1772a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f87eab82-2203-4cb6-b830-8f644a27412b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3383218e-2572-434f-b4f3-a03c2f490d54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ca0bf13-2e0e-4f7e-a656-82d2852c4e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72452e1a-a172-4cae-bdef-b4d786590a74",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7228fe59-dee8-4891-9ba2-89ffc5980566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a55d9d2-999c-46c0-89e6-31cca5aea37a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84660b63-4051-42da-81d3-dff981dfb77e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2577c7e6-8403-4786-99d9-670496be4392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7410961f-f6d5-4e68-a161-a0d8674fba41",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc97aa2-deb6-47cf-9d1f-d66dc49ac164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67e9be17-64d5-468c-829d-d9818db3b729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c68f6ba5-bc85-4c30-8093-8d74eb709bc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "cb3e98d6-82d1-4e39-8e39-7c2c6283bd0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c889adbb-713e-4b21-afc5-1bcde52c9a95",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8691ee-0905-458f-a88d-48bd9b12c693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b87a5fb-f8c9-4554-ad1a-07f5aeaa0cf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be5ef537-6454-4c7d-aac0-70f813615b8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "a788ea30-78f6-4b7c-ba39-55e230d13145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00579187-ec2b-4c73-84ee-9a6699df7657",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "350c9da7-68ea-4fa2-925d-be1fcb0af0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "882b18cf-8e4b-4404-ada5-8b24a908b470"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e99db3-3c32-4172-9646-9a0258718004",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5addea7-72b3-4dd8-943e-3636acbfae43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5218787-da59-44aa-8ee9-4f8304849d29",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cfb9a32-b255-45f5-845e-4de511e06c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "179afd33-9a09-4df7-bd5e-e23e05e24476"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df1f758-5784-4e49-bbc6-ec5d48bae678",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f167acb-e33f-4bf5-b941-058fadc27654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b641f960-5c27-4d17-b504-3c3e55df05ac",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68266c44-7701-4cda-a140-9130aaf6cc13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57ba36d7-be9b-4c46-8b0f-fb772bb6682e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76cf39e6-298b-4d1a-9041-f04081494ced",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d330f6bf-5128-405d-905f-0d46a2d752c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725121ce-a1ec-49a5-a6d2-32877f98b86a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5285eb0-684d-450a-8399-14a21d7f5015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fa92884-0008-406e-83a0-f3bb5cb0fcc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5957b347-3c2f-4d55-8742-0c6034aafd8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af969b6e-e7ef-4a16-9c2e-586b39289b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc0e7e3-2334-4b76-98a4-5382d2b68530",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc6a73c-ecad-4ae7-a1eb-4fe04179f784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92728d87-4abe-4917-8400-521c6cff4a19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808ab5fb-9e99-4667-891e-3830fb2e90cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65c2c890-7e60-4769-a180-8d54b8bb59ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7976ac80-9969-4212-85c7-319e936e8ec3",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "173c84ca-1388-4ef6-86cf-979196aa2c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01a218cf-d93e-40f4-ad97-ef9063672d38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea6595a-e48a-41b2-8cb9-7b53fc307c5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f94a925f-1b81-40ad-af76-b8d7ebb5628f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f89b4f3-cedb-4cd8-9789-233de4b868b1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf17c3ab-0154-487c-a55e-e24f107f1194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "499328e7-5e76-484d-9e31-38dbe61ba3a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6f173f-524c-4063-8907-826d9dd58cdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af15553b-9301-4194-8d3a-e7db8a86b54b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39e402cc-a952-4dcd-86c7-6b4bd342fb65",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c0e79e-faae-4dfa-a259-3401f5b783ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "023dae0d-1faa-469e-8568-6948bf5c378f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de37e3f-18c5-4837-8a34-205657ffc4ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6403695d-55aa-4227-bedc-58b61c5a75dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118d7380-26a9-42c3-80ce-4b0296a7bc79",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d1413a-b231-46ec-9fed-32947911cf97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92c0f5c1-25ac-4c7e-b568-928185a885ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ad9c16-d8d4-49a8-a3bd-2717a308e755",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67411322-1632-4ec5-8bb4-aa1b7f22aa9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e56c1e-08c6-436f-a581-6123e2fc7f98",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1752941-bcba-468c-8e7f-d58eb8bb21b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaa20d33-d91f-452c-8a17-e79547b32cb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca16a547-6d05-470d-a94a-5937081dbce1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e17f688b-70b3-4e31-a404-81d4aaeb7c79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7401ed3-5a36-406f-a001-1df0eb313446",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d2ec10-6404-4622-b47b-1e7caed81dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3185c905-12c3-4ce8-8781-5b61cb82810f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "211060d2-9ee1-4a6f-884f-501d4031b021",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0d54e5e-3150-4bf1-b07d-05b17192eb21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e71361-a423-4974-bcb3-57ea123dc1aa",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a71a385-d6c6-404c-bde1-99bde022918b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46da1c4e-3129-4a64-8602-48228e28722c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d06a5fa-d77a-43e1-ad6b-ce58f22491ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ba87b2c-d948-43e8-9836-14e9d31c4a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eca24de-d487-42d5-b4df-2d34044c1519",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc483b46-3c2f-48e4-99ff-26b1f463a300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c44ce9b6-d9a0-4988-8d36-01f74dfac9f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "982b6c7f-c095-4811-bf9b-972c4fe8c160",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ca3c5d9-26cb-4337-a152-509cf31e1f4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8714491d-abca-4652-b5a3-c9b71f0572cf",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d42d690-a863-45b7-93d4-5707ab5f5439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "430ca8fb-47db-4630-9ed4-6c86a49867b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64812e8e-bcd4-4796-94d4-a868233a1eff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "556ed837-7dd8-43ed-9e05-0534e051c5fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0285e791-608c-4fca-84fb-bedfe20e9f25",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d94fb8-5e67-435e-a5c8-2354deaec6b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f14fa6db-2aad-4396-a97b-35cadd7d5225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568dd5cc-4fb5-4afd-acf6-00b616b6e50c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fbbcae9-775f-4ccd-91a4-573c9fdca6a1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "71754d60-fceb-48ed-b810-8fc60ee1b9e6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b25f5a01-1a36-4b16-b249-257ad730b7e3",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3eb2f08-9029-4c9a-a7db-e9e0d4a263bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "972e64ff-39cc-4849-b7ed-1d04f264a1c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a48e9a-5b36-4ef4-86e9-5e91cd583044",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "ca05cc3a-4e47-4b16-94b6-eb105a3ab310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29bb10de-eeb3-4480-b1d7-fe3a90aa8791",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf926137-9ef7-4ae9-acb2-22d3a06408c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "756a7931-ac7a-4d2b-8454-882b836b9620"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ef5f0c-3e23-4615-9882-3ac3a3b0aa09",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "eee4b06e-e5c5-4e92-9ded-b0b0a434e6bc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "866dbded-3981-432a-a3a7-07e9e30651cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2b19b71-e3b0-4b79-b12c-19ecac6a8cf2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d666b3a-3f69-4b5c-9924-bd76145352ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef47f6fb-c9b0-4089-a8c7-916e641956da"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8886739f-c5d4-4b7f-8ee2-fc74f5526553",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b8bfdc95-a614-4f7a-89cb-446d18f22fc0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3aeaf89d-0caf-4165-b6fc-c39ba347f187",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "92c9e22b-b372-47ba-9c95-a7f6e409dfdf"
                }
              }
            ]
          },
          {
            "id": "d6409a3c-f1ce-4648-8b88-53767984fd41",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f6847dbf-0847-4b0a-9475-823f278c96ca",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a236e60d-ff21-4aa4-a33d-c80c9c0e97ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fe9bad1f-b89d-470d-9e24-2a9330c03697"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6544b028-aef6-4da8-a7d8-bfaf4d24d3c8",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "31f2b006-3c6e-493e-aa44-0c48ef7f7515"
                    }
                  }
                ]
              },
              {
                "id": "c09ca996-401a-47c2-bfdf-7391ce52193a",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6dc88ff-bd02-45b3-b936-afca5d70523d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2964828d-9c4e-4bf8-8b79-a6ed7086fa7f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "23bf93a8-dc12-4d8e-af09-25cf3656a3cd",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "f7668292-9fdd-4c30-85d8-69f061da6cc6"
                    }
                  }
                ]
              },
              {
                "id": "8f2643fa-5b17-4737-9fc3-00cbd277d0ea",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "68016fec-c285-4586-9256-0825e8b1f19c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dc88392d-8c04-4029-9b66-73884d7cdbc0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d88a2160-08a6-428a-92c7-3448caf3fcc7",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "fcfd84da-1359-42a9-b064-c27c79d1edef"
                    }
                  }
                ]
              },
              {
                "id": "6268fd72-1552-441d-a97d-88429b322519",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8f92c7d-c770-4da0-8ea2-8a8497ca66ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aecdeabd-eeb4-4557-9e95-8e3494dee384"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cdd5be1a-8823-4f38-9314-83388e31e540",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "527bae61-915d-4650-8977-7e31320dccc2"
                    }
                  }
                ]
              },
              {
                "id": "058e12f7-786d-4a85-a314-3db027eccf0a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd4c25da-6deb-46cc-ba7c-ce21ef4b77f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "a1838d87-19ca-486b-b26e-e81818d1b7bf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b099daa2-140b-40ef-91d7-f929d78b7753",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "6ad7595d-1696-4f5f-90d0-293aac88dbe0"
                    }
                  }
                ]
              },
              {
                "id": "d22d7363-edd9-42fe-b3f4-ae98b145e9b8",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "22ba3fc4-8694-46e9-aa58-1d3600133882",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a374e33e-fb97-4d42-88cc-2052d05f31a7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7bb0efe-0b22-4fc4-9324-9bc58c655c50",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "61c1a77b-ad4c-4b76-9c06-34cc429b253a"
                    }
                  }
                ]
              },
              {
                "id": "f1184751-7a62-4f69-9c25-8654dd3aec80",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3afbafbd-bb7d-4d9c-aba4-cba0384bd253",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c8acf900-fc64-4b99-9f22-26fb429df7be"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4409e80-ffd9-466e-a6d9-2425eeaf9b1b",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "9fb06474-53e3-4a26-a4c0-14b003a23d04"
                    }
                  }
                ]
              },
              {
                "id": "355bfe33-728a-463c-9c3a-6c595f4529b7",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "681c012f-a0ee-4900-ba53-6b65cc7ceeb6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ee705548-5f39-49e2-8d93-b1589e2e610f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d801bd3-863b-49b5-8c55-dab0bdc88900",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "bee26a52-b7a5-49d2-8d89-5f7432b1fc12"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7a1e61fe-db9d-44be-896f-be579a26f8c8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4f3078ee-9463-4690-8f74-0100ff473296"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bbde1808-a911-4913-ba22-88ac5b6315b8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "675b8074-a8f5-45ae-a28a-fef51258b3ce"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "94b83168-341e-4149-9d35-1c661070ad8d",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "0153add0-ac94-4a98-96df-9ec3f2965103"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7936cd2-136c-44cd-b8f9-ebe0ab9b4ccb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fe7640ce-5e31-48a9-82e1-993e6e5e81d9"
            }
          }
        ]
      },
      {
        "id": "0373dc74-389b-4135-ae05-3a834abca552",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "76b2bf77-d462-4f7d-b215-a399ae48c371",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4876ccb3-94bf-434b-9494-c2610a0ee91b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9d563ef4-faea-438e-ac20-c4331b3e5fe5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf9dbd1-6147-4f8d-b84a-42c009586837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d4de28f-32fe-4ec8-b197-58fedbd16240"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14f2a19-35d3-48c3-8f44-4497dae06337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8a8afb0-b099-489c-9892-9b670cac4639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "243c9812-615e-4ea6-a809-18c2dad2677e",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9987daad-d65d-4a7d-b0b8-5098b9e3d86c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "204bab40-c48f-4a35-ab1a-97511b5de57d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "423bf920-1ad2-4c00-a396-602230535163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6c58a47-49fb-415a-bf72-49ad6880ff24"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28bf7bed-84e9-4db9-82e1-5ad1528b5616",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35f4a404-2dea-47bf-9d3a-7bc1b76b17a9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e18dfbe-658a-478e-8d56-73070147c61f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0930b1f5-3177-4b0d-9be8-3fc0030089f9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e3fd4852-7674-446b-9433-2047574e959b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "38fb8d14-aeea-4f78-9d56-bcf5c6a63c1d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "151d6462-73cc-4a7a-9618-18ac816394c2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "19d451f4-c99b-405e-8396-1ae97d8f9228"
            }
          }
        ]
      },
      {
        "id": "d9fab69d-d4ec-4dfc-bca6-fcfa41874fcc",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "79884681-360b-4475-8e46-83259dcc9d24",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9d89aa9c-90b2-4e19-83c2-29828cc38027",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2da9e82b-37c1-498b-beb1-8b2a5efbc4ab",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f1ea10-b3d9-4f58-b173-2ab14c665ae7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "515953d9-6b56-496f-9253-9a78630d21ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c74b480-9903-45eb-b91f-599c2fb88cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd1ba427-2e48-47cd-9c8c-9d977c436c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e8cd1c-dea9-4dab-ac32-cc0b7c3a704b",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc32338c-e6c1-49b2-bbfc-680017c0a6fb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "1ff8c4b5-9b21-40b5-b3ba-973bc5f9b949"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9eb163-ffd7-4caa-b4a2-135cc7c5c3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0216e995-1ddf-4a40-8d71-1fb75a93e51c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "445bb433-b74d-4836-b6bd-68db0f931c02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e7a9dda-15e5-4d18-8be5-beca1a9cc754"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0f8d455-bf65-44d3-ac1c-1b0d7a7ec799",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b397f64c-4e9d-4e66-ab6f-27ced994e578"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a4fc805-0a1f-46e0-bc5b-c8da41ce11b7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a89c9785-8081-487b-bf65-c7e57f329bad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e3bd9473-fab5-430a-a167-5a550e902669",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0f5869c6-9c79-4775-921a-b766da4e37f8"
            }
          }
        ]
      },
      {
        "id": "a3ec114e-3838-4385-bdf0-1d1fe26abe06",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "6e108edf-bcc0-4247-869f-6eafe058aed5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a7216a1d-6fea-4c3c-92fe-5ec409929e92",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5433e19c-8334-4460-bfdf-93cd033e5655",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c6cb7dc-3c29-4ec7-9c92-16b8557d490b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b71299a0-ec21-4a06-9c17-b4cd9e5df7bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6b48b4-0a88-4f58-bd64-d4e8f2c15564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65500106-2dba-4b9e-905d-69bb83dd4ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e5c88ba-87bf-4d63-b127-3fe2d6d688c0",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c54b89-23dc-46ca-9a25-87f67f2e1ef7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "5d494c8a-49bd-4dbf-8528-0a6c626873ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f629e5b6-fe7f-4616-b2b9-1799bde596a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1f9eee6-f9ac-496c-a0d6-da4e2465cc03"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f07c3432-13d2-4336-9df8-671522de9865",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a795b2c7-86fa-4d68-a31f-d2c22ebc88dc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a700d4b-acd2-4f83-a972-3ce6b8986354",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c895559f-a461-4e34-8921-b9e2ec77ca3e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "07697b67-4cec-43ac-ae82-c549021ecc89",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "10c3d7f6-b7ce-4b48-bed8-5abca070e1ac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c4851bef-4e81-4208-ad11-ffbf4c03bfab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5bded51b-5800-44e0-aef7-34b654293f9c"
            }
          }
        ]
      },
      {
        "id": "827e6de5-358a-42d6-9d87-57e3e5b6d56c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c7a6b4cd-bf85-444a-966b-11f90459043b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "36abe966-dd0b-4ea7-a155-1f6b786ae826",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b1a96c60-660a-4ecf-890d-b716b77f4c67",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef107f1-c578-4c83-8510-889943bba081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96bece24-472d-4793-a013-40ab588bfac9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "204fb5ce-1b4d-4ae8-9b63-e2f16c00e48b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8cba068b-bf01-4cf7-afee-3bfe77d42973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3e9dff-03cd-4178-87ef-98e117ba3f94",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f365b03-dd64-4696-86b3-b62a36112632",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "26d9509b-0620-42bc-9ae3-296128894472"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d23ac38-0d01-4df2-878b-27ebaeea2b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c49d651-48cf-4463-b059-22eb895a1547"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c48b957-96b4-4257-bb37-062c39797449",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c278ba83-ab29-4fc9-8d2b-ffcaaed5316d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "29ff7d26-5bef-4577-bd9e-36c10578c702",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb33a394-77d8-4e57-ba47-1ddc5cf5f3bb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80b90353-9638-4e7e-9074-6c9e6396ffbb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "0bd2a5ee-def2-45e7-98a8-5aaae17ee05c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "457a4104-07e8-4b49-b788-a3e077636228",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d0b8e4b2-1c79-4435-8724-943da800b715"
            }
          }
        ]
      },
      {
        "id": "b53bfefc-0515-474f-a8c9-20e22fa27567",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d4fbc2c8-cec1-47bc-9ed6-a73cedd0917b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2ed97e62-31b2-4bbd-94d9-ac267a00a350",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ef004bd6-0a9f-4135-8019-b40abec17aec",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac3de36-6c07-4634-8559-6154111a62c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1820c8f3-78e4-4dfa-9eba-4ec1eb720309"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ea8d025-b187-4410-be59-1633c7938d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ecd17fa-53f1-4923-bded-12be2192dced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b3c821-4fa7-46dc-b4f3-c3836898487e",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "488121b8-cfa0-474a-953e-02db50238c39",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "29682730-19bf-40fc-beef-0ddc19ddd069"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0fd537-a44d-4a58-92bd-2e923f436f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e32f171-1493-48e4-8bbc-8fa8c424ac2b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e3208bf6-4ddd-4c87-bc41-da38de2ff7c2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c77dd599-ab78-4abd-aede-155f654d81c3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9230c390-17f6-4f0d-b9db-bda3fbcf9efe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0722a339-25c8-4733-9b38-f08869ee05bd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2304920a-792c-44fe-ab4e-7493e41a2524",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "e218ff20-5c18-41b3-8dc2-826203d4d2b2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a1f791d9-030a-441f-a4c5-0d359b469f54",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4770c3d4-99a9-405c-96b7-223c21a56d8f"
            }
          }
        ]
      },
      {
        "id": "dd24bd56-d5a2-45bf-825e-457d93b456bc",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "6a62fa88-829f-4cb3-844d-f6d35d44da6f",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 107,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 22
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 58.177570093457945,
      "responseMin": 31,
      "responseMax": 592,
      "responseSd": 82.14664492601156,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1662165864022,
      "completed": 1662165873253
    },
    "executions": [
      {
        "id": "96918216-7fc1-4c2b-a00d-2cc3599f9a62",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c8ec962b-abe2-4864-9bdb-a4b44eff079e",
          "httpRequestId": "b9c92c34-ea60-4b0f-b52f-a30cab3e343e"
        },
        "item": {
          "id": "96918216-7fc1-4c2b-a00d-2cc3599f9a62",
          "name": "did_json"
        },
        "response": {
          "id": "f8da505f-311d-4feb-9574-c96e341ecebb",
          "status": "OK",
          "code": 200,
          "responseTime": 417,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75795bc3-c5e8-4558-8b1c-ae8ee91e6c84",
        "cursor": {
          "ref": "7f137629-a69f-4cfe-82b5-fe73784a8d7a",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "97c4c769-550c-4840-ae3e-34b3e8dc8793"
        },
        "item": {
          "id": "75795bc3-c5e8-4558-8b1c-ae8ee91e6c84",
          "name": "did:invalid"
        },
        "response": {
          "id": "7327e3c9-fca1-4666-a4da-78b9f44f22f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75795bc3-c5e8-4558-8b1c-ae8ee91e6c84",
        "cursor": {
          "ref": "7f137629-a69f-4cfe-82b5-fe73784a8d7a",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "97c4c769-550c-4840-ae3e-34b3e8dc8793"
        },
        "item": {
          "id": "75795bc3-c5e8-4558-8b1c-ae8ee91e6c84",
          "name": "did:invalid"
        },
        "response": {
          "id": "7327e3c9-fca1-4666-a4da-78b9f44f22f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03f1114e-08ed-47b4-b990-51fcf656410a",
        "cursor": {
          "ref": "fe653956-6201-4c42-8cb2-06f3ab2d0e05",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e6cc2859-e7cb-4db2-b1cf-200ad218154e"
        },
        "item": {
          "id": "03f1114e-08ed-47b4-b990-51fcf656410a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c0415c06-0401-4ae2-b02a-b998241d16a3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 95,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ae7828-0304-47ac-967f-a79617c2b853",
        "cursor": {
          "ref": "8dc97abe-b7bf-480f-b75a-8442c5b864b0",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7e3f1d06-b0f2-43b4-affe-83b070e892c5"
        },
        "item": {
          "id": "32ae7828-0304-47ac-967f-a79617c2b853",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0658ca80-f00d-4add-a546-c422886cde0d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 33,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44439ff2-e7c3-426b-a6bc-91123659cec6",
        "cursor": {
          "ref": "5bdb3762-73f6-4c61-b52d-7ddaf22391b4",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5cef57cd-6d4e-4bc4-a4d7-5877de528cd7"
        },
        "item": {
          "id": "44439ff2-e7c3-426b-a6bc-91123659cec6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4da55781-3ef6-494a-bea2-e51591643c69",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5100b483-6fd7-4b64-a090-433974a4895b",
        "cursor": {
          "ref": "d0687c74-43dc-4a48-91cb-fe86368a73c2",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "95fbf063-165d-458f-abe1-c3920ef10095"
        },
        "item": {
          "id": "5100b483-6fd7-4b64-a090-433974a4895b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5cc8e073-a0b7-455e-9ffd-c2173bbc18c5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5100b483-6fd7-4b64-a090-433974a4895b",
        "cursor": {
          "ref": "d0687c74-43dc-4a48-91cb-fe86368a73c2",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "95fbf063-165d-458f-abe1-c3920ef10095"
        },
        "item": {
          "id": "5100b483-6fd7-4b64-a090-433974a4895b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5cc8e073-a0b7-455e-9ffd-c2173bbc18c5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d3f2f21-1218-42db-a75d-85867ca1af48",
        "cursor": {
          "ref": "0742dbdb-78b0-4d3a-8e9f-ce874dd68404",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a82a59cc-c1c1-4502-a33b-2e85b963947c"
        },
        "item": {
          "id": "8d3f2f21-1218-42db-a75d-85867ca1af48",
          "name": "identifiers"
        },
        "response": {
          "id": "45c29f32-2e24-4ab1-94f9-2b8613b86e02",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd4e10e-1d3e-4369-ba3f-bd4b7379e6ae",
        "cursor": {
          "ref": "7de42505-b040-49f9-a7f5-2fe61c3ca75a",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "06c650d8-a3f3-434d-b164-9b92e8a5da23"
        },
        "item": {
          "id": "efd4e10e-1d3e-4369-ba3f-bd4b7379e6ae",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a2af70d2-80ec-4f5b-9709-e4a417fd1381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd4e10e-1d3e-4369-ba3f-bd4b7379e6ae",
        "cursor": {
          "ref": "7de42505-b040-49f9-a7f5-2fe61c3ca75a",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "06c650d8-a3f3-434d-b164-9b92e8a5da23"
        },
        "item": {
          "id": "efd4e10e-1d3e-4369-ba3f-bd4b7379e6ae",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a2af70d2-80ec-4f5b-9709-e4a417fd1381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd4e10e-1d3e-4369-ba3f-bd4b7379e6ae",
        "cursor": {
          "ref": "7de42505-b040-49f9-a7f5-2fe61c3ca75a",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "06c650d8-a3f3-434d-b164-9b92e8a5da23"
        },
        "item": {
          "id": "efd4e10e-1d3e-4369-ba3f-bd4b7379e6ae",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a2af70d2-80ec-4f5b-9709-e4a417fd1381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "509d2b54-cf27-4d16-bc4f-3b5fac5a7283",
        "cursor": {
          "ref": "20b245d9-205d-4aef-a1d7-bd16f7808b9d",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6f2ff2dc-b5ab-4be2-a7e8-9edc491326e3"
        },
        "item": {
          "id": "509d2b54-cf27-4d16-bc4f-3b5fac5a7283",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "73aea512-fdd3-4d75-ab9a-2a3fc0034186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "509d2b54-cf27-4d16-bc4f-3b5fac5a7283",
        "cursor": {
          "ref": "20b245d9-205d-4aef-a1d7-bd16f7808b9d",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6f2ff2dc-b5ab-4be2-a7e8-9edc491326e3"
        },
        "item": {
          "id": "509d2b54-cf27-4d16-bc4f-3b5fac5a7283",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "73aea512-fdd3-4d75-ab9a-2a3fc0034186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23909d53-67d7-41f7-82d3-748fcdc3098f",
        "cursor": {
          "ref": "baa694e4-e823-4070-871d-578ab2673648",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0b440ae5-dc5f-4f3e-9bb1-c5cab785d6ec"
        },
        "item": {
          "id": "23909d53-67d7-41f7-82d3-748fcdc3098f",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "398db513-0432-4c56-88aa-0d50853c2318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23909d53-67d7-41f7-82d3-748fcdc3098f",
        "cursor": {
          "ref": "baa694e4-e823-4070-871d-578ab2673648",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0b440ae5-dc5f-4f3e-9bb1-c5cab785d6ec"
        },
        "item": {
          "id": "23909d53-67d7-41f7-82d3-748fcdc3098f",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "398db513-0432-4c56-88aa-0d50853c2318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e03b51b5-5f15-4bb4-b7a3-b72363d2a2ae",
        "cursor": {
          "ref": "e6efe7d8-8cb9-4648-9292-09cffb4a32bb",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6f3621c9-f236-43e8-8385-84cf0807d45a"
        },
        "item": {
          "id": "e03b51b5-5f15-4bb4-b7a3-b72363d2a2ae",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "03fe07f4-1f01-40f8-a451-2b0731bee668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e03b51b5-5f15-4bb4-b7a3-b72363d2a2ae",
        "cursor": {
          "ref": "e6efe7d8-8cb9-4648-9292-09cffb4a32bb",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6f3621c9-f236-43e8-8385-84cf0807d45a"
        },
        "item": {
          "id": "e03b51b5-5f15-4bb4-b7a3-b72363d2a2ae",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "03fe07f4-1f01-40f8-a451-2b0731bee668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1333307b-b228-412c-be3e-115f1637f980",
        "cursor": {
          "ref": "99f155f6-9575-42a1-836e-5620e939d323",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a0716b29-6ece-46bd-8119-584bbf4f8850"
        },
        "item": {
          "id": "1333307b-b228-412c-be3e-115f1637f980",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "515e9d68-06cb-4a9d-829d-989299d24966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1333307b-b228-412c-be3e-115f1637f980",
        "cursor": {
          "ref": "99f155f6-9575-42a1-836e-5620e939d323",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a0716b29-6ece-46bd-8119-584bbf4f8850"
        },
        "item": {
          "id": "1333307b-b228-412c-be3e-115f1637f980",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "515e9d68-06cb-4a9d-829d-989299d24966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c907052e-46bc-4b02-87b9-b6c882d52d69",
        "cursor": {
          "ref": "d58bcc18-645a-4ff9-a25c-e17e591c41cf",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "bf5df377-6df3-4593-ba71-754044fb3c43"
        },
        "item": {
          "id": "c907052e-46bc-4b02-87b9-b6c882d52d69",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f4530765-1b4f-4803-843c-3e693cc3e29c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c907052e-46bc-4b02-87b9-b6c882d52d69",
        "cursor": {
          "ref": "d58bcc18-645a-4ff9-a25c-e17e591c41cf",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "bf5df377-6df3-4593-ba71-754044fb3c43"
        },
        "item": {
          "id": "c907052e-46bc-4b02-87b9-b6c882d52d69",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f4530765-1b4f-4803-843c-3e693cc3e29c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0e4530-a871-4f1b-a347-bc0cd632290c",
        "cursor": {
          "ref": "4933ed7f-44fd-4115-b7b6-4aa2670924ea",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6921f4b9-5db8-4048-8fa1-a287c4ec34b6"
        },
        "item": {
          "id": "3d0e4530-a871-4f1b-a347-bc0cd632290c",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "1e5dad68-7fba-4211-a212-cc90575f4e52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0e4530-a871-4f1b-a347-bc0cd632290c",
        "cursor": {
          "ref": "4933ed7f-44fd-4115-b7b6-4aa2670924ea",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6921f4b9-5db8-4048-8fa1-a287c4ec34b6"
        },
        "item": {
          "id": "3d0e4530-a871-4f1b-a347-bc0cd632290c",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "1e5dad68-7fba-4211-a212-cc90575f4e52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d9f477f-1b1e-409c-bf3d-1dd803dbe67c",
        "cursor": {
          "ref": "5cec7f5d-e8ba-4e25-bb5e-7b3fd648e451",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8cabb150-67bf-481d-b2e8-13dac7077ae5"
        },
        "item": {
          "id": "7d9f477f-1b1e-409c-bf3d-1dd803dbe67c",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "f6b62966-ffca-4ce4-8573-0b183c4cdb8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d9f477f-1b1e-409c-bf3d-1dd803dbe67c",
        "cursor": {
          "ref": "5cec7f5d-e8ba-4e25-bb5e-7b3fd648e451",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8cabb150-67bf-481d-b2e8-13dac7077ae5"
        },
        "item": {
          "id": "7d9f477f-1b1e-409c-bf3d-1dd803dbe67c",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "f6b62966-ffca-4ce4-8573-0b183c4cdb8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a2dddf-19b8-4454-ba06-e9e0ac60e3c5",
        "cursor": {
          "ref": "8218dbd9-e18c-49eb-b170-81b673670e3b",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "45801509-1fc5-4164-ba2e-b5363641d8e8"
        },
        "item": {
          "id": "93a2dddf-19b8-4454-ba06-e9e0ac60e3c5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "81ef5e9c-9d6a-40f8-824c-aa5401ed7dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a2dddf-19b8-4454-ba06-e9e0ac60e3c5",
        "cursor": {
          "ref": "8218dbd9-e18c-49eb-b170-81b673670e3b",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "45801509-1fc5-4164-ba2e-b5363641d8e8"
        },
        "item": {
          "id": "93a2dddf-19b8-4454-ba06-e9e0ac60e3c5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "81ef5e9c-9d6a-40f8-824c-aa5401ed7dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d1a25a-3b4a-46f0-8df3-2c0541e7bf3a",
        "cursor": {
          "ref": "e447300b-e0b0-475d-b18d-de1ded864477",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6cd2f85a-9ae8-4d4c-9728-d034192cb344"
        },
        "item": {
          "id": "a8d1a25a-3b4a-46f0-8df3-2c0541e7bf3a",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "2e2d24ec-3a8c-49db-bb4d-c7fcf3781584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d1a25a-3b4a-46f0-8df3-2c0541e7bf3a",
        "cursor": {
          "ref": "e447300b-e0b0-475d-b18d-de1ded864477",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6cd2f85a-9ae8-4d4c-9728-d034192cb344"
        },
        "item": {
          "id": "a8d1a25a-3b4a-46f0-8df3-2c0541e7bf3a",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "2e2d24ec-3a8c-49db-bb4d-c7fcf3781584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e375a508-d77a-4d3d-8437-1f512553b0f1",
        "cursor": {
          "ref": "36205d2d-bdad-4b8c-89ec-59ce98579df2",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d0c24ae6-09de-4074-8afb-31937da79afa"
        },
        "item": {
          "id": "e375a508-d77a-4d3d-8437-1f512553b0f1",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "aa92e642-4440-46b2-8a98-bc4a243e8456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e375a508-d77a-4d3d-8437-1f512553b0f1",
        "cursor": {
          "ref": "36205d2d-bdad-4b8c-89ec-59ce98579df2",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d0c24ae6-09de-4074-8afb-31937da79afa"
        },
        "item": {
          "id": "e375a508-d77a-4d3d-8437-1f512553b0f1",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "aa92e642-4440-46b2-8a98-bc4a243e8456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d05f3bb-f7f2-43ae-8461-fca58f6e8121",
        "cursor": {
          "ref": "77619a1e-c8ab-437a-b14e-1da792526950",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1d560329-c4f8-41ba-be48-00c1c191d5a9"
        },
        "item": {
          "id": "7d05f3bb-f7f2-43ae-8461-fca58f6e8121",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "664458d4-058c-4698-9715-518f443a9910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d05f3bb-f7f2-43ae-8461-fca58f6e8121",
        "cursor": {
          "ref": "77619a1e-c8ab-437a-b14e-1da792526950",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1d560329-c4f8-41ba-be48-00c1c191d5a9"
        },
        "item": {
          "id": "7d05f3bb-f7f2-43ae-8461-fca58f6e8121",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "664458d4-058c-4698-9715-518f443a9910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d13a1d9e-6f07-4a21-9bc3-737bf7d764b7",
        "cursor": {
          "ref": "eca02687-df05-41a7-a3cb-0df7c153c2e8",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cb4d414b-d546-4bbe-a3b6-f6cb5ebc88de"
        },
        "item": {
          "id": "d13a1d9e-6f07-4a21-9bc3-737bf7d764b7",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f6ae245d-a1b4-4a44-91ee-ce41c38c66f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d13a1d9e-6f07-4a21-9bc3-737bf7d764b7",
        "cursor": {
          "ref": "eca02687-df05-41a7-a3cb-0df7c153c2e8",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cb4d414b-d546-4bbe-a3b6-f6cb5ebc88de"
        },
        "item": {
          "id": "d13a1d9e-6f07-4a21-9bc3-737bf7d764b7",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f6ae245d-a1b4-4a44-91ee-ce41c38c66f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72452e1a-a172-4cae-bdef-b4d786590a74",
        "cursor": {
          "ref": "7020d85c-1104-419d-af5e-3192d329d835",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9f748477-b8fb-4d35-9bbd-a3aca7380d5e"
        },
        "item": {
          "id": "72452e1a-a172-4cae-bdef-b4d786590a74",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "af90fd2f-80d7-40fc-b85a-cbd374742618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72452e1a-a172-4cae-bdef-b4d786590a74",
        "cursor": {
          "ref": "7020d85c-1104-419d-af5e-3192d329d835",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9f748477-b8fb-4d35-9bbd-a3aca7380d5e"
        },
        "item": {
          "id": "72452e1a-a172-4cae-bdef-b4d786590a74",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "af90fd2f-80d7-40fc-b85a-cbd374742618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7410961f-f6d5-4e68-a161-a0d8674fba41",
        "cursor": {
          "ref": "c2fe298b-7c78-4011-b921-0d63e2f74776",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a88c1657-b124-45e2-901e-21a4063165c1"
        },
        "item": {
          "id": "7410961f-f6d5-4e68-a161-a0d8674fba41",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "ce910edb-f913-4e5f-ae30-1135212899a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7410961f-f6d5-4e68-a161-a0d8674fba41",
        "cursor": {
          "ref": "c2fe298b-7c78-4011-b921-0d63e2f74776",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a88c1657-b124-45e2-901e-21a4063165c1"
        },
        "item": {
          "id": "7410961f-f6d5-4e68-a161-a0d8674fba41",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "ce910edb-f913-4e5f-ae30-1135212899a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c889adbb-713e-4b21-afc5-1bcde52c9a95",
        "cursor": {
          "ref": "98d02083-8736-4cc5-bbed-9d2fb5649942",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c2f2ab1f-6170-452b-b724-93fe68dcdd2a"
        },
        "item": {
          "id": "c889adbb-713e-4b21-afc5-1bcde52c9a95",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "30275c00-71d7-482a-aa19-4df4203673d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c889adbb-713e-4b21-afc5-1bcde52c9a95",
        "cursor": {
          "ref": "98d02083-8736-4cc5-bbed-9d2fb5649942",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c2f2ab1f-6170-452b-b724-93fe68dcdd2a"
        },
        "item": {
          "id": "c889adbb-713e-4b21-afc5-1bcde52c9a95",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "30275c00-71d7-482a-aa19-4df4203673d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00579187-ec2b-4c73-84ee-9a6699df7657",
        "cursor": {
          "ref": "1a27da90-5bc1-425e-9aab-fffdb14da25b",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "da52f160-2b74-4357-baa3-f161de55695b"
        },
        "item": {
          "id": "00579187-ec2b-4c73-84ee-9a6699df7657",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "88f52541-1a18-44f3-821f-bf14e25a5361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00579187-ec2b-4c73-84ee-9a6699df7657",
        "cursor": {
          "ref": "1a27da90-5bc1-425e-9aab-fffdb14da25b",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "da52f160-2b74-4357-baa3-f161de55695b"
        },
        "item": {
          "id": "00579187-ec2b-4c73-84ee-9a6699df7657",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "88f52541-1a18-44f3-821f-bf14e25a5361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5218787-da59-44aa-8ee9-4f8304849d29",
        "cursor": {
          "ref": "a6acdd5a-2bbb-4fdb-8b0e-099730c9947b",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9ccdf1d8-8485-4b45-8e9b-65ee3b7ba5ba"
        },
        "item": {
          "id": "f5218787-da59-44aa-8ee9-4f8304849d29",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "0d8cbeda-265f-49f4-a805-00ccb559061d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5218787-da59-44aa-8ee9-4f8304849d29",
        "cursor": {
          "ref": "a6acdd5a-2bbb-4fdb-8b0e-099730c9947b",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9ccdf1d8-8485-4b45-8e9b-65ee3b7ba5ba"
        },
        "item": {
          "id": "f5218787-da59-44aa-8ee9-4f8304849d29",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "0d8cbeda-265f-49f4-a805-00ccb559061d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b641f960-5c27-4d17-b504-3c3e55df05ac",
        "cursor": {
          "ref": "08808dca-f758-4cff-928c-eddd563de151",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e819d814-9f6b-40df-b7d8-c0aa473f7424"
        },
        "item": {
          "id": "b641f960-5c27-4d17-b504-3c3e55df05ac",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "fe75091e-fbe3-418e-bb1e-4b92a39cb528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b641f960-5c27-4d17-b504-3c3e55df05ac",
        "cursor": {
          "ref": "08808dca-f758-4cff-928c-eddd563de151",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e819d814-9f6b-40df-b7d8-c0aa473f7424"
        },
        "item": {
          "id": "b641f960-5c27-4d17-b504-3c3e55df05ac",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "fe75091e-fbe3-418e-bb1e-4b92a39cb528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725121ce-a1ec-49a5-a6d2-32877f98b86a",
        "cursor": {
          "ref": "5b6a4010-c6a7-46e8-99e6-073cf9aca1b0",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2762640d-3d5d-4ac4-97c3-eaedeb353410"
        },
        "item": {
          "id": "725121ce-a1ec-49a5-a6d2-32877f98b86a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4149a8e5-4eb1-47d5-b480-11480fd7d77c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725121ce-a1ec-49a5-a6d2-32877f98b86a",
        "cursor": {
          "ref": "5b6a4010-c6a7-46e8-99e6-073cf9aca1b0",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2762640d-3d5d-4ac4-97c3-eaedeb353410"
        },
        "item": {
          "id": "725121ce-a1ec-49a5-a6d2-32877f98b86a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4149a8e5-4eb1-47d5-b480-11480fd7d77c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edc0e7e3-2334-4b76-98a4-5382d2b68530",
        "cursor": {
          "ref": "4e7a44c4-48ad-4bc8-8b4f-ad84b52ff78e",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c27af722-e548-4bd5-b92a-7eba56908202"
        },
        "item": {
          "id": "edc0e7e3-2334-4b76-98a4-5382d2b68530",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "06d6016e-b34f-4248-8e54-10033cb5d53b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edc0e7e3-2334-4b76-98a4-5382d2b68530",
        "cursor": {
          "ref": "4e7a44c4-48ad-4bc8-8b4f-ad84b52ff78e",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c27af722-e548-4bd5-b92a-7eba56908202"
        },
        "item": {
          "id": "edc0e7e3-2334-4b76-98a4-5382d2b68530",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "06d6016e-b34f-4248-8e54-10033cb5d53b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7976ac80-9969-4212-85c7-319e936e8ec3",
        "cursor": {
          "ref": "36145e72-0da4-49c6-ab07-ad0831c7f86d",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0a9e954e-e9c2-441c-88d0-719566e1dcc5"
        },
        "item": {
          "id": "7976ac80-9969-4212-85c7-319e936e8ec3",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "29f94b27-5a17-4c0d-a7b7-176feddd93bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7976ac80-9969-4212-85c7-319e936e8ec3",
        "cursor": {
          "ref": "36145e72-0da4-49c6-ab07-ad0831c7f86d",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0a9e954e-e9c2-441c-88d0-719566e1dcc5"
        },
        "item": {
          "id": "7976ac80-9969-4212-85c7-319e936e8ec3",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "29f94b27-5a17-4c0d-a7b7-176feddd93bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f89b4f3-cedb-4cd8-9789-233de4b868b1",
        "cursor": {
          "ref": "f3006122-f42e-4b20-91c6-4dcdac6e2a66",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "32c0fc21-df7f-4f49-86e2-9d13d7543ef7"
        },
        "item": {
          "id": "6f89b4f3-cedb-4cd8-9789-233de4b868b1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "29aff0d5-96c5-4f7b-ae52-711e0f8cbc35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f89b4f3-cedb-4cd8-9789-233de4b868b1",
        "cursor": {
          "ref": "f3006122-f42e-4b20-91c6-4dcdac6e2a66",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "32c0fc21-df7f-4f49-86e2-9d13d7543ef7"
        },
        "item": {
          "id": "6f89b4f3-cedb-4cd8-9789-233de4b868b1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "29aff0d5-96c5-4f7b-ae52-711e0f8cbc35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39e402cc-a952-4dcd-86c7-6b4bd342fb65",
        "cursor": {
          "ref": "9aaca252-8b4b-49fb-a88e-0d0dffb12a82",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ca0da135-cb5b-4ebe-bccc-f378a8fa8776"
        },
        "item": {
          "id": "39e402cc-a952-4dcd-86c7-6b4bd342fb65",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "1bbdae00-85a7-47fa-a360-a726768c0234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39e402cc-a952-4dcd-86c7-6b4bd342fb65",
        "cursor": {
          "ref": "9aaca252-8b4b-49fb-a88e-0d0dffb12a82",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ca0da135-cb5b-4ebe-bccc-f378a8fa8776"
        },
        "item": {
          "id": "39e402cc-a952-4dcd-86c7-6b4bd342fb65",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "1bbdae00-85a7-47fa-a360-a726768c0234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118d7380-26a9-42c3-80ce-4b0296a7bc79",
        "cursor": {
          "ref": "54e67299-741e-406c-9fe6-88cceace77d5",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d7dc70ec-b939-4f53-a13b-1098764aec55"
        },
        "item": {
          "id": "118d7380-26a9-42c3-80ce-4b0296a7bc79",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c00b04c1-c1bb-4ce6-96d7-2000ba5d5f3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118d7380-26a9-42c3-80ce-4b0296a7bc79",
        "cursor": {
          "ref": "54e67299-741e-406c-9fe6-88cceace77d5",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d7dc70ec-b939-4f53-a13b-1098764aec55"
        },
        "item": {
          "id": "118d7380-26a9-42c3-80ce-4b0296a7bc79",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c00b04c1-c1bb-4ce6-96d7-2000ba5d5f3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e56c1e-08c6-436f-a581-6123e2fc7f98",
        "cursor": {
          "ref": "676820d9-732e-4ee0-8f24-afeaa22aaa19",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6b6fe6ac-3011-483e-bcf5-afa84d66d501"
        },
        "item": {
          "id": "d3e56c1e-08c6-436f-a581-6123e2fc7f98",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "79f764a1-f87e-45fa-9e42-5f635a52f029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e56c1e-08c6-436f-a581-6123e2fc7f98",
        "cursor": {
          "ref": "676820d9-732e-4ee0-8f24-afeaa22aaa19",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6b6fe6ac-3011-483e-bcf5-afa84d66d501"
        },
        "item": {
          "id": "d3e56c1e-08c6-436f-a581-6123e2fc7f98",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "79f764a1-f87e-45fa-9e42-5f635a52f029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7401ed3-5a36-406f-a001-1df0eb313446",
        "cursor": {
          "ref": "ecb3665a-39ac-421f-b36e-aaa493e59aa8",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c08a496a-0d7f-449e-ad6e-3d109746da08"
        },
        "item": {
          "id": "c7401ed3-5a36-406f-a001-1df0eb313446",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9c0d54cb-477b-449d-b3c5-9366b7cc9726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7401ed3-5a36-406f-a001-1df0eb313446",
        "cursor": {
          "ref": "ecb3665a-39ac-421f-b36e-aaa493e59aa8",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c08a496a-0d7f-449e-ad6e-3d109746da08"
        },
        "item": {
          "id": "c7401ed3-5a36-406f-a001-1df0eb313446",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9c0d54cb-477b-449d-b3c5-9366b7cc9726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e71361-a423-4974-bcb3-57ea123dc1aa",
        "cursor": {
          "ref": "09e7d5e5-aff7-48af-b2f2-1f023291378d",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6e51d900-359f-4397-acb8-98df3804db35"
        },
        "item": {
          "id": "16e71361-a423-4974-bcb3-57ea123dc1aa",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "892d4876-d7d4-4bcf-b854-022fedf89c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e71361-a423-4974-bcb3-57ea123dc1aa",
        "cursor": {
          "ref": "09e7d5e5-aff7-48af-b2f2-1f023291378d",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6e51d900-359f-4397-acb8-98df3804db35"
        },
        "item": {
          "id": "16e71361-a423-4974-bcb3-57ea123dc1aa",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "892d4876-d7d4-4bcf-b854-022fedf89c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eca24de-d487-42d5-b4df-2d34044c1519",
        "cursor": {
          "ref": "8345d008-dec1-4cf7-aaa3-0433b40e0c1c",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "40ed3362-fc7c-4ef8-9478-9449123a44eb"
        },
        "item": {
          "id": "1eca24de-d487-42d5-b4df-2d34044c1519",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "77580749-a914-4134-8ab8-319ee9c121ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 392
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eca24de-d487-42d5-b4df-2d34044c1519",
        "cursor": {
          "ref": "8345d008-dec1-4cf7-aaa3-0433b40e0c1c",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "40ed3362-fc7c-4ef8-9478-9449123a44eb"
        },
        "item": {
          "id": "1eca24de-d487-42d5-b4df-2d34044c1519",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "77580749-a914-4134-8ab8-319ee9c121ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 392
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8714491d-abca-4652-b5a3-c9b71f0572cf",
        "cursor": {
          "ref": "2721727b-b101-4747-b062-7e00f3647a6b",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a45be3ee-bb2c-4d78-b9f2-f44d01ab35ac"
        },
        "item": {
          "id": "8714491d-abca-4652-b5a3-c9b71f0572cf",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "33c13630-0ca1-492b-bf86-630015c11465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8714491d-abca-4652-b5a3-c9b71f0572cf",
        "cursor": {
          "ref": "2721727b-b101-4747-b062-7e00f3647a6b",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a45be3ee-bb2c-4d78-b9f2-f44d01ab35ac"
        },
        "item": {
          "id": "8714491d-abca-4652-b5a3-c9b71f0572cf",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "33c13630-0ca1-492b-bf86-630015c11465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0285e791-608c-4fca-84fb-bedfe20e9f25",
        "cursor": {
          "ref": "94c49b56-91d5-4fcf-b536-ff1140002b56",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "06730727-587a-41da-a04a-fdb18b39a1bf"
        },
        "item": {
          "id": "0285e791-608c-4fca-84fb-bedfe20e9f25",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "0a1af665-be87-4d60-b443-f29a2c61ccaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0285e791-608c-4fca-84fb-bedfe20e9f25",
        "cursor": {
          "ref": "94c49b56-91d5-4fcf-b536-ff1140002b56",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "06730727-587a-41da-a04a-fdb18b39a1bf"
        },
        "item": {
          "id": "0285e791-608c-4fca-84fb-bedfe20e9f25",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "0a1af665-be87-4d60-b443-f29a2c61ccaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25f5a01-1a36-4b16-b249-257ad730b7e3",
        "cursor": {
          "ref": "23d0d91a-cd17-419f-a01e-c4c3b86d0892",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8aa33580-e434-4d77-b2fc-a9ffc11c04d5"
        },
        "item": {
          "id": "b25f5a01-1a36-4b16-b249-257ad730b7e3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4275ccd8-e3b3-48fb-a7f7-cb72314bc8a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25f5a01-1a36-4b16-b249-257ad730b7e3",
        "cursor": {
          "ref": "23d0d91a-cd17-419f-a01e-c4c3b86d0892",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8aa33580-e434-4d77-b2fc-a9ffc11c04d5"
        },
        "item": {
          "id": "b25f5a01-1a36-4b16-b249-257ad730b7e3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4275ccd8-e3b3-48fb-a7f7-cb72314bc8a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29bb10de-eeb3-4480-b1d7-fe3a90aa8791",
        "cursor": {
          "ref": "969af651-7f78-4ee8-8263-c92810d5a7a7",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "08d98c32-c680-4797-97f6-e1650d25dc1c"
        },
        "item": {
          "id": "29bb10de-eeb3-4480-b1d7-fe3a90aa8791",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "79c50a5e-c941-4014-9e6f-a316e18388fb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29bb10de-eeb3-4480-b1d7-fe3a90aa8791",
        "cursor": {
          "ref": "969af651-7f78-4ee8-8263-c92810d5a7a7",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "08d98c32-c680-4797-97f6-e1650d25dc1c"
        },
        "item": {
          "id": "29bb10de-eeb3-4480-b1d7-fe3a90aa8791",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "79c50a5e-c941-4014-9e6f-a316e18388fb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6847dbf-0847-4b0a-9475-823f278c96ca",
        "cursor": {
          "ref": "c8909bc0-e5dc-4c36-9118-3259c4e514f1",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3b827175-f21d-40df-96c7-741fedb17371"
        },
        "item": {
          "id": "f6847dbf-0847-4b0a-9475-823f278c96ca",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8a524d12-0f35-4a69-8e36-63091bb92b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected undefined to equal 'did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV'",
              "stack": "AssertionError: expected undefined to equal 'did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "expected undefined to equal 'did:example:123'",
              "stack": "AssertionError: expected undefined to equal 'did:example:123'\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "expected undefined to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected undefined to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "f6847dbf-0847-4b0a-9475-823f278c96ca",
        "cursor": {
          "ref": "c8909bc0-e5dc-4c36-9118-3259c4e514f1",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3b827175-f21d-40df-96c7-741fedb17371"
        },
        "item": {
          "id": "f6847dbf-0847-4b0a-9475-823f278c96ca",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8a524d12-0f35-4a69-8e36-63091bb92b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected undefined to equal 'did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV'",
              "stack": "AssertionError: expected undefined to equal 'did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "expected undefined to equal 'did:example:123'",
              "stack": "AssertionError: expected undefined to equal 'did:example:123'\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "expected undefined to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected undefined to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:5:41)"
            }
          }
        ]
      },
      {
        "id": "c09ca996-401a-47c2-bfdf-7391ce52193a",
        "cursor": {
          "ref": "05789df1-1971-421e-8eb2-cb0ad7f1e2b9",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "775333bd-17a2-435d-9c1b-8503f8ad7055"
        },
        "item": {
          "id": "c09ca996-401a-47c2-bfdf-7391ce52193a",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "11528dff-6806-4816-892b-24f2032763aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "c09ca996-401a-47c2-bfdf-7391ce52193a",
        "cursor": {
          "ref": "05789df1-1971-421e-8eb2-cb0ad7f1e2b9",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "775333bd-17a2-435d-9c1b-8503f8ad7055"
        },
        "item": {
          "id": "c09ca996-401a-47c2-bfdf-7391ce52193a",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "11528dff-6806-4816-892b-24f2032763aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "8f2643fa-5b17-4737-9fc3-00cbd277d0ea",
        "cursor": {
          "ref": "ab3182a9-9602-40fa-94c3-a3a8dd345888",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8669ce75-6f02-4d65-bf94-f56bee7ed12a"
        },
        "item": {
          "id": "8f2643fa-5b17-4737-9fc3-00cbd277d0ea",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5a1f4231-6be6-4311-ad80-04bd556cb4e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "8f2643fa-5b17-4737-9fc3-00cbd277d0ea",
        "cursor": {
          "ref": "ab3182a9-9602-40fa-94c3-a3a8dd345888",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8669ce75-6f02-4d65-bf94-f56bee7ed12a"
        },
        "item": {
          "id": "8f2643fa-5b17-4737-9fc3-00cbd277d0ea",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5a1f4231-6be6-4311-ad80-04bd556cb4e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "6268fd72-1552-441d-a97d-88429b322519",
        "cursor": {
          "ref": "35dec2f1-41f5-412e-8f27-79bdab44ec12",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "15dcd48f-8798-43c7-a86b-9bcffc11ace7"
        },
        "item": {
          "id": "6268fd72-1552-441d-a97d-88429b322519",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "4a3da5af-1df9-4fcf-bbe4-0940fd969bea",
          "status": "Created",
          "code": 201,
          "responseTime": 592,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6268fd72-1552-441d-a97d-88429b322519",
        "cursor": {
          "ref": "35dec2f1-41f5-412e-8f27-79bdab44ec12",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "15dcd48f-8798-43c7-a86b-9bcffc11ace7"
        },
        "item": {
          "id": "6268fd72-1552-441d-a97d-88429b322519",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "4a3da5af-1df9-4fcf-bbe4-0940fd969bea",
          "status": "Created",
          "code": 201,
          "responseTime": 592,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "058e12f7-786d-4a85-a314-3db027eccf0a",
        "cursor": {
          "ref": "af5c7f7e-1fe5-4584-95a3-88431d8364e7",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "df2e786d-ca14-4010-a6ff-b4693e6a8d67"
        },
        "item": {
          "id": "058e12f7-786d-4a85-a314-3db027eccf0a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ea3fbac3-635b-431f-8295-f5c678737427",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 574
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "058e12f7-786d-4a85-a314-3db027eccf0a",
        "cursor": {
          "ref": "af5c7f7e-1fe5-4584-95a3-88431d8364e7",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "df2e786d-ca14-4010-a6ff-b4693e6a8d67"
        },
        "item": {
          "id": "058e12f7-786d-4a85-a314-3db027eccf0a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ea3fbac3-635b-431f-8295-f5c678737427",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 574
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d22d7363-edd9-42fe-b3f4-ae98b145e9b8",
        "cursor": {
          "ref": "06c2b69e-ab39-4ccb-afd1-3e1536105524",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "49b684d6-9e1b-4443-b42a-12a61b7e3197"
        },
        "item": {
          "id": "d22d7363-edd9-42fe-b3f4-ae98b145e9b8",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "993811d1-5149-4a56-ac84-77dd3f8a6684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "d22d7363-edd9-42fe-b3f4-ae98b145e9b8",
        "cursor": {
          "ref": "06c2b69e-ab39-4ccb-afd1-3e1536105524",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "49b684d6-9e1b-4443-b42a-12a61b7e3197"
        },
        "item": {
          "id": "d22d7363-edd9-42fe-b3f4-ae98b145e9b8",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "993811d1-5149-4a56-ac84-77dd3f8a6684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "f1184751-7a62-4f69-9c25-8654dd3aec80",
        "cursor": {
          "ref": "84ce1b62-b19d-469e-8047-0a9dcf3ec71b",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "cb13a69a-79ea-40c5-b426-033e6e986f85"
        },
        "item": {
          "id": "f1184751-7a62-4f69-9c25-8654dd3aec80",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "21236fc5-39a8-486b-8482-4dbc133936d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "f1184751-7a62-4f69-9c25-8654dd3aec80",
        "cursor": {
          "ref": "84ce1b62-b19d-469e-8047-0a9dcf3ec71b",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "cb13a69a-79ea-40c5-b426-033e6e986f85"
        },
        "item": {
          "id": "f1184751-7a62-4f69-9c25-8654dd3aec80",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "21236fc5-39a8-486b-8482-4dbc133936d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "355bfe33-728a-463c-9c3a-6c595f4529b7",
        "cursor": {
          "ref": "ec06ea97-ecb7-413d-9173-cb2d9cb70e97",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f7997f0b-67ff-41e9-bf0b-10a295f5857c"
        },
        "item": {
          "id": "355bfe33-728a-463c-9c3a-6c595f4529b7",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "a4e673cd-2562-4aa9-b6c2-98b2da4860a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "355bfe33-728a-463c-9c3a-6c595f4529b7",
        "cursor": {
          "ref": "ec06ea97-ecb7-413d-9173-cb2d9cb70e97",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f7997f0b-67ff-41e9-bf0b-10a295f5857c"
        },
        "item": {
          "id": "355bfe33-728a-463c-9c3a-6c595f4529b7",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "a4e673cd-2562-4aa9-b6c2-98b2da4860a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "9d563ef4-faea-438e-ac20-c4331b3e5fe5",
        "cursor": {
          "ref": "efad26cb-28cf-4c02-9bf6-43fa9454d3ef",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "56c4c1df-b5b2-4034-808e-c3d09bc3aa58"
        },
        "item": {
          "id": "9d563ef4-faea-438e-ac20-c4331b3e5fe5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "609ccda6-26fc-43b9-8cff-8d79477ff045",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d563ef4-faea-438e-ac20-c4331b3e5fe5",
        "cursor": {
          "ref": "efad26cb-28cf-4c02-9bf6-43fa9454d3ef",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "56c4c1df-b5b2-4034-808e-c3d09bc3aa58"
        },
        "item": {
          "id": "9d563ef4-faea-438e-ac20-c4331b3e5fe5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "609ccda6-26fc-43b9-8cff-8d79477ff045",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "243c9812-615e-4ea6-a809-18c2dad2677e",
        "cursor": {
          "ref": "3b1cd33d-774a-4852-9ac4-730549e03e28",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "13c39807-8df9-4d52-9d4b-b3a8332c206f"
        },
        "item": {
          "id": "243c9812-615e-4ea6-a809-18c2dad2677e",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "b5b2d14e-6cb3-4015-ba78-58f8a4091492",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da9e82b-37c1-498b-beb1-8b2a5efbc4ab",
        "cursor": {
          "ref": "4ad37ab5-74d4-4bd2-8551-0e599994584b",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f54e0f58-b3fa-41cb-84b9-2b459b78e1cc"
        },
        "item": {
          "id": "2da9e82b-37c1-498b-beb1-8b2a5efbc4ab",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6c9d3fed-e3cb-45a4-a76a-fd0d77825204",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da9e82b-37c1-498b-beb1-8b2a5efbc4ab",
        "cursor": {
          "ref": "4ad37ab5-74d4-4bd2-8551-0e599994584b",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f54e0f58-b3fa-41cb-84b9-2b459b78e1cc"
        },
        "item": {
          "id": "2da9e82b-37c1-498b-beb1-8b2a5efbc4ab",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6c9d3fed-e3cb-45a4-a76a-fd0d77825204",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e8cd1c-dea9-4dab-ac32-cc0b7c3a704b",
        "cursor": {
          "ref": "8c1d0cf7-e843-4274-96f4-a34843a765d2",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "28de5096-6882-441c-ad82-60bebf3a1941"
        },
        "item": {
          "id": "f2e8cd1c-dea9-4dab-ac32-cc0b7c3a704b",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "9d8b2cf0-f893-41aa-9c07-5978c9d12519",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5433e19c-8334-4460-bfdf-93cd033e5655",
        "cursor": {
          "ref": "02d9b5cc-5532-4b15-ba36-1bd7733e10ab",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "0face263-c9a6-44c1-bcb7-b129360cadf1"
        },
        "item": {
          "id": "5433e19c-8334-4460-bfdf-93cd033e5655",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bdc397cf-1e61-4612-be18-6f11ebb01f6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5433e19c-8334-4460-bfdf-93cd033e5655",
        "cursor": {
          "ref": "02d9b5cc-5532-4b15-ba36-1bd7733e10ab",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "0face263-c9a6-44c1-bcb7-b129360cadf1"
        },
        "item": {
          "id": "5433e19c-8334-4460-bfdf-93cd033e5655",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "bdc397cf-1e61-4612-be18-6f11ebb01f6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e5c88ba-87bf-4d63-b127-3fe2d6d688c0",
        "cursor": {
          "ref": "8127c514-0165-4645-b5a9-b5a207793684",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "058b661f-a82a-4e31-a301-ef3a77b5593c"
        },
        "item": {
          "id": "5e5c88ba-87bf-4d63-b127-3fe2d6d688c0",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "70544930-62d8-42cb-8fb7-6868ea93a34e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1a96c60-660a-4ecf-890d-b716b77f4c67",
        "cursor": {
          "ref": "0657e454-e358-4453-a086-ff274c30054b",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "dff14fad-ad9d-459a-898e-90101bc3cb10"
        },
        "item": {
          "id": "b1a96c60-660a-4ecf-890d-b716b77f4c67",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f2ee7ec5-9302-4505-9aa0-b8657bace8cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "b1a96c60-660a-4ecf-890d-b716b77f4c67",
        "cursor": {
          "ref": "0657e454-e358-4453-a086-ff274c30054b",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "dff14fad-ad9d-459a-898e-90101bc3cb10"
        },
        "item": {
          "id": "b1a96c60-660a-4ecf-890d-b716b77f4c67",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f2ee7ec5-9302-4505-9aa0-b8657bace8cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "9a3e9dff-03cd-4178-87ef-98e117ba3f94",
        "cursor": {
          "ref": "42fd339b-a95a-45c1-be6d-64cab1f11b17",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "60afd91e-4337-4e5a-b3b0-a239793a53ef"
        },
        "item": {
          "id": "9a3e9dff-03cd-4178-87ef-98e117ba3f94",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "380e57ae-6f09-4596-bfa1-eed3f18acc80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "ef004bd6-0a9f-4135-8019-b40abec17aec",
        "cursor": {
          "ref": "e4409485-422e-4118-9bf7-3ae6a9a22d51",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "afa10b26-12c6-40be-bbf3-70194bbcac03"
        },
        "item": {
          "id": "ef004bd6-0a9f-4135-8019-b40abec17aec",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d237848d-3ec3-4116-93ca-d9b3030e3fa9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef004bd6-0a9f-4135-8019-b40abec17aec",
        "cursor": {
          "ref": "e4409485-422e-4118-9bf7-3ae6a9a22d51",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "afa10b26-12c6-40be-bbf3-70194bbcac03"
        },
        "item": {
          "id": "ef004bd6-0a9f-4135-8019-b40abec17aec",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d237848d-3ec3-4116-93ca-d9b3030e3fa9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b3c821-4fa7-46dc-b4f3-c3836898487e",
        "cursor": {
          "ref": "87750158-d536-4597-8c2f-4f919a2680a6",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ad0fe417-5723-4ce9-ae89-b190c211f301"
        },
        "item": {
          "id": "d6b3c821-4fa7-46dc-b4f3-c3836898487e",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "6e8de759-4c01-4082-9295-77e20d0bf0f9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}