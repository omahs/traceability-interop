{
  "collection": {
    "info": {
      "_postman_id": "cc41d416-e316-4a7c-aa1b-7c6f06394282",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4c8eebea-7836-46d8-b9f9-ed455e1c9130",
        "name": "API Configuration",
        "item": [
          {
            "id": "9f478293-2d75-4929-a1b6-5e83d511d818",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c22c4688-12c4-458f-830e-93c376a8f0d2",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6b7cba6-96b9-4379-a965-eaee249927af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "89809f2e-0e20-4092-8128-8d8b3d7c009e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "c8bdd25d-570e-4eb8-8b51-143a7eebe315",
        "name": "Resolve Identifiers",
        "item": [
          {
            "id": "0fc3a967-79d7-403e-9d04-8a8d3c077265",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3483c1ac-1189-407d-afe9-522eeecb93cc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d77db177-3d3e-4ce9-96b3-0feba5bdd035",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df000c7b-f1cc-4375-8596-7d4335692e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "99bde174-5154-4d47-84e7-4e396671492f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03cba9d2-ed8b-43d6-94db-e37510fcd700",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62f2cbc4-7ba4-446c-91da-0e153aa6a694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c31c490-68ec-4866-8a95-09e310b5641b",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "986541ee-eaf4-462a-905d-58c9ab468e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d1633b5-7748-40b9-b880-8a8b79aa6e89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732b14f7-921c-416a-86e5-90bf36a84a92",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a0ca6d67-5813-4a68-8835-7f19f8dd426d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b0846249-bbd2-4f81-92ba-cdfb24efbb17",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cdca4823-1533-46a5-92b3-041099ee5b86",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "42d4e451-c7f2-447b-a26a-5449e7e14219",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7a868fc8-c67a-43d5-9b2c-3738df24833b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eb869cf0-d955-490b-9934-e53c870fe0f9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('resolve:dids', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}"
              ],
              "_lastExecutionId": "d503a8a9-9131-489b-9733-c4359b6b9d89"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a0b202ed-c705-46b1-ab41-e3c04b892799",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8e0065a0-4137-41d4-93fe-84d7e3f5cdb2"
            }
          }
        ]
      },
      {
        "id": "e667e45d-b445-4e5e-a488-2f88897c25eb",
        "name": "Issue Credential",
        "item": [
          {
            "id": "69fbbe69-a7c3-4458-83c1-094e2f07c9fd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "84af677a-59d8-4d58-b2ef-69ba5dd45b0b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c50e427c-796f-44fa-96e7-102ad5c2abb2",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4253cdc3-39a3-4662-9184-fc359f1bac8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f3a2ae2-0fe1-400f-82e4-e73070fccbb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9507af5-7b0a-4c85-bab5-26743edea275",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1356bc9b-3a3a-43d9-85c6-d631bde3c01a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dfda267-13f8-4ea6-9469-93d13ee9b489",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fac5ebf-4cc7-49fe-8ec1-034ca4957c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95ce5aa3-5c2c-4175-8f63-682be126b967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0468e710-1e5a-45c6-8e3a-97819f39b1e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f68ca99-7aed-4225-9c01-21de2dbcf545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42de056-50b9-46a9-bce7-bad7b3bc9f44",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c889ad-b69d-4a4b-9817-3a2dfefcaa90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5398ee4-5551-434a-a677-f3ff1d3baaf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcea8daa-30c2-4670-924e-18da34451ad5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbe60509-efe6-48da-bcd6-2d56480e815a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661fb0bd-8f9a-445d-8f9a-4a06f5f733d4",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49052baf-6e0d-46e9-bb80-b90e6c656a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "607509b7-0096-4f94-887e-4703d07513a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b46075-e86f-46b1-acba-6d0833ac82ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33af7abf-376a-47f4-b786-cc5657c60768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88af4aff-d338-41f0-a007-835eb4216d89",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c4219a-1771-45bd-bf3d-02ab095cadf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f34cd95a-eff0-48b3-8826-24c29dd53aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aafa3c30-b830-46aa-903b-af83663be5b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eee21690-78fd-4cf1-9cd2-4f8f039ceb7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48822741-78ef-42e2-8ff7-1dff3f2e1eda",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd88332c-44ec-4de0-9844-7ed197b05b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6a82bcf-f48c-4488-9e44-0dfc1b668b2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8f81c5-1151-4cd3-bd42-ef38937f7be0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cf1c582-c9e3-40bf-ad10-3e0c2b8bb110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57ab157d-c6fa-41f8-bf8c-095e83a9c5ac",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "048bceed-a378-4e6d-ae4c-11aed597a0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a7b219b-d6c6-43b5-8793-7c17aab9eaab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b2427f-56b6-433a-8162-57a065ade07c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0eddefdd-5081-4afc-9124-2fdd0cc53d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebea799a-9572-42b7-acce-f7bf56e1d293",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "737cb983-533d-4a70-90f9-a7acb7276e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "912cfcee-6b56-4aab-8594-fe1dfaf079cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e8aab4-1ae8-43c7-88bd-2c7ce887775e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57036611-f12b-4432-b6c3-9920dddb7056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a14f57-5b0d-4e92-bbbc-a8fb47a1b110",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b649c7-9ca3-46f0-85df-6cc9f407c10b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "927618ee-0211-463c-97e0-dc58637c0f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fffe65a-0133-4121-bca3-ad6ace730702",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09f909ba-e48e-4221-93b3-45825cf52aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc1a8b5-5a68-4e44-98ba-5e9f94506843",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18cd0b0-a0b2-4347-afa2-f5551ecca5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9dccc28-e33f-4607-b964-788c4364c6c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1a18fa9-8bbb-4114-8c80-a3b2b07bdd6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b03c79cd-427b-49eb-81b6-839cfe29a462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1aa4e3e-a140-4cdf-bdfa-1444d4413ee9",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31042ecc-1f82-4aae-9ea3-304ddfcfd5e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "839cc20a-3fc3-483e-95b9-40d5de4d3d2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccbb568e-dc94-4e40-ac54-118983785919",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "e42969de-557e-4b44-8dfd-5bf17e6eaa1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f27eba7d-cce5-47df-a624-1f85ef349c1e",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df09b040-f499-45e1-ba62-81ddc0133423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd006e66-39b8-401a-848b-394b84187cb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b5ab89-f5b4-42fb-86ff-9cdc69376dce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5adc7ee4-5ed9-4127-ab8a-0a9c0ca4641e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661fbc3e-7f2f-41a8-95d8-7b830aa8ad6f",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da40e368-f200-46f1-afa7-1b0915ea7520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99447b9f-43f9-4f1c-a85d-8fb8c3b78f7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d280cebc-493e-4995-862e-342ef952034c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a URI when present.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "30a76cf9-90d5-4555-a072-14d9ed7406a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df36e9bd-a935-45ee-ae4c-fffcf1e3f03f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "918831a2-67fa-4c92-91f0-63af583ec7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f3523d7-fd33-46be-a912-564d5be50e54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2f60ac-1e5d-4bfe-93ee-c616e15da074",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a20ff8a-b3e5-4208-a65d-3bd61694fd46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7383cb4-3587-4e2c-a820-3023f8c3619c",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4024987c-f0b1-4b0c-a09e-bb70ad0e6b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65595ea1-a3c1-4111-9062-3863c37e9898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf6d48b-caca-44c2-96ef-8317050ca4ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61b69b2a-3764-4b0a-acae-2b5f0c84d187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3beecb-4fc2-4692-99c0-ec9e68c4acd4",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "304feb62-f1ca-433f-8ce3-bbc3abc3d00f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8b9fe57-25f4-4218-ba37-f7f93d78bf4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d51b2c-9f72-4467-84b0-c95241f815d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9a3958b-bd0f-4224-9eea-6f33a65d739c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c39afc-e391-4959-9b68-849c42772253",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ff94dc-cb7a-4235-a5c9-ee3c23e1cb5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09fa75d0-eb99-4cdc-bc2b-85c75a3fa5df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1ef47f-b9b4-465a-b302-ccc6b6a6dac5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47552e30-f5ae-4416-8acf-ea250a900926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b80ef08c-e176-4c72-8542-5d7e03f82f6a",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd160f1-04bc-4a19-b1b8-708c1f62c915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f04fd2d-5e8c-4863-9d63-34240e9625a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "409bf3b0-9635-4da3-bfb9-dda27871e254",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff7f6114-fd5e-481a-b017-b3db0f1b490d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad5c974-cc32-4934-ba5c-8388e86c6b76",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9062a34b-2187-449f-91a5-edf3af3ef843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b73f36b8-a824-4c0a-9ea1-050ab7859f75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08dd7dd7-6cda-4838-a2d9-13862098a914",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1518788e-8b5c-467b-bc57-be99db2ff9d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "508eb8ef-2b40-40e4-8f2b-899b0bb541ae",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2b6018-be94-4f70-ad9a-cdacbbd701ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a89b658-eb69-4ba5-8ed9-59b545f01c24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef1cd0c-1656-4860-9ef5-8c0cb8e671f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7c11074-22dc-4ab5-aab1-4bbc3bbd2c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd27ba1-d177-4df5-b736-a1609a05f586",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "830eb418-9d72-4f39-98c3-aa28d6f9f12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd3ea41f-3da5-43cd-a6c6-d0dd3e83adc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f31dc8-3e22-4497-a08b-8e42bd18cee9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddcad535-9656-4374-b0ec-8974ae111f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ff36be-6c76-4222-86c3-e377760d3162",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0e6b37-c730-415a-8d5f-f1ba50579208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55fbb41e-7341-425d-a0bb-18571302e5a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c202a84-6696-46f3-973b-ca73febebf4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "838799cd-67f0-4e24-8c0f-d4e08e8db426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d8205d-04cd-4fa8-89ab-5ad5b6ba7002",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "556c3e56-9b51-4714-810c-d4541a0c2ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39eac6db-8c8c-4c19-b808-f7205e6121f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ac03ba-298b-4611-a010-094d33bfe158",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae6664cf-7a92-497a-940f-f19dd29ec0ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bad738d-6943-45f6-8cb2-2358b640e5f3",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "240f62a3-ecf2-4b21-a8e1-9187663311d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dfc2f8d-b397-4ff7-8e76-d0053680a145"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dac6d71-a3f6-41f5-b7e3-ee11d5d7c72f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00944957-e126-4d8e-8a6d-28dd431987d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe32cfce-d9d9-4bad-98c2-20b4228753ad",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9554034b-43ef-47f3-93ab-2cc645f13cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb0eba38-0eec-4028-b4bd-d2ef87f6732c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8466d631-92d9-4479-ab51-286e10ade35b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3de95c40-2f8a-4e32-8a9f-2ad0cfdfc60d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6153b1-deb3-4a82-bd41-665f6f915d29",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d6bf80-07c5-4df6-b8a5-4b575ef3e630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bf16812-b913-4a95-8741-09a82f9a5e50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d77609e5-45c1-4bda-a717-2f8c7637b40a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9560704-b285-4ea3-9beb-a0bc9822e5b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd307641-cda7-48ae-8c2f-830b1726cbe4",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c005d7-cd33-4321-aefa-5d72a15deed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53ef00c7-4429-4a41-b9cf-7da5d9c441a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5a38674-dc29-4fc6-b80f-ce71ec2ed153",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5db0b0e-defa-42f6-8c66-a5061f11df75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f6e149b-3480-4b5c-a017-082bea6efbdb",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e078ca7f-59ef-47c2-95be-5d9cda91567f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a8b00bc8-9ba4-4f76-9099-3f016b6e84d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aefdbdd-5f2a-4b19-b7b0-abca3d7891e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ce74687-8ffb-4929-86b1-8dedef1c987f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "489c6d12-9658-400e-92fd-dffbe59e2519",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0307130e-016f-4499-92dc-fcb3a149ea5c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e25e91-e45a-4f63-b3d9-4a6ac8f8350e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b55911c-e58a-451b-a675-c016fcf93c37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7af8da3-6ba2-432a-bc8f-88eb2282aeea",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "31315f5c-322c-46b9-a8af-cbe9d79d195c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa44063-315e-41ec-8f86-af066fe67da6",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef1c403-b653-470d-9d67-f82073af1c73",
                          "type": "text/javascript",
                          "exec": [
                            "// Missing scope tests should be skipped if the OAuth2 provider does",
                            "// not support requesting tokens with specific scopes.",
                            "const maybe = utils(pm).tokenHasScope(",
                            "    pm.variables.get('currentAccessToken'),",
                            "    'issue:credentials'",
                            ") ? pm.test : pm.test.skip;",
                            "",
                            "maybe(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "maybe(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5df72920-b6b6-4637-b340-745cf82e061f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d0254d-7c3c-4895-ba48-c3c6b4fc0d45",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "073513bd-ed7b-47dc-9462-d84a5bbf91f8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ed28da0-03cd-43b5-a47f-6fef2f457cd5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c88f6f6-a932-40d6-ae97-f57e73b03e64"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "74bcaf80-9e89-44bb-b0cb-c4e772107405",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "817aa50b-4e91-4deb-8e87-19d9d9faf939"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "11b7de14-30b9-4062-b753-523b09918d8c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "98e71b8b-7fa2-4e4c-9e7f-79929b145c2d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "51d3aad5-c42d-4659-ba19-99f6c7f31e56",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ca86762b-7eae-4660-b122-72ddbcdd501a"
                }
              }
            ]
          },
          {
            "id": "6e4df8e2-635e-4715-a6e7-5a6ae7c619a4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3471e724-daf5-4a29-8664-61a3fc3e6644",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be1f70e2-857f-404d-acb8-075e5c4136a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "26eb72d1-8eba-449a-8b1c-8c96b3dde4b4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "126fb729-cd8a-4bed-b922-27b270ebdde9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "7b7e7109-4b80-4080-a6f8-aa24ec360ecf"
                    }
                  }
                ]
              },
              {
                "id": "22089d3c-ba5f-456f-90f8-34fd590045c0",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "65d8b80a-321c-4d01-9405-cdb24c901ae3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f118d7cb-58de-4630-8df3-fa8ea115161f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4be609f-fd5c-4f33-9e6b-afe75332a918",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "ed649bba-8b74-4913-a72e-257d1f1db691"
                    }
                  }
                ]
              },
              {
                "id": "4097b7fe-18ac-4208-8220-5e99c37f30ac",
                "name": "credentials_issue:credential:alt.issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fcc65197-959b-4215-9841-535d808a51ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "39c18d31-39c7-410a-bed6-a450eb3831e0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ebe4d097-8be3-4b63-8c3b-c4ecea3c5fd9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element.",
                        "rawBody.credential.issuer = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "9f9b7f79-0006-4cf1-9b0c-9cd1c62cfb82"
                    }
                  }
                ]
              },
              {
                "id": "23bdd0db-d862-4bbf-a7cb-fc2fefbba331",
                "name": "credentials_issue:credential:alt.issuer.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9122c987-8693-4118-b509-3af2780c9472",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3379c812-45c7-4b50-8481-b631284345c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2827e79-08d0-4db9-8365-d9ce4ababe14",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with optional 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "fac1a4cf-d283-42a1-a12d-1b99ba7d26bd"
                    }
                  }
                ]
              },
              {
                "id": "f997dc8b-fbd1-4371-a3a3-2eba39249c6c",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac6da9bb-d44f-455a-aceb-6660e235c846",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "392393aa-d6f0-4073-ba30-888c87d524d7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "151be697-c521-4ab7-a661-06193a34b104",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "5532c22d-a69c-441c-9d24-c6a3b5abf39a"
                    }
                  }
                ]
              },
              {
                "id": "a737366d-b341-4e4e-87c2-dfa17bdbbac9",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "deebb2cd-0ae4-4062-94ba-12406c2e284a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e1d064bc-b3e9-4975-9815-5424c9ce917b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8710d7f1-6987-41a5-bcd7-ec41863af895",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "5af63796-801d-4758-9720-35d13c303433"
                    }
                  }
                ]
              },
              {
                "id": "48774943-fe31-46f6-a0bb-b405c44a079b",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce6bd99a-ed26-40e7-b5e1-06021c608991",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fb45be19-1019-4079-91dc-5345ae1dcaf8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d5a4a506-e887-4c13-a914-3e85aeeb9b19",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "aa9f38e9-89fb-4869-88f1-51dc22486d24"
                    }
                  }
                ]
              },
              {
                "id": "31d8eea2-e4f3-4dd5-83ee-30c8df3e5d28",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae19bdf8-8357-4b7e-a25d-ff2b8e248df3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ee0d696a-d9ab-4cf6-b148-0e4fe7f7adee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27c613ee-23a2-4844-bc70-4925660a6428",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "b5b5e92e-3aa0-4091-ba71-a6464d7f31b4"
                    }
                  }
                ]
              },
              {
                "id": "8b19b64f-ffa4-49fc-926e-5f01afee05ed",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4d8e5ae-36ed-44da-a329-9dbda5f1d2fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ff17be68-931b-40f4-b4a2-44a69fc3b105"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "10189872-50b7-4134-a8c9-554a23d6e7b7",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                      ],
                      "_lastExecutionId": "3e54ba7a-143a-4a7d-a576-539d7fe08b7e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "424de241-8f4c-4af3-ba1b-01270d04681d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b385b754-2312-4f41-a01a-591be31f0bd3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7c973ad8-53e2-4442-940e-f98c8c8c28fe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0c4045eb-afea-4ea8-b180-10aaf3a96c3c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3703e581-d8ff-491a-8766-39ce143dc983",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"2010-01-01T19:23:24Z\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('issue:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "if (!pm.variables.get('credential_issuer_id')) {",
                "    // TODO: This needs to be populated correctly",
                "    pm.variables.set('credential_issuer_id', 'temporary.placeholder')",
                "}",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "b5dd46b4-8255-4d04-a289-3a10472981a0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "95eeef3f-b3f5-401e-9670-94f557e97071",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fb120558-391f-4221-8737-695228a3fe73"
            }
          }
        ]
      },
      {
        "id": "92661ef3-0f06-4669-ad4e-5dcdf8051901",
        "name": "Credentials Status",
        "item": [
          {
            "id": "90a79f1b-1ba4-44d8-b13c-c5f47af3c491",
            "name": "Negative Testing",
            "item": [
              {
                "id": "39b46779-1ce1-4c69-bd3b-f0259d186544",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f7766aa6-a552-45e3-9167-8d6408dff699",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf24c3c-4c9a-4614-b1a9-0c938f29d335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f48a50b4-9c24-40de-ab2c-e6044f5ba4ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bbda29e-98d0-4f03-8368-cfcce36bd572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a41defd-0238-4d79-88b0-32b91b738ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e861845-df65-4810-be0b-6d9484e2a321",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c196127-a496-4817-ba78-cda31c8a1ae4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e649dfe-bc0c-463b-92d2-ed144b457687"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c0e984e-3ade-41d1-b0d7-1295bf2dfa22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b9cdc97-4028-4e78-8eb1-f4bd182289a3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5900182-8331-4431-a793-7104e0c92b83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf2a438a-acef-453e-936f-0d115e3b7260"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3e9d548-3c52-43d3-ba56-6cec55da4d3c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f4e4c49-42f2-4e15-8179-885b4df0c37a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ad9b52e-f876-4556-9985-81322624ecbe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('update:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "dc590881-5e08-4487-b1c2-32b8cb250898"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f8ecf412-2fc6-43b0-9a3c-8d3151b22ebf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "78ba4aea-5e65-45f0-9b76-3a93480af8ec"
            }
          }
        ]
      },
      {
        "id": "b8a55e1b-a028-4a5f-a589-1db266d33a31",
        "name": "Presentations",
        "item": [
          {
            "id": "4fcd0b05-fef5-44d1-a7f8-66a3be345bf5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "22c11074-1c88-4507-9121-3d8c71a55a4f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "814f57f5-b475-4788-9412-7d6ccac91d8e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de6d7d5-7c03-45dd-a0bd-6cb287d3e463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5577f23-4a58-4773-b6c2-b59f2acc3ebc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de918ab-dd0e-4694-a51d-4cf6319958a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "54d4a37a-352a-4af6-b0d3-21b905906b8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11aca7d6-cab0-4441-988d-78b2c29cb7b4",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de250ff7-a099-45c3-879a-88c268f29cbc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49dae60c-6335-47e6-93fd-8fe6e1e4a429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e77c9ad-546d-4497-ae1d-7660cbdb5fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cdf03fa7-6604-4e85-919c-9ae2ba16aa46"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "991beff3-1b3b-4140-8195-c7974508bb58",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00d595f6-e054-4c2f-93a7-f32ce2c9c58c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "acd6baba-c121-419c-8f2f-3ef9f1cbca3b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "342845e2-4bd1-42f1-963f-243d70cd5d14"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a50c49a3-2a91-43b0-a0a1-cd65e8c20942",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('submit:presentations', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "3fb8d674-9a8e-4f9f-80e9-3d7983cd1e01"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a741e688-8bc4-47d6-8d98-d0541211b4c3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1b62dca3-33a9-4a2b-ad40-1816ec1f03bf"
            }
          }
        ]
      },
      {
        "id": "8e8e40ed-896c-4f18-afaa-d962201036af",
        "name": "Credentials Verify",
        "item": [
          {
            "id": "36c60b58-7687-4bf9-9ee6-c035e6b85059",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a8ed21fd-ea1e-49d8-8d71-5f63e800d064",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5ff7efa2-2066-4847-a235-c33cafaa148e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c143c60-ac67-4013-a88f-ba9cbea5a2df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c37480a-6f99-4f81-bccb-88cb9c046ed1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5fcc510-3b05-484b-8e0f-ca78c0640c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3dd0f416-3ba9-4aab-af8d-fd303109b1ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d46187-fc4e-4312-88e6-4c3704899aff",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bba388d-611d-4f45-816e-34e6833a9f97",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "036fbffc-b321-417a-b5de-ee07954e5c73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbeca656-db75-4b3e-9f82-133d2dffae64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "51a3fa03-36ae-40c4-9d30-fc3a32489aac"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7fa62716-40e0-40d5-b518-b27fa2541cf7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4467e452-e2e3-495d-a5e6-febb7c9b1cce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "481808a4-2811-45d4-a388-04ba9be7338d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8c4cd80-4d19-4d54-b3cc-7ce84a21e56c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "72b583d2-c63f-40e1-b278-fff7ba94c7da",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('verify:credentials', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}",
                ""
              ],
              "_lastExecutionId": "11005352-6697-4671-8dd4-6f5ddfbcd5df"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf345aa2-32fc-4022-97b2-5375580d0447",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a87afc4f-1596-4c79-a7c5-507bab1fe0b3"
            }
          }
        ]
      },
      {
        "id": "7b8b2389-b7e5-4afe-91dc-9b9da6683d35",
        "name": "Presentations Prove",
        "item": [
          {
            "id": "e2df38a8-26df-414e-ae3d-5255354f4c98",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9097fa64-787e-4561-a57d-7455b5b6de69",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e3675a0b-d54b-4b7c-8271-77d93a4e6e5b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01dc333-ddf3-4f85-adee-257541c5482e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73ad2baa-068e-4ba2-9695-2f00dc3486c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3b8817-fab4-478c-9e4b-d2bc1fcf9470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2f6b6bb-782e-49e2-8908-713891247600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd38b3b-4ad5-4017-9647-689a953cba0e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "331ef19c-7b0d-4a29-af47-efec15786bb4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ed2d3c5-0b87-4ca5-96ce-27acd14ddda5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5bbd19f-c50a-41a1-9224-1102a238ee56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6351818-6ed6-4e4c-84ac-e768bdde0b65"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b32c5b8d-799f-497c-aa5e-4a72ee7b3243",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae51d9cb-cb50-4b8c-9460-8306f12bcdda"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "61ea9ce8-4daf-46f7-8256-2eb05dfe08d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2d21502-9386-4b6a-96e1-1a85d8a61b8a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9a8a9193-9120-4f41-8004-1b0c2dec0ced",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('prove:presentations', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}"
              ],
              "_lastExecutionId": "c76c3c38-5f0b-4f23-a947-81bffd195a6c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5a368452-02be-4d58-8b1b-e2f08b3fd920",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "42f3c5b9-2233-474e-8d8e-f8f97110e995"
            }
          }
        ]
      },
      {
        "id": "505b67bf-47f9-454c-8717-b1d3bd2e2f8e",
        "name": "Presentations Verify",
        "item": [
          {
            "id": "3fa43501-9e5e-4c65-b4a9-8784f7bdfd72",
            "name": "Negative Testing",
            "item": [
              {
                "id": "430e0f1c-a358-47ba-b055-8f5352fb22f9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "41a7af70-a9c7-4c4f-9e15-053183e0be8b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c79fdf84-fd5b-4bdb-ac1c-cb64f05f27fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00f5cef1-8ba1-4fcf-b31a-bab777a0898f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe90b14-af82-44fb-b9c6-10cdc7bb5ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6c36a94-d9b3-4381-8c17-0a77fb2f56b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9618cb-d6fd-4ff7-ac0f-5b8e8ffbf59b",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111e03a7-e854-4bed-b0d8-5c54a9dc42ff",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('', (err, res) => {",
                            "    pm.expect(err).to.be.null;",
                            "    pm.variables.set('currentAccessToken', res.json().access_token)",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5da3739a-f9a2-4827-933b-6f89df3d0bfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "872040a3-25d9-4517-8aa4-0c13f297c05d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e311b42-f036-4747-b0be-44a63b7bb89d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9edf14fc-f2c6-4365-b947-60045e99dff2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6077e74-cf2b-4f3f-8dfd-82ee190f00b0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6843e5ea-2d9d-449c-a88f-c3119e4ee45d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bcd472fe-51c9-494e-82ab-d3eedf2439c7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "54534de4-b8d2-4eab-934d-4275bbd1e4c9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "if (!pm.variables.get('currentAccessToken')) {",
                "    utils(pm).getAccessToken('verify:presentations', (err, res) => {",
                "        pm.expect(err).to.be.null;",
                "        pm.variables.set('currentAccessToken', res.json().access_token)",
                "    });",
                "}"
              ],
              "_lastExecutionId": "bf5959f4-431f-41ce-a356-92b1301f4412"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "92b59506-781f-493d-8e47-6def9017a867",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4932a9ce-52d9-4004-92f5-ca75c07fe92d"
            }
          }
        ]
      },
      {
        "id": "a7dc0887-a066-4f9b-ab40-a7dfc1d5acf7",
        "name": "Presentations Available",
        "item": [],
        "event": []
      },
      {
        "id": "6a0a38f0-f55b-4def-8205-fb0ad86ba24f",
        "name": "Presentations Submissions",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 53,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 416,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 53,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 61,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 53,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 106,
        "pending": 0,
        "failed": 86
      },
      "testScripts": {
        "total": 209,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 207,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 99.09836065573771,
      "responseMin": 33,
      "responseMax": 656,
      "responseSd": 115.28975683077587,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1660006249284,
      "completed": 1660006257990
    },
    "executions": [
      {
        "id": "c22c4688-12c4-458f-830e-93c376a8f0d2",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 53,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "adfcbdbf-4e6d-42ac-86a9-fd318471dec1",
          "httpRequestId": "76cd0877-7a86-4c99-ab44-c08f61dab6ca"
        },
        "item": {
          "id": "c22c4688-12c4-458f-830e-93c376a8f0d2",
          "name": "did_json"
        },
        "response": {
          "id": "eb04ccb6-7c86-4fdf-99b5-009dfe7a6b45",
          "status": "OK",
          "code": 200,
          "responseTime": 214,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d77db177-3d3e-4ce9-96b3-0feba5bdd035",
        "cursor": {
          "ref": "21f972c7-bedf-4979-bf2d-5ba71dd4138c",
          "length": 53,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b0265a62-d374-430a-836a-5116564509ea"
        },
        "item": {
          "id": "d77db177-3d3e-4ce9-96b3-0feba5bdd035",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "92cefe02-69ea-492e-ad06-21ee3a3a5517",
          "status": "OK",
          "code": 200,
          "responseTime": 182,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "d77db177-3d3e-4ce9-96b3-0feba5bdd035",
        "cursor": {
          "ref": "21f972c7-bedf-4979-bf2d-5ba71dd4138c",
          "length": 53,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b0265a62-d374-430a-836a-5116564509ea"
        },
        "item": {
          "id": "d77db177-3d3e-4ce9-96b3-0feba5bdd035",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "92cefe02-69ea-492e-ad06-21ee3a3a5517",
          "status": "OK",
          "code": 200,
          "responseTime": 182,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:2)"
            }
          }
        ]
      },
      {
        "id": "5c31c490-68ec-4866-8a95-09e310b5641b",
        "cursor": {
          "ref": "b6306344-ffc2-4b5c-afce-40d77eb234c7",
          "length": 53,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "77992a99-6912-4999-9754-61df3e175831"
        },
        "item": {
          "id": "5c31c490-68ec-4866-8a95-09e310b5641b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9d11760f-42cb-4117-aefd-4d1074c9643c",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "5c31c490-68ec-4866-8a95-09e310b5641b",
        "cursor": {
          "ref": "b6306344-ffc2-4b5c-afce-40d77eb234c7",
          "length": 53,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "77992a99-6912-4999-9754-61df3e175831"
        },
        "item": {
          "id": "5c31c490-68ec-4866-8a95-09e310b5641b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9d11760f-42cb-4117-aefd-4d1074c9643c",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "cdca4823-1533-46a5-92b3-041099ee5b86",
        "cursor": {
          "ref": "f796864b-1336-4e5b-a122-4b51db9565d3",
          "length": 53,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9f3c329f-6a23-4f39-b024-0f59d04957d2"
        },
        "item": {
          "id": "cdca4823-1533-46a5-92b3-041099ee5b86",
          "name": "identifiers"
        },
        "response": {
          "id": "954c787d-d389-4bef-bbea-9204879f2768",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c50e427c-796f-44fa-96e7-102ad5c2abb2",
        "cursor": {
          "ref": "ec3bd151-daac-4978-a240-9861a9edaab5",
          "length": 53,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "96b492cb-2088-4f49-a07f-db449bbb0f6c"
        },
        "item": {
          "id": "c50e427c-796f-44fa-96e7-102ad5c2abb2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "20ba117e-78d5-4f1f-9a31-75bfbad7f5d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 656,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "7dfda267-13f8-4ea6-9469-93d13ee9b489",
        "cursor": {
          "ref": "31efa82a-1d07-4321-932f-f5dc20929e29",
          "length": 53,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "333f9e35-4e1f-4b2c-a3a5-12cd0836bc7a"
        },
        "item": {
          "id": "7dfda267-13f8-4ea6-9469-93d13ee9b489",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5d3f9c8b-7bf4-4a0c-a742-d0f1c17cceff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "c42de056-50b9-46a9-bce7-bad7b3bc9f44",
        "cursor": {
          "ref": "f99cf363-22a5-406e-ad14-01bd32363b51",
          "length": 53,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c7028910-9c60-4a42-8fd1-e2fd4889051f"
        },
        "item": {
          "id": "c42de056-50b9-46a9-bce7-bad7b3bc9f44",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "a750388a-bdab-4dec-ad3b-ce332ba0ee61",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "661fb0bd-8f9a-445d-8f9a-4a06f5f733d4",
        "cursor": {
          "ref": "24637bbc-a1e0-4d7b-b39c-b5dbd131110f",
          "length": 53,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "33fc27be-f030-4c29-9cd3-dadd9e16ea50"
        },
        "item": {
          "id": "661fb0bd-8f9a-445d-8f9a-4a06f5f733d4",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "ab9bc066-17a0-4f54-9ece-91bbcbe6f546",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "88af4aff-d338-41f0-a007-835eb4216d89",
        "cursor": {
          "ref": "f284fd77-b1d7-4a37-badc-0dac0af71b32",
          "length": 53,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5f21e6a9-99c3-4b42-995f-1f9a015e80f0"
        },
        "item": {
          "id": "88af4aff-d338-41f0-a007-835eb4216d89",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "7d9d5f3e-c388-423b-b94f-7bd04263ee98",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "48822741-78ef-42e2-8ff7-1dff3f2e1eda",
        "cursor": {
          "ref": "0974158b-8eca-4adf-8c14-8d551048ecae",
          "length": 53,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1ae2a579-3695-417f-b889-ff35ac9913e2"
        },
        "item": {
          "id": "48822741-78ef-42e2-8ff7-1dff3f2e1eda",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "54d3080f-fc44-4710-809b-83b262c5973f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "57ab157d-c6fa-41f8-bf8c-095e83a9c5ac",
        "cursor": {
          "ref": "87978fc6-a020-4ce5-a248-745e1bfe9b22",
          "length": 53,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4dcd5a46-a601-4703-95df-8355d559b4d1"
        },
        "item": {
          "id": "57ab157d-c6fa-41f8-bf8c-095e83a9c5ac",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "109f7421-bd2a-404e-9c3d-4940037563d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "ebea799a-9572-42b7-acce-f7bf56e1d293",
        "cursor": {
          "ref": "1bcff9ab-91dd-495c-8d48-54fe2f7f3036",
          "length": 53,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5210838a-24a4-4125-b278-960afab6b43f"
        },
        "item": {
          "id": "ebea799a-9572-42b7-acce-f7bf56e1d293",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "635927fa-b4f2-4681-8e7a-d5a37bddc44d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "81a14f57-5b0d-4e92-bbbc-a8fb47a1b110",
        "cursor": {
          "ref": "28dcc9f1-e486-46cf-a728-03f667067916",
          "length": 53,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e249f4bf-583d-4b4b-ac14-51b433a4f084"
        },
        "item": {
          "id": "81a14f57-5b0d-4e92-bbbc-a8fb47a1b110",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "9b12e0cc-5640-4283-a0a9-f42c54f9c022",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "bbc1a8b5-5a68-4e44-98ba-5e9f94506843",
        "cursor": {
          "ref": "24cd2654-35b9-44f9-a979-feedd391d003",
          "length": 53,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a976130a-3af9-4b5c-8a73-827091f005b3"
        },
        "item": {
          "id": "bbc1a8b5-5a68-4e44-98ba-5e9f94506843",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "eef5c9f7-084f-4a94-bf99-a7e08d107ba1",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "c1aa4e3e-a140-4cdf-bdfa-1444d4413ee9",
        "cursor": {
          "ref": "ff7746f9-7ead-4670-a9af-2405f43a4b11",
          "length": 53,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7cb4838d-f86c-4d0b-a7b8-2e647d3cf46c"
        },
        "item": {
          "id": "c1aa4e3e-a140-4cdf-bdfa-1444d4413ee9",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "35338800-d43a-4b56-b926-a03e9ae60877",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "f27eba7d-cce5-47df-a624-1f85ef349c1e",
        "cursor": {
          "ref": "8bbaf0e6-1291-47a2-871b-d22e0bb32ad3",
          "length": 53,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "aa8ae6f0-531b-452c-a546-ae2f01883107"
        },
        "item": {
          "id": "f27eba7d-cce5-47df-a624-1f85ef349c1e",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "3b177860-8ffd-4803-b50e-d69b8b89d233",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "661fbc3e-7f2f-41a8-95d8-7b830aa8ad6f",
        "cursor": {
          "ref": "54c6144c-58fc-4046-8335-d902be8243ba",
          "length": 53,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "43a151b8-8a34-468a-87aa-eeb3a113a9b3"
        },
        "item": {
          "id": "661fbc3e-7f2f-41a8-95d8-7b830aa8ad6f",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "dc5240b8-5b91-419b-ab48-2c8cc65f4b12",
          "status": "Created",
          "code": 201,
          "responseTime": 68,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "df36e9bd-a935-45ee-ae4c-fffcf1e3f03f",
        "cursor": {
          "ref": "c417db2c-c50f-478c-a14f-8ea1ab38e7fe",
          "length": 53,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "1eb9a51e-4b35-47b7-bdd8-c53daed5a0da"
        },
        "item": {
          "id": "df36e9bd-a935-45ee-ae4c-fffcf1e3f03f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a3147d2d-fe7e-4879-b873-c540421a310c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "c7383cb4-3587-4e2c-a820-3023f8c3619c",
        "cursor": {
          "ref": "cda346eb-57b9-48ae-87ba-5ca24ee12cfc",
          "length": 53,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "923deb91-c0b3-4b3b-9fa7-7f083f933937"
        },
        "item": {
          "id": "c7383cb4-3587-4e2c-a820-3023f8c3619c",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "fc5c90a7-29c2-4132-844a-f1927ee17a28",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "fe3beecb-4fc2-4692-99c0-ec9e68c4acd4",
        "cursor": {
          "ref": "f6b35ecc-8463-407d-ab97-fbd13919e3e3",
          "length": 53,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "727a21f1-e321-4cae-b608-0439321cfbf9"
        },
        "item": {
          "id": "fe3beecb-4fc2-4692-99c0-ec9e68c4acd4",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5b95d8d3-0a60-477e-b7a7-e656f12da11b",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "b6c39afc-e391-4959-9b68-849c42772253",
        "cursor": {
          "ref": "bda2f26f-2b89-419d-badd-17547cbaf4d7",
          "length": 53,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "cac80582-2161-4432-bb23-c70ea0860530"
        },
        "item": {
          "id": "b6c39afc-e391-4959-9b68-849c42772253",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "fd189225-aeb0-4930-9f8c-5fda1fd08ed7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "b80ef08c-e176-4c72-8542-5d7e03f82f6a",
        "cursor": {
          "ref": "d54d2b0d-9907-4906-8815-124c9cffa43b",
          "length": 53,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3a833f4f-603a-4b4c-b8b9-19a9fc7dbffa"
        },
        "item": {
          "id": "b80ef08c-e176-4c72-8542-5d7e03f82f6a",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "90865cb5-6228-44e9-a1e2-6c902860d941",
          "status": "Created",
          "code": 201,
          "responseTime": 59,
          "responseSize": 624
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "7ad5c974-cc32-4934-ba5c-8388e86c6b76",
        "cursor": {
          "ref": "bdd47a4a-4c41-4694-a690-f3f798f88717",
          "length": 53,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f787f734-e933-4bf5-9f30-52cbbf87a84e"
        },
        "item": {
          "id": "7ad5c974-cc32-4934-ba5c-8388e86c6b76",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "efda3858-5600-47ed-8486-46398fed3027",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "508eb8ef-2b40-40e4-8f2b-899b0bb541ae",
        "cursor": {
          "ref": "40d15384-4c48-400b-93cb-949761b5e042",
          "length": 53,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a85743c5-50d2-41e6-b85d-b8a75eeab417"
        },
        "item": {
          "id": "508eb8ef-2b40-40e4-8f2b-899b0bb541ae",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1dd30a67-a95c-46b4-9c12-06a122f20939",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "1fd27ba1-d177-4df5-b736-a1609a05f586",
        "cursor": {
          "ref": "2b3e4dbc-9757-4b55-9de9-5a04aa9e3314",
          "length": 53,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9cc5e560-3480-4727-a815-0d6c1e127908"
        },
        "item": {
          "id": "1fd27ba1-d177-4df5-b736-a1609a05f586",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "ad6a0a92-a4de-4399-a1c2-5bf2d01740d1",
          "status": "Created",
          "code": 201,
          "responseTime": 70,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "25ff36be-6c76-4222-86c3-e377760d3162",
        "cursor": {
          "ref": "c9fb6e0c-8eec-4aab-8cbc-d64f76375e53",
          "length": 53,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ac1913d1-29e9-4760-a29d-201ab55d097c"
        },
        "item": {
          "id": "25ff36be-6c76-4222-86c3-e377760d3162",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "67fc01fb-ee95-4e53-819e-bd24cc1282d2",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "f5d8205d-04cd-4fa8-89ab-5ad5b6ba7002",
        "cursor": {
          "ref": "3731cfa9-f6e5-44c3-a1ac-2eff49ca1834",
          "length": 53,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "84fd9c91-b602-41b1-9457-5c81d7540e71"
        },
        "item": {
          "id": "f5d8205d-04cd-4fa8-89ab-5ad5b6ba7002",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "90ae366a-4dee-4135-b309-0235374e685a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "6bad738d-6943-45f6-8cb2-2358b640e5f3",
        "cursor": {
          "ref": "be6c186a-a084-4623-8e14-9b4f2e6b4124",
          "length": 53,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b40434da-032c-4b04-a7b5-af1683d53bfd"
        },
        "item": {
          "id": "6bad738d-6943-45f6-8cb2-2358b640e5f3",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "7bbf6a17-e6be-40e6-b7ad-a1938b7e6939",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "fe32cfce-d9d9-4bad-98c2-20b4228753ad",
        "cursor": {
          "ref": "49df60da-db67-4518-8251-21d45e770d4f",
          "length": 53,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5a7c010c-5400-41f1-9228-bc3e2d6177b9"
        },
        "item": {
          "id": "fe32cfce-d9d9-4bad-98c2-20b4228753ad",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "0625665c-fb5a-4f86-9175-ec24b9239bde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "fb6153b1-deb3-4a82-bd41-665f6f915d29",
        "cursor": {
          "ref": "d0c780dd-8f56-4738-92c1-9bbd14b72caf",
          "length": 53,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "889dcd52-c046-4254-9fd8-3624e49c7a69"
        },
        "item": {
          "id": "fb6153b1-deb3-4a82-bd41-665f6f915d29",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "812157b3-71d5-4395-ae09-4a91aa6486c8",
          "status": "Created",
          "code": 201,
          "responseTime": 66,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "bd307641-cda7-48ae-8c2f-830b1726cbe4",
        "cursor": {
          "ref": "55dcef9b-18e1-47bb-9516-2c918c6cf9c2",
          "length": 53,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3a008015-71cb-49da-8667-13115c7b74a6"
        },
        "item": {
          "id": "bd307641-cda7-48ae-8c2f-830b1726cbe4",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "614010ea-ad07-483e-b4e1-762efde0471b",
          "status": "Created",
          "code": 201,
          "responseTime": 63,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "1f6e149b-3480-4b5c-a017-082bea6efbdb",
        "cursor": {
          "ref": "e0865f13-4c80-461e-8e71-1df6e370939b",
          "length": 53,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "230a525c-73d4-40a6-a417-799af9307bda"
        },
        "item": {
          "id": "1f6e149b-3480-4b5c-a017-082bea6efbdb",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "35404853-dceb-44f2-afba-b9e31cb27f37",
          "status": "Created",
          "code": 201,
          "responseTime": 60,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "0307130e-016f-4499-92dc-fcb3a149ea5c",
        "cursor": {
          "ref": "4c2a30ce-652d-49a6-ac28-186b50bedfd6",
          "length": 53,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "8440d27f-77ba-4a61-9529-670dceddd877"
        },
        "item": {
          "id": "0307130e-016f-4499-92dc-fcb3a149ea5c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b5dd333d-0c0d-4ff8-9713-17de343feac4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "6fa44063-315e-41ec-8f86-af066fe67da6",
        "cursor": {
          "ref": "07fdbf0d-b2f7-4fd5-b575-272e1422e85f",
          "length": 53,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "81058aa6-d968-41a4-a185-f67a25ba75c9"
        },
        "item": {
          "id": "6fa44063-315e-41ec-8f86-af066fe67da6",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "47c2e275-579e-48fd-bd68-2cc67efd73fb",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "6fa44063-315e-41ec-8f86-af066fe67da6",
        "cursor": {
          "ref": "07fdbf0d-b2f7-4fd5-b575-272e1422e85f",
          "length": 53,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "81058aa6-d968-41a4-a185-f67a25ba75c9"
        },
        "item": {
          "id": "6fa44063-315e-41ec-8f86-af066fe67da6",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "47c2e275-579e-48fd-bd68-2cc67efd73fb",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": true
          },
          {
            "assertion": "response validates against schema",
            "skipped": true
          }
        ]
      },
      {
        "id": "3471e724-daf5-4a29-8664-61a3fc3e6644",
        "cursor": {
          "ref": "96d88597-e264-488d-aa62-215c300542a1",
          "length": 53,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "21d5e79b-c218-46b3-a85f-f02743d4a1ec"
        },
        "item": {
          "id": "3471e724-daf5-4a29-8664-61a3fc3e6644",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d2abd8a5-33d6-4965-b47c-0ffac9b26195",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "22089d3c-ba5f-456f-90f8-34fd590045c0",
        "cursor": {
          "ref": "287644bb-fcea-4ad6-a7c4-37f5432d6abd",
          "length": 53,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "24596197-f1de-4dc7-afe1-9562d5449550"
        },
        "item": {
          "id": "22089d3c-ba5f-456f-90f8-34fd590045c0",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "0e0838ef-b2f5-4106-b740-59654d09f2e1",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "4097b7fe-18ac-4208-8220-5e99c37f30ac",
        "cursor": {
          "ref": "28e3cbe2-7bcc-4c3c-9180-f9b6c573592d",
          "length": 53,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9bf91e4a-feaa-4e06-bc1d-678fcd279e3e"
        },
        "item": {
          "id": "4097b7fe-18ac-4208-8220-5e99c37f30ac",
          "name": "credentials_issue:credential:alt.issuer:object"
        },
        "response": {
          "id": "9b20c99c-783f-4c87-bd3e-94be2ac7ff59",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "23bdd0db-d862-4bbf-a7cb-fc2fefbba331",
        "cursor": {
          "ref": "054fb1c9-4f25-482a-80db-2cf9328d9ac8",
          "length": 53,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "27f2b6dc-b3c6-4bb5-856f-60d5a98a5792"
        },
        "item": {
          "id": "23bdd0db-d862-4bbf-a7cb-fc2fefbba331",
          "name": "credentials_issue:credential:alt.issuer.object:opt.id"
        },
        "response": {
          "id": "8b03778a-7caa-4941-a160-f73f5569dad9",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "f997dc8b-fbd1-4371-a3a3-2eba39249c6c",
        "cursor": {
          "ref": "fec84618-c95d-4904-a327-791fa00816fa",
          "length": 53,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6cdfe629-1f4f-4c4b-a297-dba900ee0065"
        },
        "item": {
          "id": "f997dc8b-fbd1-4371-a3a3-2eba39249c6c",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "f9092553-8899-46b1-992e-8761eb26c5e4",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "a737366d-b341-4e4e-87c2-dfa17bdbbac9",
        "cursor": {
          "ref": "be0d2a2b-1462-4cc9-9e86-83bb52a7f459",
          "length": 53,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "1607dff5-4c79-44cb-b62a-51eae096ebc8"
        },
        "item": {
          "id": "a737366d-b341-4e4e-87c2-dfa17bdbbac9",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "9a19f2d0-cfc7-4931-be1d-bb529489d330",
          "status": "Created",
          "code": 201,
          "responseTime": 87,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "48774943-fe31-46f6-a0bb-b405c44a079b",
        "cursor": {
          "ref": "7ae80c32-460d-44be-8fe5-2b2325af0356",
          "length": 53,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6fff22be-768a-443a-8468-9d2d083d3f18"
        },
        "item": {
          "id": "48774943-fe31-46f6-a0bb-b405c44a079b",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8283bc0f-00b0-4c12-837e-33ee10c07d18",
          "status": "Created",
          "code": 201,
          "responseTime": 58,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "31d8eea2-e4f3-4dd5-83ee-30c8df3e5d28",
        "cursor": {
          "ref": "15e49a68-8efa-4307-ab80-e450cfe5257d",
          "length": 53,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "153bbde6-d32a-4a49-afe8-982feaf0179e"
        },
        "item": {
          "id": "31d8eea2-e4f3-4dd5-83ee-30c8df3e5d28",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "03ed1fd4-17f1-48c9-adf9-18dbf3390aa9",
          "status": "Created",
          "code": 201,
          "responseTime": 57,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "8b19b64f-ffa4-49fc-926e-5f01afee05ed",
        "cursor": {
          "ref": "a6ebbed8-f850-424b-9155-02fbc2e0c8ac",
          "length": 53,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9ef56b98-1c0a-4fdf-9791-520b1d1390bc"
        },
        "item": {
          "id": "8b19b64f-ffa4-49fc-926e-5f01afee05ed",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "2651ecff-f170-468e-bece-205f0483456e",
          "status": "Created",
          "code": 201,
          "responseTime": 61,
          "responseSize": 619
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "f7766aa6-a552-45e3-9167-8d6408dff699",
        "cursor": {
          "ref": "6de4a08d-b9af-4c60-a7c2-39c342bf6d52",
          "length": 53,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "989d9b06-a0a3-4ca2-a5ed-5528d68a72b7"
        },
        "item": {
          "id": "f7766aa6-a552-45e3-9167-8d6408dff699",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7b4105f2-5cb4-4858-9a9e-52239685603c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2e861845-df65-4810-be0b-6d9484e2a321",
        "cursor": {
          "ref": "7d435004-51fe-428e-aa15-2d1c8e829c3c",
          "length": 53,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7dc43d25-87a9-410c-9b0f-40d1f515a6cd"
        },
        "item": {
          "id": "2e861845-df65-4810-be0b-6d9484e2a321",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "1af7dd66-791a-43c1-84cc-949b813b46d8",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 34,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "2e861845-df65-4810-be0b-6d9484e2a321",
        "cursor": {
          "ref": "7d435004-51fe-428e-aa15-2d1c8e829c3c",
          "length": 53,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7dc43d25-87a9-410c-9b0f-40d1f515a6cd"
        },
        "item": {
          "id": "2e861845-df65-4810-be0b-6d9484e2a321",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "1af7dd66-791a-43c1-84cc-949b813b46d8",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 34,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "814f57f5-b475-4788-9412-7d6ccac91d8e",
        "cursor": {
          "ref": "4ab9963e-f4ab-4833-9e05-7ce12505a1ab",
          "length": 53,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e259ee63-bb70-4647-ba87-dd6121f6bbd4"
        },
        "item": {
          "id": "814f57f5-b475-4788-9412-7d6ccac91d8e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fbf2fa64-8fe9-4ff7-b4e5-1508d42b7bb6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "11aca7d6-cab0-4441-988d-78b2c29cb7b4",
        "cursor": {
          "ref": "d9bfc08a-dcf6-4703-9f22-6b32291c1af4",
          "length": 53,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "039b970d-9eb9-48fd-ae32-ecf1e9338e69"
        },
        "item": {
          "id": "11aca7d6-cab0-4441-988d-78b2c29cb7b4",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "c32bc0b9-a6eb-4572-ba24-eb4573507ce7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "11aca7d6-cab0-4441-988d-78b2c29cb7b4",
        "cursor": {
          "ref": "d9bfc08a-dcf6-4703-9f22-6b32291c1af4",
          "length": 53,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "039b970d-9eb9-48fd-ae32-ecf1e9338e69"
        },
        "item": {
          "id": "11aca7d6-cab0-4441-988d-78b2c29cb7b4",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "c32bc0b9-a6eb-4572-ba24-eb4573507ce7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "5ff7efa2-2066-4847-a235-c33cafaa148e",
        "cursor": {
          "ref": "e3f15960-cdb6-4830-9d51-a92779a37a61",
          "length": 53,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b5997133-41eb-4716-9105-7234c0c82431"
        },
        "item": {
          "id": "5ff7efa2-2066-4847-a235-c33cafaa148e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d798eaf8-506b-41eb-be7a-4be2de90cbcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "39d46187-fc4e-4312-88e6-4c3704899aff",
        "cursor": {
          "ref": "ccf8c3bc-21bd-4b19-836b-eb2cd46f7888",
          "length": 53,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d648569b-9566-417e-a346-5a1c44a3e009"
        },
        "item": {
          "id": "39d46187-fc4e-4312-88e6-4c3704899aff",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "86fd3d51-a588-496d-a1df-b422e1ecb239",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "39d46187-fc4e-4312-88e6-4c3704899aff",
        "cursor": {
          "ref": "ccf8c3bc-21bd-4b19-836b-eb2cd46f7888",
          "length": 53,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d648569b-9566-417e-a346-5a1c44a3e009"
        },
        "item": {
          "id": "39d46187-fc4e-4312-88e6-4c3704899aff",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "86fd3d51-a588-496d-a1df-b422e1ecb239",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "e3675a0b-d54b-4b7c-8271-77d93a4e6e5b",
        "cursor": {
          "ref": "21434f63-770b-4544-9d25-49c8dc6ed0b4",
          "length": 53,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1392ae22-d373-45b8-a888-5f1267acad18"
        },
        "item": {
          "id": "e3675a0b-d54b-4b7c-8271-77d93a4e6e5b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c924c7b7-71aa-4153-8a5a-709eb0db3679",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "bfd38b3b-4ad5-4017-9647-689a953cba0e",
        "cursor": {
          "ref": "1aa2227b-d213-4a8d-afc8-18b6793ed38f",
          "length": 53,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6dbb0e7f-0c9f-427f-8eda-5c8a73ccdf44"
        },
        "item": {
          "id": "bfd38b3b-4ad5-4017-9647-689a953cba0e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "89170672-df44-41e9-94d5-0d00f75374ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "bfd38b3b-4ad5-4017-9647-689a953cba0e",
        "cursor": {
          "ref": "1aa2227b-d213-4a8d-afc8-18b6793ed38f",
          "length": 53,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6dbb0e7f-0c9f-427f-8eda-5c8a73ccdf44"
        },
        "item": {
          "id": "bfd38b3b-4ad5-4017-9647-689a953cba0e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "89170672-df44-41e9-94d5-0d00f75374ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "41a7af70-a9c7-4c4f-9e15-053183e0be8b",
        "cursor": {
          "ref": "5edd753d-51f6-4589-abcd-d23584634bc2",
          "length": 53,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2b5101ef-7a8a-4752-b02a-ff663297e30b"
        },
        "item": {
          "id": "41a7af70-a9c7-4c4f-9e15-053183e0be8b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "52a2b272-433b-4af3-8808-b977147aab61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "5e9618cb-d6fd-4ff7-ac0f-5b8e8ffbf59b",
        "cursor": {
          "ref": "ee0e8d35-7db3-433b-99ff-0a2d3337be46",
          "length": 53,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "024a869e-c761-489f-96b4-6fe0ab99a79f"
        },
        "item": {
          "id": "5e9618cb-d6fd-4ff7-ac0f-5b8e8ffbf59b",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "919becd5-7629-480e-a09c-15b88bb4a86a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "5e9618cb-d6fd-4ff7-ac0f-5b8e8ffbf59b",
        "cursor": {
          "ref": "ee0e8d35-7db3-433b-99ff-0a2d3337be46",
          "length": 53,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "024a869e-c761-489f-96b4-6fe0ab99a79f"
        },
        "item": {
          "id": "5e9618cb-d6fd-4ff7-ac0f-5b8e8ffbf59b",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "919becd5-7629-480e-a09c-15b88bb4a86a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      }
    ]
  }
}