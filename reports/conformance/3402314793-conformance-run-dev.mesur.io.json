{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "38977bfe-2127-4b22-b817-32111aa92a54",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b6cfc8d3-ede8-477b-b487-5928f8803043",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "138e0862-17a8-40cf-93a7-232affb42e1d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d9a78a6e-fb14-40e2-8a88-56bbd804b7f2"
                }
              }
            ]
          },
          {
            "id": "60b9cf22-dd38-467a-b46d-4b4214c6e7f1",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "214081b3-b365-48c6-b5e3-fa6814fa7dc7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7871dc00-45ae-4b7f-bba4-9e06c3cef940"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2125cb30-3000-491c-8b8d-f0fd321482bf",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d24ed3c8-6abe-45a7-bca5-ab93215a987c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "62515e72-9cf0-4c91-8865-93f862fbaf1f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d154c64b-ac9f-4b24-8bb2-6a8e1505aea7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0e89bc4e-d536-4d38-b506-b9bd5e1941a3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e24b6546-9a01-4b93-98f7-1e5bf640da0a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d384821f-919d-45ba-bf31-2ae9865fe6c2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "05e04f4d-5dad-43c7-b5b6-3d1861915523",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b66d08d8-8316-4b38-a0ad-ff8c9797fac0"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5d3931dc-ef45-4bc7-ba53-2ebc4620d37b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "85257ca9-af64-43c4-9c18-52ed16903b8a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b02a623c-13ef-4b59-b641-a2e790206255",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d3fa3667-9133-4f0f-8351-9dccf9f81dd9"
            }
          }
        ]
      },
      {
        "id": "b0b4cc72-decf-4b97-ac61-60f024512520",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "edb9b29e-b2f7-42b4-ba07-1c870013f8f5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5146de8d-0a7e-4281-b928-f018abe4a50d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8afe65b9-fd5f-4716-b9c3-6bc7ffb4de65",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "038beaaf-8d87-4328-a591-8ccfbc539867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7bd28508-bff9-442a-be83-de9307c6cec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0437d37d-174a-469d-81ee-f7b5177f4d5d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d1cc964-406a-4bb7-a44c-d39d6b20a220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "257c531d-1e22-4e1e-b242-2807ef741f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832d0a92-98dd-4fd7-87fe-8ca921d98e39",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c3a8616-a6b7-49a5-9d19-5a72ff5ab7a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4fc0f8b-25b7-46ac-93c6-d263c8059ec5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d6ae1e0e-4d67-410d-ada1-28b8d483d1c5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "15fc2cc0-6aba-4402-84e0-2be9b642e1b4",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a0fa3e-3c17-480b-b45c-358b8a6ab35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d5fee33-9290-4368-8a49-ec9d3e9aa3b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1009c5f-4163-4c93-b59e-a779b3ab6ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b07ba7a7-85dc-42a2-af1c-827b1b3448a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b6eec2-fbea-4014-a923-8767bcca4d79",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "310d955f-158c-4a89-b710-330f5bf40a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0fcc8067-24d3-428f-9ca0-a175aea209c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ec1fb5-751c-486d-a5b0-13bb74b57424",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "86b0af4f-8a50-447b-9126-03a69df1031c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "936297d1-9d1a-4315-9055-16865a6f5166",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d2028ac7-8bf2-49c7-aeea-b1d1b40fcb3d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0969bdae-e4a8-404b-85c5-65ae923a226b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "3bfa3124-be8c-46ec-939e-0c354f0105d8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d5e7dbb-c803-49fa-8eb8-04c54e8a3b35",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "4ec78c55-925e-4857-886e-f753aaccfe9d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "70eccdc5-d5ae-41a3-83c6-0801238d0bad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "33b2d470-448d-49d0-be80-3b36f10b8a1b"
            }
          }
        ]
      },
      {
        "id": "4aba06bf-0927-47b0-8ec6-d6c9dc580832",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9e40d7bb-79c6-4803-99a4-09cd3424ef93",
            "name": "Negative Testing",
            "item": [
              {
                "id": "952655ab-ea9d-4afc-9ef6-927ccbebecda",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "827257f8-6a2f-4abe-8d6a-7545f43eb616",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ba21b0-32e9-4020-a273-de09280079b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e78ebcef-8793-4bff-ad5b-34fb32e537b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7097bb9f-cff6-44e3-a63d-b2af5ce3c2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee5debb6-6f58-4860-a858-9232d5039a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb7607d-4279-4f3a-bf1f-771138989e27",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c000889-d7f8-4b41-a333-0771803508a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1fddcb4-82f2-4bcd-b0b3-ccb1cc433f50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf49f1e3-9283-43a6-a4d5-56547a189a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c473710-e37c-4ffa-913d-76548327551b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2ae6fe-1cff-4323-be9e-6c8e46422933",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "048f5f8d-5d74-4519-8bdb-872d4442f2f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f67d2457-b887-4fcb-96eb-ec8ec4e69e6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7afbaf11-613b-4724-8bb6-fc87466bbf41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89c78fc0-67c2-4bb9-8ae8-739275c77bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f230ef-912a-4b95-9d8b-a2fe37d34936",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f98b803-a7aa-4d0e-b26f-f2edeb2ffec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2584a043-ee0a-4fee-85aa-181d24eaa043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e17069a-5806-4b59-8ba3-cbbf13a7ea20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46cf140f-d55e-4e86-b3e2-e1f560a12b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e46362-a88a-4e74-9486-77a9ab22ac61",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3774cdd6-183d-489a-829c-2babc7e767ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "632bc0c2-942e-4921-afe2-4336f3aa0a47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe9c73f-a1ba-491a-8d40-d8331ef29749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e97ab038-5159-4b93-afd5-5c096998ba53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "017298b1-7b13-4777-99d2-b8a85d6c021c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0338831a-4c68-4783-8e09-d8876c314de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46da2846-2f47-47a5-b258-bd3c7f0d743d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c52ea042-1300-463e-8f57-4fb6acf53fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15f22dcf-feda-44f3-8d6d-baf3e35cafca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f13a4f0-bbd1-4e00-a448-a10379c89d9a",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0581ec-e521-4144-a28e-5a1b32ab6f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7bba1ac-7b7a-4326-becf-f2131bcb93f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f6dc895-9bbd-49a0-85c6-6042e175cdad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88a966f0-29d5-40b5-80b6-f7d1c6678511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56fbff0-01a6-48d6-8669-15458fe5f424",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d39156eb-5f05-4c15-a500-476c0fd9cc0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e227880d-e5eb-4bc5-aac1-3f002c432299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1593011c-9ce5-4d12-a2a2-5a47e42443b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dfe1a897-6c72-44d5-af7a-2be6eae449fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e29a20-3c76-4874-a474-9093284209a2",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4458ef0f-d8cd-46d1-b22f-e24bca0db485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc1e816b-b4a7-4f67-9630-40dc533d7ef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac4d33f-ec77-4c32-a9c6-9276226f95e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a8d72b6-41ca-4e15-91cf-da32b8a8bad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f9fd7f-7ded-49e5-baee-ca1c6f0fe9aa",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9038a1-6838-4a75-a099-27c281239195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2df3bf3a-2aba-43da-8498-ebff4fb9440c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b345be2-5c8b-4002-b63d-4ec4e892a102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db788ea2-54ac-4494-902c-ae481ccdec78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da7b49f2-4c6d-4a78-963b-79e496f1f683",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab0ee2a-6579-4006-918d-6acfc6286e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20e8021b-279f-4403-b1f6-121d57b48b46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd10bb3c-aedf-4344-9a87-4cdc66405c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c51b138d-7494-441c-8013-f4d9f424d033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "280e9f6d-de63-466a-a564-591f07d8780b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "757413f8-0fc5-404d-b2b2-b793a046719e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5b42950-1dcc-4ca7-b4c5-af7a690dd500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15c4f271-8294-4403-b73e-16df75be758d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "137a27fe-fcc4-4453-8b3f-e8f0a35736e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d09d77-d232-46b6-b6a7-5a0fffe9296d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6052e32c-0dd5-458d-ac07-57a46d77f444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98041124-41f1-41a9-a733-8b7c8e4ddb01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68e5480-32a9-4281-a31a-d58e32a827c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33b8cf41-818d-4ad4-a3f8-b19520e1a3ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "265fd6e7-475a-4ead-ac51-82688c85d397",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8918b2-ccc1-48d0-84b9-fa5e9b07cd76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d1cd3f0-8989-4333-9708-1959d1e36f27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84d0985e-febb-4c7c-b57e-0b87418a92b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "428fd2d4-e8fe-42da-9890-f4aa145a8e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ed1675-01f4-49a6-ac29-264fabb8d2fc",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac13a724-03d0-4930-83d1-dd6a8c827dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f258f9-1d77-448b-bb9b-9b7f894d43eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4958d56-7185-483a-b55b-27eb0945d591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12204927-c5dd-4432-ab26-ffa13a507bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786a5cfc-2a50-48a4-8d20-2f6969e99d3c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad61b3c-a73a-4ef1-b591-37dca956039f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83162d0a-4167-4141-80c9-4506da14bbfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "563e0195-dc1b-4272-a12b-2d5673848bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a034e45-da8f-4156-8b30-73338ed55228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9edd64eb-3b85-41f3-ae70-e19a605fad0d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4693bd-ca7e-4bcc-9911-abd2971292d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "153c478d-1f01-4adc-9754-997aab19eb76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5004340d-09be-470e-a64d-82fad0b572d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61bfc90d-cf63-47ad-bbdf-4c53a7d10424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8736fe78-060a-4d49-9853-0dead2356a90",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7888a3-66f9-4ff8-aaaa-3ffbb66a44b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f786d9d-6b31-4ac7-b08c-77f940faaae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17de1313-9946-4d9e-b791-7afdd455887f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d7859e-faad-4fa3-8934-6ee43627bb7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea20c0b5-3015-44c6-b191-20967ce52cbb",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e0a5144-723c-4461-b5a5-a71dd527088b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ed4753-dbb1-4b31-ba72-5aa9a7a5a526"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fab7745-7ed5-4b51-af76-42f6ac3a8a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fec72f68-5cef-4a09-b1dd-59bb4974518a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "571d2bfe-295e-4193-ba21-cad59500cdc0",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "613bbd8b-4f33-415c-b789-f406c21bb01c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f75a501-5236-445d-be64-991234428266"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8be9260-3c36-44c6-b407-629ec48ffc50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c72ea751-edcd-491a-8304-1ae42bd11347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d34aaa9-0d5a-4679-9b03-4ff6634ff95d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de895e59-5b8d-4f0e-b251-e25fd2f7d034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "217b0de6-5930-4459-85e5-1e59db0fa39e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa1474f-c025-47b2-9992-cdf8c9bdaf7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "33acb7ca-f942-4134-a549-7c66e6301dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b27b7a74-7fd5-4bb8-b32f-aa6e0c9b8437",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1343a2fd-3ae0-4755-9fd9-c06113595cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92b5cb1c-8c65-4957-b17d-48b15ce0fd39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "683acb23-0705-4802-88b3-576c49256d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "16b6fb7d-26c0-4a34-93ae-aa059e6f1e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb8534d-9f09-4f97-ae13-a481f5f391ab",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "544754fb-58d0-4900-9662-56c7b76bd083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d5139a8-5027-4844-b46e-e9693734e2c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e7ab47-8856-4ac8-881d-d118d0bbb0e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb7ae472-c3cc-4323-bc1d-a759a4b0ae2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843e8680-62af-4c2c-ada9-4d8b82183935",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c7b34a1-17bf-4acc-9eef-f1e4d54fc615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84eca87e-8b33-494c-9d61-c1eb36be38e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba6ed65-fe8f-4b1b-8408-2999b45bdaf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f23d3184-38be-4669-874d-9b0a4097d5a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096da32b-74c4-4105-ad7d-0f2e69a99b64",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cae7586-a4e0-42ce-8081-cf9bed3357c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41e39fd7-51be-4fde-ab9c-116ee93af097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53a8b29a-5cc5-42d9-95e2-570261d65f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "24af8565-ccf6-43e8-a213-f791607dff06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc7637a-e8dd-41fd-a58f-06a26a55feaf",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46e41ff-b5e7-400d-9768-35a71b13eb0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e3e9ea0-c1ea-48d4-a5f5-8cb0a7d221d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d451d31c-4b7e-46e3-8860-c08108821cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5d149be-326e-4e12-95f2-4589d61c6e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b14e9e-be94-497c-8698-f2ea31ff89a5",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2795242a-c253-4a0d-bcd0-a1321214af6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21186531-4ef8-4c9a-a32a-8c7726fcb19d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b14cce04-1f20-4d60-ba76-7c8b75bad791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd0d4ab1-051f-404b-8294-04ff90f62dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab4e0a6f-a31e-45bf-8821-59a00f6faa05",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f96079-b3b0-4559-bc0c-2c99bebb43f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6e94640-0e16-4a92-a323-5a2d00b2688f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d0a1b8-9023-41b0-b8df-64d35c5827ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb3a6183-662f-414b-8bd6-702f208c3944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80da5e9-9ac7-40e5-bed8-189fbcc5a54c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5dc36b-eca0-43f6-ba7b-c492e2de4020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e5d02a0-4564-4379-8752-449d4274e314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da92dab-e870-44ab-af66-706b58b12bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad79899e-d590-4339-82b7-dc7ad0e032a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae628ec-208a-4cc9-86e5-feb4bcdf87cf",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a5c9ea-2751-4470-a2d7-acc2293c4a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f62080ab-ebb7-4683-8807-51febe2f54f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ce6a9f7-9eb6-45cc-b347-6b2243c8533a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "72564835-504d-4bef-84e3-8a20edd32f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb2237d8-8b9f-40cf-b2dc-d45e10068906",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4df32ace-44f9-4084-8dd7-b8479560c32d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe8e09b5-ef7c-4845-a915-06fb6b74e34a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9de95ae-bc40-478d-94c9-f84202ebbed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd5d74b9-4b70-4798-ba16-e79e35ccb8c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea1fa6ab-1143-439f-aea8-e42768287bdc",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8903305f-994e-4a79-ab5c-a0877cb7b1a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "928488ed-87b4-4d6a-9db1-0d4c91793aee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a546714-f0e2-48fd-ab4a-3597ab59245d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7222c11-428d-4b9f-a7cc-24c1b9c69a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d9e404-9768-4120-a15f-b870ec7d5f14",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c3844e7-3358-4516-ab39-4c76668c9912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf715b0b-8cf6-4b09-9b51-a9b8c88d3e32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05605fb9-37f3-4cd1-8efa-8a15ba665688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e742ec1-e59b-4951-a398-ec172da7f46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e7b592-8ddc-407d-afc3-44ddfb77fd38",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0fc3db-3ae2-410f-a710-5d55dd061ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4295299c-70a8-46d0-9985-db45f771b4cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b717e3d-2754-4e56-90bb-c02a8b3c1cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d4f3ba6-152a-4e66-82ef-52049e9ad590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2337f76a-f011-46e6-9510-7e724773c5c1",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee300d6-c639-4156-a3d9-c942c4d70264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddc5c1f9-5a6b-424b-9610-6e3e83d13f22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46000efb-7397-400a-9bd9-32946a2027b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f1ca7c6b-29a1-4417-9fbc-5f10e05aebdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f52d80-6150-4d29-a865-dc11935e3bcc",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ed1999f-47b5-4ad8-8728-3b0aae865c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "367e4a07-0340-40c7-afce-791aa5b75e5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7841935-5894-4513-a397-9a6765d383f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "27cf5ae8-3fb1-4da7-9fb8-306184628e70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c794e5-672e-45c1-8a92-06ebbfa89d5e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b722ec2-32ff-4362-bbb8-ba127c83d4f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a1d0231-979a-4bb1-b79f-08161783dff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1eeffd9-3d31-4dde-8893-b2f7b29cf40a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "891e8507-e637-43ac-b65e-88e3c5a537cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a8c507-a60c-4574-9af8-f0f01383e868",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5312667c-8a57-40d7-a74d-548604f63b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb8b625a-7e62-4155-b0fd-147d9003f58f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc7d3c14-a1b6-4cc1-866e-9f669d21c039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b0cfb8e-53c8-4437-a2a1-c7cb92d15ca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a99aeb0-8e0c-417b-b78e-7b94f3fe5659",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af95b7b0-ca4b-483c-89aa-94194f57a63a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8c985fe-b422-4a11-8979-77284edf4607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7061ef88-3812-4495-b8eb-7726362c9ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd2295cb-04cb-4665-a7d3-ff576f809e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb2c771c-361d-4015-9abd-159a71cf79e5",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c8859f-81f0-4bd4-b6af-c1ecc83bd2e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5f88514-4553-4d5d-a4d9-43b694a8154e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c948268-ff42-4d39-a48d-bf68a7eaa2ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "44ea6fcf-1f5b-4852-b2d4-afe09c7083a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e962fe1-dfa8-4dfa-bc0d-a89cc75d46db",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3761c1a9-fb12-4b79-b49e-f834d43bb284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98e7d7f5-8867-4a89-ac4b-84617fbb36d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa254347-8819-4c3f-8b38-0d116c9e81b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "59e99be3-4e74-4fd4-9f32-7cd95567ec95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e20f38-7b52-4cda-b0c6-6df74fd36f3a",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c366f87-6fdc-43f1-9da4-9c1dd912a772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d762e85-dd6d-4ca9-8b1a-1fcf4ada3bd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dae9ec23-5b25-421f-b1c8-b39899baead9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "99bd1bb4-6a3d-4470-9bc3-daf0b8bd356e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "840a3343-1427-4bb5-acd8-a3c6501b6a04",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66259064-4b1b-48bb-9dd3-053bb741837a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f8cf57-a012-4ba7-ae2d-71e6dfcc960c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7425d9e-f17c-4b50-a5ca-91bb7986c47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6e27a76-dd4c-47a8-b070-e72b9a4e4f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7f4530-08a7-4235-a351-376150c02f27",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e07aabc-e880-44c8-bf55-6508e149177c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "314e2324-a090-4b58-9e98-9b2297d2cfe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352d8eb5-eb10-4c21-9c09-48fa3f3db735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cf57c0a-11b2-445e-bccb-379373ed3f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd161ea-c3a1-40a5-bf23-4e540c0baa17",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6db470f-d67e-44e4-ad47-dcd51741e582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5ea81a3-863b-496c-97fc-0f2bf0d57f21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2093f04-cd11-4b6b-bb6e-9b3d97b5d0ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "36ff52ae-03c9-4d18-b1ed-342388fd8435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94cb5238-f033-4910-b843-7f258c132082",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddf89193-6274-43b5-ae09-71fbd9680e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98a4403a-9381-4ca6-a354-486cc7b12dd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c890b1-95d7-41c2-bf42-f6ac331343a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4340625b-fcb4-4fcb-b236-861f77485058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd768dc-d20e-4a3a-b5d4-776b00b22ddc",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b119b042-36dc-4a9a-a389-a0a052daabf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bc2427b-6764-4b73-9e24-f34f0f04699a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b49f91-0977-42a0-a42c-141d3a27936a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1840b386-fb00-4d91-845e-8ecb94c06822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "257c8238-11db-417c-9a6f-298408e2e567",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f55443-46ec-4750-9611-d1e1e63c1599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "540d4447-09e2-471d-b1a7-5b832be9bb4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f89bc78-3e75-4225-82f5-dc362c7d90cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4bb03e2-8a65-4b2c-94f5-00e6e8b364e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f603cb-5b2f-43f4-ac73-14b0f89c0e84",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e7c1a6-f5cc-45c4-939d-76130d894b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4af56f32-a8bd-406c-9e7f-5e2c60b122ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce13aece-6420-4112-ab4a-e68039cd37f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c98569d-865d-4e7a-8a7a-db61d37fed43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a40b8c-e7eb-407e-b69a-c69868e84e74",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbf9be52-d329-4cc1-9d2a-f0048b9a69a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d65386f-8e76-4b3a-ba3c-02b9ad5464c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "646f1234-466d-4dcb-bd57-c8baa9d7a255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a0046b31-1f10-4b52-aea0-3bf551899fa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd4efc4-fb4b-42fb-a6bc-387a476dfccb",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1600273b-d6f1-4de8-bb97-6adfd6f477f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9aa23f4-1ad5-42e5-9f21-86a3c0a4a1b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8039be16-851b-4904-9a36-9dafad4756a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "21fbec62-baa8-4cab-977f-f9e8de84521f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8eaad8a-4e22-42f5-b879-714daf0f85ba",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ae9845-037b-4944-83fc-4aa16f6413ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17f904ec-0278-4032-a1fc-482dec3cbe66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a945f9d3-46d6-40d1-8491-e7ccc5f0f785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "06c97c94-5f60-44fd-bd66-f1e465d07228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c60df653-ce96-4dd6-ab85-c000640912b5",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b404cad0-d23a-4e12-ac64-b9384165c14f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcd9946e-a375-4dfa-9bdf-39ef379f3dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f764cf9-d409-4be2-bcda-8a349d30acb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4aedf24-59fc-4a99-9c54-d23b4b6c0ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e70bc11d-7017-4e7f-933a-cae90dfb2ef8",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0afa36-6d72-4157-a007-854aa28f4589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1122e189-732d-4302-9220-ae7bb9a634cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc961cd-73d0-47b3-86d1-68bf772c9e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9053f04-dcb7-470f-9a30-184545618bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed015668-7ec1-46ef-813a-d5fb87eea79e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8615e4bb-3fd4-4ec3-ac7b-2b7dbc2fa2a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fc108a8-5295-4331-967f-14c50abd2cf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c415dfe-239a-44f5-aba9-2501534c5050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "271bb64d-78e2-404b-aa4d-5d003871e4f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "417b6f82-0fa5-4b01-b959-87a5fa4b298d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d965a0-a63e-4ac4-aa92-892215240a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01e513ab-6514-404c-ba09-f961096e5990"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4fd9b30-12f9-489a-9b2e-eb22d3c35e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c91c4a89-f2eb-4082-91bf-df2b58df1d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a6e2962-0b58-43c7-8491-34bf2d21b7d0",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7209ee5-edc2-405f-a999-b0bedab7afef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfd3e6b9-7e29-4081-a88d-15f702e5921f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8791b12b-a9e2-4eff-a68f-b85f5199ff0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d74787a-5ea5-4376-946b-3fd772ef1ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3ffbe0-c486-4c0a-8807-0783d4d90989",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f32431-9d54-4c95-be04-dd3305416dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6397a088-5c8c-4e66-ab6c-a4318a07b0b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4df0a17-98bf-474d-b93a-8fc6b72be76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae8bbcc9-1524-4e8c-aa70-9a3cddd2982e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d04c532f-786e-48b3-bb2a-9529dfaa04ca",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27dbaa35-bed4-4a2f-a188-5d1d8f5ef401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "525f719f-befd-4b9e-80f1-0bccdbb47935"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063b5230-2122-4bb9-9462-b04080104ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "20464e3d-98ec-4577-b50c-45c8d9e72bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e662efb7-a509-487c-935e-4a68beda1296",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd0845d-b550-4790-a339-764bab649d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7b9540d-5f6e-4cf4-8e69-d655e9edc12d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27881df6-c1c1-4991-827d-c27c3dd4bf22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b924c494-6fc8-4ef4-8a83-fdadbabfe498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d60678-47ff-4f54-9964-45740d655b3f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f11405-325f-4adc-8985-95ab50796ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9eed771-17b2-4e22-ac50-1b7afe779060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78be7ad1-1631-487e-8091-b34369d6d25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1659d418-b9cd-40c1-97d4-bdf36c9c8d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f417541-21f8-48dc-8c43-34843e09ef89",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa777d3-8b80-4b81-8bda-2b0893aed743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c017c4e-3398-4c70-b54f-9ff21d917da0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24dc3af5-92cb-469c-b495-d083857dcb2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcffb8bc-556b-41bd-926c-a23fe3253b42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7037f15e-ebc0-40c0-ab56-7f743d19b084",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce104b3-8975-415d-affc-538c3c2dfc48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42b8a4cb-d824-4b55-988c-c04bd077c5bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f2b1ed6-638a-4c4f-a75f-70a2a0444f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "62973d3b-c3aa-4f46-9f3b-b579f2f5aa84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3a43d7-3249-4433-be0c-8164ac63e82a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2cf7e7-1c16-47cc-b42d-9789414f032e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b9bd5f3-9e1d-4525-9c60-ccb22d110ebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d16499-1cc0-4f06-9c89-962ebf926be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0ba05d7-7efd-402d-88b0-7e33f8b1c4da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70df75fd-d06a-4d7e-bdac-92b01620f24e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9064912b-51e6-491e-834e-4802eec9a144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68d6f0cd-ba04-4ec1-a477-e689857f32b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ecc71de-7fa8-4348-a1d0-19abeb50c3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "68335d65-cf78-464f-a931-f86373a6a592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fca3641-cc86-4f9e-874d-2af0ed78883a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23fb5860-4351-4252-acfe-fa59f5103337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a78d6581-1f55-4c6e-bd41-27c3dfd2dac2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f463df9d-0023-4089-ae34-992eeb97003a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebf99201-3a1c-42e0-844c-16fe3e91d733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab903a23-59ff-4c73-8483-df4f642e0872",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d11d4e12-e333-4537-8ff7-8a6d5228dd5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3c5a21b-79f3-45d4-bc7e-b4bed3e56ff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a77c530-fcb2-46d5-bb72-f802864df327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b6b10f81-e87a-4237-9ea3-d4192973869e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ab3de2-5c96-4576-8edf-7c46fd5e33fc",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cac598e-b576-4d9c-b33b-3d876464fe8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ead57b07-8b8e-4043-8ce2-ca137324de26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a9c142-8361-4086-b812-4a4f630eb0f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc7c3ec4-ae35-4fbf-b41b-086f3d589bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8680596-4092-4d67-9d41-0c0ca14e6276",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c000fb0-6971-4b46-a422-0d61c83b780b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afc32b74-ce60-4eb7-aa40-40b3c1904e07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10584c65-5532-47c7-b2fa-b3d34f2b4547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9094f4bf-abd1-4fda-ab69-28bd86641b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b35c8f-a8a5-4ab8-8daa-b58d480e0e7c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e6e4507-1c7b-4e53-a33c-d448c0107496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e36a4ec-bd30-4038-82a9-531d6a065dae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ae462a-4fe0-4851-803b-e639007dbbb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef8333ca-7af9-4357-ac77-e3c6887f12c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e39414a-c48d-4e07-8022-f369cfd5f0cc",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8caeeb81-316f-4fc2-8d45-46976b93259b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d11bfddd-ef08-457e-b31b-41896bf9d30f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45583f0e-681a-4fce-840f-f9e43ae2b6c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f00cb16f-231a-40bc-82dd-9764d0618de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b074b640-8321-4cb6-834a-91b0c10a9e35",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ff9bcc-30bf-482e-a0e7-37be6c2ec1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b259830-2294-4d56-9ba2-57411281bb47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748540ab-be9c-4197-a99c-941306d06767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "37e9712d-5fea-482f-b06d-00efd1d3bbfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9893c8a6-7788-484e-8771-97b03732c568",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99150e0-8c4a-4ac4-b070-da347eafc735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eea803d3-52bb-4268-8fde-eda334197cc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60eda690-6230-4446-b023-c14d8b4edf95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "82f95462-35af-412f-8610-c58281cc9f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c11fe1d-6775-4b1a-90a8-00bc61b2e770",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ba1f02-ed2b-44fe-8018-dc6d7d6cd70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc112b3c-a3ec-4267-9167-abab05e904f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "437f0f83-17c4-4a85-901e-0155e416e9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d9b2061d-dcb3-4c7f-a0c7-968797de59f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e911d8-b314-4173-85f5-36e1ed6647c4",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea637f1c-c642-4221-908e-a77a86cb9a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "462e1a79-9304-457e-9f2a-bce2dcf216ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05303165-e18f-4dbd-bd69-d51834028e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5c80f19-a6c3-4301-a501-898538ae1ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c6bc7e1-7b33-4282-a973-0c9d0dd983e1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ffc35b-3055-40b4-aaeb-b26f2c0fa6b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44546bc0-ab79-48aa-920a-a99ae834619b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3537a34-2f40-4f6f-8f31-b394f50faa00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b7d45fc-8394-4aca-ace7-eeee6059f7f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c38ce920-bbcd-4add-aef2-cfce65316e09",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c315c34-9d18-460b-a1e3-15374004fe9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99358c9b-5616-4eb6-ae8c-1156b2f9ed03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d76faa-a006-4f83-9001-b935e818c542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0995df94-5c15-405a-b071-14deb8b398ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa2009a7-9bfe-4ac9-90a2-b69cceccf52b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca5219cb-0576-4cea-9f5b-edf9b591e1e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47469edf-40bb-4aa4-8a62-604dd436f476"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26bce05-856c-4c72-abe5-0d87e24fbdc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d65abbc-c02a-4a09-9711-e34a9c603744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c6fa50e-88c6-4e23-aaa9-3b3499d5d876",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa65829-9f3e-4d9e-9e28-b4d8adc566a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efb1c16b-928a-4d27-8837-96fdd61d0859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aff26da-f013-4c99-970c-a09e4515a975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e3f8712-224d-4771-b18c-869e83d8a969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c544a4-85a8-4a3c-bbc8-331897949c7d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612ff3aa-a075-420c-984b-52680b3d1e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f8103d9-570f-49b1-85b9-e58cf2510bc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db084b7-a997-4136-a0c6-ffed319efa29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8c845cb0-7ed8-465f-a368-58c20e4b97bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f725376-f41e-4bf3-8aad-22cce357b54c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "969f3fdd-1436-495c-9332-fac33a3074c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9e8b075-b25d-452c-ba2e-4e1b92d9e127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d621264a-754e-4e0d-87be-c844fa563ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f00b02a-672f-4d86-9b8a-b5e6857b1054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "457f1ace-52d8-4216-97b4-c9f5b8b2e560",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "865e3438-7faa-4640-a2ab-944b41128402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cdb28aa-0d6a-4ae7-a5bf-893b98eabaf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3727fc35-fd18-4bfd-a57a-9793c9b8e189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e840f00-b4bd-49cc-b537-232d31809b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c7fafe-663c-45f3-8b98-523edb8c7713",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e5532e-6019-4362-b98c-7828ba5c3f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63ac5361-34af-40e6-9325-bdce316b7be0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4d624e-55c8-4958-a89a-5d4d3723d0a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4daafb87-2838-43c3-96f8-c62a8331274c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc57738d-c665-4dfd-b916-ea77ee606c7d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e155ee-bf97-44d5-843f-e55a1bfcaa87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a15f6680-ce8e-44c7-8f5e-3e6b80311ded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afae6072-5dc4-4ee1-b367-75affc0e705c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "291c9855-26c4-4a4c-a676-99fdbcfdb952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b4e08d-cd83-4929-96af-a98876e7b868",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c76a4f6e-ec8e-40b0-a212-f34624caa4f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8285b356-b209-4ebc-9145-d3de48a7bd44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aab4f778-900a-4953-8b83-55582a33e1aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6dfbd45f-3fd1-4a9c-86a9-3b5db067c0dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f427e0-f978-471d-a695-4408a9a666b7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7ce28a-3114-4df2-86f6-9d5b371c7db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f094c345-3b82-450a-903e-98729328b194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ecde881-3ef6-4f20-83f0-97453fca43a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b18b8aa-ecae-40a1-872e-ad210d7d8da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0693c740-fe82-4751-84d1-ec514f912b6d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56759260-965d-41b6-8bc8-c77359efcc7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc1e9ae1-b3c6-4e35-9746-6da825b3f2ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa47f4f-1c62-40ff-b447-1a58fad6646e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "31a90112-4938-4b3e-a134-44ab8cf158a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9195b522-6c94-4241-a74b-0988387be607",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dddc7db-ea9a-4b84-b997-695bbe738d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2da50f6-f619-4e5f-a8d4-19055124f820"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f7451e-b2f1-40b9-a8fc-8af6e73e0e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "092141a9-6a3f-46e7-bdac-ba6dbf9c8444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41fdb3da-526a-4411-9307-3a2deb12a78d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "434bebb1-e99a-4acb-ae06-dda31b1b27df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "861f8057-b917-4671-919a-d896212766f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b7bba60-f9ad-47e5-9a06-8f86d22b0c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b68e7de-5f02-4710-8c60-ff5dba446ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7d7987-1965-4ae3-b749-ece738a476c1",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e2fbbd5-9bb6-488b-8d79-b5675e94d60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "697ba258-62c5-4423-a9a5-db74469a00c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf160cf-103a-4a3b-846a-83c3636ed226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "eef3873c-12c7-47ee-bc08-77efee955d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "401a688f-c202-488d-8c69-0981ac43956a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3197598b-9070-4fc0-9a98-f3fdc32c3716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a5e2fd6-c579-4990-88f9-29e1b6280d06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "783c88ca-31c2-4301-a5fc-88a4c0dfa085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "573e9ef1-042b-44c8-96c6-84c05d4d8ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2063cdb2-b136-4dd5-a891-e5e0a8afe65e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "287e586e-325b-4e06-98ea-27d8014923fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "340d39b7-2af5-4767-82b9-bd8148149901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e6f5244-209a-4f72-b936-3fc5ffbd2a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "05d6425f-e411-4a8f-aa04-b74d9728e7e0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a557942e-d127-472f-b012-4c5144983ff1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fe1ed387-3029-4b49-8329-3ce18334a516",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3530e97-4c43-4573-aeaa-6ee44cc18ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff8bf20f-d383-4625-862b-dc70a86564a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d308c6-0ad9-4604-8f1a-4ede4d34769c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "20f1705f-d580-4823-ba85-08ae2f3f15c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1daeceb-9a6c-4f77-8ce6-bf4e6f97b37f",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b631ee67-f7ff-4aa1-b747-39cdd1bf6a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e445591a-5bc5-4ad2-9ab6-25b1a2416e46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7601403f-c251-4e3d-ae8d-4be43698734a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "06a7e5f6-3034-4632-97ed-a66be0128689"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dea62a3e-253a-4fe7-987d-3c952b3fa769",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ddde59cb-cbba-4c45-9398-0642cc332053"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4f14afe-0659-4ade-8fcb-8ad913ece944",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6cad5365-027c-45ac-88b5-68796ea4dd72"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3d157ef6-d059-450a-ae0d-4ee071510d29",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8e19bf02-01b4-4ac7-b90f-a46725f39180"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dbee5ce9-e648-49f0-bb08-006033bf29c4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "19c4dd21-a898-4a02-b152-bd8927483aa5"
                }
              }
            ]
          },
          {
            "id": "03bf5884-6ff3-483c-bd19-7ac223e44906",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6c4b5207-e3cf-4f85-87c3-060133cf26a4",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c229046a-c5f5-4044-94dc-9134daed105e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "367f224e-67bc-425c-900d-e5024126d241"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "978baa29-47b3-4a14-83c6-167f35e3bfc9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "946142a9-6315-40f9-b49c-ff2d8b8b9f62"
                    }
                  }
                ]
              },
              {
                "id": "86b63333-979f-4b15-8182-df0aa80c701f",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae803d9b-d327-4ffb-9823-2829d950c764",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "883bb10a-fcaa-4534-a8c1-fd237fededa8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "24a78bb2-b511-4dd0-9a5e-6b67adb70a53",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d1a9cabb-909d-4d9c-86dc-d365383c0af1"
                    }
                  }
                ]
              },
              {
                "id": "ae66cc26-a919-41d9-8c94-fe9b5e800357",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7b5f28d-8e13-47af-8307-326107c96617",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "90cfcc10-7c4a-42ac-9c5f-acf5afc58b28"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab5b6e26-0c61-48a5-9193-2637079645f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6786feea-2790-4bf4-b38a-577ac8b1fcff"
                    }
                  }
                ]
              },
              {
                "id": "9cb8dff2-d9fa-4cf1-ac3c-25a1bdd16707",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f08c56e-cc19-4f05-97f3-742bc9575057",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e4f90a33-04be-4537-b130-3afd56128633"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65f4c0bb-039c-42e9-8b65-1ddd8258223d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5d1a975b-335b-49eb-a0a9-2b61e72836fd"
                    }
                  }
                ]
              },
              {
                "id": "0c2855d3-1f92-4bd2-9d60-a394995c03a1",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f2bf83c-c556-440d-a9d0-255fc4f4364c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0f21cf61-787a-42f6-bffc-0eca55d48c85"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d943b452-f46d-4fa3-af44-6871da22dfc5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "4f589a64-8631-4fef-91ed-48a88afcbb82"
                    }
                  }
                ]
              },
              {
                "id": "72366b94-3dfd-47f1-a541-44f35fb3a41a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "646c94f8-421f-4119-9cb4-6b5d7748f291",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8874bb05-8e93-4905-87d5-8b71f105804e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6236514f-a9e0-4805-8cc0-00d0fa11df7e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "39c99b13-732a-44d9-92d7-f079a4d0c2a8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dc253b05-ef86-42bc-9a18-eac75bc4e339",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1259ef52-5f12-4c1f-b98f-cc17cc82d2e3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1c70f16d-6a9c-487a-ac58-3d19a7a1f9ca",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "85e3453b-bcdb-428d-9a44-f6f1d5d9346c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "64fda866-a94c-4be8-b625-a089807cee22",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "e83eb735-516e-4eaa-9efb-62864b9c623f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ea607e1-c0d6-4653-8da6-e0ec5242b9f2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "23e105eb-07f4-4463-b8b0-3bb6ba03e5fb"
            }
          }
        ]
      },
      {
        "id": "bc74a8c1-a9d3-4bbe-9082-06dba19de7ce",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "85437c5d-1e78-476f-9d8b-31df3cf09624",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9e53e9e5-43b0-49b2-9083-19c044218df9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "27db6e90-0a9d-45f2-85f6-9d882a2c7075",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa824ba0-b5f6-4885-aab4-168ad3cc1b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8280e3ae-73ce-4d57-88d7-e655dfbc7ab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acda1ec1-ff35-4c71-bcf0-e3a47eb5f938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fed37bf-fd04-4f9f-bd74-89c41070c248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "727a7282-3d0e-40a6-8940-b860f7903a3f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1fea716-9695-42f6-bb27-ab6fea7bb388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da11f3ba-6362-45f0-b07e-809f29d2f643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8659ae53-9890-44ca-9a8f-38e63b2f5301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "42dca981-50e7-4fc1-bbb2-7a77925d3d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "046b62cb-cc34-4180-aa28-1d81cce4c0c3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83be4076-5067-4fc9-9b7e-4e51fe97da5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2718163d-a166-4259-8639-da88c3243bed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7923100-2f5e-414b-8f59-86afb9e298c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e71323b1-cd06-45e8-900c-14097bba2e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f05558a1-52b2-4b9c-b533-8ab93149482b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bed4b08-d34f-4f0c-b1e3-a4a2b305bf24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f7ca6ec-8280-4068-b718-33148ecfa071"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec3999e-fa7b-4e7a-b3a3-65c630a83f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b43c101-f399-4a26-9b20-98dbce227203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196cc740-37e4-47c4-b4a3-2d6e7960b52e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d19a1c-af9d-4d3b-8e7c-93d32af20959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11aa80a5-691c-4636-bd91-6685ac60b864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af5c655-824e-4076-84a4-ce58a45aeaed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2df94c5f-78d7-4e30-9bb5-d68a675e45e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c91dc30-aa1c-4044-9f82-f651d9ed0d8c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ad05cb-0fdd-4dea-be7a-a11dabd8e3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14672597-3ce2-4eea-8015-b7298cd9a0bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49781971-9a44-4cbe-8a1d-3867488f6d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "57106673-530e-4892-93b0-dbedf6b334a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c028dae-b2f7-45dc-96be-43b50819e9b0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe4d33d-bcd2-4683-9995-4b1586d21a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "085edb0b-99cc-4425-8a5e-874f68435fb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546e1993-1de6-4651-b4e6-0061e32d2e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "da119b46-e196-4bf0-b218-7d35443eca07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfccf114-8aac-4d6c-987f-21cfee71f8a2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a2a6e82-c6bb-4c13-9ce2-6781fad2e761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac7bc17a-df33-44cb-b5ce-7ca1f0888ee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b99b6d-33ce-4a28-b930-a24051b8eaf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "be3c9553-abd5-4b66-8fa8-aa56e0bc1589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d89f17-5d24-4850-be05-3af447d77203",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b23dd8d-7fd4-41f7-b828-6e70efa21877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "000ed8d3-1ecb-4094-9ca9-f17f1e849e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c610b4-411a-455a-adc0-9ecc809aa345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d59043e-9c4b-4321-98a4-a44e73824eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23f6230d-9bb2-4f07-af9d-c4c18d95ae8d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5fb35a0-b79a-4355-b415-89a430ed039d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50b23bef-03d3-434e-9ab2-e0e891b255e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4daa2c2-4504-4f92-8c74-b5a255a706e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c3a6a87-05b9-4ac4-a0b1-ed270f812560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab2a2eab-1db8-4087-bc25-b974d4449fd2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1807ede-61ca-47e6-a581-5d3d0ba87cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e789d4dc-211a-4bd4-8fdd-778d93a7a11b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acbfeab4-8c45-4f0f-9949-505fc93541a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b46aa326-d572-4786-81ae-376b9b46e6d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dab455b-4a26-4ba5-9488-234a08354dea",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8ba1290-4afc-4186-abc0-aeb7a2f58edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "018c213a-b6f9-4d30-995b-8d802a759854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8c3cbd-9b8c-471b-9e76-631660f725a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "44aaba76-17bb-4f5c-bc60-b5ad17e79c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad70df42-af15-4034-9d56-ffd167dd76c9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fcea192-4942-4686-9542-35350e7bcc33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31fffb97-57d7-4deb-8df8-94b19778118b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede32977-e2a7-4fdd-afac-db47d275f227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "283d2cc1-5d64-4b56-a4f7-ae9725a4b2f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82817b8b-0785-4d58-b587-887b9fc4d1d8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94fc337-13d8-40fe-bc9e-f7cf081ee74c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05a5a5c0-5087-4084-86a3-84f1838c72cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa4e2b8-7703-464a-8be6-7333cf10ce3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5163a113-95ba-434e-9009-9bd8727cf869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c042f66-6ec7-4cad-ad28-c21be497e440",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4940764-13ab-460e-9ea9-10cdfdebc8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc2390b-3814-4665-823a-e6fff0605df7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db33831d-f669-447f-aae1-9819898aa1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c368da9-9b45-4d01-8d4e-46b146780347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8fa3b5c-e5fa-4ceb-9504-d0a66691f374",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "099e0f5d-1b08-40be-88cc-7b6f7e421bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bde4d54-8fee-4575-9d44-6cc0284b7c9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b1cd20c-0385-470b-af9f-4b951ad7b346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "45eb3f7a-2fa8-447b-b856-57b859430369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a129fb8-b381-4308-ac55-f9b4e83a04ae",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec10dbd0-0766-4e7b-8c9b-7e1e7ce4c79d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac37b516-93fb-4cca-93f4-c4d32db052dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9794ffcb-745e-4840-9398-d6a6e02c9c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cd76cab-af81-4664-bfaf-337457e62b44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b8623cd-6ad7-432f-af45-babcfcb19595",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f0f339-6698-483c-9672-9e891252ea27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4ccad8e-17b4-4064-bc58-76829699abe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315f7e01-63a8-4421-a708-20880514b00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c4e63bf-c144-46bb-b717-050f4bc1ef91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef4a683-3b10-4ba3-a036-388971bd2148",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b44b9c3-b194-4084-ac7d-4cc0196190d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "536e79c7-1f2b-47d6-a1d6-633cd6b1ec11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "395206fd-53bb-4381-b22d-4f9f935ff333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a8a0580-c389-4814-a93e-d6a2fa181db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8347dded-032e-4772-b504-8d422ac9eb06",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e181b3dc-c92a-4a77-95f1-ca9b38c16e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fae1dcbf-5a2c-4956-9c7d-f56bf9df4e81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08391259-3818-4e2f-b319-8033bb744a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34af6aad-7304-4ffd-96a8-4b970ed5e234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750bc44c-e547-4091-afca-269ed73f17da",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d12f2a4-52fa-4835-975c-1611e4bec99a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69c8632f-a556-4cfc-beee-9df09b3f840a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f79c7d0-3316-4384-8666-81096218f7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ad1dcdb-9050-4749-b5b4-2add6f9ab35f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd95eaa1-79b0-44a4-978b-4ab3117a3ffb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02d82071-ad31-4253-aac2-7206b7a92f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1446993a-bf4b-401b-a9e4-3006275089fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aed3368-b0f1-4581-b640-c16bba531862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3fcfc63-7a49-4b46-8f8b-7e78e6b70df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec05099-2415-43a8-a3c7-efbd8e9a6263",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7e3376-bb55-4d77-bbc0-dbfe515e66be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fff70e4a-a23c-4980-a1ab-04fda33187e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ccbc48b-426c-423b-b383-e88c64a3b0e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e215323-d2b1-4454-8866-6cbf30686a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed772ff-2dcd-4ad8-b748-77491c6d1f9e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5dd7a29-7543-4d25-8d28-1013ee1e3948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "380bfd00-b1a8-4b6c-9359-fb386cd6af05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbbd43bb-be01-43a3-aec0-676ec1d6caf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bd0a953-7eba-47b8-8ddc-538f7678c96f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f97353f1-eeb1-44c9-811b-4c8ede9f14df",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6288a62f-1cc7-4cef-8eca-5fce4abd0737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb7da0f8-1c99-4dbb-858d-17cc385f5050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66450413-ba20-4696-9067-45c99856d35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fef85b0-a67d-43ca-b322-3b0f32cfa6d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f47c3c6c-b944-4f55-93f0-e63ef82d1987",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ace568-688a-41ec-b8c3-3a66115bbe94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a133b82-6284-4695-862f-75e2c8fec8ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a67125e-df44-4075-8b96-8c576272e797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ef354a1-8e44-4708-8445-1b1f05a53424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46d2bcbf-136c-4576-be32-d07072ad707a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec120711-08f3-41ee-a50e-b91d5632d02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b60e40-a34c-4bc9-8d45-ade00057280e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1cd9f7c-d1b6-4e73-9203-afd6dca5b4f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce70eee8-414e-4193-b523-b4dfb158527b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada4d5d2-0b6d-4041-9bde-e9ba1e0cc888",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0342e1d-00a4-4b85-8aba-7eaac30835d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16959aaf-f877-4325-811b-b570bfc61955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec7ba1e-aa3f-4ace-8586-b3bd646abff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b60f6a14-8545-45ba-b911-064709904baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e0c66c-f018-46ca-81a3-1563ec2a2173",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ca70a7-173b-4fe7-b8d7-0b39f8b3b3ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34bd255a-0753-4917-9ae5-19c74754ad04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9cca7c-5573-45a8-9acf-625fefe0d295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddebc790-51ee-4ef3-9515-5cfe05cb8181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f77bf36-b1bf-40c5-b417-381ac3dd5c47",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e95d97-f3c6-45d6-bcf8-b66c1d98cee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3c278f8-1257-4e93-b13e-db414f332da7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90595de-dc4f-4108-9a28-24be40b687f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1abbb2e6-8956-4812-b1e8-8ccb783e8cca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6540944f-002e-432d-9110-30b8352cc4a5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8d4e6e-bc8e-4b16-a0e2-0ab81fe48517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81ae3d09-90dd-43fb-937b-6aff01bef09f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1bdf8c8-9aab-4014-b8b7-ebdd45e20e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a49eebd6-9f74-445d-a8ad-8654a0d46363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee1a56c-f08f-491d-b25c-a6536cc63a01",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a053bbc5-12fe-413f-9865-09fb3599b914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51b96865-b43b-4221-b934-0139e3bb484e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4953ce2-984d-4caf-8cf0-711cb8d797d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88d7af06-638a-435e-bd7b-bccdfbd2e229"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1b032597-cf44-4e4f-b323-f1a05cfc21ac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "14510fca-c376-4098-8463-609c40cf1876",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a04536a-62eb-4a2f-afd5-8e5c7ee1a4e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97b29e00-6e80-48fe-9120-ea66ab75ddbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dcc59e0-1891-47e4-ad3f-f06e0bada83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7a6f4f8-72a1-4202-a8ba-93aa8447e473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d527d46-21c2-46ea-8b7b-8820e2dbfed3",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8b5e17-a898-4801-8f9e-9e1b28b7b93e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "cc5a7276-81bb-4084-bde5-b6e252af9200"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "462e3021-5c8d-4116-b997-03648e80d17f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49bdd9e2-7de8-42aa-9e21-e038ecdcfd4b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80c61665-a1ca-4c63-8421-0c85f141a6ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff1a7b6d-cf3a-4bce-9df1-68c22997998b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ccb194be-3fed-44eb-b5a6-b557c51f0e42",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9072d5e-d344-4f1a-a6fd-dc7cdc7d63a9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "548dbfd3-b6bc-463c-871a-267f5cdd39b0",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "358e8bd3-38fd-4f38-9ebe-e1211f48bb4d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a1c4f5c4-86b0-4006-9d60-a801d9d0ea81",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e6bcd57a-2666-40fe-8267-2e27593e9a90"
            }
          }
        ]
      },
      {
        "id": "68c3ac05-7bd5-4382-b3a5-0d2e05326f34",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a90f0350-c3a6-4e9c-82c3-a3eace757625",
            "name": "Negative Testing",
            "item": [
              {
                "id": "71f8d432-0461-406d-922a-2bb92eb18b0e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "656fd997-7812-4138-96d7-98140b48198d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd212b6d-4c6c-431a-9dd2-31c6a4bebe6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84ce170a-5058-4c40-878a-4bab53442c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6271a0b-1d10-41ac-8f20-252502108041",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78788385-56cd-49f4-bb71-36897e2059e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7da4e9eb-763b-430a-a881-c65e463fc23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca82940-e3b9-49c0-8827-de81924bac15",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8797cee8-4eb1-48a7-aa23-37da2de2594c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42d2f44d-292d-407a-a082-cf14f10e3b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc0898b-8b14-4fc4-98aa-677a9715b8dc",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8869f36-0193-419d-8078-fd42a339f48b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0af32444-0eee-4a33-ab27-66fb5f8dca63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfcb0a25-040a-4ed2-a767-b3a91e8ca5b5",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b899bc-d266-4eeb-8a08-10fb90c6f125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8894805-5f16-4aa8-b01d-60d1e8d9503f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4834c8d5-641c-45be-8eed-7bfaee1a518a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19dba18-077a-4b65-a321-5d3491b249b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fad1ebc-4049-446b-be24-d077c78f7295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb70803-5ed2-44e4-8415-2e2c3974a683",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8fd7802-4d33-451a-8c50-49f46121af87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "233f0b41-1eb9-4193-a52e-005a764bd16a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1472b4-60ac-47e5-a268-bd3f42c821c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22a496a7-9b64-4dc3-af04-9780c03c4a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb49b524-7e7f-43e0-bfb0-93cedfe92c61",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11764ab2-45d2-4b99-9b23-554b23635a57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7967d9cd-792b-4b82-bbcc-54c532e08997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c58efae-3de5-4dce-85dd-efa9023ee4c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59b01aa2-b3a3-40b0-8a2c-f8fc5a29bb18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0940d2a-0b4a-4d76-823c-328586b70dad",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52155d7c-a7a8-4e80-9249-bde9ed5a9f37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b639b50-baec-48ac-b302-82a3b6d3d603"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4baf307-891e-463f-961f-78dfef061839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8072fa61-7d27-4e2a-b025-99ec5637e798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef78b4c-722f-4970-958e-e11183bc667d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7c0031-2669-4801-8b36-3b48d7e14a15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01664dd3-f865-4c99-b53f-e8d82acb5acd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de158a2-1968-4b78-9c2d-ed0d31a70afb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd43fc42-8d36-4daf-baad-70ceea449171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef1bc18e-15a6-4d9c-89e6-8c762232551e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63da1f98-7389-41ca-bfd6-351b78541f50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fa092eb-0fbe-4f2f-b4d1-14c2ae8d5d3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff0e9b2-b0a7-40e6-884d-197a4bc5a48f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39aff32f-6392-4ffa-a990-d4bd99834815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b50efc-678d-4ead-8b1f-290c4916b5e1",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a24109-5ef2-4bdc-bf57-f5fa15bc83c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd0fe7bd-324e-4b11-beb8-1614828bdac7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "524e39ec-d219-445e-bce0-883decd50796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8287d946-1c3a-43bc-9cb8-473ea145866b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02313544-97d7-409a-baf4-98bf974504c7",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0e476a-f181-4047-b4dd-8d9367fdf81c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b019c03f-3a4c-4947-a4c0-99cf7b92ed4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea45579e-ff64-46c6-9c37-346931d0db05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63567063-9827-4108-a486-09e7b1c17771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eadb7a41-57b1-4bbb-b2cf-e0ca5c13b302",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ded8fdb-b205-4da9-82bf-f6036a133e8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c64e593-b32c-4c8c-bd54-286d14e8dbc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67e6afe-91fd-4ee5-86f3-774111394b13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb276e02-47d3-4c1b-921b-1b7d391ae824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7260b85-ee7d-4d57-8110-3865bdd9dba3",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ba4edf-e4cc-4a4f-855e-15dff975ac0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b13ae7c-a585-48d8-a323-49fe2919c60f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "385e7aa8-8f62-4fc8-876d-b335412b24d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a23168f-fa52-4ad2-991f-176c7604eded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8686e575-2407-4920-acce-4ae0d0e488a5",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01fe98e5-32bd-4f5d-9622-d480bf7b95d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29fab9c4-7d3b-4e11-bed4-b7c0da373a03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b554dd6-a3b3-4fc4-8c4e-57ae919b97b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb3c29ae-f2c1-40a2-8a4d-04b92fa2307a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e45031c3-7cf7-41c2-add7-cc719b968b60",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1c02b6-7d0d-4a35-8bb4-bde200498474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61f42fa5-666a-4644-b073-53358d62f0de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36f83b4-14c8-4b34-867b-fffe80942c3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18da54ea-6e4f-42c1-92e0-549bd33377c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04071a71-1c76-4081-8024-f5f7ce1c637a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f8ae18-7d29-4b9d-a925-5e447db62d91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3324332-eb51-4233-8653-ec99fcbc42bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1707b407-c7f9-4304-8b3a-b696482d051f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25b19051-f950-4859-bd41-7a3c8e5bebde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8adf1a-d058-4e38-8db6-fcf3911c4481",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc79a48-ca07-4d6b-b237-0a4b4ef4d9c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7663b782-209d-4680-987f-99b803e6fc70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d00efd-071d-4b80-b8a3-bdc21eebc4ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e9c5d97-4a89-45ef-aea0-a37490097aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b232f245-2235-405a-b586-b80879db96dd",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f6ee68-3cdd-419b-a706-63ac04ebe215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b79fe17-9b1e-45cf-b120-6a3285c82ed3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f60b76-be8b-4fcb-a1ba-33e2b4dd84f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73ae78ab-08a1-4eed-bbdb-4679621c7d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d02cbd-3504-42c4-879e-f79571b60666",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d3408c-a660-4449-a2d9-a036b6797607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8331c82-026d-4a9b-94f4-69290a027dc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf1d5ee2-5288-4837-858f-fdcb55dc9c41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c021d8e6-dc38-4510-8d44-c783456ff20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db38be07-dd95-49e7-a9f4-35ac37b32f3f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78ca0fa-1f3c-4594-89e9-3d531ccca7df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb4b5673-0d56-40de-b883-9a36f5b45b5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4471c4e4-57a3-431c-b99f-c6b606666650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82f4cbfd-44bd-4efc-8136-07f47d2ade9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770999f3-79fc-4caa-83a9-070717b7068c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80181de7-3185-4ddd-a3b8-7ea757e747c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2d2d6e3-2c63-4175-bf78-b9902ee455cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de08af5-a8e4-4d12-939c-064aa01c5ba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "578dd4a8-dca9-4730-9c93-138555f1bb4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8970abba-fbb9-48cd-a170-4f73833820d7",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f0ac6e2-e643-4b5d-bee6-7e218de22ebb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56ddaa79-ffff-4db3-aff7-e411afc68adc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9fb7554-4804-4bbc-a03a-9d3e9243bfd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd207f49-797f-4290-ba4d-edde33226089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e5086c-d518-4107-93f0-e71a9096a6e4",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb49ea4-df4a-47a8-937a-e40cb6e79dbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d18c7b82-5933-48f8-aa88-384acebe0039"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "704736e5-72fb-48e9-9454-ad33b1e4fd8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dd218ab-8902-4c6b-99d3-cb43e1a0271c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ca46a7-60f5-4ce2-9453-fde9f6cd4af6",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc133d58-8e72-4f0a-b790-2f4257ab88f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e94b08b-2fbc-42e8-b0f4-9ebd32223c40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6148d59-3433-4ca2-82ca-4e3a45de5c5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3418a66f-08cb-441c-b926-fb39a3149485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4093f95e-93f6-4f98-a93c-7a755c9071d7",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e5d8238-184a-4496-9fa0-e95d42428444",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5df90f1c-2588-4653-8b0e-10d0a5a6a78e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a62c49c-524b-4f28-a336-c19396a2f666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0e84a1b-dca6-4740-aa27-e52f93e65a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e2024d-c504-4973-a67c-db0aa6155139",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a94c3fa3-76ff-4c64-b457-34c102956026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a5adcd3-553e-46a2-9944-5374734d3c11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08db2f22-a4a6-4e75-a461-b1e3f208504a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed28c5b8-1cfc-4e38-8cd9-eae7a8d36eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679b32cb-f287-4cde-8d45-b934e7a1ccaf",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a719c17-f4c1-47eb-9bb1-f9fe59d02bd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78e91b6d-3cec-46b8-95f9-c1e5e513f1b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4c4e45-45dc-490d-b7f4-ff9a537ba048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf494a27-89f2-431b-bee2-c23e805e7b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faf39447-0f45-4314-8e4f-b26dd8e7e940",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5d0847-90e0-4ffa-afbc-cde95290efa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0424a55-7a61-4ecd-9850-c1db57d9ad3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "208326d7-7064-4b71-818e-1831ff2fce35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef2d13f4-6eaf-4969-9d92-3b47d281aebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195b2f90-e544-4db4-991e-670900c5a2c0",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec07cf32-fce1-4084-81ce-b6fecd39a8eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2231848b-517c-48e0-8f69-4ad66c4e53f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "787b63ac-53e3-4558-8dc2-2bd4049cfb4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea610672-1321-4aa0-bf74-41bab240ca00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c9eea1e-f094-4275-a16c-d38c7117d99a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7f55c2-f04f-479b-ade1-e41003b2d530",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ad668fa-91d3-4fd1-b5e3-fd616c70a0bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "023d78db-9af7-4c1f-806c-69da770ac4b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e27e64e3-458d-4e54-b368-5bc41b92dcba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e54dc41-ccc0-4ffb-b4b9-8b1dfd9fe3e6",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d90336e0-0cfb-4065-a274-5aefd228af6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57fe567f-1981-4383-831d-31a082225760"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce0edeb-a564-4df5-a945-a5004131c829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "284c9108-71dc-41cc-b94a-bb6d9895e3ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c180fcd1-6195-4ed0-9161-f6aa427c7953",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4346e05-517e-48f3-b392-2069b92bd46a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebfe4bf5-1d1e-4c24-b85a-7e59134ef475"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4852b190-9ba1-4f62-9b6c-7e6511b71cf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5736847f-3cf8-4fd2-a13b-cabfa2a54ae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27ce94ab-5165-4935-a789-b9e9ce9170fa",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c43a43-cd2a-49d6-838d-f654d337b35e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "630708f9-66e9-4cb8-acb0-6337f08fc98f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab105c4e-92f2-4446-af8b-7333ab6faca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80977625-7daf-4fd5-9cd6-aa53c33a61d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660df45a-785f-494e-be65-355a3e5cbe37",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b48ae1b-725f-4cec-a3fc-9248d135224d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a91e34b2-f673-4ac4-b0bf-8cde5da83e04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05cefedc-34bc-418d-89e4-cb7f8105bab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30064ed8-89ca-4f2f-8feb-4a1d0da428f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b06b3a-e9e1-42b1-8822-21ffec586305",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f2e5fff-0cc3-41e8-b055-ad9ee1b3f690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a0db212-6615-406e-a39e-21728d88e2fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f4bd83-7826-4323-a761-65d7b548c28f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96e80d01-2fc6-4299-92fa-02768bf50564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42cb7c7d-4247-492c-8da0-cc1eb3b12409",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5edab46d-5ecc-4f7b-9902-0aeeef2a8011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ed35f45-6dec-4bbe-8ea3-5e34ee61c180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "534cbf36-be58-4d2d-989c-f986b5c14f34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b59793a-4980-43f2-a62f-c07cb6f89229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb08385-2f8a-41dd-9b2f-dd0292bffc47",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ec3a75-b97b-4b51-a892-afb7833770fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a05df85-bb10-4d31-a902-f5aca26f45d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08bdebc8-3340-45af-ad87-07cde537cd81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02782b92-a8f1-47c0-8603-62483d458a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e360b6e2-84c9-48f7-80c4-071d64990d4b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01710c2-f1b0-460a-9b0b-100f91309232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48d7a024-74b4-4d5a-9712-5b6a4d9f09c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7715c5f8-2683-4eb2-974c-241dc083c39d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c9aeb24-1a21-4ec5-8589-b042eaf29625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f994012b-bc07-4110-9b2d-90cab7536d2b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ba690c-5890-4c1c-9821-0f8ad8e3759a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40c8dac7-e6a5-4683-aab4-91922dd57a8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab90429-0e6b-4e14-bdf2-8eb1908e7c0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20f23020-ccc9-4605-9d80-f24a02e1d3f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10950f39-5e69-4dec-bd27-b83fcd006f87",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6514fe00-3da4-4736-943e-4da47356bc54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "930d5edf-ab42-4fac-9e2f-9e8309fc961f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba5b363-3faf-44f8-ac84-3fbd4cc116d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07d7a97b-ab15-4b7a-b9e7-b6457cbf6d3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d3936d-5946-4fc6-bf0c-0013fd7d9ab1",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad1ceab-738f-4c1b-90f6-ca10769333ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "012aa1f4-c917-468a-8a07-90d322cb4847"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87436756-d6ba-48c6-9a20-10d991b7d024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d37fd401-5fac-4cb8-b74d-344df589263b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ea035e-2593-49ae-b00f-7e8e40009e1d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9926a48-ba5d-4b5a-b61e-10af3923bf3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67725e11-9e96-43e9-92d9-3b173be25d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4fb765-e183-47ec-b373-874fb9fdfe3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1467862f-9732-4095-b892-f57e9dea38c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9055af0e-8f31-4618-8b2c-8ace9e98bc83",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "933e8f0e-6925-41a4-956b-39fd7952cc42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b317fa5-832d-41f4-b511-fa136dd764bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88703e3-1fa0-4d52-974d-c18e12df6e4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11cf8d41-beef-4d15-bdc3-5d2df58c77cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92533d2c-3599-4ea1-9024-d296e4502418",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc51b3dd-f1f2-49c8-9640-4689f78cb332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f597389d-8c44-4264-8476-424d78c8e16a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "419d14c7-2c9b-4a37-ad5f-f16794a6a6c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66201b51-87bd-4379-aded-126e06563034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4408fe0-4a67-4805-822c-6d2c646b7d97",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d132773-2dcb-4eda-b911-76a869b90a07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23b40618-7b6c-41e3-a22b-5ae58d891d5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba0e55ab-e95e-4489-a008-34973993071b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f2dab6-597e-4cd7-ab23-e5c0c29c27f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61df6bd6-09de-464f-88a5-8e321a067044",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c44b162-b1d5-4b33-8531-7a8825fac575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7192ae7-ba26-44be-bd55-40cbc9e9ec95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57cffb63-1157-4aa8-b318-3099e765367d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd1635a5-54e9-4bc4-824f-8715281dadf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c5b2d97-5c4e-4a27-a839-b818b5143379",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eaac844-0f22-4a9b-8d68-c1ff412f270e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1694acea-711f-4199-b5c1-885f96fafb2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb559d43-52c2-46a4-96d5-a8b533df6e6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f71c68cd-ad2b-4261-9b87-303a58e4c795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a3f004c-3c42-4885-9400-39498a08ec41",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f3284b0-8237-48de-8cc0-3953d233fbed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "120b4947-31ff-40f5-8fea-fb0f479b8f24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c48e44-8368-4944-9276-add46dfd4f8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b84f6ae-5417-49e0-a0de-c4ce5f2367fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b69273-86bd-48bb-9280-45e5d1d80184",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed00413-b73c-4d7c-87ac-7ade5ceef8fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb53000e-ec3f-4c87-856a-2e8b9c0521c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d178ca-e2e0-49cd-8435-a1bb2e5cd513",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f82edc-b812-475a-b735-ba1443d3af2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cbad92c-f267-44a4-9cd6-36f199d939e7",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82fb87e1-6a40-4eff-bef5-84e59afab789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b78a57cf-93e8-43ed-9ce1-40af4102dfbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "440e94e5-06c5-421c-9491-4960592270a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5188152-ecc3-43db-8a87-8cc7ee153690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece1ea06-da90-4afb-b766-a96b0960453b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd745ab1-d212-482f-84b2-10972cefe336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "105847c7-e326-4053-af3c-17bd969e636f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ce1073-0319-4f80-8bdb-0d54746c5ec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d11e375-c2b9-46d1-8e60-308fa4099202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5211ad98-d65b-4df6-b326-b01c94e82401",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f852e29-ca6c-4482-9f79-4c164cba0fa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a6ca8d2-cc5e-4a35-9342-6a5783fc445c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a7ab52e-1e91-4604-b731-2f05be619ffd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ac626c8-e4ca-4c73-8e34-b58ff28d5db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93bb7993-1451-48d6-b1b3-68c2f1c4ee98",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea6498e-2637-4919-866e-b9050e6647b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c700bf8a-1808-4f67-b563-160d961c0297"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a9ce4f-c279-4314-b73a-d9315cb9f47c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "147e1c30-cbef-473b-93d1-4cea7c7a5823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9efba5a5-9028-4275-b545-391f87fb8168",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d11189ac-4c04-4d0a-8549-5d8b6fac8a27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebce53eb-0a9e-44b1-8407-033687ec96b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e08120-cd14-4ff1-b467-eeb66357d34c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "237765ba-6bec-464d-8a40-b0c78aaa55d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c815a078-95a8-4267-b922-cc3bd0c05fea",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f18ca18-4e16-472c-aad8-07daa984759c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cdfdb12-e395-4e7b-b1dc-e9ee845fb8ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d91289e-52b3-4ad6-be02-3986bd6b1c5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0721d280-5ed0-4611-8fb3-21b0f20351a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76013d07-9864-41bb-9f1a-e0c96bd146bd",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6077e035-883a-4dec-a6fc-a9539e121695",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b468698a-9b47-4126-8127-44c2cec29803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e89faec-396d-4537-8191-3a27a0bb9916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cdb57a5-d45e-4158-9426-5961ae66e0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b45ebc-1b01-427a-8781-363fbf47bb06",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b84b31-85a8-456d-aa10-0d1d3ae7a2f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a1647d-575b-4cde-9dbd-afd06a5270fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0f7e1f-9d5b-4f35-b3c7-a83c2ff0d31d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6db50e95-9bb3-4391-8417-e129414ebb32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a93c590-408f-4766-972b-ed2e075b2dad",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1333999-d0e9-446b-a49f-b12b36ed7928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26492424-598e-459c-ae6b-daae44456d82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f185b503-11f1-4295-bf57-311fd1511ce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c38f9c9-a429-416a-9f19-d79f53ae3ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73b50db-24bb-47e4-bbed-280e20353bb3",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f413b21e-0ae0-4f35-a243-88c4aed0bc70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba24a131-85bd-4fc6-8bfb-f24c9faecbbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd0579fd-e9d3-4931-abea-6a8aa488f17e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48f37c98-5a7f-471d-b9a9-4eb318ed4bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c80244d-deb2-4ae7-a4fb-188089ab604d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d80f2b3-f789-4ed6-a1d4-86e30fc839d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bca5f6ce-838f-4d19-95b7-e64f0d32b17f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f846bbd6-3d5c-46aa-b7f4-71b35d00b549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "152f0309-574e-4a81-a03b-7e0806c17b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b9740b2-bcbb-46ba-8722-2abe580a68ba",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1737ddb-7b95-4eab-9aa4-abe11d860610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d89fc3c-7b2e-45f2-9604-5a0791845afd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97c2a91-68c4-4029-8db9-7d9c86ccaab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2461e33-f3c1-4c35-b2e6-2f497eae759d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cda9444-b33e-40c6-8e31-b5375a95ccad",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d543925-ab2d-4fb5-aa87-ce87b4494895",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b2fc1b7-45c3-4fba-b168-a8f8cfcbd44e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd3ecd7-b86d-4b17-88c3-24be29ce5143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a144528e-69b4-451f-8aa8-d458703e6ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e44c40b4-16eb-4d04-a7b5-b7d31c8e890a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b00d4d-8926-44ca-821d-8c4e86dc37d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "309c51f2-8992-4720-99cc-1238fee95b35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9e3e4e-966f-48ab-9cd2-48d3503786ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbd3ef45-b3a7-40c2-8cc3-6fe8e00e0e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2b6fe4-99a8-411e-822c-5a7594c0695e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72909aa5-5c2a-48c8-b3eb-cf539cfaaf34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "937c9ac2-7b09-4d76-881a-0b9e2b812054"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f8a619-daf3-4dc4-a87c-5f3bfcb262e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45402ee7-064b-4d0d-bbc3-703fdd49fd87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb33e4f-1196-41bb-9183-7fcef6e60713",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1075c946-e8b3-4bc2-a9a1-565441c62870",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7654b57-ae0a-4a05-a115-1db505bea67e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "037321f7-c51b-42d9-a291-b847793d6081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b7dba6b-c992-4e1d-8175-eebadbf90e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc8ff74d-4c3d-4c26-ad56-686e9dfaed78",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26f74134-46b3-4780-acfc-aba22212eef1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cf0de92-88be-4e00-b31d-ab6f5f3ad62e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3552700-8fe8-492e-ae07-3ed571122b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "020ff8e4-c8ef-41d4-88fc-ca36c82fc915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaff920c-51b1-46c6-9b25-9b89e42b2487",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13c9e5b-7761-4706-a502-089c30e8b326",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86776e76-1ed3-4870-a521-1724860f1878"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9f5b9d-620d-4f96-a85a-b1805b38b35a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dc4ee6c-0a84-4ac5-a0ec-5e06772edd0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a6a2520-77fa-4803-805a-0ca7bbe60162",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b76ae09-39cb-42bb-a7d1-4084c739e9fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b9e242c-5527-4af4-9812-022e337519d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f15335-2079-4354-aeca-4b1daf3b44da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bca9cff0-1ec0-43b3-b602-9d0e737eab30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "174609f6-75f7-427a-af53-3db37158f85b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d87b45-e78a-43b9-ae2f-8aff6a620207",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13e16de7-8784-4861-ac8c-1b3d1550b9fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "091dcdc9-ef4c-4860-a18b-f2787a912ec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17fcf0a4-a666-4ba2-b142-81d6e1f5f8a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4e1eb5-07df-4380-8dc9-665f9e29e96f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45705b8-f8c5-4a11-bece-f4ea1140378e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82be6e12-a6e0-4519-b482-63d321344a97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81dd399b-89f0-4f90-9a6c-9e1563e058bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5a2c854-4166-4ff3-ac3c-6ae79931a589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c7400a-2e74-4500-a412-c327ab6ee5bc",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd251890-e79a-42b3-a6f9-19d0458e5649",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b327ba3-f136-41ee-9fc4-4044ef88d6cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dee6e8f-2e3b-40a7-aab9-1692c8a69803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3737764f-fd22-4eb9-a9bf-f1e9e274b2eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b8222e0-2533-43ac-ac70-72d940b2fd6d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a869df1-fb00-44b4-860a-8f0f5a686584",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "feb4089c-76c5-4de1-b185-ccb3b49680e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e8eac9-d9e5-4511-99ca-dd2773ed0852",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dce02e32-aea5-486a-af58-246e168e90eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad16c5b-65ee-4256-a526-c8fc4478b83b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95ea926a-e42c-473b-a115-f5c0bdbbedea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03ff6c71-2f29-4c87-aa60-461a3e3eb4f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32376d31-85d0-45a4-95e8-c0ed9102c1de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83b04dd4-81f5-4980-8d02-b913b3092f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae23a86-cbb2-46e5-bc20-b924ec9a4d9e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "976395d1-9d68-42e7-b61e-709bb7eb0fb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36de66ac-9a3c-4ec4-8209-1931a4c6af84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25723eee-261b-46bb-b473-0fd8d5b4a938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a266aa25-0f4a-4199-abe0-d919bdd1b2dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3858622b-57a3-4405-9971-0f1a456fd750",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e0ac22e-0670-4f2f-ac90-878801338f92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ddc017c-7aa4-4b97-a92f-039a3847448d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b63dfd4-678a-4117-86d3-ba3c69b7359c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f8ea3b0-b497-48b0-b849-ff6a00a0f9fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c3196f-b8b4-435f-aab8-cb87a625ac88",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad7d4fc-399b-453c-85a0-4b7fc69f365f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0d6627f-812a-48db-88f9-c4947073c6bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b490d19f-c0ea-4210-bd6a-a4054bad9439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fec6a6a6-ef5b-4a69-be36-b837b2f15500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25dc0d67-1c79-4a68-a9af-8704d9dcc57d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4951af-e973-4699-8bf3-35276ea6e403",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88d3c9b6-6175-4c30-99d1-c2c5aab8079a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9172acba-8fee-4cd7-b414-fa17a266e2b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bc10c0e-858a-46a4-9508-1f5c6cbe866a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cfc8ad5-9d1a-4a78-a0b7-e499fdcd914b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cbad7f6-3c34-4e81-bf36-aa60fc2f28cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f800221-d41a-40d5-b6ab-4acb04727644"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5bba4c2-1b4a-404c-ace1-6b8584691f8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f91c7055-acc9-4a90-8c25-67129631d30b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3c0c890-3941-4141-8903-7c81feb63e15",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87b0a2d1-c862-4de6-b71b-6c94b929d027",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7aa6fa0-bbec-41d6-ab27-515748c14a33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85986a4-123a-4185-a1ed-a27ce5d63c83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "067abd44-27db-4ea6-8bcb-75ed79ccbe9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66bf323-c7ee-4a75-87ba-214413059ce7",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a3d1f2-8e5d-4be2-985e-09cc838b4ae0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05c905d0-42c6-4609-a170-d2fe0d9e73f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f45fd8c-8ca6-4a1c-89eb-2cd89d601545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e736fce-ce2d-4195-a214-068cac4fc6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a93d4e8-14aa-4836-8038-00d0247d6880",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8368df67-14d8-48b2-b68e-b00af1832b42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d200b36-3599-42fd-883b-98593cd70b91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88983de5-5a18-4eee-94f6-55956d4d8f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfde39f3-a483-4f22-af66-0383c11faefc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071ef720-4e63-49b5-88ef-03cbbe45f305",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5996dfe4-67fa-42e7-be95-d45e9793dec0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f84d882c-55b6-488d-a9ee-c2708c0131d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c88014-d648-413c-be6d-3c28954e6183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c21270f-acde-4f23-9238-e68e6948a106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca28a5b-48cf-4772-b0ee-c18b22847d88",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "153c37fa-b054-440d-b720-3819614bdf3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28c625aa-55a1-4627-9a1e-a630b14f2d9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f5a979-3712-4c5b-b8da-06cbb795ea3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49625087-7292-4bea-b254-8b270cfb9c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d28a52f-038b-48bb-8b13-e488452c54a4",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0033a221-8350-49e6-b007-1613782dc317",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "398c6ac8-9597-4e0f-bc0e-a96bf5170d7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7782a4-feca-4704-b2bb-902e4b1c344a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff98ce40-62bf-4e9c-aedf-adb975758163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c1d749-a374-4349-b8ef-ba9492570b06",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a7ce99-5f0a-4c5d-96c4-1ce1053aa841",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac955a37-2456-4d02-a3e6-5496d811e831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0b4ae2-3598-47a9-844e-e50881fd2f28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "194da765-c616-4c5d-bc42-d073562b7cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "216ff391-9ed4-47d1-ad47-78a20b974d64",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d4bab7-3bbe-4a41-b796-d425de3195c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "229815f6-19b2-4531-86fe-7dfd704cf786"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c0d13c1-6d5b-48d6-aa9c-3435292b2cd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a72a565-0cd6-4012-9613-4c213f70878f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42afff88-6391-4e77-bce2-9ab5ca99e245",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e02d0d-a1bf-4afc-aa4a-445a6af0fecd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1adf183-811f-46a5-b1b1-03726fed0846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55a6bac-0e96-433b-995f-006d0cc32b86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cf4480a-ca3d-403c-b13b-858a4340f012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6cebd8c-1d01-4f93-8be7-178a7e49e2d0",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3f2561-6760-4d2c-9400-09b81244ae34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea422db4-3ff6-4704-ab4d-947de2e9729a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d865e8a-fa8b-4f99-9262-8508dcdb3615",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c911746-e80a-4c29-9a6a-ab343b7d283e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b4006b-cf8e-4541-8829-861e866c10fd",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7035f1-bacb-4799-9ee8-1154baa00153",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfac222c-26fc-4cb2-b8a9-9c7c7372c329"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce04140-2582-40eb-ad53-611efe06bf14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "743aae90-45f4-4e8b-b3df-4a35b64f7608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9fe5ad4-7aa2-4d1f-99cd-dba69a992b90",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87691dbf-c720-4464-acce-fff83e9ab9b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ef7183a-913f-4425-8eae-50cc5d2e6b0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42827ce0-6745-4e84-a75d-d4705a34cb0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dd747f0-5a8f-468c-b28c-ec4cab0f4d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b39a9b73-b752-4990-845a-aa3e5cb051c5",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0adb343-2cab-4c2d-b6dc-41835e486370",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b0e093f-723a-4745-b60d-0e2790fad163"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3593aa-73cc-469e-a76d-472a772467fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a14e59ca-87c8-43d2-adbe-424c13b74533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ddd3bf1-d51f-4fc3-ba99-8b2f508c6e70",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15fb33ef-1b64-4a93-9180-027404a09e62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "111fa984-b505-4110-886f-9bd960751b97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eeb7c59-49ce-477d-91ff-72bc4106b7ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "922c2f30-33a8-4775-b5a9-b9b6fb367063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be8e16f-7eb0-46a6-be01-4ac608a5a39a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e314849-e72a-4152-8e95-ca0184ef034b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb99ba38-9be3-4447-831a-73dde57feaee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7e4a184-135a-4be6-bcae-cf0fcee19d18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ca07909-ea48-4a12-a4a1-4565dc6170fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b254d56-16a5-418a-824a-24ccceb0bbb3",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "625fd5ef-50dd-49dc-b505-bd6b1144cd54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ffa9b6d-621b-4791-9151-60d210615c13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e77b4bd2-5f06-4015-89d5-584706c8a63e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4663cacf-ae85-4e43-8d9f-f3d04deae655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb2f26e-dc28-428c-8605-eafa74daee3a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c82c6e3d-3194-4903-bd87-b015f5651632",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "520c8c71-4831-4623-a37b-18e3247bf0aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0daf59ed-56f4-4a01-b85b-ea7b27d286cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecb20dc1-3cea-4d85-bedb-8b645e5a4efc"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92a9b928-7478-479d-a2cd-f9d11d106da7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "06264e7d-e305-4978-905f-a998837b9100"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "78d4e51f-7f8e-4897-ab19-0a39d38988f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ea8d2377-bad9-4d34-bf84-cc0904ffefbc"
                    }
                  }
                ]
              },
              {
                "id": "7b1b83ee-30da-4afc-8082-1ca2432b7199",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bcecba31-d3f2-444d-a3fd-10552ab2791f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a881b25f-8bca-4985-a4fb-2de4600c06e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a67de621-1636-4338-863e-2f44a8e087ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d867e0-7e6e-45d5-ae57-2357d099e67d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "830ab0c1-94f4-4d9d-9de9-d0c4b197a8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcae2965-f28b-4a8f-934d-5cc4b0d3eddc",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2fdaf1c-0fe3-4022-b80a-2d9e913e421b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b06dd860-cff3-457c-adae-97d83a0cf757"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "888e943b-072e-4486-9fe3-75b9608e0809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e349158-1498-4d9f-835c-21778df17958"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c78babf-2f5f-4bb6-b25c-d8e405b24aad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "903b92c8-4917-46d5-bc52-c098c4758464"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b00cb44d-dad1-496f-8ac4-9ab0e317001d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e1ba66ce-9e91-44b9-bdcc-4af0c4fa238e"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "3dd16c82-b79d-4e1c-8da0-8c8fe8899dee",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f39ff024-4a15-498b-b778-22c54fc40516",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "297e4fed-867b-4edb-9ba8-5b015ff83d8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "20870446-f416-4494-99fc-f9cc717474cf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8411038f-602f-41ae-b38f-cb665b7cfdbc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1accc295-e84f-45c9-b9cb-4ddbe0cf5455"
                    }
                  }
                ]
              },
              {
                "id": "20f3febc-4b87-484b-905e-b3c48559df71",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "88f40e28-269b-4d42-879d-799ca19a37a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ebf6e7e7-59c0-4463-b70a-eb370cbaf3cb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "404aebd1-4018-4b92-9497-7eb605bfedf3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4189f950-72c3-4001-a3bf-97de34fdd266"
                    }
                  }
                ]
              },
              {
                "id": "0c932a3c-3ed3-45e4-8b9b-1c889d6b6eeb",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1785fff-07cc-42ea-81a9-17fcbd4c5e9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e6720a02-e8f1-4609-870d-2bc0449c1c47"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4cf01b9-0829-4e91-9213-59f5c47b6937",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e6d2cf9-21ed-4227-a84b-d2f25cf24a4f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7435fb4d-daa1-4cf4-ba77-44def5b79326",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5e08a5a9-157a-4092-9bb2-170061d486c2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c31be2a7-2be4-410b-ab9d-555d9b1f499e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1b616c6f-c9a7-4fbe-8bc6-27bd7615684a"
            }
          }
        ]
      },
      {
        "id": "b09c7b71-0e3e-4665-8af1-bde0946ca2e9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "175a32ac-2c89-4851-aeec-6b8c12cfd9cd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2594e309-8d99-4887-97c0-36dbb7e4c903",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "caec4bc2-4bd9-4784-a05d-fb860470d337",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f50e947-0f7e-4df9-a413-584521bc3b92",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e1eb666c-db16-4e99-a188-b5f7ecd34c17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76eb7892-689e-4a69-a40f-e41b90e96d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e0d9b61-5494-4fea-b932-8cca11ada25c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1d15a1-6133-44e6-804e-1ccce188f272",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9044c2d5-7a11-4818-9696-0b290abb2280",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "66b6f141-cc88-4e7d-9aab-b2443a8fa3d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3a5028-63f8-406b-b3b3-f316ea796f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72d3c70e-0b2c-478d-89b4-56435f9482e7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd32119b-892e-40d9-8051-2b4a7ed33666",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfb4e1c7-56e3-48fd-95b4-7e1ccd90670d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e111f701-ac2d-4a75-a710-4304e7813f12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df9655a7-2868-470d-b4d9-85731fc68d32"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "800da44c-68ab-4e9e-a5b2-ce2a71839518",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5a5d8ea6-106b-46c1-9ab2-068f94073091"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "734d0bda-0f0f-48e1-9753-672d3c4f66ad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "92c9dd12-d458-4ea8-8eb8-9bcc09d52e01"
            }
          }
        ]
      },
      {
        "id": "6353bf35-9c5a-4a7d-bb93-7b0d3a37bf26",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d6c5a5f4-ad2c-4f36-85ac-685e554916fc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "30889a7a-1192-46fc-9b54-9bc88bf3a4d9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "06b0d0dc-dbaf-4a4e-921c-91be777d0cde",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed96f227-a85d-4f16-8978-8fc34475484d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "32f7b4c5-cb07-4179-b98f-2ce661554173"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f10f0208-3767-4d3d-8ce4-b220a45b916e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28105ed9-f234-48d0-af78-22ee54559441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb5c9c90-8a36-48d2-9b80-2604de2c8ec4",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329d6151-3038-466e-8baf-3b903bb3e9a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4d9dc6f9-2db8-4863-a660-ae3068ee586a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f120ae-21aa-4987-9524-b4f504e463ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66be9875-08fb-4ff9-8385-2e6167d6da02"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9973b734-10af-4cd5-ab0d-09f6b77c75c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb589e13-b11d-4e7e-8100-a5d76f27d5c6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8bf481f-44ae-4086-93bd-04ae08a07631",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f18f50e7-30c8-45b4-a472-df504a1a0515"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc460b47-1944-4a4e-a557-de03844485fc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5e64f2c2-3eae-484a-ad5e-04e6b5373367"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f83bb586-afee-4c64-ac40-caabebe8668a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ab8fd91f-8d08-46dc-be07-30d3e8199323"
            }
          }
        ]
      },
      {
        "id": "64ee6f82-2bd6-485a-9bc7-4a72d8cd83a3",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3189485b-c64e-4e6c-8a5f-aa141660c8b8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2cdb692a-385b-4125-9436-49069125a7d4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6a5277b5-b553-4116-9ec5-6edddc26adf6",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ffe10d-62a8-45dd-b286-60c92a168b89",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0c0992ca-635e-4e24-a7ce-9648cdfe591b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7612559-5ccf-433e-9bdf-d948c2f09669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "908e5e60-8a80-4a60-a19a-64c9efecbb20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f859066-13d3-4245-b054-93b69bb58824",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fed143f-344d-4615-a181-80bbcf810767",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c1d3c436-14cf-4485-8c5a-228e25f4b23a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3866ab63-dd8d-4eeb-88b6-980026c87222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5501c6f-f61e-47a3-ad18-f5ac97826723"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e009271b-5c58-4e81-bb94-e427b1951b31",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d70b68e-6201-4a9d-9a24-1e56065b7138"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4a8f4ad-223d-4e9c-afd2-3f0cd59c5ddd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8d75af9-718d-43c4-ac42-8bd9c148bb9c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aa6e1cee-51bb-4b24-9560-84bf60e1941c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7d3d25fd-6b63-413b-acea-66ca251d5c1d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "68c803e9-ba63-484c-b92d-22406a12f66e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bacd6f63-a352-4779-b232-4cd4ee34da22"
            }
          }
        ]
      },
      {
        "id": "884e11a7-1e4f-4beb-8fb4-314beb1f3a5a",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c8ce160f-7f70-4cf2-a011-3e41c0391e7a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "600b9bae-1ea5-44a8-8a8d-e4d3660fbbac",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d8728900-81b9-41a9-bff9-071d6dc8e584",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "535700aa-ba45-474f-a2c9-1307f9f850bc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "13a2ceb3-2f0e-491e-b025-dce658d40cf6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 90
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 92.00769230769228,
      "responseMin": 18,
      "responseMax": 655,
      "responseSd": 111.80549705447238,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1667695701382,
      "completed": 1667695736423
    },
    "executions": [
      {
        "id": "b6cfc8d3-ede8-477b-b487-5928f8803043",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "28a2074b-8cbb-430a-9adf-ba77e1be7f05",
          "httpRequestId": "ebb7b2c3-1428-4dd5-af97-84ebe488d907"
        },
        "item": {
          "id": "b6cfc8d3-ede8-477b-b487-5928f8803043",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d9885141-a95c-4699-85a3-715d1446813c",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 0
        }
      },
      {
        "id": "60b9cf22-dd38-467a-b46d-4b4214c6e7f1",
        "cursor": {
          "ref": "05d3e18b-9862-4c01-ac21-5bd795f9f95a",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3054032b-475f-4518-8101-c517be7e9566"
        },
        "item": {
          "id": "60b9cf22-dd38-467a-b46d-4b4214c6e7f1",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "96ba0787-951e-4801-b268-f6462cb31b80",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 0
        }
      },
      {
        "id": "62515e72-9cf0-4c91-8865-93f862fbaf1f",
        "cursor": {
          "ref": "8d56af2c-ab00-4395-87b0-907d47946291",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6085a9f4-4c37-49eb-8a93-66f0cf4a3532"
        },
        "item": {
          "id": "62515e72-9cf0-4c91-8865-93f862fbaf1f",
          "name": "did_json"
        },
        "response": {
          "id": "9f23f3c7-f00b-4b94-b0ca-2e8935072a01",
          "status": "OK",
          "code": 200,
          "responseTime": 180,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8afe65b9-fd5f-4716-b9c3-6bc7ffb4de65",
        "cursor": {
          "ref": "d964053e-f218-49fd-bc42-b8a7b489e77f",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ab8fd86d-2b93-4784-b455-83ad91368dac"
        },
        "item": {
          "id": "8afe65b9-fd5f-4716-b9c3-6bc7ffb4de65",
          "name": "did:invalid"
        },
        "response": {
          "id": "9d473c28-db79-49f5-bbf6-655a50c7ae9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8afe65b9-fd5f-4716-b9c3-6bc7ffb4de65",
        "cursor": {
          "ref": "d964053e-f218-49fd-bc42-b8a7b489e77f",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ab8fd86d-2b93-4784-b455-83ad91368dac"
        },
        "item": {
          "id": "8afe65b9-fd5f-4716-b9c3-6bc7ffb4de65",
          "name": "did:invalid"
        },
        "response": {
          "id": "9d473c28-db79-49f5-bbf6-655a50c7ae9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0437d37d-174a-469d-81ee-f7b5177f4d5d",
        "cursor": {
          "ref": "c7291a7b-14da-4f78-8642-7786c61b1b05",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "00320fc3-394e-4962-9658-b7025deb0f6c"
        },
        "item": {
          "id": "0437d37d-174a-469d-81ee-f7b5177f4d5d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2aebdeb1-779c-4f2f-a415-bae9e3d65284",
          "status": "Not Found",
          "code": 404,
          "responseTime": 183,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832d0a92-98dd-4fd7-87fe-8ca921d98e39",
        "cursor": {
          "ref": "2ca07a3f-40db-4ac9-aa30-39c1a7966b71",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "87b008e5-a88e-41bd-816f-29bb22872328"
        },
        "item": {
          "id": "832d0a92-98dd-4fd7-87fe-8ca921d98e39",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "fbf87e79-eb1d-4aeb-a108-2898e5497896",
          "status": "Not Found",
          "code": 404,
          "responseTime": 41,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15fc2cc0-6aba-4402-84e0-2be9b642e1b4",
        "cursor": {
          "ref": "57b225bf-32dc-4d38-8e73-cb4b9d0d8f87",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ec3ed677-5e6d-4a5d-8785-f146e4f03699"
        },
        "item": {
          "id": "15fc2cc0-6aba-4402-84e0-2be9b642e1b4",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "73d978a4-096e-4003-b652-396e15bcb581",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b6eec2-fbea-4014-a923-8767bcca4d79",
        "cursor": {
          "ref": "5dda868a-391a-48b1-b1bb-4d6ec1f9130b",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "de7a87f2-88e0-42c1-96e3-ea26ac854a6f"
        },
        "item": {
          "id": "b4b6eec2-fbea-4014-a923-8767bcca4d79",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ce2a90b4-b8e3-48ac-8f06-540fb6b33ac3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 48,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b6eec2-fbea-4014-a923-8767bcca4d79",
        "cursor": {
          "ref": "5dda868a-391a-48b1-b1bb-4d6ec1f9130b",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "de7a87f2-88e0-42c1-96e3-ea26ac854a6f"
        },
        "item": {
          "id": "b4b6eec2-fbea-4014-a923-8767bcca4d79",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ce2a90b4-b8e3-48ac-8f06-540fb6b33ac3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 48,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2028ac7-8bf2-49c7-aeea-b1d1b40fcb3d",
        "cursor": {
          "ref": "2ece7965-7be9-48f5-a976-9dbeaf3b0e86",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "96342317-1112-48f4-b656-315c23b26b2f"
        },
        "item": {
          "id": "d2028ac7-8bf2-49c7-aeea-b1d1b40fcb3d",
          "name": "identifiers"
        },
        "response": {
          "id": "376ef553-b168-4a9e-ae9e-37acf917456b",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827257f8-6a2f-4abe-8d6a-7545f43eb616",
        "cursor": {
          "ref": "6837d406-48c4-447f-9144-33d3f9ce4e7c",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "27689108-27ee-4832-af97-cb8e471290b9"
        },
        "item": {
          "id": "827257f8-6a2f-4abe-8d6a-7545f43eb616",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bf8d7c6f-94a8-4f56-8d37-890ee8dad3aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827257f8-6a2f-4abe-8d6a-7545f43eb616",
        "cursor": {
          "ref": "6837d406-48c4-447f-9144-33d3f9ce4e7c",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "27689108-27ee-4832-af97-cb8e471290b9"
        },
        "item": {
          "id": "827257f8-6a2f-4abe-8d6a-7545f43eb616",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bf8d7c6f-94a8-4f56-8d37-890ee8dad3aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb7607d-4279-4f3a-bf1f-771138989e27",
        "cursor": {
          "ref": "6241943b-6f18-4424-ad24-e7a82932b023",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "85117b72-9857-4344-bed9-c67c83ccd5f3"
        },
        "item": {
          "id": "9cb7607d-4279-4f3a-bf1f-771138989e27",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "dbdedb0f-e184-42ba-a181-d4abd4ca7ad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c2ae6fe-1cff-4323-be9e-6c8e46422933",
        "cursor": {
          "ref": "00be0701-1a88-479e-9362-ea4949967b8b",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f46a4b84-1bd7-47f8-826b-5beafadd87e1"
        },
        "item": {
          "id": "0c2ae6fe-1cff-4323-be9e-6c8e46422933",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c9f57221-55de-4b2a-bdf7-f7e0f581498c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6f230ef-912a-4b95-9d8b-a2fe37d34936",
        "cursor": {
          "ref": "68feeaa0-af07-4dec-be67-2f34b115cfb7",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7c53eafe-f5e6-48a1-8938-b7f323d5cae5"
        },
        "item": {
          "id": "b6f230ef-912a-4b95-9d8b-a2fe37d34936",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "85315a29-8b46-412b-a21a-b179f4a06f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e46362-a88a-4e74-9486-77a9ab22ac61",
        "cursor": {
          "ref": "7f58a424-899b-4b8b-822f-0f8e0bbb84e3",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1413dc51-d432-43f4-9dd1-e2e8d71840f1"
        },
        "item": {
          "id": "e2e46362-a88a-4e74-9486-77a9ab22ac61",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "712434a4-6a82-4fea-9a4e-7de869a715f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "017298b1-7b13-4777-99d2-b8a85d6c021c",
        "cursor": {
          "ref": "08986461-0518-44fe-8557-5cf52bac0d86",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "81af3069-e2e1-4716-807d-dca750443d91"
        },
        "item": {
          "id": "017298b1-7b13-4777-99d2-b8a85d6c021c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "dea0e2e7-09f8-47b0-a940-73f014fb80db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f13a4f0-bbd1-4e00-a448-a10379c89d9a",
        "cursor": {
          "ref": "9cc192c9-8022-4e1f-8dec-da449328b111",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "753ae47c-2c99-45ba-99c1-13c23844773b"
        },
        "item": {
          "id": "8f13a4f0-bbd1-4e00-a448-a10379c89d9a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e6629262-c829-4146-bc98-3dce0312b676",
          "status": "Created",
          "code": 201,
          "responseTime": 587,
          "responseSize": 537
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "b56fbff0-01a6-48d6-8669-15458fe5f424",
        "cursor": {
          "ref": "afa3656d-ba0e-4c5a-b829-2bf24af55a6f",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a39024dc-15fd-4263-8ba2-20b2a5e6676e"
        },
        "item": {
          "id": "b56fbff0-01a6-48d6-8669-15458fe5f424",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "75336d8b-c405-44f0-b91a-103464ee4538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e29a20-3c76-4874-a474-9093284209a2",
        "cursor": {
          "ref": "cfa6486a-e585-49ea-8b07-6f166605f4dc",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "473d55b7-79c9-49e1-9681-caec18f84aab"
        },
        "item": {
          "id": "c5e29a20-3c76-4874-a474-9093284209a2",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "21f63430-1ad4-4156-8bdb-728f7cd54097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f9fd7f-7ded-49e5-baee-ca1c6f0fe9aa",
        "cursor": {
          "ref": "f74a6d1b-d428-4c44-ba22-314516f44766",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c07210c0-039e-4b66-9763-3ea3befccb71"
        },
        "item": {
          "id": "77f9fd7f-7ded-49e5-baee-ca1c6f0fe9aa",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1b357784-8a89-4e92-97a0-adb903e944a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da7b49f2-4c6d-4a78-963b-79e496f1f683",
        "cursor": {
          "ref": "e0bde6c3-b6a9-4d56-86f5-5bd181ed64e9",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3ea0e43c-855e-4926-923e-715558980cc6"
        },
        "item": {
          "id": "da7b49f2-4c6d-4a78-963b-79e496f1f683",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1331a04b-a258-4a8e-86ae-6da6bec3e374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "280e9f6d-de63-466a-a564-591f07d8780b",
        "cursor": {
          "ref": "75a75826-e6ba-4039-a149-feb14a0d76b1",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "254a6a20-de43-4c88-a6b6-53e6ca90934c"
        },
        "item": {
          "id": "280e9f6d-de63-466a-a564-591f07d8780b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "086cb4c1-88aa-46d9-b9c5-3c6e12a2a5af",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "06d09d77-d232-46b6-b6a7-5a0fffe9296d",
        "cursor": {
          "ref": "daa981ed-7098-49fe-8aa1-32ea69600144",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "da4a9d16-ceea-4cef-9a99-b1ed5648ef09"
        },
        "item": {
          "id": "06d09d77-d232-46b6-b6a7-5a0fffe9296d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "37110209-0b1a-4842-97be-39fdbd98f0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "265fd6e7-475a-4ead-ac51-82688c85d397",
        "cursor": {
          "ref": "f58e0ed5-f232-454e-86e5-418b6e84ee39",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b72b4d54-8743-4830-b28e-5142fde7770d"
        },
        "item": {
          "id": "265fd6e7-475a-4ead-ac51-82688c85d397",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ffd90268-e01f-4fcc-aa3d-178e5bb93e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ed1675-01f4-49a6-ac29-264fabb8d2fc",
        "cursor": {
          "ref": "16d0370e-d7b7-45ea-957b-86eb69499c45",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5f0a73a5-f809-4875-a828-c37feb4772e6"
        },
        "item": {
          "id": "05ed1675-01f4-49a6-ac29-264fabb8d2fc",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "9ab46919-ef5a-46de-876d-e2a0f67d2945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786a5cfc-2a50-48a4-8d20-2f6969e99d3c",
        "cursor": {
          "ref": "accf1c3a-00b2-4c19-82ea-459d67048365",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3a297abe-89fa-4545-87e5-51ac47749e46"
        },
        "item": {
          "id": "786a5cfc-2a50-48a4-8d20-2f6969e99d3c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "d0065f22-1cdc-4af7-a7ce-973788b897e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9edd64eb-3b85-41f3-ae70-e19a605fad0d",
        "cursor": {
          "ref": "a5cfc669-f982-45e3-8062-765ab80c4808",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "220d5054-a29b-45e5-9ab1-61b08e480fc4"
        },
        "item": {
          "id": "9edd64eb-3b85-41f3-ae70-e19a605fad0d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "824a9b5a-d7e4-4ec4-9312-27557f8fb6ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8736fe78-060a-4d49-9853-0dead2356a90",
        "cursor": {
          "ref": "0938da4b-27be-4fdb-8e44-7802ebf37e6e",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "fdebef74-bbe7-418b-9cd8-1d63b8f2ae62"
        },
        "item": {
          "id": "8736fe78-060a-4d49-9853-0dead2356a90",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9ed78ab6-a364-47d4-a437-4655853580f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea20c0b5-3015-44c6-b191-20967ce52cbb",
        "cursor": {
          "ref": "c9a01d5c-64f5-4457-8026-ad54f4d7d0c5",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4380062d-4ac7-44b2-bb0d-3599ad617c23"
        },
        "item": {
          "id": "ea20c0b5-3015-44c6-b191-20967ce52cbb",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "228e7079-39f1-4ac3-85f4-eca89b634bea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "571d2bfe-295e-4193-ba21-cad59500cdc0",
        "cursor": {
          "ref": "83d4a042-7a94-487f-8790-7ac10ee9cfd0",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f366e8d3-d0ba-4e8e-ac06-6355179da6b8"
        },
        "item": {
          "id": "571d2bfe-295e-4193-ba21-cad59500cdc0",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "9f05d022-bb7e-46ef-8fe3-1c256c695810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d34aaa9-0d5a-4679-9b03-4ff6634ff95d",
        "cursor": {
          "ref": "507588dc-c132-42ad-9c50-2d2bc91fca09",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "53b4dc4e-d59b-4046-89fc-94802a144b0c"
        },
        "item": {
          "id": "1d34aaa9-0d5a-4679-9b03-4ff6634ff95d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "82c4a2f5-20e8-4e2b-b0fc-a326d74a3728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b27b7a74-7fd5-4bb8-b32f-aa6e0c9b8437",
        "cursor": {
          "ref": "9a4b8857-4778-40ad-91da-21b0362c40b3",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "1844ecae-cece-4dc7-91a5-11a101fd69ec"
        },
        "item": {
          "id": "b27b7a74-7fd5-4bb8-b32f-aa6e0c9b8437",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "026d16b1-d980-4f6f-96ba-4f96d287d56d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb8534d-9f09-4f97-ae13-a481f5f391ab",
        "cursor": {
          "ref": "db7923df-4c3b-4b31-817a-9a7b22445a3f",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9dbd45b6-dddd-4b69-bcb7-b2fea94a941c"
        },
        "item": {
          "id": "dbb8534d-9f09-4f97-ae13-a481f5f391ab",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "847db69d-c8e8-4d8f-9ede-cc443a130471",
          "status": "Created",
          "code": 201,
          "responseTime": 553,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "843e8680-62af-4c2c-ada9-4d8b82183935",
        "cursor": {
          "ref": "77be02f4-8c18-4452-bff1-bda892e9519c",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6088974f-01d3-4e4c-a257-dc1cba08c5d4"
        },
        "item": {
          "id": "843e8680-62af-4c2c-ada9-4d8b82183935",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ce9c2f1c-2c3b-4ee9-b73f-bc7c28afbcbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096da32b-74c4-4105-ad7d-0f2e69a99b64",
        "cursor": {
          "ref": "413ec17c-0356-4fbe-a9a2-736695a795dd",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8508aad8-fde7-48be-9b06-f04e828a3515"
        },
        "item": {
          "id": "096da32b-74c4-4105-ad7d-0f2e69a99b64",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "7f832143-ffa4-4fe3-b6ac-62063ad965b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc7637a-e8dd-41fd-a58f-06a26a55feaf",
        "cursor": {
          "ref": "50a1a1b7-441e-404f-bd3c-0bde1b81d4a0",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3453d993-7b7a-40f4-ab54-24fad3e5b47e"
        },
        "item": {
          "id": "ebc7637a-e8dd-41fd-a58f-06a26a55feaf",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5e25d2b1-1371-4e63-966c-600b0c7f7a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50b14e9e-be94-497c-8698-f2ea31ff89a5",
        "cursor": {
          "ref": "02fe304a-8e02-4942-9fc3-0392133db236",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e47d37ba-d4d8-489b-aecb-dc3bd6c8c2b8"
        },
        "item": {
          "id": "50b14e9e-be94-497c-8698-f2ea31ff89a5",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "10772c01-d76f-48d4-991a-d42733489a6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab4e0a6f-a31e-45bf-8821-59a00f6faa05",
        "cursor": {
          "ref": "50c53eb0-a04a-44e3-ade3-a98cbd6cdf73",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ad0e3158-1d72-40c2-8c8b-b841cc28d2b7"
        },
        "item": {
          "id": "ab4e0a6f-a31e-45bf-8821-59a00f6faa05",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "447415e0-e10c-4376-bf5e-f05a8e7185bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80da5e9-9ac7-40e5-bed8-189fbcc5a54c",
        "cursor": {
          "ref": "bfd3c50f-6fe8-4118-b2b9-9fe1e990b126",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4380e356-413f-4573-8f4a-f2d4ae958eb9"
        },
        "item": {
          "id": "f80da5e9-9ac7-40e5-bed8-189fbcc5a54c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e78f5625-c380-4dd8-9f76-8174d6bc56a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae628ec-208a-4cc9-86e5-feb4bcdf87cf",
        "cursor": {
          "ref": "bc0229b2-744d-43c9-a3e7-b17cbed31e55",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "045d1582-da62-41d2-878a-d3e700847417"
        },
        "item": {
          "id": "7ae628ec-208a-4cc9-86e5-feb4bcdf87cf",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f707fd0a-68e7-41b5-b2ba-c811a6d4beaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb2237d8-8b9f-40cf-b2dc-d45e10068906",
        "cursor": {
          "ref": "d88219d2-3679-494a-8d95-ef6a8314f913",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4bee81e5-8d3b-4624-8de9-ceb4253cf7c9"
        },
        "item": {
          "id": "bb2237d8-8b9f-40cf-b2dc-d45e10068906",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "08a0a45d-ba42-416c-9da3-8929137f14bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea1fa6ab-1143-439f-aea8-e42768287bdc",
        "cursor": {
          "ref": "65d6b384-1afb-4555-9a70-b9f063995e2e",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "7cd8a076-9d18-4f76-8e72-460a8ec90a83"
        },
        "item": {
          "id": "ea1fa6ab-1143-439f-aea8-e42768287bdc",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1c37bb7b-98ab-452d-90a6-dd9d2b987c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d9e404-9768-4120-a15f-b870ec7d5f14",
        "cursor": {
          "ref": "273cb8b9-b735-4eae-abb6-792424d9b2b6",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "26265e53-00f1-447f-a26b-430c20aa275e"
        },
        "item": {
          "id": "d1d9e404-9768-4120-a15f-b870ec7d5f14",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2a818df8-8f29-4046-8e6b-c6fc39b58d92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07e7b592-8ddc-407d-afc3-44ddfb77fd38",
        "cursor": {
          "ref": "1de4bf25-2f6b-450f-99a6-12b2405377ad",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "25984cc1-6212-480b-b438-1e6dc89e656f"
        },
        "item": {
          "id": "07e7b592-8ddc-407d-afc3-44ddfb77fd38",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "21b96ebf-8c54-417e-9b4c-8850e23bc491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2337f76a-f011-46e6-9510-7e724773c5c1",
        "cursor": {
          "ref": "8eb7bc50-31c9-4ecd-9edf-241d81cb70c4",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8f087b91-7fc7-4fb8-827e-bc2639154471"
        },
        "item": {
          "id": "2337f76a-f011-46e6-9510-7e724773c5c1",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4089ca24-9b03-49ad-be8a-db801bb2f300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5f52d80-6150-4d29-a865-dc11935e3bcc",
        "cursor": {
          "ref": "fcb47741-5cbb-40e8-b9b2-3f339b186558",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1802ae78-140e-441c-bde3-b225b187e532"
        },
        "item": {
          "id": "e5f52d80-6150-4d29-a865-dc11935e3bcc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9e3f061f-e87e-4502-bfaa-d793a95f99fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "31c794e5-672e-45c1-8a92-06ebbfa89d5e",
        "cursor": {
          "ref": "bee4807b-8dfb-4f58-a954-4af720a678fb",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e23c81ba-4511-4d39-845f-8601987d9747"
        },
        "item": {
          "id": "31c794e5-672e-45c1-8a92-06ebbfa89d5e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7734bad5-65f5-4791-bce7-5a930349b1b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a8c507-a60c-4574-9af8-f0f01383e868",
        "cursor": {
          "ref": "9491116d-706b-4434-ac47-3eb5f5883277",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8ef1e8d2-d437-49dc-b4c6-c32480fecba6"
        },
        "item": {
          "id": "60a8c507-a60c-4574-9af8-f0f01383e868",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1c2fef6a-8bb7-4874-b10d-9d122a92280e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a99aeb0-8e0c-417b-b78e-7b94f3fe5659",
        "cursor": {
          "ref": "538b24af-91b2-4ace-99a3-c64da3b9f4b2",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c1511ab5-0dd8-4165-ae50-67a3a3e08094"
        },
        "item": {
          "id": "0a99aeb0-8e0c-417b-b78e-7b94f3fe5659",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d2718df1-29b1-446a-b90b-3da492005251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb2c771c-361d-4015-9abd-159a71cf79e5",
        "cursor": {
          "ref": "c5eaa776-dc37-43e4-9f71-3c06e000e90e",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c9b1e1a1-5f74-4ecd-9e46-36376ac33218"
        },
        "item": {
          "id": "eb2c771c-361d-4015-9abd-159a71cf79e5",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "665ed2c1-e33e-465e-8216-23bb6c7bb95d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e962fe1-dfa8-4dfa-bc0d-a89cc75d46db",
        "cursor": {
          "ref": "315ed6d0-7360-498d-ad9a-2b2b6cfbe315",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5920d6d1-a0e5-423a-a21d-0f3c8a01a6a0"
        },
        "item": {
          "id": "3e962fe1-dfa8-4dfa-bc0d-a89cc75d46db",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "cd1bec19-3854-413e-a96c-7e20861f371e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e20f38-7b52-4cda-b0c6-6df74fd36f3a",
        "cursor": {
          "ref": "f7aff551-11f5-4de6-813d-ee034d79b930",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c9385c1b-6a5d-4fc0-aa19-264c06da7501"
        },
        "item": {
          "id": "46e20f38-7b52-4cda-b0c6-6df74fd36f3a",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e5808ecf-b861-4a69-bcfe-adaf8e56e5b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "840a3343-1427-4bb5-acd8-a3c6501b6a04",
        "cursor": {
          "ref": "d2118730-dfc8-44d2-9c3a-85680062c206",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "9f7418da-9326-4bb5-a593-0bd263c2c50c"
        },
        "item": {
          "id": "840a3343-1427-4bb5-acd8-a3c6501b6a04",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e526332a-e04b-4290-9bd6-d23a12f60f47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "1b7f4530-08a7-4235-a351-376150c02f27",
        "cursor": {
          "ref": "736dc88d-9d8f-4b30-b101-7c3ad845f536",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e69477b0-26d6-499d-b26e-c79d31f888f0"
        },
        "item": {
          "id": "1b7f4530-08a7-4235-a351-376150c02f27",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "7853a647-dd21-470c-a916-280512fc8b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd161ea-c3a1-40a5-bf23-4e540c0baa17",
        "cursor": {
          "ref": "d54592b9-1242-4e37-b0f2-9314ca45872b",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "597d084a-33af-44eb-819a-74fe430b38b4"
        },
        "item": {
          "id": "1fd161ea-c3a1-40a5-bf23-4e540c0baa17",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ebd5ca90-6bcc-4978-98f1-463227530e8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94cb5238-f033-4910-b843-7f258c132082",
        "cursor": {
          "ref": "6e6ddfcd-c424-4183-adbe-0cec7ec819ab",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b24646c9-d390-4213-be8e-6d902e62d5f1"
        },
        "item": {
          "id": "94cb5238-f033-4910-b843-7f258c132082",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "492efd71-6be8-45b3-a6c8-3569d15c31bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd768dc-d20e-4a3a-b5d4-776b00b22ddc",
        "cursor": {
          "ref": "1d665b52-a464-4a9c-90e3-006606e2bc8f",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "58a81570-e108-44e3-b1e5-c4e355f2365a"
        },
        "item": {
          "id": "3fd768dc-d20e-4a3a-b5d4-776b00b22ddc",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "333c2277-bafc-478d-911d-13aaa8c73422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "257c8238-11db-417c-9a6f-298408e2e567",
        "cursor": {
          "ref": "42608efd-740a-4721-985f-94656b7ef97e",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5dbe9e99-ca03-4704-b4c9-630ab12ba4b0"
        },
        "item": {
          "id": "257c8238-11db-417c-9a6f-298408e2e567",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d5d7105b-0131-4274-af48-86ef8bccce46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f603cb-5b2f-43f4-ac73-14b0f89c0e84",
        "cursor": {
          "ref": "7a75d870-0a7d-431c-bc85-daf6c7f20901",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1f8c7c21-ef13-47af-93fe-1398f990e4d4"
        },
        "item": {
          "id": "b1f603cb-5b2f-43f4-ac73-14b0f89c0e84",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "0f9b015c-df9f-4de1-9724-2c6da8f2ef5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a40b8c-e7eb-407e-b69a-c69868e84e74",
        "cursor": {
          "ref": "37faad66-2869-44a0-b238-876cdf5d7a78",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4e1a509d-4fa2-43fd-95b2-ba60aaa3f178"
        },
        "item": {
          "id": "93a40b8c-e7eb-407e-b69a-c69868e84e74",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d8c103c9-e1e5-428f-b189-df44eeb7dc32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd4efc4-fb4b-42fb-a6bc-387a476dfccb",
        "cursor": {
          "ref": "cf5617df-b002-4264-991d-d5f65b681a29",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "06e01c00-15a2-4ad8-b4ec-2ce79284d75b"
        },
        "item": {
          "id": "bbd4efc4-fb4b-42fb-a6bc-387a476dfccb",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a8030bf7-b6c2-4518-998a-b5f7c0e2b44d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8eaad8a-4e22-42f5-b879-714daf0f85ba",
        "cursor": {
          "ref": "080aa865-a246-474b-9502-544235246107",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c8e283d2-9015-4e8d-a6f4-1bb70f502f9e"
        },
        "item": {
          "id": "f8eaad8a-4e22-42f5-b879-714daf0f85ba",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3034fee9-7161-4888-8527-539cc94e8c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c60df653-ce96-4dd6-ab85-c000640912b5",
        "cursor": {
          "ref": "272045a2-80ec-4b3d-ab7f-83e9a7162af0",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "90288890-dfa4-490c-b623-ef6354e5ad25"
        },
        "item": {
          "id": "c60df653-ce96-4dd6-ab85-c000640912b5",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ad97abda-2232-43e7-aca0-09ab268ccfa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70bc11d-7017-4e7f-933a-cae90dfb2ef8",
        "cursor": {
          "ref": "76ae47bf-83bd-45bb-a5f5-9b6fc2aed632",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ea4600d9-0bd4-428c-b390-2c4fbc7b9c95"
        },
        "item": {
          "id": "e70bc11d-7017-4e7f-933a-cae90dfb2ef8",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "fc4734d0-e718-4849-8e1b-742bfaf4ff92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed015668-7ec1-46ef-813a-d5fb87eea79e",
        "cursor": {
          "ref": "2d889e58-cab9-446e-b695-5dcff5792e0d",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "aaf4371e-2bb9-4597-be5f-f4210626f471"
        },
        "item": {
          "id": "ed015668-7ec1-46ef-813a-d5fb87eea79e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "cb5d534e-5b5e-4a8f-bf4f-d182ae60d608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "417b6f82-0fa5-4b01-b959-87a5fa4b298d",
        "cursor": {
          "ref": "4c31bcdc-cec9-4511-83b7-4756720b0a12",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a21dd7b1-d273-481c-9076-65d8e7a88b3a"
        },
        "item": {
          "id": "417b6f82-0fa5-4b01-b959-87a5fa4b298d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b5f3bdc3-30a2-40c8-8fcd-328235afd7c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a6e2962-0b58-43c7-8491-34bf2d21b7d0",
        "cursor": {
          "ref": "50dae3be-0de7-4469-89e0-bc9b884a493c",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f85e0142-05e1-49c6-b91e-241f7ba48c0f"
        },
        "item": {
          "id": "7a6e2962-0b58-43c7-8491-34bf2d21b7d0",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b5ba0932-72db-481b-8a1f-ca9770d1ef10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3ffbe0-c486-4c0a-8807-0783d4d90989",
        "cursor": {
          "ref": "695c4490-61c1-4520-b51c-e1b74fbacf3c",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "3899f387-a6f9-46aa-b063-da2b46bfb534"
        },
        "item": {
          "id": "fc3ffbe0-c486-4c0a-8807-0783d4d90989",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2a1d8adc-865b-48ec-b240-562f5af99345",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d04c532f-786e-48b3-bb2a-9529dfaa04ca",
        "cursor": {
          "ref": "743d47d0-36b4-4655-89f1-23d2b8315289",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "173b8104-8a4d-4626-8fbc-9ad916df691b"
        },
        "item": {
          "id": "d04c532f-786e-48b3-bb2a-9529dfaa04ca",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b87a6213-c27a-4cbd-90c4-f2ae8f976eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e662efb7-a509-487c-935e-4a68beda1296",
        "cursor": {
          "ref": "b2daa6ea-7a1d-4686-9f1d-b98adb1d48e2",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "fb1fb6b1-ff50-47e4-b56e-fb21197202b1"
        },
        "item": {
          "id": "e662efb7-a509-487c-935e-4a68beda1296",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "471b762c-b0d8-4765-81c4-dd8350c98d72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d60678-47ff-4f54-9964-45740d655b3f",
        "cursor": {
          "ref": "cb965fa0-8807-493b-8dab-bae4d719b19e",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f750ee1d-711e-416a-a219-802c3616dbfd"
        },
        "item": {
          "id": "55d60678-47ff-4f54-9964-45740d655b3f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "46a1e05d-328c-4743-a024-cdb9ea2e039a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f417541-21f8-48dc-8c43-34843e09ef89",
        "cursor": {
          "ref": "7c0a1df5-6320-4431-b8a5-a5b8af166348",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "971c537c-7e8e-4396-85d6-8810f9836a43"
        },
        "item": {
          "id": "8f417541-21f8-48dc-8c43-34843e09ef89",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "cf55e059-4218-486e-95c0-366e766fe040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7037f15e-ebc0-40c0-ab56-7f743d19b084",
        "cursor": {
          "ref": "5a1625d7-7f1e-408e-b48b-779911b1ed07",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "bbe9bb0b-a848-4c54-87d8-9795def4a21b"
        },
        "item": {
          "id": "7037f15e-ebc0-40c0-ab56-7f743d19b084",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "620f9a33-9fc5-4cfd-8205-ce77d78d7ad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3a43d7-3249-4433-be0c-8164ac63e82a",
        "cursor": {
          "ref": "a23bd0a9-19a7-4715-8dc7-be7ea6336504",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e6e639cd-f06f-40b1-b6fd-c9ee00bcfaf6"
        },
        "item": {
          "id": "bd3a43d7-3249-4433-be0c-8164ac63e82a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c5ffb2ee-36b2-467d-9efc-68f73afa70c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70df75fd-d06a-4d7e-bdac-92b01620f24e",
        "cursor": {
          "ref": "8f0a2c0c-3857-413f-94e2-e838861c76a6",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "52114722-cfca-4c5f-b1f7-bf887c577e87"
        },
        "item": {
          "id": "70df75fd-d06a-4d7e-bdac-92b01620f24e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b83f8eac-2271-486a-b23e-48a78f9af551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fca3641-cc86-4f9e-874d-2af0ed78883a",
        "cursor": {
          "ref": "82b5116e-2092-490d-bcdc-633786a9fb7f",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "dfadf9f9-8867-46bb-9957-5190c4a0ce18"
        },
        "item": {
          "id": "5fca3641-cc86-4f9e-874d-2af0ed78883a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "a2ec0165-e37b-44d3-963f-061ff0f2f063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab903a23-59ff-4c73-8483-df4f642e0872",
        "cursor": {
          "ref": "884f5ee3-cdea-438d-9839-d1cdc78cab2f",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "d2f24bc8-9305-4a3a-a897-81e904f89406"
        },
        "item": {
          "id": "ab903a23-59ff-4c73-8483-df4f642e0872",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9a69217b-ffb2-4267-86ca-f635e5823a4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ab3de2-5c96-4576-8edf-7c46fd5e33fc",
        "cursor": {
          "ref": "2a92eced-3e33-41eb-8df1-78b0e7e1cb9a",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "aac74707-b3bc-404f-95e8-a360ba06ff24"
        },
        "item": {
          "id": "28ab3de2-5c96-4576-8edf-7c46fd5e33fc",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3c079f5c-10ff-43fd-8c00-e414cf260200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8680596-4092-4d67-9d41-0c0ca14e6276",
        "cursor": {
          "ref": "1724e31b-365c-4d99-b249-bf1b377cdaad",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "785d861d-b613-4d8a-9b6f-63775c8fa841"
        },
        "item": {
          "id": "d8680596-4092-4d67-9d41-0c0ca14e6276",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7237fb6b-1b51-4ccc-be97-e9503778828d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4b35c8f-a8a5-4ab8-8daa-b58d480e0e7c",
        "cursor": {
          "ref": "d8b977c6-0b98-45f8-889e-889d9adc64e8",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5b181e8a-e18b-4bef-bac8-867616032be1"
        },
        "item": {
          "id": "d4b35c8f-a8a5-4ab8-8daa-b58d480e0e7c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "23a09366-0691-4bb2-b99d-54186f828700",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e39414a-c48d-4e07-8022-f369cfd5f0cc",
        "cursor": {
          "ref": "af481eec-6b01-4ce6-9c9e-2b2f97583972",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8d099ae5-d11b-4d0f-8b5f-6b9dc9a4657b"
        },
        "item": {
          "id": "1e39414a-c48d-4e07-8022-f369cfd5f0cc",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "06b5bcea-0646-4c03-94e0-9b2bb27fb851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b074b640-8321-4cb6-834a-91b0c10a9e35",
        "cursor": {
          "ref": "e39404c5-27d1-4381-a705-b8c286d9d86d",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f93e0fab-a3ff-4cc5-9633-a01de27a4e83"
        },
        "item": {
          "id": "b074b640-8321-4cb6-834a-91b0c10a9e35",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f2c398ab-e6a1-43e7-9aa9-f930842d996a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9893c8a6-7788-484e-8771-97b03732c568",
        "cursor": {
          "ref": "39a88472-f329-4fc7-a077-b85c085867f7",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9eae07dd-3961-439f-add6-4e0875a62654"
        },
        "item": {
          "id": "9893c8a6-7788-484e-8771-97b03732c568",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1922af38-6d2e-41d5-b283-0d3cbd986c8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c11fe1d-6775-4b1a-90a8-00bc61b2e770",
        "cursor": {
          "ref": "f05efa15-8e8c-4350-b05a-c92ee9bc0599",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7d8f793f-e4a1-430a-a584-aa849235fbcd"
        },
        "item": {
          "id": "1c11fe1d-6775-4b1a-90a8-00bc61b2e770",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "08a9b281-def5-4f15-bd8b-747f9f9a7c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 258,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e911d8-b314-4173-85f5-36e1ed6647c4",
        "cursor": {
          "ref": "22a2db8d-1d8f-4871-839f-b9da67d4a48a",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "cb39eb1c-eb82-4047-9ced-6fdc34a7b134"
        },
        "item": {
          "id": "d6e911d8-b314-4173-85f5-36e1ed6647c4",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "edc2096b-655c-4510-9042-8f30786f9563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c6bc7e1-7b33-4282-a973-0c9d0dd983e1",
        "cursor": {
          "ref": "fb3cd757-357d-4e91-9bbf-e4985eb34687",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c1d4ea9f-88df-4718-a17a-4deb69285f3a"
        },
        "item": {
          "id": "9c6bc7e1-7b33-4282-a973-0c9d0dd983e1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "3ea5693f-8ea9-470e-a7a8-068bdd53d174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c38ce920-bbcd-4add-aef2-cfce65316e09",
        "cursor": {
          "ref": "3f7eec65-84c3-4150-bacb-c704c964b2d6",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "af777047-5ac4-45df-9f9e-def43bde45b6"
        },
        "item": {
          "id": "c38ce920-bbcd-4add-aef2-cfce65316e09",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a2846211-e8ea-43f0-b832-cf484db73856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa2009a7-9bfe-4ac9-90a2-b69cceccf52b",
        "cursor": {
          "ref": "00a84bd5-a50c-4974-83ac-db1991a38e4f",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "15ca6a62-a448-4c92-9669-bb122b9a1315"
        },
        "item": {
          "id": "aa2009a7-9bfe-4ac9-90a2-b69cceccf52b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "259890b7-35b7-4a8f-a544-81d73455ea61",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "4c6fa50e-88c6-4e23-aaa9-3b3499d5d876",
        "cursor": {
          "ref": "a3dc0cd3-a6fe-4fbf-a8ce-79f80777ad62",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d0e23fb7-86c3-43b8-ac18-742714322a15"
        },
        "item": {
          "id": "4c6fa50e-88c6-4e23-aaa9-3b3499d5d876",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "489b62d8-58d4-45e6-baf5-760db0877cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c544a4-85a8-4a3c-bbc8-331897949c7d",
        "cursor": {
          "ref": "f2971844-8db3-4aec-a8bb-cd79df6fb102",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d4f587b1-0da6-4d4e-b03e-cb5fbb413089"
        },
        "item": {
          "id": "89c544a4-85a8-4a3c-bbc8-331897949c7d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "26573548-22f7-4459-a172-8e6027f84d5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f725376-f41e-4bf3-8aad-22cce357b54c",
        "cursor": {
          "ref": "9e9a955f-b4b5-4d93-8971-2475cc749080",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "174f8ec0-1db4-4bb2-a07a-1b35511fe953"
        },
        "item": {
          "id": "1f725376-f41e-4bf3-8aad-22cce357b54c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e28be452-3d89-4a8e-8685-6f4d7abf2682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "457f1ace-52d8-4216-97b4-c9f5b8b2e560",
        "cursor": {
          "ref": "199e5889-e467-49d0-8729-7fcdaa0553db",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "afa07da0-c1b5-47b5-a262-bd83f24e7831"
        },
        "item": {
          "id": "457f1ace-52d8-4216-97b4-c9f5b8b2e560",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "0e09b634-48ce-44e0-8940-ede05ba5d1ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c7fafe-663c-45f3-8b98-523edb8c7713",
        "cursor": {
          "ref": "3cdaba84-168e-4448-9adc-7d4ebd85c495",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "af1d9e57-b708-41ac-8f13-ec9d9990171d"
        },
        "item": {
          "id": "24c7fafe-663c-45f3-8b98-523edb8c7713",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7ec431b0-ca8a-4a59-810e-001db90f1cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc57738d-c665-4dfd-b916-ea77ee606c7d",
        "cursor": {
          "ref": "0f818c76-ef1c-48b4-a4f4-05ebca745b58",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7e571a1e-9b8b-460c-8604-0c9dfb7b3b21"
        },
        "item": {
          "id": "cc57738d-c665-4dfd-b916-ea77ee606c7d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "eb7c7370-38ce-4e2a-9750-257ca67e2723",
          "status": "Created",
          "code": 201,
          "responseTime": 467,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "87b4e08d-cd83-4929-96af-a98876e7b868",
        "cursor": {
          "ref": "fe4df944-9deb-4fd4-bb2a-75b0f05dde2f",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7815f116-ab30-4ff1-9875-ab2190960558"
        },
        "item": {
          "id": "87b4e08d-cd83-4929-96af-a98876e7b868",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "04a35b70-e5e8-48c2-a0d5-958e9106b951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f427e0-f978-471d-a695-4408a9a666b7",
        "cursor": {
          "ref": "dded119e-3e9a-4cc0-b431-753083629f6e",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "51d3430a-dc3d-41e0-a0d4-c9943ba6bdfa"
        },
        "item": {
          "id": "c7f427e0-f978-471d-a695-4408a9a666b7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "744f349b-b8b2-4cdc-8391-d841550ff72b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0693c740-fe82-4751-84d1-ec514f912b6d",
        "cursor": {
          "ref": "6f218ef9-39e9-4617-8cf3-04b60eb74244",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "495742c1-6b2d-4c77-9269-c1be46c63ae4"
        },
        "item": {
          "id": "0693c740-fe82-4751-84d1-ec514f912b6d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "1c0c0818-e7a4-4d1b-bb79-deea8cd6e93e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9195b522-6c94-4241-a74b-0988387be607",
        "cursor": {
          "ref": "30a4565c-3fa0-4c90-81e5-e083e7f0037d",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d1bf5af2-9ace-4ce7-8f5a-a9f1b7434308"
        },
        "item": {
          "id": "9195b522-6c94-4241-a74b-0988387be607",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b44b47ff-c27f-4dd3-b698-dc953d6ede2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41fdb3da-526a-4411-9307-3a2deb12a78d",
        "cursor": {
          "ref": "a56b7d0b-da95-4d7e-85d6-9d92e62356df",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b3b38a03-231f-4939-9ac3-0ea5cab1e12b"
        },
        "item": {
          "id": "41fdb3da-526a-4411-9307-3a2deb12a78d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "778e32d1-afba-4fdf-bf1b-72ed9be4be0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff7d7987-1965-4ae3-b749-ece738a476c1",
        "cursor": {
          "ref": "995e68e7-f5f2-48b1-8ea9-45bd34032b38",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b1e5b8cd-623e-4726-acb9-63ac20f7e3e0"
        },
        "item": {
          "id": "ff7d7987-1965-4ae3-b749-ece738a476c1",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f39b2b07-5459-46d8-a087-338994539946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "401a688f-c202-488d-8c69-0981ac43956a",
        "cursor": {
          "ref": "ffd19c09-4bf7-40f7-af49-7e82b3141244",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "4300777e-1e85-45bc-8aa7-6a3a5ae3d58e"
        },
        "item": {
          "id": "401a688f-c202-488d-8c69-0981ac43956a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ec239cf7-31f5-408c-94ea-92da654abd8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2063cdb2-b136-4dd5-a891-e5e0a8afe65e",
        "cursor": {
          "ref": "bbc12f40-7b0d-4f80-94c2-6022d4c1d9b5",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "13f5fdf8-7fcd-4dc7-985c-d1d5911cb90a"
        },
        "item": {
          "id": "2063cdb2-b136-4dd5-a891-e5e0a8afe65e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "bd5731d0-1aae-4344-a4db-d7aebee7ecae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe1ed387-3029-4b49-8329-3ce18334a516",
        "cursor": {
          "ref": "976f12e6-53fb-4309-b6b6-773f982b322d",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "a6d1db57-7706-431e-bfb2-0086938146ad"
        },
        "item": {
          "id": "fe1ed387-3029-4b49-8329-3ce18334a516",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "bd1f7674-0c2a-4516-b2f7-5374b3bdb2c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "a1daeceb-9a6c-4f77-8ce6-bf4e6f97b37f",
        "cursor": {
          "ref": "478437c0-68a0-4446-9b70-850a6d06ff6d",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8d7b9a11-873f-4570-9fbd-930ada90b18b"
        },
        "item": {
          "id": "a1daeceb-9a6c-4f77-8ce6-bf4e6f97b37f",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "b799c306-58fd-48c1-af86-7cc2e87dbf40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "6c4b5207-e3cf-4f85-87c3-060133cf26a4",
        "cursor": {
          "ref": "27bf6aab-98b3-456d-8c32-0da54fba2f11",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "88a7a9b1-74cc-41bb-9533-03645b47a4d8"
        },
        "item": {
          "id": "6c4b5207-e3cf-4f85-87c3-060133cf26a4",
          "name": "credentials_issue"
        },
        "response": {
          "id": "344e51ed-75db-4b77-af9b-04f9b6b89393",
          "status": "Created",
          "code": 201,
          "responseTime": 424,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b63333-979f-4b15-8182-df0aa80c701f",
        "cursor": {
          "ref": "387b166e-28de-44a0-a102-065386dd963b",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "6cf27029-ee34-43be-bb74-caa8d30cde96"
        },
        "item": {
          "id": "86b63333-979f-4b15-8182-df0aa80c701f",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "bf1a81d0-65b7-454c-ac8c-7d48d3004db3",
          "status": "Created",
          "code": 201,
          "responseTime": 367,
          "responseSize": 590
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae66cc26-a919-41d9-8c94-fe9b5e800357",
        "cursor": {
          "ref": "06b7f1ae-c64c-48c6-aa2c-46efcef45601",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ec2a6c25-1789-4f8a-94ce-054ec6474ab7"
        },
        "item": {
          "id": "ae66cc26-a919-41d9-8c94-fe9b5e800357",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "73dcdd39-f1a3-40ee-b59e-561c124675ed",
          "status": "Created",
          "code": 201,
          "responseTime": 431,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb8dff2-d9fa-4cf1-ac3c-25a1bdd16707",
        "cursor": {
          "ref": "b7a245b6-4ce1-48f1-9315-fffbc173aee0",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "912bca66-7dbc-43bf-9050-624d4b285956"
        },
        "item": {
          "id": "9cb8dff2-d9fa-4cf1-ac3c-25a1bdd16707",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e4737e81-6e73-47a2-89a9-a437410cafdd",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c2855d3-1f92-4bd2-9d60-a394995c03a1",
        "cursor": {
          "ref": "49cadca2-3b14-491a-8036-cd9421cb16f2",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "24d276d8-e32c-4b8c-a268-ef49c66f81d2"
        },
        "item": {
          "id": "0c2855d3-1f92-4bd2-9d60-a394995c03a1",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "34dccc59-01b7-4162-b75e-4a4644da29ab",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "72366b94-3dfd-47f1-a541-44f35fb3a41a",
        "cursor": {
          "ref": "ead42243-18ee-4972-8adb-c2d56c8ecce3",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7088fea7-acf3-4f15-85a1-8eb05d07707f"
        },
        "item": {
          "id": "72366b94-3dfd-47f1-a541-44f35fb3a41a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "44978798-30c0-4ca1-b3bb-56f49a6f018a",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 537
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27db6e90-0a9d-45f2-85f6-9d882a2c7075",
        "cursor": {
          "ref": "f5efae9a-5167-4eb9-b196-c4c6048d641e",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "701628c5-c1b6-45a9-98f6-53ce21ec4e5d"
        },
        "item": {
          "id": "27db6e90-0a9d-45f2-85f6-9d882a2c7075",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "311e8b59-8131-4545-8078-f1dbad977d9e",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "27db6e90-0a9d-45f2-85f6-9d882a2c7075",
        "cursor": {
          "ref": "f5efae9a-5167-4eb9-b196-c4c6048d641e",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "701628c5-c1b6-45a9-98f6-53ce21ec4e5d"
        },
        "item": {
          "id": "27db6e90-0a9d-45f2-85f6-9d882a2c7075",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "311e8b59-8131-4545-8078-f1dbad977d9e",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "727a7282-3d0e-40a6-8940-b860f7903a3f",
        "cursor": {
          "ref": "93dbe7d8-9f16-4c91-95ec-a1d663accbab",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a04e9eac-860b-4b6f-bc73-05e43b21bc98"
        },
        "item": {
          "id": "727a7282-3d0e-40a6-8940-b860f7903a3f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4d58d61e-e6e8-48c8-a52a-497dd3370c87",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "046b62cb-cc34-4180-aa28-1d81cce4c0c3",
        "cursor": {
          "ref": "8d836871-3095-4d42-8de6-ec2a11f80c75",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e3503d00-f0fb-43df-bfa2-8396262254c1"
        },
        "item": {
          "id": "046b62cb-cc34-4180-aa28-1d81cce4c0c3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "caff5ee5-8f1e-49e8-a30b-a97b640b7a35",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "f05558a1-52b2-4b9c-b533-8ab93149482b",
        "cursor": {
          "ref": "7ad7489b-56ad-4109-a141-efa81df9c81a",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "901a88ab-9739-41ef-8d13-7a8f7ac2f465"
        },
        "item": {
          "id": "f05558a1-52b2-4b9c-b533-8ab93149482b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0784425c-db83-44c6-8f71-8f74a7e4593c",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "196cc740-37e4-47c4-b4a3-2d6e7960b52e",
        "cursor": {
          "ref": "c556d89e-8a3e-4c98-b0bf-880ff372fcc3",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "ea2d807a-823b-4096-b659-f7149c09cf7d"
        },
        "item": {
          "id": "196cc740-37e4-47c4-b4a3-2d6e7960b52e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "000b3d3f-8d78-4eb3-ab8d-d44459818612",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "9c91dc30-aa1c-4044-9f82-f651d9ed0d8c",
        "cursor": {
          "ref": "8b25d519-02e9-4e98-aa23-f103ab3ea641",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "55672fb0-1578-4142-bfca-0b2f49923611"
        },
        "item": {
          "id": "9c91dc30-aa1c-4044-9f82-f651d9ed0d8c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7871872f-1e22-4910-98ee-6efebc87fd23",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "7c028dae-b2f7-45dc-96be-43b50819e9b0",
        "cursor": {
          "ref": "585cfa99-5b42-49e1-8d6f-e09669f03330",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8620a60d-a81f-4219-8a6e-f3dcd7bdb9a9"
        },
        "item": {
          "id": "7c028dae-b2f7-45dc-96be-43b50819e9b0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "cbaf0051-da0d-4692-a01c-b293ea17aca7",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "bfccf114-8aac-4d6c-987f-21cfee71f8a2",
        "cursor": {
          "ref": "551068fd-ecb9-484b-ba25-1ff63ccd1be0",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "adce1100-82c0-43b9-bdbe-7d3b7fc3ea71"
        },
        "item": {
          "id": "bfccf114-8aac-4d6c-987f-21cfee71f8a2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "cd759817-e07d-4559-b903-73dfb1322376",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "a7d89f17-5d24-4850-be05-3af447d77203",
        "cursor": {
          "ref": "e9e7e5ff-1654-4d10-8f31-4fedb2f3cb78",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a4c6c32f-ca2b-40b1-8c43-3f1f8f0c033d"
        },
        "item": {
          "id": "a7d89f17-5d24-4850-be05-3af447d77203",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d728d934-3a56-4f76-b78f-bc6cfdb08739",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "23f6230d-9bb2-4f07-af9d-c4c18d95ae8d",
        "cursor": {
          "ref": "d037d2e7-29aa-4398-a056-cfd856203864",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "58c0f5ec-d43c-47f2-baf1-1fa7f4d54885"
        },
        "item": {
          "id": "23f6230d-9bb2-4f07-af9d-c4c18d95ae8d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3d896a2b-2596-4167-9134-f23b169ed4f9",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "ab2a2eab-1db8-4087-bc25-b974d4449fd2",
        "cursor": {
          "ref": "234ba29e-a618-4c36-a88a-b018bfaaf3f0",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "de0ad011-6c04-4618-9b99-a24f0f5324fd"
        },
        "item": {
          "id": "ab2a2eab-1db8-4087-bc25-b974d4449fd2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0f49343b-b0db-4289-a586-ff791922599c",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "9dab455b-4a26-4ba5-9488-234a08354dea",
        "cursor": {
          "ref": "c7902196-42bd-4192-b58b-c408d613607b",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "ed00a99c-9d00-455b-8d3e-5da7c83d46c3"
        },
        "item": {
          "id": "9dab455b-4a26-4ba5-9488-234a08354dea",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2625b542-f82b-45f8-b4fc-5b02c6381d20",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "ad70df42-af15-4034-9d56-ffd167dd76c9",
        "cursor": {
          "ref": "5ed68b6b-25b8-4a9c-b5c2-8b2ad49d2187",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "256cf8a9-ed0e-4ac1-b202-e91da9705381"
        },
        "item": {
          "id": "ad70df42-af15-4034-9d56-ffd167dd76c9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "dbaef58c-542a-4f6e-ab1b-1c9ec3fdb088",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "82817b8b-0785-4d58-b587-887b9fc4d1d8",
        "cursor": {
          "ref": "966ec256-8c65-40af-a4ce-60945493dcc9",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "192c5d59-32ea-44a1-8f38-b08131718f5f"
        },
        "item": {
          "id": "82817b8b-0785-4d58-b587-887b9fc4d1d8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a88a2f24-7492-4611-a68f-2e06e12727df",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "2c042f66-6ec7-4cad-ad28-c21be497e440",
        "cursor": {
          "ref": "71906f5d-d732-4a5f-b8ef-acce607b26c4",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "aa060986-0b39-4cff-94aa-ad0e3c865de9"
        },
        "item": {
          "id": "2c042f66-6ec7-4cad-ad28-c21be497e440",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "17586fb7-4a0f-40bb-be12-58f2848012b5",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "d8fa3b5c-e5fa-4ceb-9504-d0a66691f374",
        "cursor": {
          "ref": "8e93c236-cadf-4bea-ae82-14c27a8139df",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6b5cb98e-90f4-4e22-904c-9df9cfc47a3b"
        },
        "item": {
          "id": "d8fa3b5c-e5fa-4ceb-9504-d0a66691f374",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0162ca04-13ee-44a5-8a53-93a969b85da6",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "9a129fb8-b381-4308-ac55-f9b4e83a04ae",
        "cursor": {
          "ref": "74672de2-f71f-4ba7-b2c8-c9794a01dfe2",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "32fbc218-00e7-4f67-9543-aa6d60480af7"
        },
        "item": {
          "id": "9a129fb8-b381-4308-ac55-f9b4e83a04ae",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6fd7050f-4595-4326-8c63-f8940fe36bca",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "5b8623cd-6ad7-432f-af45-babcfcb19595",
        "cursor": {
          "ref": "3d5e0be8-0616-4dd1-9dca-2479a91f9ab4",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f12268ad-51c7-42af-be2e-899f6710b971"
        },
        "item": {
          "id": "5b8623cd-6ad7-432f-af45-babcfcb19595",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b706371c-f5c5-4e69-849b-4afe9b81bd91",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "aef4a683-3b10-4ba3-a036-388971bd2148",
        "cursor": {
          "ref": "493af99a-72ca-4730-93bf-94078ec8d7fb",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "55a6b4ff-7dea-4931-a774-c5ebca8f917f"
        },
        "item": {
          "id": "aef4a683-3b10-4ba3-a036-388971bd2148",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b0ee5694-eca7-4171-8ccb-d56478e91d57",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "8347dded-032e-4772-b504-8d422ac9eb06",
        "cursor": {
          "ref": "b8353d68-babd-4717-bc50-eee7d447ee5c",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "690b7ba2-3668-49a1-8fe1-b231504d8e44"
        },
        "item": {
          "id": "8347dded-032e-4772-b504-8d422ac9eb06",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "073399ee-e9d4-4314-b441-d43bf972f912",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "750bc44c-e547-4091-afca-269ed73f17da",
        "cursor": {
          "ref": "40a30c9b-0355-4c2b-bf5e-ce08ea0b75ad",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b4d3facf-12a3-44e2-85e5-766b22dff1bc"
        },
        "item": {
          "id": "750bc44c-e547-4091-afca-269ed73f17da",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3545e5d5-3e47-447f-ba6b-6930835360dc",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "cd95eaa1-79b0-44a4-978b-4ab3117a3ffb",
        "cursor": {
          "ref": "2453a5c9-8fa9-48c3-be0c-848541578a5b",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "fe7b924c-66de-4c99-aa57-8b45ea650a29"
        },
        "item": {
          "id": "cd95eaa1-79b0-44a4-978b-4ab3117a3ffb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7e3fb6b5-08e1-477e-ac84-98fa3806e55d",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "1ec05099-2415-43a8-a3c7-efbd8e9a6263",
        "cursor": {
          "ref": "9d8ea641-0cd6-4f3c-a0f8-874194353f0b",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "42f914f3-77ee-4a83-9409-79a0c5d5fb64"
        },
        "item": {
          "id": "1ec05099-2415-43a8-a3c7-efbd8e9a6263",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "31fbb262-8a99-46ad-a373-d94aee1fd9e0",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "eed772ff-2dcd-4ad8-b748-77491c6d1f9e",
        "cursor": {
          "ref": "d8244bfe-4bee-4a29-b0b2-bd15a47edb72",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3a1ba309-c68f-4da2-874b-213fe98be200"
        },
        "item": {
          "id": "eed772ff-2dcd-4ad8-b748-77491c6d1f9e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "56087a12-9b4a-48c1-b506-c6a2d85522da",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "f97353f1-eeb1-44c9-811b-4c8ede9f14df",
        "cursor": {
          "ref": "11c3c7a1-c5ae-482b-b381-75459d61f6b0",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "aa161326-c866-4a19-bc0f-e411844cc10e"
        },
        "item": {
          "id": "f97353f1-eeb1-44c9-811b-4c8ede9f14df",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e06752a9-1416-4b1e-9905-fa8e291e58b2",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "f47c3c6c-b944-4f55-93f0-e63ef82d1987",
        "cursor": {
          "ref": "f5093744-682c-40db-bbe9-9ce6e7e7ecd1",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "95145611-5e47-4a2b-94bd-c29680a78ecc"
        },
        "item": {
          "id": "f47c3c6c-b944-4f55-93f0-e63ef82d1987",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "bbfd4ed3-45cf-4c78-ae73-3532ea18e2eb",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "46d2bcbf-136c-4576-be32-d07072ad707a",
        "cursor": {
          "ref": "0bb7ebd5-f6ca-4e8d-a202-7c7b0fcb372c",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "02330f6a-df67-496c-8bcd-ffe1e92f98cd"
        },
        "item": {
          "id": "46d2bcbf-136c-4576-be32-d07072ad707a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "58c2e0f7-bd71-4376-89ba-cbacb7fb2f33",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "ada4d5d2-0b6d-4041-9bde-e9ba1e0cc888",
        "cursor": {
          "ref": "f15df38b-55f0-4bc8-95cc-a50b6db30354",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2dcd1b4b-406b-47d4-b3c1-2f790d12d2b9"
        },
        "item": {
          "id": "ada4d5d2-0b6d-4041-9bde-e9ba1e0cc888",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "74079dcc-90f3-46cb-94e0-13bb99dc903a",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "69e0c66c-f018-46ca-81a3-1563ec2a2173",
        "cursor": {
          "ref": "1878e6ac-ff6e-41fa-b32a-5b468e77d7df",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "fe7140d1-643a-45fd-8a47-b5e3f3474e15"
        },
        "item": {
          "id": "69e0c66c-f018-46ca-81a3-1563ec2a2173",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6645a890-5bae-4435-9698-12c2d68bdc93",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "6f77bf36-b1bf-40c5-b417-381ac3dd5c47",
        "cursor": {
          "ref": "6b596671-e866-45a3-b0c1-4a401010a039",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a956bb4d-40c8-4d3b-9807-d47020d85764"
        },
        "item": {
          "id": "6f77bf36-b1bf-40c5-b417-381ac3dd5c47",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9603b170-03ca-4d7f-a680-9123e2f04efe",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "6540944f-002e-432d-9110-30b8352cc4a5",
        "cursor": {
          "ref": "7512e2b3-bde1-444b-ab26-ee34652bb0fe",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "cd02d633-25fc-454c-b147-9ae50bdce050"
        },
        "item": {
          "id": "6540944f-002e-432d-9110-30b8352cc4a5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7b60b3a9-cdd9-4c04-b0c0-e3eea0d1c99e",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "5ee1a56c-f08f-491d-b25c-a6536cc63a01",
        "cursor": {
          "ref": "56ef838d-8f3e-4f34-b63c-c0bbb69ace06",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "fa416fd6-3e53-4dc0-ada9-28e89351dcf4"
        },
        "item": {
          "id": "5ee1a56c-f08f-491d-b25c-a6536cc63a01",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "90a9611b-7aa5-4035-ac0d-11c25dedbd78",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "14510fca-c376-4098-8463-609c40cf1876",
        "cursor": {
          "ref": "0af83c5a-cbcf-415e-9689-a757cc317922",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "64541347-18bd-4529-b049-e49e1cb6e37f"
        },
        "item": {
          "id": "14510fca-c376-4098-8463-609c40cf1876",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ed784bd2-8335-468d-937e-46511247f54d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d527d46-21c2-46ea-8b7b-8820e2dbfed3",
        "cursor": {
          "ref": "92622fac-a319-40f1-8507-4220680e57b2",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c6de96a8-812d-4686-a6fb-bebee6721138"
        },
        "item": {
          "id": "2d527d46-21c2-46ea-8b7b-8820e2dbfed3",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "af803d2f-7930-47b8-a710-511012a56a52",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "656fd997-7812-4138-96d7-98140b48198d",
        "cursor": {
          "ref": "65d7ae09-b7fa-4726-b56e-e1b015e9663a",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0af7a855-2775-44c9-89e1-edbdb2528fca"
        },
        "item": {
          "id": "656fd997-7812-4138-96d7-98140b48198d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6177078e-5ae2-4f0a-bdca-511c717c792e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "656fd997-7812-4138-96d7-98140b48198d",
        "cursor": {
          "ref": "65d7ae09-b7fa-4726-b56e-e1b015e9663a",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0af7a855-2775-44c9-89e1-edbdb2528fca"
        },
        "item": {
          "id": "656fd997-7812-4138-96d7-98140b48198d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6177078e-5ae2-4f0a-bdca-511c717c792e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6271a0b-1d10-41ac-8f20-252502108041",
        "cursor": {
          "ref": "0dfddba9-d670-4549-83ae-89f034524c1e",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6e0cc6cb-3180-4265-8709-d1d19c2a06a8"
        },
        "item": {
          "id": "e6271a0b-1d10-41ac-8f20-252502108041",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "61882294-9e46-494c-b329-bb129ffce171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca82940-e3b9-49c0-8827-de81924bac15",
        "cursor": {
          "ref": "ad117f8d-7bf2-44fe-baba-0a9b83977040",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d3b00d8a-408a-4adf-a1c2-953efbf97b71"
        },
        "item": {
          "id": "1ca82940-e3b9-49c0-8827-de81924bac15",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3a84909b-a765-4409-b438-725dd10972f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fc0898b-8b14-4fc4-98aa-677a9715b8dc",
        "cursor": {
          "ref": "7a346ef4-86d6-447c-b755-b04ab6340793",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "bb721665-d21c-4f87-b384-a141fecd9545"
        },
        "item": {
          "id": "5fc0898b-8b14-4fc4-98aa-677a9715b8dc",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "7951f193-8754-4d50-8389-e5fcad1900e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfcb0a25-040a-4ed2-a767-b3a91e8ca5b5",
        "cursor": {
          "ref": "54d69819-38c8-46c0-93c6-cbe1a07bbfd9",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d1ffab39-1f2f-4ae7-ad42-e59fed6a9afd"
        },
        "item": {
          "id": "dfcb0a25-040a-4ed2-a767-b3a91e8ca5b5",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0722b068-623e-4f19-81af-fc1ca4db8c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4834c8d5-641c-45be-8eed-7bfaee1a518a",
        "cursor": {
          "ref": "6a0fc682-119f-4575-b6cb-0fb7e22cfbd4",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a5e7febe-84e9-4cfa-85a1-ae52bc4184ed"
        },
        "item": {
          "id": "4834c8d5-641c-45be-8eed-7bfaee1a518a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9f2a58fe-455b-4bd3-810d-7781b0dd1c51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb70803-5ed2-44e4-8415-2e2c3974a683",
        "cursor": {
          "ref": "e14fa1c2-b958-451e-af82-03f72f384a69",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a28c1633-20af-42a6-90fa-7246953735c9"
        },
        "item": {
          "id": "3cb70803-5ed2-44e4-8415-2e2c3974a683",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3f6d086a-05fd-49cd-a55a-3ba831b318d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 608,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb49b524-7e7f-43e0-bfb0-93cedfe92c61",
        "cursor": {
          "ref": "97eb810f-fe79-497a-8327-05753533a22a",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ee8a4788-5885-4b54-adb3-8989ed28e41f"
        },
        "item": {
          "id": "fb49b524-7e7f-43e0-bfb0-93cedfe92c61",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "6762a51f-b92d-43e7-ad39-bee797a25071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0940d2a-0b4a-4d76-823c-328586b70dad",
        "cursor": {
          "ref": "071a4692-fc84-4caf-83be-7542e688c5e0",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "322ed237-0902-422c-a8a1-cc6e6fbedb9d"
        },
        "item": {
          "id": "b0940d2a-0b4a-4d76-823c-328586b70dad",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a0bcb606-5d8c-4233-a460-ec41d4def6ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef78b4c-722f-4970-958e-e11183bc667d",
        "cursor": {
          "ref": "561fcf46-a9ff-4030-8e45-eb4d9cb4fbf0",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ab9918de-2157-472a-bf1a-d0c3937047bf"
        },
        "item": {
          "id": "4ef78b4c-722f-4970-958e-e11183bc667d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "59e1387c-7f7a-4614-b79f-d0a2b64a3975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef1bc18e-15a6-4d9c-89e6-8c762232551e",
        "cursor": {
          "ref": "a6dc6fb5-828f-4e0b-9066-3bbb7bc33286",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4fdbb4dc-19bf-4382-b9fd-75ae2d58504d"
        },
        "item": {
          "id": "ef1bc18e-15a6-4d9c-89e6-8c762232551e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ab4fec83-e211-42e0-ae4b-330858e68ac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b50efc-678d-4ead-8b1f-290c4916b5e1",
        "cursor": {
          "ref": "fd5e4a8e-3a67-496d-8f64-f9e0a41e89a6",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b05d7345-08de-4b8d-83b4-afa48340558e"
        },
        "item": {
          "id": "31b50efc-678d-4ead-8b1f-290c4916b5e1",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f38345d2-1a42-469e-9c33-21d5621f1fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02313544-97d7-409a-baf4-98bf974504c7",
        "cursor": {
          "ref": "5a2132c1-ade5-48d4-95fd-9c803bf9e217",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "09c9b028-490e-4de2-8eb8-2261c7df7cab"
        },
        "item": {
          "id": "02313544-97d7-409a-baf4-98bf974504c7",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "03483924-4b36-4098-9e19-b6f881a30502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eadb7a41-57b1-4bbb-b2cf-e0ca5c13b302",
        "cursor": {
          "ref": "63a69c4c-0bda-479f-ba55-1ae6dc6de2c7",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a25b59ee-2b01-4886-b019-f5ae1f9a40a8"
        },
        "item": {
          "id": "eadb7a41-57b1-4bbb-b2cf-e0ca5c13b302",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5e9cc8da-180b-47d2-ae95-09c098a38264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7260b85-ee7d-4d57-8110-3865bdd9dba3",
        "cursor": {
          "ref": "7140dcd0-957d-4e53-9cbf-7c63732b930c",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "668e4464-93b2-4c20-bb0e-aea09fdae87f"
        },
        "item": {
          "id": "e7260b85-ee7d-4d57-8110-3865bdd9dba3",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "693ea836-7638-4369-a26c-6d1b6297729f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8686e575-2407-4920-acce-4ae0d0e488a5",
        "cursor": {
          "ref": "6931df41-9b92-4148-a4c9-c449ad8e5e79",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d4dc8954-a0e3-447a-9cfe-d9d463b037bb"
        },
        "item": {
          "id": "8686e575-2407-4920-acce-4ae0d0e488a5",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "23fda25d-e744-47d5-95b0-82c1236d00db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e45031c3-7cf7-41c2-add7-cc719b968b60",
        "cursor": {
          "ref": "235bbcbc-1183-4f2c-ac9c-27270f4addda",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "90d3650d-825a-4f0f-95ce-9a8a80ddf426"
        },
        "item": {
          "id": "e45031c3-7cf7-41c2-add7-cc719b968b60",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "02e2c33d-f708-42b2-97b3-b62bff0adf30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04071a71-1c76-4081-8024-f5f7ce1c637a",
        "cursor": {
          "ref": "10f71fa7-0672-47d1-bf76-b7fb038971c0",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c80f71d5-b661-4468-84c6-3a4b04580d59"
        },
        "item": {
          "id": "04071a71-1c76-4081-8024-f5f7ce1c637a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d2172748-9a5c-42c5-b928-016113deb2fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8adf1a-d058-4e38-8db6-fcf3911c4481",
        "cursor": {
          "ref": "26fcc9ee-4e0a-4d15-9d3d-a60a5de6d693",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c0c7ceac-c0ef-4e76-a7df-2c9cdd7da9f3"
        },
        "item": {
          "id": "4b8adf1a-d058-4e38-8db6-fcf3911c4481",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d1cefa69-8171-460b-b24d-ffe0f9207469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b232f245-2235-405a-b586-b80879db96dd",
        "cursor": {
          "ref": "19d42600-915c-48d9-a257-258be7db9f5e",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d5cd2ddd-a794-45bd-b672-3875dd3d08dd"
        },
        "item": {
          "id": "b232f245-2235-405a-b586-b80879db96dd",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "27ed9525-0aa2-4813-aaeb-373653ca62ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7d02cbd-3504-42c4-879e-f79571b60666",
        "cursor": {
          "ref": "b0f63170-e854-4133-8043-2ecf50324db9",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "84a11d0f-d0b7-46a0-8bbc-53b08bd99627"
        },
        "item": {
          "id": "d7d02cbd-3504-42c4-879e-f79571b60666",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "8094fc28-08e2-4197-befa-6432337e42e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 257,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db38be07-dd95-49e7-a9f4-35ac37b32f3f",
        "cursor": {
          "ref": "8ec95538-41c3-4916-9045-13e6d70fbdd6",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c3f8676d-74f6-435c-be14-812eca30620e"
        },
        "item": {
          "id": "db38be07-dd95-49e7-a9f4-35ac37b32f3f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "7d645689-14d2-433d-b6a8-ed8592e3c59e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "770999f3-79fc-4caa-83a9-070717b7068c",
        "cursor": {
          "ref": "d8a86b62-5259-4a58-826a-a8ab2a7b3951",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "10d1a819-e620-4413-91a9-5b3dc6fb9ff2"
        },
        "item": {
          "id": "770999f3-79fc-4caa-83a9-070717b7068c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8945434c-de7d-4f28-b9b2-b2e23436760f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8970abba-fbb9-48cd-a170-4f73833820d7",
        "cursor": {
          "ref": "67a8ef60-f68a-4550-8aef-b1a6773d460c",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "88683c5e-1578-48a7-8245-ffe693109b39"
        },
        "item": {
          "id": "8970abba-fbb9-48cd-a170-4f73833820d7",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "055f162e-17b2-47b0-9a9e-f4afa548e373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e5086c-d518-4107-93f0-e71a9096a6e4",
        "cursor": {
          "ref": "73809f1c-51cb-4d61-9ef0-81961a747bfc",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ff21c1dd-15a4-4d49-94e2-ab1b938dbec1"
        },
        "item": {
          "id": "d9e5086c-d518-4107-93f0-e71a9096a6e4",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "eecb4ba1-6830-4988-ba6d-89ce368173f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28ca46a7-60f5-4ce2-9453-fde9f6cd4af6",
        "cursor": {
          "ref": "a3ef4cd1-25d2-4b59-b5a1-50451ec3dd53",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "bdb1c254-912c-4ac2-b363-48b691a9b8a6"
        },
        "item": {
          "id": "28ca46a7-60f5-4ce2-9453-fde9f6cd4af6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "84464f5a-cfa5-4689-9c58-ba7724df843c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4093f95e-93f6-4f98-a93c-7a755c9071d7",
        "cursor": {
          "ref": "2fda28f2-5a39-415f-aa8f-cb99c7b52940",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "69e13b01-5767-4718-913a-e9a34a598767"
        },
        "item": {
          "id": "4093f95e-93f6-4f98-a93c-7a755c9071d7",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f2bd0ef8-043f-4ce5-b2ff-e0361205a98a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59e2024d-c504-4973-a67c-db0aa6155139",
        "cursor": {
          "ref": "5e12f794-d1ff-4a25-b7c7-9b03661570fd",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c920be32-958e-4a50-b9e6-b202e2eb9647"
        },
        "item": {
          "id": "59e2024d-c504-4973-a67c-db0aa6155139",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c8d99a40-738e-4219-8a30-5e54b5e1c96d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679b32cb-f287-4cde-8d45-b934e7a1ccaf",
        "cursor": {
          "ref": "496c7e39-ea34-4438-8d02-f73c9ebeec7f",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "68e7defd-dee1-4699-a9e4-7003d83b6735"
        },
        "item": {
          "id": "679b32cb-f287-4cde-8d45-b934e7a1ccaf",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "324042bc-1e83-4252-8b38-52c93786c620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faf39447-0f45-4314-8e4f-b26dd8e7e940",
        "cursor": {
          "ref": "798e9faa-6ace-4c6b-beb6-86d3cfb4dfed",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "67d34739-19db-4ade-88fc-4518ba5f8d2e"
        },
        "item": {
          "id": "faf39447-0f45-4314-8e4f-b26dd8e7e940",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "295acb96-0b6c-4ae5-8f3c-42a524cb950a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "195b2f90-e544-4db4-991e-670900c5a2c0",
        "cursor": {
          "ref": "84e37db3-45cc-43e9-a2d2-a571ecd443c1",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e4daed12-b740-45a5-8ad9-50cffc6d96cf"
        },
        "item": {
          "id": "195b2f90-e544-4db4-991e-670900c5a2c0",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2c9df154-db65-4f8b-9e53-f1c0c8051b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c9eea1e-f094-4275-a16c-d38c7117d99a",
        "cursor": {
          "ref": "c62d701d-90b1-498b-98d0-abd5c87cbfd4",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f8d62169-79f0-4bfd-84ad-f3a14421ab5e"
        },
        "item": {
          "id": "8c9eea1e-f094-4275-a16c-d38c7117d99a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e0aeacde-b918-4a7d-936f-2776d5f122ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e54dc41-ccc0-4ffb-b4b9-8b1dfd9fe3e6",
        "cursor": {
          "ref": "93b5f169-d406-4ab8-b475-8b291b94ce47",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "901f1697-bd10-472b-b7dc-a2050febc1bd"
        },
        "item": {
          "id": "7e54dc41-ccc0-4ffb-b4b9-8b1dfd9fe3e6",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "126f26d5-9556-41a6-a874-bafe452f27e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c180fcd1-6195-4ed0-9161-f6aa427c7953",
        "cursor": {
          "ref": "bd6c0467-19c4-4d73-a489-d46934722e22",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "222c9045-cb83-4965-95e0-3f3468bdd731"
        },
        "item": {
          "id": "c180fcd1-6195-4ed0-9161-f6aa427c7953",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4acc0505-d522-49a6-b4e4-c40eeb3c3be9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27ce94ab-5165-4935-a789-b9e9ce9170fa",
        "cursor": {
          "ref": "878497e5-e912-48e1-ab4e-b5c11164efaf",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "24e12461-dcb7-465a-8a6a-6bb59a58983a"
        },
        "item": {
          "id": "27ce94ab-5165-4935-a789-b9e9ce9170fa",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a340be24-0afd-4c83-ae75-78f63d0f7ef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "660df45a-785f-494e-be65-355a3e5cbe37",
        "cursor": {
          "ref": "35065f77-2f5c-47a1-8b2b-6ef56805c414",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a33b481a-6be5-4f4d-89c6-cacc4973bd1d"
        },
        "item": {
          "id": "660df45a-785f-494e-be65-355a3e5cbe37",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8428967c-bd50-44c4-b0f3-02bc141f0825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 361,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59b06b3a-e9e1-42b1-8822-21ffec586305",
        "cursor": {
          "ref": "03b17469-9673-4094-abc1-090a951ffb6b",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4444fac8-5b40-427b-b779-ee4bda01c8bb"
        },
        "item": {
          "id": "59b06b3a-e9e1-42b1-8822-21ffec586305",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "06ce7089-1dca-4bda-8a32-9d094ae3c5a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42cb7c7d-4247-492c-8da0-cc1eb3b12409",
        "cursor": {
          "ref": "95cd9e62-1199-40de-942b-6673b3026ad9",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "893c6922-1619-4b96-8e54-26d10075bc98"
        },
        "item": {
          "id": "42cb7c7d-4247-492c-8da0-cc1eb3b12409",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ac791e32-dd01-4afb-8d56-08b085ef1d6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb08385-2f8a-41dd-9b2f-dd0292bffc47",
        "cursor": {
          "ref": "159bcdf5-300c-4bed-aa68-8ac2fe937b1a",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "4c178bbb-2f09-4566-abe8-dab930a360f3"
        },
        "item": {
          "id": "8fb08385-2f8a-41dd-9b2f-dd0292bffc47",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b56d880a-d7c7-4cf8-b91f-90fe65c6d039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e360b6e2-84c9-48f7-80c4-071d64990d4b",
        "cursor": {
          "ref": "29599b2a-48b6-4aae-a962-1033812c52b0",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "14cbef29-d029-40cb-b3b5-5887e6de9741"
        },
        "item": {
          "id": "e360b6e2-84c9-48f7-80c4-071d64990d4b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9b7a026b-6304-43e9-9899-044a6983641e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f994012b-bc07-4110-9b2d-90cab7536d2b",
        "cursor": {
          "ref": "59165895-8c52-43c1-bc07-2d830e2219a3",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "855b6d65-2952-4e44-9380-6f7b4b6bc5e7"
        },
        "item": {
          "id": "f994012b-bc07-4110-9b2d-90cab7536d2b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "63424abd-f222-46be-93ea-46fd89cecb35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10950f39-5e69-4dec-bd27-b83fcd006f87",
        "cursor": {
          "ref": "f60e798e-e12f-43ad-b299-812989b64302",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "d28a32fe-7d47-40fc-8245-347e7fe67feb"
        },
        "item": {
          "id": "10950f39-5e69-4dec-bd27-b83fcd006f87",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b71f0147-bc23-41f3-81e7-01bbf6713953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 222,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d3936d-5946-4fc6-bf0c-0013fd7d9ab1",
        "cursor": {
          "ref": "229df5b8-6914-4d56-b263-70ed4850c279",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "70f30937-7cf0-408c-94cc-dde9db4450af"
        },
        "item": {
          "id": "d4d3936d-5946-4fc6-bf0c-0013fd7d9ab1",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b5f4cba3-956f-4953-be40-51f53854cd00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ea035e-2593-49ae-b00f-7e8e40009e1d",
        "cursor": {
          "ref": "e1fc60f2-018a-46a1-906a-18c2c473f832",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9b83cca4-1a06-48cd-986e-418dcaa72b6f"
        },
        "item": {
          "id": "f5ea035e-2593-49ae-b00f-7e8e40009e1d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c2b76efe-b98d-4fa2-abf8-497745178927",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9055af0e-8f31-4618-8b2c-8ace9e98bc83",
        "cursor": {
          "ref": "cf1c9c58-18b7-4dea-88d2-bbd3e19d34c0",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a9cb0c17-c379-49f2-a577-040859cc1545"
        },
        "item": {
          "id": "9055af0e-8f31-4618-8b2c-8ace9e98bc83",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "76c585de-36ed-4a00-b5d2-c16dbe9cf84e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92533d2c-3599-4ea1-9024-d296e4502418",
        "cursor": {
          "ref": "23fa6dd1-12dc-496e-96ca-c7ec8d1fca99",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6436b0d4-a5fc-4093-a5c8-3327d01d69d8"
        },
        "item": {
          "id": "92533d2c-3599-4ea1-9024-d296e4502418",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d91ac238-81ad-4212-97e2-dd56e8f63b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4408fe0-4a67-4805-822c-6d2c646b7d97",
        "cursor": {
          "ref": "a8a09a06-dd89-4032-b953-67ab39a364e3",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "5fbad654-b4ee-4ac6-a1fb-8186cb8e2442"
        },
        "item": {
          "id": "f4408fe0-4a67-4805-822c-6d2c646b7d97",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "aa9a2a9e-1ecc-4b4d-b100-ebbfb8c2fe60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61df6bd6-09de-464f-88a5-8e321a067044",
        "cursor": {
          "ref": "480e7ffd-5130-4ffa-af46-e54c02c2bc5b",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7ff2b45c-8838-4fba-9ffc-6de1c3004afd"
        },
        "item": {
          "id": "61df6bd6-09de-464f-88a5-8e321a067044",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "3042787d-a9ec-4fbe-b40a-849ce2966b71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c5b2d97-5c4e-4a27-a839-b818b5143379",
        "cursor": {
          "ref": "c9df8968-61c5-4b31-aa29-15dd898eb974",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "379c9358-0abb-436d-94a3-6e9c6e799ae1"
        },
        "item": {
          "id": "4c5b2d97-5c4e-4a27-a839-b818b5143379",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "df7f97ef-de95-4bf4-8c8d-d00c932425cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a3f004c-3c42-4885-9400-39498a08ec41",
        "cursor": {
          "ref": "f43e5b4a-cc3d-408d-a960-39a1d25b6872",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "10762d62-3508-4951-bb79-50ebc19e33c7"
        },
        "item": {
          "id": "6a3f004c-3c42-4885-9400-39498a08ec41",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9f1bad2a-66bb-4178-a942-48b9bd59d36f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02b69273-86bd-48bb-9280-45e5d1d80184",
        "cursor": {
          "ref": "2e6856ec-b185-4d88-8bf2-6af2b537b75f",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "974b6886-6015-4d35-aaf2-1f6d555609cb"
        },
        "item": {
          "id": "02b69273-86bd-48bb-9280-45e5d1d80184",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "db5b58d4-ea25-45e0-a93c-ee80b6511ee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cbad92c-f267-44a4-9cd6-36f199d939e7",
        "cursor": {
          "ref": "56567320-bd46-4075-b9f3-d30ba214c3d2",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "87e0228e-acc4-4c98-9a3a-1e4a807b186a"
        },
        "item": {
          "id": "3cbad92c-f267-44a4-9cd6-36f199d939e7",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "267f2a3e-5470-4ecd-b6fc-bc0f6a4fc432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece1ea06-da90-4afb-b766-a96b0960453b",
        "cursor": {
          "ref": "f2139525-df9e-492d-8db5-c2f3e6e85fc1",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "afd65658-1231-41a6-be78-c1bea1f52091"
        },
        "item": {
          "id": "ece1ea06-da90-4afb-b766-a96b0960453b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8c027729-cc83-40bb-9298-0b4f8f5e0fd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5211ad98-d65b-4df6-b326-b01c94e82401",
        "cursor": {
          "ref": "b2f9fe5c-1c3a-4324-9b43-3bf10ddac390",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "3921a863-7f76-4db0-a8d9-3b5cbfda3881"
        },
        "item": {
          "id": "5211ad98-d65b-4df6-b326-b01c94e82401",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "00d1b406-3305-4966-a642-12cd0c516784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93bb7993-1451-48d6-b1b3-68c2f1c4ee98",
        "cursor": {
          "ref": "6e73e7ae-c8ed-4bc2-80a2-4a79a72b3a7d",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f35dd601-67ca-4f18-83c7-4203eee1e333"
        },
        "item": {
          "id": "93bb7993-1451-48d6-b1b3-68c2f1c4ee98",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e3b1bfa8-3c8d-40f3-abc6-97663ae61771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9efba5a5-9028-4275-b545-391f87fb8168",
        "cursor": {
          "ref": "f439045d-d2a6-4cc3-a2f0-abb64701e778",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a2836b0f-1d5f-4af2-b629-086bc2caf49f"
        },
        "item": {
          "id": "9efba5a5-9028-4275-b545-391f87fb8168",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8515bb78-862d-4d2f-8756-b6082c9f22a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c815a078-95a8-4267-b922-cc3bd0c05fea",
        "cursor": {
          "ref": "cbc60904-009e-474c-a3c5-c5f8654217f1",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "93b9d06f-33a3-4aa1-bd56-89ec7e0afd7d"
        },
        "item": {
          "id": "c815a078-95a8-4267-b922-cc3bd0c05fea",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "3a6a0021-1a9c-48f1-aa7d-288644f0ca77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76013d07-9864-41bb-9f1a-e0c96bd146bd",
        "cursor": {
          "ref": "5eae806d-a6e2-49a2-a884-e942a4d7954f",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "989cd38c-69ce-47dd-b6df-935300d2eea4"
        },
        "item": {
          "id": "76013d07-9864-41bb-9f1a-e0c96bd146bd",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "990c7cf1-4021-473e-bb71-8c39a9d5d159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b45ebc-1b01-427a-8781-363fbf47bb06",
        "cursor": {
          "ref": "732de5ba-39c2-4f90-a441-ba8bb9618d62",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d053c96f-88c3-434d-b275-f16597d4de06"
        },
        "item": {
          "id": "d1b45ebc-1b01-427a-8781-363fbf47bb06",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "0e11f132-4aba-4567-a04d-c9e523ddb0d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a93c590-408f-4766-972b-ed2e075b2dad",
        "cursor": {
          "ref": "7322db59-3880-4562-b7a9-f47bd84feb78",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4bb58b90-d416-4547-8fbe-4e12fb68c88f"
        },
        "item": {
          "id": "2a93c590-408f-4766-972b-ed2e075b2dad",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6f35275a-2bc4-4ba8-962f-cf0a4b82d9d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73b50db-24bb-47e4-bbed-280e20353bb3",
        "cursor": {
          "ref": "3cb584c6-e96a-4ce7-aa1a-570c813a4f8b",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0effd6dc-26e7-4b01-a663-49813e911081"
        },
        "item": {
          "id": "a73b50db-24bb-47e4-bbed-280e20353bb3",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "faa3b870-2db3-4c09-8fcb-b8495c53401e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c80244d-deb2-4ae7-a4fb-188089ab604d",
        "cursor": {
          "ref": "af32d989-b60d-4a1f-9a5b-b0b0e2f5e06d",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "5daafeb6-0e3e-402d-a0c6-3b955497368a"
        },
        "item": {
          "id": "5c80244d-deb2-4ae7-a4fb-188089ab604d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8432d875-dc1f-4870-8826-8bb083fdd6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 220,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b9740b2-bcbb-46ba-8722-2abe580a68ba",
        "cursor": {
          "ref": "37daac44-8c7c-436d-b39c-32d47f54d816",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "135b4bd5-5eba-4d11-b503-e564618f7826"
        },
        "item": {
          "id": "0b9740b2-bcbb-46ba-8722-2abe580a68ba",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4eba8c38-143d-4f3f-a9fa-689911a91b95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cda9444-b33e-40c6-8e31-b5375a95ccad",
        "cursor": {
          "ref": "9ee78434-075b-4f16-901f-ea50bceed9b5",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "127097ff-d703-4c0d-ae3e-5ca147e6422d"
        },
        "item": {
          "id": "2cda9444-b33e-40c6-8e31-b5375a95ccad",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9f522497-171f-4dde-9de3-a16e2612b654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e44c40b4-16eb-4d04-a7b5-b7d31c8e890a",
        "cursor": {
          "ref": "f619605d-5fce-4c86-8477-75f16401b133",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "aaa27983-cc54-4b67-9d6c-8e24af2f08fe"
        },
        "item": {
          "id": "e44c40b4-16eb-4d04-a7b5-b7d31c8e890a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "02c6f23f-1342-42f4-bb8a-1444737f97a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a2b6fe4-99a8-411e-822c-5a7594c0695e",
        "cursor": {
          "ref": "b082b84c-4e02-4cbd-a24e-d571f19f2bba",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6296add4-385d-4c1b-a72a-ff4197d7004a"
        },
        "item": {
          "id": "3a2b6fe4-99a8-411e-822c-5a7594c0695e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9fb3bc68-e0a4-47aa-ba6d-d61635a02f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb33e4f-1196-41bb-9183-7fcef6e60713",
        "cursor": {
          "ref": "f8b4bb91-9918-4188-9b23-fdde727ac16f",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9f126a08-6efa-4652-9f82-03c7070e3c24"
        },
        "item": {
          "id": "2cb33e4f-1196-41bb-9183-7fcef6e60713",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6818a86a-b6fc-4a3d-8bf4-068c6bebfcab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc8ff74d-4c3d-4c26-ad56-686e9dfaed78",
        "cursor": {
          "ref": "efaa0d5a-2ed0-4dc4-af02-d0b5c854ac71",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "50f9e417-e791-4a6a-afc5-d166f597d21d"
        },
        "item": {
          "id": "cc8ff74d-4c3d-4c26-ad56-686e9dfaed78",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f56131a9-5605-4224-8378-0b7a8756dc56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaff920c-51b1-46c6-9b25-9b89e42b2487",
        "cursor": {
          "ref": "c2f92360-254a-4265-99f2-03ba259763aa",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f2b668ce-2f02-480a-989d-723a0b290af2"
        },
        "item": {
          "id": "eaff920c-51b1-46c6-9b25-9b89e42b2487",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "310eb600-344b-42e2-9bcd-f1094b639724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a6a2520-77fa-4803-805a-0ca7bbe60162",
        "cursor": {
          "ref": "faf030d7-10b6-4cd7-8cfd-f2aed6096aff",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "20e0601f-7ab1-49b3-8863-44621e18fba3"
        },
        "item": {
          "id": "0a6a2520-77fa-4803-805a-0ca7bbe60162",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c03231ae-1971-4b75-a489-63ba85bd6efd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "174609f6-75f7-427a-af53-3db37158f85b",
        "cursor": {
          "ref": "ef40149a-54ef-496c-8bbe-f16f910380dd",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "86d7ee1e-8306-4859-a3f8-d3624f03177a"
        },
        "item": {
          "id": "174609f6-75f7-427a-af53-3db37158f85b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e5ca9649-b287-4d1b-8d67-27a9306afd94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4e1eb5-07df-4380-8dc9-665f9e29e96f",
        "cursor": {
          "ref": "0fe71c22-649d-4998-bddc-c62b8bfc1418",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b8794df7-e455-4a91-b1fa-ed49c56588f7"
        },
        "item": {
          "id": "1e4e1eb5-07df-4380-8dc9-665f9e29e96f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6cd29bf7-ac05-4dbd-b584-9e7e9c2ca74b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c7400a-2e74-4500-a412-c327ab6ee5bc",
        "cursor": {
          "ref": "7a98cf08-03ad-4636-b438-d299c505cb78",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "563531ba-8626-4ed3-ab88-d2e06d7ffc73"
        },
        "item": {
          "id": "98c7400a-2e74-4500-a412-c327ab6ee5bc",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "a6502b90-29b8-4804-849a-012c36ecb063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b8222e0-2533-43ac-ac70-72d940b2fd6d",
        "cursor": {
          "ref": "a94da6b1-430b-4ace-97f2-1d57ddc89576",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b092f210-5de9-4f19-9dbb-689fa271ad49"
        },
        "item": {
          "id": "6b8222e0-2533-43ac-ac70-72d940b2fd6d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "74660682-47c0-4767-a870-2619ad51679d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad16c5b-65ee-4256-a526-c8fc4478b83b",
        "cursor": {
          "ref": "cb07db3d-f6c5-47c6-9f3a-a799302bdb4c",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6df0d5e2-3199-49f2-a05d-777c3172c9ed"
        },
        "item": {
          "id": "dad16c5b-65ee-4256-a526-c8fc4478b83b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4e13cb8a-cc0d-4a4f-b502-938b44dab705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae23a86-cbb2-46e5-bc20-b924ec9a4d9e",
        "cursor": {
          "ref": "67feaa7d-0726-4be1-aaee-4b84596f8a4d",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9f8f4600-4139-4307-b94e-a2d38e6f25b5"
        },
        "item": {
          "id": "3ae23a86-cbb2-46e5-bc20-b924ec9a4d9e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "eac9ebf7-e647-4723-85f2-a5dfe96c3f28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3858622b-57a3-4405-9971-0f1a456fd750",
        "cursor": {
          "ref": "7d95f919-748f-4de6-9e71-8f95e415612d",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6ea05bb9-d6df-46a2-9523-0a9b35535f77"
        },
        "item": {
          "id": "3858622b-57a3-4405-9971-0f1a456fd750",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "8c50cd5c-509a-4d09-8935-46fb2b2b2b51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c3196f-b8b4-435f-aab8-cb87a625ac88",
        "cursor": {
          "ref": "ca64833c-cc04-4ed1-8102-0b7e739cb5ec",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0e25c8b3-9bd9-44d3-929c-563e1c7fed02"
        },
        "item": {
          "id": "80c3196f-b8b4-435f-aab8-cb87a625ac88",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "eafe1783-4ae8-4244-b0d2-2f29f8180aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25dc0d67-1c79-4a68-a9af-8704d9dcc57d",
        "cursor": {
          "ref": "fc9dec6e-8701-4d91-b2fa-528e57480ab3",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "784b370e-7289-4003-a711-e00f03916c85"
        },
        "item": {
          "id": "25dc0d67-1c79-4a68-a9af-8704d9dcc57d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "59f4477b-b063-4672-93e9-0b0c18f2b2d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cfc8ad5-9d1a-4a78-a0b7-e499fdcd914b",
        "cursor": {
          "ref": "36192682-82f2-4fc9-b551-fa3ad334c68f",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "35ee0895-4b21-4c15-b137-c3b2afac388b"
        },
        "item": {
          "id": "5cfc8ad5-9d1a-4a78-a0b7-e499fdcd914b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "db0b2bac-c47b-42a0-b429-be37d1e48862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3c0c890-3941-4141-8903-7c81feb63e15",
        "cursor": {
          "ref": "a2704b35-e69e-4b23-a0f9-4f9158b285d2",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c053913a-d449-4f48-abd6-2dc09aab2e3f"
        },
        "item": {
          "id": "a3c0c890-3941-4141-8903-7c81feb63e15",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6f0789b9-3ea8-462e-9ea7-df162da98f32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d66bf323-c7ee-4a75-87ba-214413059ce7",
        "cursor": {
          "ref": "cdaba65a-4ccf-46f5-bb4a-611afbfcec3b",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e8858d83-aa6c-4865-86e9-16b9a1f19bf8"
        },
        "item": {
          "id": "d66bf323-c7ee-4a75-87ba-214413059ce7",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "81e2ff50-a411-4a4e-a5ac-9f378a8b178b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a93d4e8-14aa-4836-8038-00d0247d6880",
        "cursor": {
          "ref": "26177236-91ab-46b5-abbb-e786554fddb9",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "968e88fe-9f5b-48b7-9bdd-01b2b9d87953"
        },
        "item": {
          "id": "5a93d4e8-14aa-4836-8038-00d0247d6880",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e954eb21-b162-4b6a-bb6a-98f052df26e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071ef720-4e63-49b5-88ef-03cbbe45f305",
        "cursor": {
          "ref": "6a9a9cdc-7598-4593-a7d8-c68945c4401a",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "bb251081-5672-4285-9719-d7a182276cb5"
        },
        "item": {
          "id": "071ef720-4e63-49b5-88ef-03cbbe45f305",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "4359db47-b62d-46ef-b340-86d7ffeeb9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca28a5b-48cf-4772-b0ee-c18b22847d88",
        "cursor": {
          "ref": "ce4f7df1-3b9e-442e-9e49-67aa2fd7c45c",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "bc1ac652-8e8a-4281-a5d1-ad565e1581f4"
        },
        "item": {
          "id": "2ca28a5b-48cf-4772-b0ee-c18b22847d88",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a4d7c956-fe02-43ff-a23c-c0c348bc3eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d28a52f-038b-48bb-8b13-e488452c54a4",
        "cursor": {
          "ref": "7d0bcf92-6fe4-4a3a-9f30-0a68508e338b",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "13c3b1d8-ee24-46e9-9869-2b708ea1dfcd"
        },
        "item": {
          "id": "4d28a52f-038b-48bb-8b13-e488452c54a4",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0da46f8f-358d-4a30-addb-b16576009de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6c1d749-a374-4349-b8ef-ba9492570b06",
        "cursor": {
          "ref": "802bd533-75c3-4a0c-9b06-efdee9a95a64",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e1c7689b-5f59-4c93-b99e-9407b73e6e79"
        },
        "item": {
          "id": "b6c1d749-a374-4349-b8ef-ba9492570b06",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "03d98509-9151-4248-924e-d253b0abcbe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "216ff391-9ed4-47d1-ad47-78a20b974d64",
        "cursor": {
          "ref": "55df5ee7-7cd9-4d80-8fd6-1d6321b8856c",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b13ce6b4-b8c7-4695-b88a-c43e471426f0"
        },
        "item": {
          "id": "216ff391-9ed4-47d1-ad47-78a20b974d64",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "e5fa0fee-af4e-47c1-862c-f5cc175627fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42afff88-6391-4e77-bce2-9ab5ca99e245",
        "cursor": {
          "ref": "0ac444ce-42f4-4022-91f0-5a034930908f",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "55de4999-0234-4ce7-9dd2-05d96e186140"
        },
        "item": {
          "id": "42afff88-6391-4e77-bce2-9ab5ca99e245",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2a35947c-72b3-40a5-893b-ca1691fbbedf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6cebd8c-1d01-4f93-8be7-178a7e49e2d0",
        "cursor": {
          "ref": "09eacea2-18e1-4448-8185-b872e3a97eb1",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "79378ea9-7fe3-432c-89af-41cc942863b0"
        },
        "item": {
          "id": "e6cebd8c-1d01-4f93-8be7-178a7e49e2d0",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "bb4b90a7-f441-4b1e-97f3-09d65d9672c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49b4006b-cf8e-4541-8829-861e866c10fd",
        "cursor": {
          "ref": "00b753d9-30be-4ef1-b06d-7aed1734712f",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "46347be2-623f-41fe-a99a-f834837e43c9"
        },
        "item": {
          "id": "49b4006b-cf8e-4541-8829-861e866c10fd",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4566f40d-3441-4a8c-bde4-f31d36648b3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9fe5ad4-7aa2-4d1f-99cd-dba69a992b90",
        "cursor": {
          "ref": "6d9f933f-8d7a-4608-aae5-7f34bc908bfd",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a29e1897-f067-4678-85be-16dc769c3c96"
        },
        "item": {
          "id": "f9fe5ad4-7aa2-4d1f-99cd-dba69a992b90",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c673d1ce-acc1-4dda-befc-4ac36a1c182c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b39a9b73-b752-4990-845a-aa3e5cb051c5",
        "cursor": {
          "ref": "78849660-0899-489e-b5f2-b374f7306763",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b5216836-b02a-42ef-b7c9-e67a426909f6"
        },
        "item": {
          "id": "b39a9b73-b752-4990-845a-aa3e5cb051c5",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e47302e4-bd76-4a86-ba86-987d740f5b04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ddd3bf1-d51f-4fc3-ba99-8b2f508c6e70",
        "cursor": {
          "ref": "dc4a3770-c034-42a3-a486-68a159b8592d",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d65365bf-9030-4eda-9c29-59601f8b84c7"
        },
        "item": {
          "id": "4ddd3bf1-d51f-4fc3-ba99-8b2f508c6e70",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e03510b3-b999-4261-b2c1-caa5c75d0fea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4be8e16f-7eb0-46a6-be01-4ac608a5a39a",
        "cursor": {
          "ref": "82d14f99-5f20-4c73-9971-447d67c5a45e",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e2aec4db-b8c1-4236-ba8b-af2db124d419"
        },
        "item": {
          "id": "4be8e16f-7eb0-46a6-be01-4ac608a5a39a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d49bd8e8-56a8-4ac4-b7aa-7d58c85b8492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b254d56-16a5-418a-824a-24ccceb0bbb3",
        "cursor": {
          "ref": "096670cd-a385-4aac-927d-05abd626e141",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1e6f469a-b83a-402f-9a81-b45a37f60b32"
        },
        "item": {
          "id": "5b254d56-16a5-418a-824a-24ccceb0bbb3",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c12e1003-7891-4e85-9f34-eb7d7adc0653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb2f26e-dc28-428c-8605-eafa74daee3a",
        "cursor": {
          "ref": "abcc3ff3-44df-4b81-bcdb-c6a5e4b00fed",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "023d6f50-378b-4c54-9d97-16a5737859b8"
        },
        "item": {
          "id": "fcb2f26e-dc28-428c-8605-eafa74daee3a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5b42f9e4-cfdf-4c6c-b74f-fa1907efce93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcecba31-d3f2-444d-a3fd-10552ab2791f",
        "cursor": {
          "ref": "c5385b8a-1c80-4692-babe-c8d7d787d262",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3b74f6e2-e96c-4f1c-a9db-21cab5c5ca31"
        },
        "item": {
          "id": "bcecba31-d3f2-444d-a3fd-10552ab2791f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "94f99b36-1f4c-4005-8f12-292d65ced7ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcae2965-f28b-4a8f-934d-5cc4b0d3eddc",
        "cursor": {
          "ref": "1526c675-773e-471f-ae5f-2109d8e0f782",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d3912d3d-76e1-4d34-bcb4-18563c363039"
        },
        "item": {
          "id": "bcae2965-f28b-4a8f-934d-5cc4b0d3eddc",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "f29c9ec6-2044-4cdd-bc75-c20896b399cc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 37,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f39ff024-4a15-498b-b778-22c54fc40516",
        "cursor": {
          "ref": "98011aef-5249-414c-88aa-ae55d530e9dc",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "daa7e00f-5dbc-4434-a288-38789ac004aa"
        },
        "item": {
          "id": "f39ff024-4a15-498b-b778-22c54fc40516",
          "name": "credentials_verify"
        },
        "response": {
          "id": "1c9715ae-5459-4010-939b-1601dc39ff5c",
          "status": "OK",
          "code": 200,
          "responseTime": 444,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f3febc-4b87-484b-905e-b3c48559df71",
        "cursor": {
          "ref": "945e1478-ad6c-409a-bbb2-5265f685ae4f",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "60b909f8-a20a-4307-9c82-c6280fafe58a"
        },
        "item": {
          "id": "20f3febc-4b87-484b-905e-b3c48559df71",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "f906143e-75ca-4c2e-a572-92315eba0b3d",
          "status": "OK",
          "code": 200,
          "responseTime": 336,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c932a3c-3ed3-45e4-8b9b-1c889d6b6eeb",
        "cursor": {
          "ref": "850f160e-c70d-42fa-94d1-4baee8dece1f",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8f3674c1-5932-40b9-a92a-f65f57e3d2ce"
        },
        "item": {
          "id": "0c932a3c-3ed3-45e4-8b9b-1c889d6b6eeb",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "07748b27-84d8-4616-853d-3374083d97af",
          "status": "OK",
          "code": 200,
          "responseTime": 655,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caec4bc2-4bd9-4784-a05d-fb860470d337",
        "cursor": {
          "ref": "96a9428f-47f2-4716-846d-d79980a1fe81",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6e55b76a-d587-42f5-b468-afbba00814cd"
        },
        "item": {
          "id": "caec4bc2-4bd9-4784-a05d-fb860470d337",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "29d5a6b6-2e80-4d6d-b40c-ee111338f722",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caec4bc2-4bd9-4784-a05d-fb860470d337",
        "cursor": {
          "ref": "96a9428f-47f2-4716-846d-d79980a1fe81",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6e55b76a-d587-42f5-b468-afbba00814cd"
        },
        "item": {
          "id": "caec4bc2-4bd9-4784-a05d-fb860470d337",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "29d5a6b6-2e80-4d6d-b40c-ee111338f722",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caec4bc2-4bd9-4784-a05d-fb860470d337",
        "cursor": {
          "ref": "96a9428f-47f2-4716-846d-d79980a1fe81",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6e55b76a-d587-42f5-b468-afbba00814cd"
        },
        "item": {
          "id": "caec4bc2-4bd9-4784-a05d-fb860470d337",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "29d5a6b6-2e80-4d6d-b40c-ee111338f722",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1d15a1-6133-44e6-804e-1ccce188f272",
        "cursor": {
          "ref": "5a8da749-22f5-48b9-8213-1e3dbb0802a3",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "79300bed-6f99-47b1-9554-d1809a941174"
        },
        "item": {
          "id": "0b1d15a1-6133-44e6-804e-1ccce188f272",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "f1a70e98-d49a-4011-a14d-d74fb6a1e08a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 34,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b0d0dc-dbaf-4a4e-921c-91be777d0cde",
        "cursor": {
          "ref": "682eee78-37b9-4f1c-9f52-5ad38bc43144",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9e89e38a-9069-4b61-b703-8072ecfc8ef9"
        },
        "item": {
          "id": "06b0d0dc-dbaf-4a4e-921c-91be777d0cde",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6cd748dc-39e8-4b0c-9362-9572e9b29f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "06b0d0dc-dbaf-4a4e-921c-91be777d0cde",
        "cursor": {
          "ref": "682eee78-37b9-4f1c-9f52-5ad38bc43144",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9e89e38a-9069-4b61-b703-8072ecfc8ef9"
        },
        "item": {
          "id": "06b0d0dc-dbaf-4a4e-921c-91be777d0cde",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6cd748dc-39e8-4b0c-9362-9572e9b29f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "bb5c9c90-8a36-48d2-9b80-2604de2c8ec4",
        "cursor": {
          "ref": "b20098c7-7718-4830-a192-841ebd08a563",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6a585d5c-4e76-4790-a2a0-95d14e445644"
        },
        "item": {
          "id": "bb5c9c90-8a36-48d2-9b80-2604de2c8ec4",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "2e885725-4ccc-42a5-9d36-7b4e7aa58cac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "6a5277b5-b553-4116-9ec5-6edddc26adf6",
        "cursor": {
          "ref": "f0af4886-18ed-4cf1-aa38-7c88ae76da17",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "05007a44-73ce-4c12-975d-7025800b9bb7"
        },
        "item": {
          "id": "6a5277b5-b553-4116-9ec5-6edddc26adf6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7339768c-4ba7-4888-a4cc-398bf2c3d82d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "6a5277b5-b553-4116-9ec5-6edddc26adf6",
        "cursor": {
          "ref": "f0af4886-18ed-4cf1-aa38-7c88ae76da17",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "05007a44-73ce-4c12-975d-7025800b9bb7"
        },
        "item": {
          "id": "6a5277b5-b553-4116-9ec5-6edddc26adf6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7339768c-4ba7-4888-a4cc-398bf2c3d82d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1f859066-13d3-4245-b054-93b69bb58824",
        "cursor": {
          "ref": "779938cb-97d1-4588-a267-7ff1979a0353",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a97cff21-1743-4fdf-95d4-0f3703bdf215"
        },
        "item": {
          "id": "1f859066-13d3-4245-b054-93b69bb58824",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "26bb9d3d-77f7-4945-a5db-235e1d32f2f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}