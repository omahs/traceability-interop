{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e161b0bd-ffd3-4453-9a5b-e430a59629b4",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4ecd6ab5-a100-478c-9328-9d5aac385506",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bfe3b1ff-5d82-4a07-bc31-3eecfc4e514d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2d758533-304d-4b64-a265-ab824c7cdc3d"
                }
              }
            ]
          },
          {
            "id": "e63bdb39-f9d2-4300-8650-b32c6948915f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2418e479-5c5d-483c-b2ed-d58255f9fb86",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7e924ab3-34cb-42ba-8a65-9dc4e40aec0d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5b9a80c9-d259-4b77-afaf-68241584e95d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9f387b47-2429-47f5-aec4-a5b76efd1925",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cfa16231-68ec-44d9-9d3e-c412e007c7bc",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b635068e-18fc-4831-bb1c-266e97da0bde",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f92f5174-747a-4cca-882f-ea287960c9be"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1f826a79-3f93-4308-b965-131aea81b50d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d6d54a0a-f726-45c1-b358-3d9187c1ad83"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ce25ed73-3232-44c0-b307-543c8ee04713",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "09f09471-5d7b-496a-8599-5ab02023947e"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f9873e53-d68f-4c8f-b48c-3a635980fec9",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "75017f15-2ee3-43fd-a20d-675a32e71947"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e3c710c-992b-4405-91c8-dfeaf8f3c69d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fec5cb9b-5e74-41ef-a123-776ad52007a9"
            }
          }
        ]
      },
      {
        "id": "74a6fa46-e213-4a5c-9687-d0dfd45933cc",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1741669d-9be5-453b-93d9-4932d9704350",
            "name": "Negative Testing",
            "item": [
              {
                "id": "90088949-ccb5-49e8-bca3-958443795f09",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4389bbf5-814d-4c9a-aefc-dcea4373e8e5",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93cae946-8a4f-4eb4-85ac-e4f90c1b7c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b69f012f-8bc4-4702-ba1f-d257a2737bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e530c1c4-4bdd-43e6-b805-33c1eba73b92",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b098110c-acfe-4062-86cc-cc824bb30a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b3de0aa-3132-4a32-8cd3-30465e5048b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a504fa6-c46d-47dc-8f5b-473fd8f29825",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b76ac94-2267-420a-82d0-44c13be7a592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e27191b1-564f-4561-a8b6-0821b49e9ec5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8423f003-ca12-433f-b7ac-f722139624be",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ef4d28a4-6fc2-461d-9792-d5a4829eaedd",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "920ddf5d-717b-4000-8453-278fb865071f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31ccbd55-adcb-45f8-bca0-958e84870fd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3265181f-fdf1-4516-be6c-c20e143b9e1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "330bf80f-af35-4536-9510-0567991116d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e319062-ab66-4aa4-a62d-38c44cecb6d9",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0301af1-5316-4f29-9e54-7587ab5e7757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "adad3e9a-440d-40ef-8da5-2187731a4360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3acc34-1e7b-4791-b29c-1728af2f5199",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "8e8ac851-6c41-4a55-9daf-e5d159f26099"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0e366dbf-34ed-490d-9255-3ac52ada677b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dee2e39f-d717-482f-a71a-f2154cdbd4cc",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b82d118-c90d-4ece-b5db-c2daafd03234",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f3f01a32-c11e-4303-b822-61d6b0f44f29"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2964fd0a-755b-46c1-a1c2-b65ee4d0721f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "ed3df99d-08b7-43b4-8f20-de69c5b3d993"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "552e913e-8ce4-476b-8d99-40d2e117df88",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f70ccdfa-6c3c-472b-9474-ee3448e31771"
            }
          }
        ]
      },
      {
        "id": "c6cbb9e1-4312-45a4-b430-8bde6c788f39",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4e308902-f83d-4343-93cc-ae68a41803d0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0c10995d-6ffd-416c-9ed7-9e7645d027d5",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "dd7751a2-8bad-4688-85de-3f4770001c4a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5afaf9f-29af-42e5-968d-b2010cf2ba6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49bd0e1e-7d0f-44ae-adb1-568f946c13f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53313fc2-ca5f-446f-bcbe-bf9f07a1fec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fbb70308-ed13-46a4-a34f-81fddf671f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617e4896-8507-4514-abbc-355768812030",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b564a058-ea1b-4143-802e-6bd5d4a43bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0c1e0e5-17c3-49cd-bee0-0ce99f1f95ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74328949-8a69-4609-b22b-e51f2ab309c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7d0c70d-b9eb-4e09-a772-9affee5cfafb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "594b406c-cf2a-4749-a143-08f73c855940",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6296e759-e453-4ab8-89cb-e751e1179609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9e7d94f-18d3-4e7e-8f90-75a6ffe666aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882a368e-992e-4ddb-8d5d-d60827a5c9ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "914d9695-410a-48ca-affb-8be760f64d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98e6fa88-3465-47e2-a7fb-197466933a2f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25094058-7a75-47bd-86a3-db105ea2e261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01faba6f-10c0-4c60-8546-37d767729565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4ca5c6-9dda-4998-9679-70cdde38b6da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28d6b248-d76a-4876-9bd1-6eb618a96731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea1eadd-9090-4a97-a9b8-0ef2d9a1e89c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f53ead87-06aa-444a-945c-0e02e7b5906f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56c7cd09-c0f6-43e4-9239-e7a5863a3c42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "093b3e2b-832a-4da7-a2dc-15501c5c812a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6c7219a-7131-41c4-b12f-a140589fe870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b57cfe0-8e8f-49cf-bd12-a7677172c582",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68b0e6cb-133c-44f8-b6bf-9385e6cfeeea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3757325-e1d5-483b-8780-3f192c395794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d12d091-a185-4f56-8825-46898fc5aca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6cfbe507-d563-408e-a5c1-3e223b9255c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9afd84a2-15a8-4c8b-8798-569a3bb60ef0",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2636a74-b49c-475b-9efe-372d4238d287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7a4c863-16cb-4827-9e10-bc00994c485b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e912f63e-05f5-48f6-9d2d-72a9915802d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76ae4362-73c2-49f7-854a-ee39ddb89618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b219cbee-2a76-4c24-8c22-2457f1a17e6b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c87af90-1b2c-417f-bbb7-775f5a95dfb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f2c9975-810a-4cdf-8b5f-3a65a743176b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "211d2f2b-8285-42e9-ad0f-947e1d117cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6012bd08-6e8f-4a24-b19b-3977cf4d53c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a39859-2648-47aa-8464-20497a3406d4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef2f411-8768-425c-88b8-c7f8b90c7bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b076eb4d-54f6-4922-9605-54462a4e9de8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "255a9ec8-ec80-4f87-8122-670108194992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d9d89d6-4354-4a61-acfa-2c06e7291788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbd162c5-954e-4047-b645-2434c110cec7",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2dc7d6-766a-4e3c-b847-d52aa2279ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cf35f0a-08f3-4e5e-bdc8-b6cdf2dca00b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea975c6-4d16-4f8d-a8f0-326b94108905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66f7e18c-2311-462f-98f1-9f87c73ae25f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae54fbf-15a6-4a3d-8652-c4fe47b7dc05",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db980deb-41d9-4b7c-9432-59dbc859f15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "350e8dcc-64cf-4dea-a2a2-aaf4efa6f38e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb7d20c-5cb5-43c8-a165-5f789641b998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a023825-f7e3-4d7f-aab6-769fe5363c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8583c7c7-50db-4c70-a104-914fc886bdba",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6209ccfb-3e86-4498-8b19-3a69fc845de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f03ce240-e328-49ba-8afe-497295bb6315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb7ed23-3cee-442f-8a71-582d30da8bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a551b06-b411-41a1-829e-39bd535600d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec448c3d-7a31-43af-b6d2-30f7a063baf7",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69f8185-e531-41da-b0cf-053754cd8ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b0d5fc1-9501-40f6-859c-6d3b760e8014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c736d03-0fe2-4fb6-9d86-958834860b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a267dcd1-450d-454b-aff8-bd8ef066a6ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623e49ac-1c0e-45f7-aa08-7967e084efb7",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4277017-0803-4a8d-bb3f-107fc4309f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82fd0f64-4c70-4aaf-82c9-d45287284ea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1640d4-b520-4596-a1cc-08a89e4b2e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "236150e3-12ee-4834-808b-d520aaf1cf58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da197b57-1c48-4f60-ad1b-2d4268bfd569",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08171069-213f-49d6-8e88-15dda250dc6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a42017e-61d4-421c-8e8c-6d1a952e9a56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f594f1-d5b8-434e-ad00-4c93cbec63e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7a2a1d9-c5eb-43fb-bc3e-7ee68d57ba47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d87c0cc-70fa-483d-b952-41071dd4d04d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66fb5c43-a513-44cc-8287-b87486be4800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7269a8ca-2868-4c4f-a6d2-cfdc75a0152e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96c7b5d-db24-46c8-b5eb-0bb4d93fe23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc41bfcf-dc1a-4016-8f32-a47840cd83a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b9e8707-a86b-4df9-9d02-9e15df95ce5a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6257b122-c8e3-40a2-bb6f-c5f730899e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "141608d0-ccf9-4b48-92bf-218baad29f78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e4e984-3cce-4bd1-af31-1e4db9a3d193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c80bb7ee-ef17-45c3-ba27-f2e538915f22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506d3062-49f2-45bb-9761-30571c8ae66d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2878a51f-56b2-4462-a0ca-0d0b6979a07a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3b10933-ff4a-4364-b1fa-60fdeb341fc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e5090a-c1ca-4d6f-9694-b5da019ee4ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8aa47515-7f01-4b31-83b0-87df7d53d9be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e52d4876-cd96-4800-a0f2-7a6c7a0508f1",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b558f1ce-7d08-4514-ab18-6db5a83787b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd662195-c1de-4b43-9f3f-e9a1453b9d7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5710886-e598-4ff1-b367-0f51f6b4f901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "66664d4d-75e8-4ac3-ae4b-b175eabd7790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f15a59-a0a7-4f5d-9f44-8599bd3ec31a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eec19cc-2d16-4df1-a303-254d8b29d3bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "311ba289-ee55-464f-a25b-dc2d948d460b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e156de1-6ea2-41a0-8698-8dc78a9633c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cd65c59-bf2b-4b2f-a2f5-be4c10e01ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1a0a74-b206-4b25-afd4-d8f3026d419e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7bfd827-329f-4c86-8b19-f650de1a8d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "546d8f0b-1f9f-4e62-b994-4403a22d413a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5759150-605f-4ad4-a153-40fc01d8d1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dff462e4-79cd-4b4e-979a-8f8c6161fbb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a189452-c8fb-4268-ba84-a663bf855109",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b89c6a1-bfa4-4a6f-99d4-8601aa5bab6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02acf622-8d62-4790-8a84-185a3ec01211"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e5b18e-c280-472b-b7a7-876e73641226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "13407060-db35-4d7a-b460-42b31f26ef97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90035efd-1b03-4c71-9c40-2f55f8389174",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "721ce669-c289-41a1-975e-726551a38176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca6591f9-9c14-430e-ad47-f263ddd2a0ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba88d0a-3de4-483d-975e-3eafc0b5f455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ceec612b-3420-4bed-b572-31b80c41e409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131e8f95-2538-4bf1-93bc-2676c59c6347",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc081879-b8f1-41eb-9aa1-db31c1913358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86357589-0dd9-493c-8688-c6981b85b728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259e57dd-240d-4f40-a949-1d8369bba989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf783681-733c-4999-a78a-bd9a932d5367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1878adab-c497-4ec1-8d7d-aef0881a54e7",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd5f563e-74b3-4016-b19d-3b00ccf7c1af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0022fb88-bfa0-4154-84e2-997e94cb5715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be33f326-2cab-473d-b8d1-57c7ba288551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac0ee21b-eb28-4154-9f1b-8e94f0ac4804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c5199c-e34e-4f94-a4bf-73427d1331d2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "256ca4e0-0960-4a09-a6dc-0617a889d317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82d39d95-2b62-486d-9c4c-c8598b3cbe41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba87f3d8-f94c-4786-9ff7-e86cb44a9d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "11263f58-9193-4fcc-b9a8-896f1868cf62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863de66e-753b-42ae-ad50-ea7367c3789c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d60a248-e8d7-4158-97a5-657f5cc1270d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67a7c21e-f5eb-426c-aea3-f0957e741e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f3d1a87-8f7f-474f-a90c-7f3f7c9eb7f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "51c86c6e-66d2-438f-9abe-36ac27fdfa00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c10d7316-52e9-40a2-97f8-f4adfddf6a2d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87de92a9-7fcc-41eb-b18d-b3c19adff153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9ea25ad-c2be-461b-9cf0-9829fd058953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f0dfc8-d18c-42b9-b235-7d1a4cfea5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d1c9af1-1d46-4178-9580-3581de2afba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf79f1cf-8dfc-4c19-8e78-94e697a672ab",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b074ffac-60c0-4a5d-b64e-2e258e7be1c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11572b7d-a5e6-4944-a55a-05f6edff8c77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00952c85-c625-4d18-9613-fe96730d2e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd560834-ff33-471e-9ea2-ff4651dffff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b681204-15b5-4e2a-9764-11d070994805",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad539f0a-a886-40bc-ad1d-80bcffa5c916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e8356f8-12fe-4ec8-aee8-70dffde72698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9044342a-5bd5-4cea-bd74-761eb390a97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8319daca-97e7-4db7-ac7b-5ffe163ae657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01e9413-db0a-4562-8c41-74950e27efd5",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f97ff8-3414-4859-88cb-c6a3d7d05a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d79c971-02b5-4ece-a7e6-5db99e36c6f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6697a265-a6e9-457b-979c-7b1c0b7db8a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e2e810e-0706-4e70-a767-4baa68601a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4496386-6204-4b21-a8e6-5ea57196aea2",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "028b54fe-eae7-4188-bd5e-f73b2bedfe6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04d449d9-6342-4c8d-b77a-1ae3cf28d498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab42575-6d10-4e63-841b-51c276b35cfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ff6f65f-cb6b-4cc4-a78b-94c671d6a2e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb741a05-3d1a-45f8-8bdb-f281a2ac9129",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6855fa6e-af01-484f-a58e-52d8481e5424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c06261e5-1d87-4088-b402-1e15a33bde20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a36a265-953e-484a-8a54-08acd72cf7cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd8ff941-b09a-43a9-89c4-abb68bf8b5ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf6a51b7-7aee-4c86-9454-f13d5b95106e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16758c1d-e54e-4dd5-9877-c8358621f88d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fe29cbe-5a49-4db4-b11a-3b133a840239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "101a9af0-7ece-48b4-841d-04035a0e19b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "34b32460-82bf-42c0-82bc-4d8bd0838cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34241ec9-57c9-4763-bf14-acf71cff654a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a148576-60c6-48ae-ac5e-b7c7da0ca9b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29134faf-d05b-4b8d-bf1f-2105266fd076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e0b761-3941-41bc-ae3d-07f3a8c38d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ddd442f4-4635-4934-a69b-dbd297e19146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c50ab52-5d7b-403b-9510-09add0a72b88",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa16828a-f986-49d1-a42f-2a1174e56293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24572f7d-6b7b-46e1-b200-f666ac600bd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "327e2b92-8383-4bb5-875f-59036137608b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "22cd40e4-deb8-4bf1-a6db-f04dcb7f584d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b75a5bd-dc0d-4fa6-bccd-3e5ddf83f61c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74697d71-b2a5-413e-9ff4-6520bddedc19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac8d28d8-9e06-4c4d-8bb0-ffaead883c34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "728274a9-fd69-4660-b404-5527de7f0db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "578a4725-72c6-4ce1-92a9-04b300aa1f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dda4f675-8670-42d6-9456-3aef34324be3",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dfb9fca-d364-421d-a338-45efe3ff0f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a9a7522-3c7d-4d41-b8c6-3b6dfe419605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70024c11-5330-448f-9499-a758e0a10ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd02c5c2-c3fa-485a-8ceb-47e6b1a6c242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3471e051-fb66-400f-9602-988d547b3702",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed85c610-6688-4d9f-a59f-48eee5d04cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18aebd6c-4a03-4e07-9c2b-c9314a3b153a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "061e16e6-22b7-4804-863a-e4cf037c973c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "70479b75-8053-43c7-a3f3-2b7e4d8fd0d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d603c15e-6541-4637-a673-c4b7c8ff8de4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3904b55-e235-4789-a37a-83aced3d07b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0778dac-d856-4858-adb0-7e1571e10053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeba801a-df49-4f3b-a65e-313ea761b82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3285c176-d937-4e8d-8d34-169204216d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "880582cc-7014-4f85-98be-c48df6943bcd",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2292eba8-6d9f-4216-9843-621cc203f9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "193755a4-9c82-415f-9f61-1a82e8d40931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676ec014-9a04-4c8b-b7b1-0f71a6f8a13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b88ada07-23ee-4767-baf1-3c9285d92df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7df1307-3a15-41c7-9d17-e98c6f1172fe",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92507551-e238-465e-ba12-8885551590b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded9073c-0d59-4b95-9868-501f1fb02f0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba0e307-87d0-47c0-b4b3-217c409040c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "feeee91a-97c7-4cf5-a797-e1253d1bc4a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532f994f-08ed-4459-aac7-998d24afb7ac",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ddb73e4-ae07-4893-b782-dd02cc776ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91dad672-74a1-419d-a7de-051b4be8b0a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "420d6e34-edb6-4989-b294-d6821107472e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc073cec-40e4-4639-8289-b53112331156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f184a839-ae46-4582-b5d2-fa46949cd535",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46c56b7-39d0-43b4-8e32-49fec3a786ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64700a32-a668-4f6a-b0f2-0486276a9421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df80581-5732-4890-8a8b-18ae2c5b3c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed7aa01a-3044-482c-a266-f87669c0f25e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a8fa11-4a59-49d6-afb1-52496acd577e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df2d8ef5-efe5-4836-be2e-bb0889b0cd64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a3e22b-2b31-4c5c-90c2-635368aed917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44546f1-4444-40b9-9ae0-ac98ea151874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b613c963-789b-40ef-9df6-9e40f3196b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15385a40-c113-4c1b-abf6-ea1398994614",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8fe2abf-6de5-4b56-97ac-7df746665ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2984e63-737a-48ac-b3dc-58b1342195c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6820cea4-d4cf-43a0-ad33-97753e60220a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec8f9572-4af9-4981-bd4b-a4174d9327b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a19ac89-1254-4e29-bc24-b9113d84d393",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c0b764-b3e8-4ce5-ba1e-a510929b4776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2786f8d7-155d-4d9a-8b6b-466786938175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04767eb-7f6f-4491-bc44-6a1322e90f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a46b03a-0ac5-4bc9-85e5-30db9b3db136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc1fc39-6288-4cf3-b5cc-10c4b534ad4e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f577abcb-6f7f-44f2-98d8-450b93607216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23cbcb05-cbd0-49f8-817d-84d941fc4aa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e5c7f8-3908-4056-bdbe-c7e1be1db082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee83228e-f3ca-453d-9948-7d3952de4af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397e94e0-538b-4d2d-8c50-11a7aa2461ab",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93fb90ce-2a95-4055-9eb9-7e0101e67bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c642b4-d7b2-4cd8-b3d5-fdded554ffa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba7b1b7-a8e0-4f79-8930-37f9c828244f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "be1e5c1a-a396-4fce-bac3-0f2202737766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb2269ad-b157-4055-abb4-660575ed9da5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a819e6c5-0987-4038-be1e-326d5b053a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7de70a1d-7dd4-4629-b80c-d8118aa09307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7fee2ee-d1a3-4af1-a94a-76068448c61b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "19de6338-e05e-4813-b375-2805b8d88ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a6a327-67a6-4fc2-ae2f-7427cf339c3b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71b2751-131a-4454-9e36-e93d2147eca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc1fa01e-5424-4851-983b-9964c4d729f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2092c9df-eaa6-483e-8b81-7c56d65f1d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e761c5c6-e2a6-4f32-bab3-05d3f66c4281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ddb6205-b999-4e39-b6f7-47770d9041a1",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85735343-ef68-43fa-ab8b-6b4fa3adf3dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f6d455f-5d52-4a19-8b0d-67063e9ae17a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88c187c-5b75-47a4-b3b7-058acca97d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa146442-15fa-4ba3-abe0-4ee7c1702c29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d508018-ce21-49cd-bd83-41dac60e8918",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd906cc-0564-4f11-8e6d-c84f083baf61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaac6730-6565-44ed-85ea-6c3ae015fc39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c13145-b791-4a5e-a3d1-e70cdcbefd29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aff0de22-bce4-4a7a-8f0d-b5bbeb725cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6f7d7e-283c-4701-b96d-51f2e74e1873",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "452c4376-0a4b-44f5-bafd-1954a14b561d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f204bb6-a9fa-41b5-900c-c39a96e6595e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "795cf075-7faf-4e34-8f45-2b588432759a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "71298f94-ca53-47d6-a4ee-1b9c94e710c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f205d7fb-e53f-4d2a-9b49-b36b85c9b8b2",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dcd561d-b78f-4c97-b7a1-524f663c69ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efb7b43f-3493-429a-8900-d23a2d017146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ef3bd9-9ad5-4dd8-adcf-6c22dab79d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "36fe1488-571b-4e5f-9df0-34b7046153b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941058fe-399f-49c1-9021-1a31c27fbe7e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "222e74a0-d3ca-405b-a2a6-33c244ebe8ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c26243b-f778-4b5a-9703-26f9dcc6d596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30732cea-644a-4d0e-bd61-8ace9637b4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "7180e420-8476-4883-848d-475365d027dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd06a74-2964-4dea-a50c-1661e0e34dde",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7fea0d8-9989-4996-a432-058fd6128a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4282bb20-86c6-47d2-8619-6ed3f87082c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "289510a2-ef19-4ec4-b373-119d71f85b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0d88ba5-283d-4264-885e-2b1c3a0bf909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84313b5c-f793-412c-844d-86190bb933c9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fab7571-b9b1-4264-894c-47d236af3588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9893bbdf-947b-4c17-8bcf-c513ebc2f08f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ab662d-97f5-4cfe-b297-92216c625ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "244b825a-aaae-480d-b250-bdf457dc3ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968c2834-9ff0-4bf6-b10f-50bef4bcedd9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d68426-8135-4666-a8ce-43a1c5c488c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4192d19-0002-4230-bc9c-7ab0302d2484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1833b28-a104-4f37-a12f-90f64fcb883b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b7eadfb-b615-4ce7-840a-a28119c09e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14a637aa-b743-45d8-ad88-685be825840c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "187a21f4-959b-4919-98e9-d5602a5423e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81fab95e-5db7-4e7d-be4a-a3518565af96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c79f3e4-5a12-428e-acd4-43ab8ccb469c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "57ffd730-ee0d-44d4-87f8-3f1a2cf94eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6eb7499-128e-4f2a-87d7-9bf1ec537bfa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2918a76-d0a8-49c3-abda-6b5b20be9a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebb6d6c8-d7f7-4d5f-aafb-53e2464b229c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68f26c33-8dd8-4c79-97a7-ff7430e78ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fff22b66-ba54-4451-8583-9e0553c60b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f4f6ac-7356-4a4b-a768-01818ad326cc",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df5edc9-5b86-4ce5-891e-9181783ee5ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3761bd48-7a00-461f-9c6b-bfbbba3fb69a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b946e27-5492-488a-a147-bfcb373a065c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "badd9f0d-f4d9-4486-bc5d-76b4ca94c0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c51108a-9ed5-4775-bc92-cd92437d1b39",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc439fe6-e474-4d11-9b99-d3bc14ebd1a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7a74744-716f-4396-b91c-a89808ee8a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8666ff1d-8902-4188-a7c3-812cd01ec55b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcb5f1a2-604f-4d79-b88b-675ad6371fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c2853ba-9fc9-461b-bcac-359ec765ac5b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de3be76-0e9b-4299-b034-81a1130302ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "263422e8-e435-4f36-9988-5d11356e81d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6bcc269-c716-4e9c-8a53-1defde5d9f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4450cee7-fcf7-4d80-80c8-63ed2868cd19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac4d0e2-8203-48aa-8965-6dcaac594677",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bc30619-175a-43cf-9d9f-360bf248124c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23750f4a-e42b-4933-83e9-9a567a1c69e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c25fe118-f7b3-4f81-ae0f-8d3e6ab86120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "046908e8-2605-4de9-bb5a-f0792a51b583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42cc0442-322b-4309-b143-7ccdd344f27c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7020502-8849-4241-ad89-cf8be98ca81f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16e98e5c-1fdc-498c-bffc-306d3708063f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce0981b8-0034-4ccd-9a28-b1f4e3def682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "25c5c0c3-ea0f-45af-b4b6-cb60148c7027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdca46dd-7ccc-465a-9127-04cd9a400335",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c62aac5d-15d9-45bc-bd58-bd61e2bea2fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e64e7c83-d4e3-4f20-808d-0b15e8068234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddce1251-23dc-4f02-97e0-1f933879997e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb000356-ad65-49c5-acbb-8e2ff1cbe29f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f677a3d7-0fc7-42af-b8fb-f87b14f3ce59",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e913faa9-5423-44d8-b94d-4bc669648b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26ffcca8-6c35-4f5a-bba2-03a5d7cad4ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bbe7a30-d6d9-4bb3-9f36-a9dae7228a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a3fe184-a101-41f9-bbc8-5e950014a165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dacd87da-cdb6-43ec-80ca-bb69363586ff",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "307d532e-84fa-49f8-8b93-da0f3af0091e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fff9748-649b-4b6b-a4b8-d203d5e3cd3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66aa6e2e-de51-4bf4-9257-8f43a47bbbd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2fd59b5-2608-4c55-b08b-dc3830ebcc7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b52880-e15b-4398-b091-4403683f5d43",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6663c8db-e131-4075-8c9c-7d62e7ac1fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76629a7e-b8dc-4a0b-9324-d5a6a464a2c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2842ac1-8cbc-4ddc-937e-1d1a4351624f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1ec8ea1-3470-420e-8b71-53d5bd7945d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad0e22f-c4d6-47ad-91fd-988b88096313",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef0296e1-f0bf-42f7-987b-11f06cf2e0d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "999097fe-96db-4aed-a668-8331e8aac804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179781ec-56d7-4778-be8d-73eb2ffb68ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7ff81a8-2bfa-40b9-b4bd-0ca35862949d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb8ae391-c428-48d9-807c-e0284894914d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2baaabee-6eef-4ea4-8c8e-46244b01fd5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "702df73a-fe97-4994-9e1f-e33d8e27e469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04355ba6-ce0f-4367-a1b8-1a796f80fedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b51a597-9049-47fa-8b60-a5297b32fb07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa7ed0d7-bcdf-4cfa-9eee-ecf721b0de0e",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e680e95-49df-4a03-ba41-d27a72f1d935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af4cfe90-9072-4e79-a54c-9b01830d86c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ac51f2-402e-4832-a6ca-a6442f153426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ff63479-82f8-4b9f-aeef-b7e0bb227e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0bb444b-5031-44ce-a040-e6aea289049c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a112e6-0ce4-4b8b-a093-a4366366e6a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea60043e-4964-4f73-bba0-27ed902985db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c14b0d7-cd71-409a-8911-4c504e33062a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dc7a7498-15cc-4dc0-8197-361fe2c0c654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e36c3b-2eb3-437a-8ecd-3529c8d7382d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7993a005-e3d3-4775-ab36-78dce8811185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0951697f-e1b0-4c49-9280-514480ceebdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90b8f53-bd9d-47de-a874-c3da97000e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f83f1d19-2ae6-4641-b7e1-d0384553f060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dad5be4-24e8-41b3-ad2e-de4b038c6d4e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c69aed-6faf-4192-803a-440fc19450fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aba23449-52e1-455f-a68b-dfdb86ddb65b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6214b88a-4032-4e5f-8cf4-da421c4a341a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "624b95ca-3ad6-40d1-b5bc-dbdaaa83094c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158b03fc-7e92-4155-b9d9-d78a4cd67d66",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8c84b5-4e13-473d-9fa0-92546325f09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad06f4d0-1213-46ed-981f-9237349e8fe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18bd551b-807a-4fed-8989-fbc5fb5ec011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6687ebb3-1a42-42fc-9338-3e415653d89b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da648a3c-5d05-4123-8118-a763eb0817c7",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ccb244f-57e8-49de-9bfb-0d7da64580c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c70d2a54-6ec5-4dd1-b830-736df4ab82b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a14f2ec5-bd1e-49d4-b144-58e44b0f25d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a5df11a-6851-4b10-a6b0-5656298e6a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acad5563-7093-4b42-907a-579fdadb7bd6",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9bac090-1d6b-4bca-8745-cf4fb941158d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec7929d2-0ca8-4e14-887f-97f3c85333d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6598dc1e-dc18-4942-9eb2-1a9721243ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9238c9df-476b-4c3c-8a21-207fd3a62b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f03424-6a3f-45ab-a1b0-a7a6ed44c170",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77805c01-0751-49ae-9cd6-dbb63a5300c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "459770eb-890f-48f7-ac45-a7924a77e1bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d9a013-b53e-4249-b24a-acaaa3fc341c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d2c7b103-66ca-4207-9b67-8a07574ac6c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "467179c7-d768-48d6-a28e-8fb02b8e12e2",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2dcdd59-d03c-4f5e-b67d-cab7912bcc5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a61c4e93-2196-41e0-b1b4-9b14b4854f01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412a05d4-cf4e-4657-beb1-964413e51e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f83284ba-ece8-447b-97eb-97f64a3f4772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "416c976b-bd12-4a1f-a10a-8385043672f5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "575fa07a-2e65-4312-b0c1-f9a4dbd66542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98d43852-059b-4c02-ac16-986f9f241820"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c513180d-69fd-4fbb-aa4d-72e636440611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7e34ded-5e7d-46ae-bf0b-443578d932ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e324d375-6ce3-44f4-9e0e-6a69e3f16cb6",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb3088a-64c9-40c7-8e09-8a906a7753e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdd66519-942e-4325-b9a1-677efe0a26e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d39cc15-0d93-47a6-90ea-9866a5abe91f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c84ea920-201b-4900-b30c-e30d5042b8e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86259fcc-9525-4537-941c-5b76cf785850",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7bcb75f-bde1-4cc6-b957-9e3dd04e676b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e798979f-9b68-4f33-b95d-bce489140e79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15dd96dd-945e-4cf6-bb2b-accb07a2b6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "899d5997-a8eb-4c0f-9d04-ab2499993ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e53733-d9a2-44ae-bfe5-9849ce95167b",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e7e400-c172-4f5f-8a94-3bfec2884d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01ad0949-1b54-4900-8f2b-ee79edc6b5bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fdb0fb2-5061-49c3-acfa-3cea2905ad54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "668e4127-98e8-4d54-a2e2-7c5df88c8ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a22fa0-19e5-4f8c-beb7-6001ee2d97a0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e87c3033-aa07-4d64-b261-8651a6169f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbb9fade-fd76-42c8-b303-86d6133d11a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16fe4602-05c0-419a-9051-4297bc70584e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a64eb581-3c44-469a-8299-f0048fdf3027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44bf25f8-fd23-4ad2-b7f5-67d778223fbb",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8611de68-b08b-4d85-a840-428d94a4600a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cde7a9b7-5d6b-421a-bbf4-6ce7e1066c5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8934acfe-6058-484b-9154-844153f4a043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a60f9392-f83d-4705-805a-8d0884122e3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e931b30a-7fe6-42df-b77e-60426fb18038",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb2445f-10cd-4f42-8e0a-47e2ed4de6dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb91789e-8d9e-4cfe-98c9-a5d6f18d1b5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9610179-00fe-4ece-bb20-dc612068c7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "92634358-8dd1-4814-b12e-137fa48b1aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d11063-ef41-4241-98aa-f57d406f5e9c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52af5d74-ba74-40f1-9a02-6873833709f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7251fb9e-52fe-43fa-8ea1-84a4afb2919c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd926c3b-027b-4e5c-aa0f-416264478701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d939bf2-a1cd-46ab-b312-0e02076e4809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5891a40-5dfb-4421-9cbd-813d9361e69f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60b173c-3aa7-4814-a43f-df37522d5e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ab11c22-fb63-4c0e-b629-2470985a117b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dffa54bd-65c9-4fa7-a246-a080c7ba68e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "23dc3d2c-6172-4eed-b110-7d810092fd30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3206708-4e92-4d48-870f-a5f504074e4a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa74bdc0-1946-4c50-8f53-0be327db5c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbbf7d0c-624e-4a2e-80a8-e5d273120a25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e8adfbe-5d0a-41e2-90b9-df1e99edb355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba0e8444-5c21-48ec-ab58-af840adef57a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08fed7e4-3247-4a23-8b97-bdde021e0487",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0bdc4f-b1ae-4a17-b13c-e0fd967a9b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a98b8f0a-bd48-42e2-b82a-c4c54da0ecd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47758c9-d077-4f04-b678-524ba9719cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "885e1262-eec1-4b80-8538-d8388b779821"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0cbe4964-c1a6-462f-8da5-e992615e713c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "695a4909-a8bc-4b9e-b833-3a2fc2e9037f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b79ef92-dbe8-4525-96ce-66b8d3fd28b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0eda8133-780e-4472-8ce7-30db9ad9abcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b63c4c-0b4f-4848-b06d-f948d5bd57c5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "204adcce-bc33-437f-92f8-ba0ca0615872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3ce186-cc5c-4d45-a3b2-391679a205b8",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efefa790-47d1-4b11-b141-2c3ed8c003c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f421671d-68fc-4734-8709-714d6c446150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177364ce-37e3-4c91-92f6-1c0ff8176ce3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "6c41d549-ffff-43e2-8943-a913f0ca2757"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb9f86d1-df1d-4b31-93b4-be036bb5eada",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c12a97e9-979d-4b79-9ff4-7ddb236c2718"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8c27ba9-8905-47fd-92bb-ebb079b88ad9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48772129-e519-4877-96a0-2b8023a58c8c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "71847c5b-5361-4dc2-9a5c-03a6232795b1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "909bee2d-cfcc-45c7-8bf8-c214988a0898"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "88f2a9f8-261b-4c68-84f0-f7fd276c4163",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0385695d-3f90-4f6c-819f-9907ba0eceaf"
                }
              }
            ]
          },
          {
            "id": "4fd7f8e6-055d-47b8-abcc-c5cac96e0fb1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "25e55161-4028-4995-bd95-e882c8dc66cc",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "13f35c8e-5a4b-41a4-888e-df94a51e6ebf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d673d0a0-63be-422a-8635-ecc090bb1e51"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c87ef358-6a50-4a22-8ced-099ec51b8bf5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "75368321-15e0-4492-87a8-34cdbad41cad"
                    }
                  }
                ]
              },
              {
                "id": "c3e217bf-ee95-41de-83a7-70aa32429dfa",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d27f166-86fb-4e04-a889-6a8882a1a40b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ee4d6650-c21b-4d9a-b980-6a4541509507"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b371d442-2a10-456c-95e9-25c33db1911a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "af69923b-43e6-4150-9743-319ae26d4dac"
                    }
                  }
                ]
              },
              {
                "id": "78f261b2-5331-4545-b1a9-99bdc1adc6be",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b4a6247-d920-4a10-bb9f-0fb746efcd88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d6a19e22-a886-4f9c-9272-eaf98164cedb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78e36df4-4743-411e-ae9d-dbac24f94d1d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6e5c056a-c6ce-4158-942e-4c886e412571"
                    }
                  }
                ]
              },
              {
                "id": "0efa3f6f-6cc8-4c0a-be53-d6a7d6813eef",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1602a17c-a342-419f-8fe3-9314bf5c4537",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f9005e04-3216-4d6c-8529-2e5e9de76a8a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4311f096-80c9-4e8c-b67f-83cc67fc1550",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7724f795-f6d2-4269-b940-ce5ca54e3e74"
                    }
                  }
                ]
              },
              {
                "id": "e0c24596-9b60-4196-b364-be210132782d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "62fddb26-aad1-4ca1-8d09-99df8c183b12",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4b53135f-bb4a-40be-afd1-c8222cb7cea1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "83227134-a3a2-4243-93f7-9a0352d72c9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a0140f5d-bbaf-4a65-8cde-36ad8ba9b1ab"
                    }
                  }
                ]
              },
              {
                "id": "2d6bc864-75c7-4c44-b368-92029eafbb89",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d6e2404b-0b6b-4c3d-b43b-a87b9c5d5a46",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "96b6edc2-9f1a-4163-bcb1-71a851726e19"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1b0b82f-b358-4cd8-9030-6192ec2010f9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "310c32a2-ce6d-4cf9-ad87-fe92c8316f74"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "93dc6af3-9b27-4be7-b20a-420efc6f2340",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b5346b13-3f8b-4d40-8344-a6df6f29bc12"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d7af7d49-a5bf-4f76-991e-0047c0d5754f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9e499b38-22f8-4789-a66d-9da07089d204"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "40478859-3590-4abe-8df4-8b4912432be0",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b32c067f-43c6-4991-b569-0ffc8521d532"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dcf25800-63ec-41a2-b8a4-f7d5f1555c7c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3abfd4f1-37c0-4a0e-b6f5-6c91de56a01a"
            }
          }
        ]
      },
      {
        "id": "cc458b19-bb21-440b-9ce1-09df0a884dad",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "271650be-cb7f-466b-bd21-26a321e8e8c3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7c0be08e-4aa7-4d44-9dc8-a4c17083f07d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6b0353a4-3da1-4a5f-be82-dfbf73dcd926",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "381254de-0685-4572-a621-ae25d21d264d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dd9efde-f04b-4131-a400-d52feda8f018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d059728e-f382-40b7-8c4a-e859b61f7c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbb96523-1bac-4479-af6b-c4790fd8a094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e26f0144-f8cf-447c-83b5-c850a0f7cac3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c03233-9a68-4ea4-ab3a-b057cd22805c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb2ae1b9-b7d8-448e-9e67-7f4b030950ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b488f2b0-a025-4ed8-8ca2-1dad077e57f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "31cca651-992e-4521-968d-68a24605e5d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf39835-8feb-4c85-8492-261594e62d6c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "185c049d-1272-425d-ba85-87918e947317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36f99bff-ef07-4be3-953d-386fc2ad253e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1918a7db-3a66-407f-a379-7f69368a5cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38a951e5-7ea2-4b37-9310-8117193b47ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7d6cfe-736c-451f-b9ac-6e1e3527f36a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f00acead-f227-4fdf-9f2a-c1cff1b7858e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8eac7f8-0f26-4668-b357-7292d398f410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04789d1f-82a9-49a2-8317-e131405760ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "45685da7-9b68-4a8a-87ef-0128291b9756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44d71da-77e9-4d0c-82ca-39aa0aec365c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d87ece-02d8-4b90-af5d-eed95d410a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a03fe66c-35c3-41c7-8741-fe6447413a62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cdd1f23-626b-434c-8530-52534207bde1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9746063-25c2-460b-9eee-b2ce7b117a18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c76172-074c-4d8f-9725-bdd7fa04870c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b35a67-bcce-4b0b-8475-7172144aa66a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bb2b9b6-dc30-4f66-a9a2-5edbb22e1428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08db8c2a-66c4-4dad-b5ef-f115ed3578e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e46f406-ab63-4eee-860d-70c223a91fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9b2562-d648-4e39-974d-ecd14200d165",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c5d9d4-1e0a-4d65-9bf4-ce87af720dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "951e655c-1c87-4dc4-add0-1da4e6bdaef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa64296-401d-47ed-a152-bbaa9d64e287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "21989962-ec1d-421c-8e53-4da03a7a9bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c6b3a0-d26d-47a9-a46d-f6bc9d35feb2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82a18da-89ae-4d0f-b0fa-71b401345187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5631d0d7-7173-4f89-9fb8-71ca1aa22e50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e3559e-c8c0-4711-8f9c-4b365772d9c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f519240-63c3-4ec4-a9ac-44a0eaec84dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0251252-4176-4c83-8221-a4bc2a92e0ac",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "828d42ac-b9b8-4dc7-8ff6-5ba6229411ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73c12dd7-d420-4d36-b47f-971f8fa98169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97663769-ed4c-4bb1-81f4-fe5c8f141533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a2a3299-35d4-4b0c-bf19-a7ecf0412b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d75dc2-9677-4c20-a26c-ecdeae1657ff",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d8ce51-56f5-479f-85d8-3e1bc4483c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2e78cca-a22d-494b-999e-8bc6dca9afdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a2bec57-5eea-454a-b062-552a94c69dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb329409-e86b-4949-a072-724ecd8d738e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c73ee29-fee8-40a3-bbd4-8bc24d4c5841",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f476ae-d2df-40ee-9f39-02accead8066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c414d2ce-f86a-494b-aeb5-cc4c28d4119f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4474e768-07dd-49d3-b404-29a323c8aa52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0dd193d2-7cff-48dc-bf8e-3247e128072d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301ca6fd-adbc-4f89-a294-a4c9c9f80c66",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "398053c4-ed9b-470e-ad9e-ac82711283a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2342a6a2-5ab0-4385-b01f-95c4e08beb31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0759d4b-8612-4188-9ac3-4ebdb07a2ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fb4b4c8a-f583-4164-93e4-2f06b007cc27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1dc715f-7eb2-41e6-a1d2-9a66909f8132",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3998c8eb-94aa-499c-a8e8-5fe07298ce44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa256630-dc89-4d5c-92a5-7805480332de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74639d1e-1ad2-401c-bf95-d57b374abcd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c334fe54-7738-422a-bd99-7feada1d44aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb1a8815-9171-4a74-b7a7-0127e4ae4d94",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f776f9f-7a34-4c9f-895f-52cc5bb8807d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a43a0ae-0006-4b98-b35c-32edc22d1ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c0bff4-a6c7-40c4-92eb-db96dc34bdc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1edda50-54b5-446a-85ea-e68de7743471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c76d74-99da-4e6e-b758-3e5f531a4fdf",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd181d4c-506c-4b65-9745-83a6bbdd6d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57b9624e-2771-4c59-af87-0753ee324b6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c87e88-5b5b-4fb0-b14f-6ee4cc8578f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "935c6f55-ef87-4122-b375-d8b768bd5fd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db993ba1-9a53-4a7b-9a7a-ef6132f20f7c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f268f47-56b9-4e53-88be-b8c204ec579d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3fa4e5b-cf2c-4e95-b11b-f96c797fa588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df2b2228-31e2-4793-b330-f327282888d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "01054b25-6ef3-4188-915e-f6b819165656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70479fde-856d-4455-865e-d3dc0ed6d725",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f69e65-7722-4fb2-bd75-55e887bca28e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "786c0958-5ac7-49c5-a436-64cd61e60c80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "284c4c97-f4bb-499f-bef5-4259508f0226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "09904267-460e-4d14-8b5d-2dd9bec9d820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06fae789-d904-4499-ad40-21cba96ce0ac",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db46f2a1-2d0c-49f9-b504-b2573a48cf9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1c5813b-516c-4463-a56a-409bde0bd49e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c75c53e8-4b8b-4c9b-95c8-c804b72fab97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "964319ef-e1df-442a-ba1f-5279a0821df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc90afa-37ba-4e3d-85a3-aa98d78b298a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa2ebf4-43e3-494a-a680-a1710a5192f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f1e9946-f963-4159-9db8-8860907fde56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f9f90a-72f6-4780-8d48-d96090ace456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a10e08c7-7806-4649-81b6-49bda14182b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bdb8f67-b002-4ed2-81b7-955afb4078c4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14581f28-ab84-49e3-bfd4-bdee8691ffd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12e40bf2-a332-4fff-a12b-222f9af031cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9acf6253-1ab4-4e58-9610-567b76ee7293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70a34bd8-4e1a-40bc-960e-952b885004b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83fe56f8-43ec-4b49-a4e5-1913fa5002c7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b23a359a-a8f2-463f-9a0e-b1c51c701f24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82936098-debb-4633-8547-15943643dd68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8504048-58ac-4318-9459-0d89d2090e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94835d16-1e2b-4146-b8e3-210a7045e9c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0fcf19-a943-42a4-b296-be90295c4942",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c7af5e1-2069-4cfb-bd17-5b23dfccb3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd23869-bcb8-41d8-af80-dd20fbcb7b2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac294480-0c62-40e4-92fa-0b9bb25c5d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4efdd39f-45f8-4528-9589-52c4f5b721dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0598de41-0188-401a-bb64-5c5e81b0f10a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d785baed-24df-4c98-97cd-e6b640fa93f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe15f665-5676-42aa-b8c4-279a8b72c31f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "992b8c6a-9d43-4159-9b24-a867fefdf479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9afa91f7-edb2-4a5d-b5ad-529a30292137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2deb7bf7-dbb6-4f08-a638-f9b57533478b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6a0f39-fc71-4337-b53d-f5c44a6894ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b56f8247-d4ec-4c5e-8a9b-cb6f8ab44866"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611222b4-ec2b-4938-a173-8f544ff42d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7bcf779-4a0a-4045-8ea5-58d6845a5678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6d9e6e-e273-4fe3-9c0b-6386d5a79135",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f8ac64-fb0c-41dc-8ee2-ece265d9ac90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9158622e-bb8d-4be8-9775-ade996e76328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b31ff150-e1a7-4ebe-92bd-b1294a3b95e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7e31f15-a564-4d45-ad02-afa722f75ba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba73592-51c9-41d4-90b3-9b72e499adf7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff47d8e-c8d9-47f2-94d3-8aece462e6a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff824aae-44c1-492c-ba0e-27807935a437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "200aae8d-f380-491d-9955-25c2af8efe18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5768397b-b8f7-4496-a7e7-8466df26f59b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd4eb5f3-6f6d-4fdd-8508-1cd2edaf9d47",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39979bf1-19cb-4952-a099-25ae92ca76c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04be5b4b-eec2-4545-8a66-095949883e66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f92a9a91-9ead-436c-b3ac-f491d7cf8924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90fc01ca-f9d6-47a1-9a10-a1efc0ce0cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5b918de-bb24-434a-bc3b-5719283c8dd2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df4f63f1-ba89-45a6-a4db-3d5afb4e4c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d77e583-ba56-4ce7-ae46-d5e553c63eba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ebc3c9-b432-4971-9d81-6f74ccba9d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdeae2a2-61fe-4deb-b619-6c9a71f2e278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12ea578-72e2-4c06-8d1a-4dca056265e5",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5bc1502-935e-4afc-ba75-3dd70792c03e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73f696da-9913-424a-a808-f33a57cc18f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920cd7b4-5843-42b7-a653-ac901a242901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14ad44c3-6d6a-4fd1-9457-67f103336dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d86b63-f6c6-4f8d-a88d-e54d6ba0656b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe35765-5ce7-4891-9480-e5792ef03bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b632279f-cf17-4fda-8814-1568a04d660b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab49a5d2-a2f3-40b2-b942-ab342d0cfdee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6997dfd7-393c-427e-b9e8-8ba549d67769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a519a4-fe7f-43ba-936a-6df4e569e894",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b54ba255-6a6b-407f-bd37-c2142d737018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31aff8bc-57b8-4355-8e7b-108a5fd2fdba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "269c575f-8b0b-48b2-8bcb-db1858588a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e5fcfdb-b02b-4e44-962d-3de772384294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebfcdabb-89f8-4b48-8c5f-21e786ebba36",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1417c42a-fa21-45ec-8ddb-ec561db008ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "832dbfce-879a-46b2-bb2c-63f6a388349f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1c94b4c-8e10-4fd9-8b1b-408dc13dc324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d113cee-a466-47be-9f7f-da48fabe100a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a09dc25a-e4d6-4cef-8eb4-b98d01022109",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ef1fac1b-6fda-4495-8fcc-5f2a96c7c5b8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6356f93-5c3b-4d4d-9aa6-00e2a0a40ec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04022982-82a7-4b1a-811c-2a1ff9b2869b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "310c8f6b-de22-4c83-ba12-e036dcc0eb53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f5ce3ce-3aa0-4225-9c12-c9ce8770846d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e20cca6-9395-4355-bab7-3bf462c68e3d",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d223d95-adfb-4795-9fb3-d55b22af2166",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "579be582-aa41-4f2f-9d36-1531b54b9287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e003cb-ea05-42f1-aa4e-cc516828c9eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1066cce5-242c-46bd-b7ff-8319f8df2d1a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e38df7e-f1d8-4228-b719-940d6d45a0db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5e482be-ef95-4b4c-98c9-cc04317dd106"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a33b3f0-d53a-4b33-be1f-5ff85a17c068",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6124e4a1-225c-46af-a5e3-4bdd00fb37c9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9fb43113-a77e-45f6-aba5-3197a57eb613",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7c714d22-9be0-4ecf-a9a5-d6303aab40a6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c993262e-f253-4a3b-b9a0-9cde4cd22d1f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "60e2b50d-2ec6-4fb3-83e1-0056f2caa831"
            }
          }
        ]
      },
      {
        "id": "348b7870-43a8-4f03-86f7-ecf5ecb5f739",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e7e04e88-d075-4ae9-bc38-709155dcfbb7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b556c7ad-0afe-476b-a272-4e767473a8f3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "caf9f835-d18c-4ca8-84ef-0c01424cf9ce",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "739c6b35-a0c6-4657-b37f-e5696dcbb1cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b45e3a18-4c82-449f-b49c-2cd8644b316b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc4bfcf-c811-4d37-a3ea-d88cee7d95f4",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd8de4b-74ad-4f09-a5d8-1ddf36b53e38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0e220a3-50dd-4248-ac0c-cb67187daa91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4470db9-66ee-4b08-8c21-89410d81c812",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4836718d-76dc-416e-956d-62d9a4ba4387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8081041-0dae-43f3-aadf-462110008216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "176e3edb-8181-4462-88eb-a5998446132b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9298a4-5def-4f0d-adde-f4d3d3414d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e25249ad-180f-44bc-b127-6fa612455cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5cb9f54-4c8a-4e65-b276-f1e52cd17200",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93087fb4-02e2-433b-9f25-489ae1cc7450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1672efeb-b5f8-40f8-9d06-f70a391cdb2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d15c9b-c235-4800-9569-d78c5dcd57d8",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f602682-4251-4350-a4d5-eee5aaec1883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd1f24a-88be-4c76-9c9b-4c05f2b4cd1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27119303-6076-4156-a676-d3681283e895",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11be5d56-aeaa-4b5d-837d-c4b687c2fb12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb9dbfdd-8533-4a1e-a80c-086e87d18959"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "407747b3-554e-4c90-aa3b-8e8036eb97e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08308448-5c3e-4d0d-909b-c79f66310c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab11956-8abf-4966-8be5-3853ecfdf805",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2366fe4a-0b9a-401e-b29b-25e0ed4a26be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "904f39e7-025c-435a-abcf-61c909d99c33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a3e65ed-b518-4b32-a4ba-be65c25a7cdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1a39595-4d1f-49cf-8a73-3a414e700997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c26b8e-c1fe-4cf9-bd0a-e5c0492122dd",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad9c1a7f-3618-4b62-b8dd-70ff5a89c517",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55b84f20-763d-4b35-9eb3-1526423e65d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a6bed0-82eb-457f-b398-fa70ce6469bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62fd93d0-e460-40c8-b80e-6d1b6fb8ffe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d969fb56-1ecd-4361-b755-aa4bad10b9a8",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9175b5b-ba64-400d-b5a4-9411788b4129",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e1fa671-3d44-42d0-ba9f-1df5e11e1af8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79522290-3ebb-4f18-bbb6-66dbd4a248d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd3e879e-6036-431f-afec-ff024a6bc53f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90bb8964-18be-4b35-aec8-f0cac5748518",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be83911-ea83-47bb-8827-397b42a5c1f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fb26812-1292-417f-ab75-2ad45e7a44f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb8b37b-e5e0-4e63-ba6a-ad24413ba9c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65382b28-c433-41b6-a422-697eb47b5f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8015867-d9cd-4ef5-933c-db9345798615",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be8f904-1b1b-4b7c-983f-ac947a0343b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f75378f0-cebc-424c-844b-498340dd1a04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e18021c4-3d66-491c-b555-6f52d2b65318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "480e5975-74fc-4e7d-9ec8-1c0764747ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6a5188-3f91-41da-b7f7-293ab9103528",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b25bb26-b0e1-41cc-aa5b-e1e070b74456",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f4324af-850a-4cd4-ab72-eccd9fe95d83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5bdbc68-dca8-4293-ad38-7049597ef525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "680bf061-c98d-4637-b943-9bb1e8d38f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae3a177b-b700-4f8a-8213-840a2d423e72",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1dccab3-b584-44b9-9b5f-53dbb00be05d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bfa5428-a9d5-4af1-ba5f-895e2936b440"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde12bfe-ad8d-4dcf-a4ca-18c2613304af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a18694-9c23-452d-b815-e22ebe1df6f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80544616-39db-494a-a479-7b3ed4e6eaac",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0efc8c5-aada-4315-944f-9d80e4535726",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b3cf281-e5ae-43e3-8547-1576d448e031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f5607a-0b47-4dc3-948c-2a3043a1354e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0ce222b-892c-4822-89d3-0d28b4a40d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a2ab1a9-eb4c-44ff-b48f-d8249595ac97",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3897140d-4c5d-4ca6-814d-c207bc7f751c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7201342f-e7cd-40f7-bb9b-41a289576095"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a5d5f7-5405-4b39-9666-6db39c68bc2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77b64772-f7fe-4c14-a976-3a56255227f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b796ca8-dad0-400d-8f40-7fbc807fa194",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db2cc62a-c3ec-4310-9bc3-f04c8b45e22e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1caf57fc-c0ab-40ac-a5be-264cee23a17c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb121439-fd2d-4cd3-bc04-078d8962b129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bc030e4-a0b7-4c95-a22c-209ad76da50a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a310a4-b9a8-4037-acff-e393f10c0138",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb15557-50ce-4ef8-8900-d63ddaa5a1e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba7bd49c-39c3-4c26-b6e8-b681677f37f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5576b478-1ff4-4ab8-9d17-466f694d86d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "531587bf-7f01-4b9b-bd5d-01bc457b17aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99640a8c-c7b6-4c4d-937f-a0aeec3d8fc9",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83868990-c565-43cd-8cd1-1b6549674137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25af9baf-123c-44b0-a93e-1dabde5ae735"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deab0df9-77e3-4259-88a1-a30491b97254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8701bf87-90de-40bb-bd09-944e0fc7ac9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a78ed55-d292-4d65-a3b9-86fddfaac578",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bafd9616-7398-4470-8973-62aada58bc31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11e8cbdd-7d29-4458-a04e-f1bb31a6aab9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a85343-e6ca-4750-8a3e-3cd307c51e11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f9dc28b-2f62-4725-9562-a8e27d1006f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef1cc9d6-9937-421c-a5cc-e994d3c579da",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e3513b-511b-454d-96ba-9703862bee32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff4e42ad-6cf6-4218-ba10-b5ffe4b0428f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a466336c-fb6a-4808-bafd-d85dcb22f885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bfaa0c1-3fd6-4ed7-98cf-b3e4d6548054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1ed402-27ca-4d95-9a43-9b81a9fad3b3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d87634-51de-4f00-9716-ca4a829a198e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98f5e541-30b3-4780-a051-ee35db622bc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edcea322-9bae-436d-ae9a-60b479ab7650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "511a62e7-2644-41bc-b915-dddda949855d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e317c5ca-ed1a-4d84-b7b2-fdd9770857a6",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a14e1194-b2da-4b26-af0f-e19aadc92cf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f93cc7cc-db0d-4ee8-a552-38b1ff490e1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "849f7ab2-ae7b-466f-ae71-2a6ce9525995",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08ebb190-f667-4018-98ad-d7f85e347e4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d85d60-a71f-4db5-bd49-85951f54414c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f373ea1-8393-4919-b5a2-0ba383268de5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "352e648a-4f0a-4ee3-866c-cd2dd34b8016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1c80d2-f020-4584-8bb8-756341d30ac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48480285-5baf-4a40-958a-00ab2f0b839e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0f5dc9-b858-4903-ad81-68d77fac236d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "102576f6-8c5d-417a-8b88-bb69e12bc9fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f1f4455-0904-4a03-b0cf-71d2d93b3fef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2f2db3-8d0b-4fa1-8eee-a02aa7b5557b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18872482-aec0-47ea-b526-c92860225f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ea379f-26c3-4f2a-8aba-c6227a356dbd",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2c55c1b-d188-41d4-a12c-f1a27914d983",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0deb9ba7-60bc-4a05-9903-857f16ffd9c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02731d9-532d-4407-ac1f-525efa053865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cdeac84-aa64-4831-af41-63884a6e707c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc7be726-46ed-48d5-89b5-208e02e429e5",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "494f4f76-f0e8-4944-9ba5-cecaeeeb42d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09a1c079-db1a-4476-8252-45878efb6690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4529d960-14e1-4d25-a1e6-718846c7a391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d629f5ce-9fb1-4858-b6f5-a7d314e54e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b70afa4-7518-44d5-b63c-5a7c0d44bf4f",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0caea5ee-9807-41f4-8aa8-3d69071ea22f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48138a38-9726-4862-8b10-cf0bd927b1db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af2fc15-e165-4421-9696-8816d2eb4fd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc471a6e-e96c-4c1f-833c-3465d717b188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f834b8de-e978-4da1-9f98-69141547a5c9",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "823702e1-127a-4ed8-9af7-1ca162d7bcb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afe24c99-5907-4be6-95e6-229098096f1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40621433-a8fa-48c0-9385-a4ea0c7c0bfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a1a9b73-236f-4f6b-868a-bd71034701ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25997be2-a014-4649-93a4-aff9ca5d9328",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d6f989f-7079-4bb5-9202-41357ad1ea17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff2e74d3-2fde-41a4-86ad-9c215600e86b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f23d1688-e83f-4a9a-bf23-bd5dd0fb013a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c61a266c-a81f-4dbe-b10f-6dbbdd54902b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3293453-f300-4bf3-937e-f1d7ef005b5b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e8d0ffe-3f97-4469-8fbd-537a46fc6c4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f59e9ef-e301-4494-8d2e-69a018b15c75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ccce19-2c12-46d6-bc18-06c57b0f6ea5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13ba0be3-b226-4dbe-9451-07eae52f50ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6019230-ffae-47c6-acf1-c8b1636908fc",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188fe55a-fc30-4e2a-a73a-af318bb05485",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b718e30a-7862-41a4-b500-06a57b185b3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff083f6-d7cd-4058-be03-2685aa0c7113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "647b19b9-c806-42fc-8310-04aa8ba063b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3171642f-aa75-45cc-a91b-b6249fedc58e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e581bba8-04b4-4e26-b54e-3a921e29b8d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "541f200d-fd21-4502-8d28-ab1172c9e30c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ccc3621-be20-464f-8b24-8580046ca263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea8bdc56-98c9-47ee-b7d2-ab3c0d35f0a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f925c66c-aaae-4867-8f2e-e1ce8a189979",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "926a917c-1d37-44ea-9577-eabae589f13d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48f869f6-3885-4d50-bed7-593286e5f91b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "549e1127-7dcd-4475-8eed-32d471c696c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "febf6783-e04c-4d02-ad04-931960718e12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3388a8a8-5d34-4243-a645-99f2a392f321",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f32a74-238b-4491-a763-6ef7a68e0e4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f3a2e56-21c0-479f-95f9-a036ab1b88a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb6df6ed-48a2-45e1-a414-6a29aa3ff41f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9964be8-8344-43b7-808e-49d7f9d9abea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7de3ccd-49d4-4b15-87bf-f0c62f3af7ab",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f0dcc0-1c75-44ca-bde5-2c02d3f6b8b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ed6f4f5-44be-4c0e-a643-6b4e2f9af1e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba92cc8-057c-4bdd-89c1-e94d09e2a965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02c3e4fa-8c0b-422b-aeba-26a0d5bdc573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b6de36-1ab5-48fb-a7e7-3953897ade7a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08ff368-1863-45c6-85dc-1e751bce19ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce63c834-fe66-4de4-805d-8b16b0777362"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e5a837-8ef9-419e-a601-ff96b1ee1ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f29518e-e644-49d7-ae37-8a87a2bb9bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "177093ba-774f-45d0-842f-50bdce3e3dc3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef16a87-4ddf-497b-890a-369b4b476c8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f15eaf35-58b0-4ea2-ac01-df16754f78bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29427436-3f11-4a64-9581-e6420a8762f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3eda8d4-be16-4da4-96a7-fa34b579c7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d53af77-7e6d-479c-97d5-90241e0a8efe",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a00c8a-86fd-4ed5-b541-e8e50c128d85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbf45b1a-8efe-4b17-992c-8e20b94413f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b79b85-fa15-4c7b-93fe-5b37f289d00c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28a3da45-1c38-403f-a126-2edc50596752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93fd7e47-f0da-4414-af14-7dbf1e0556f1",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e17a4de1-11c2-45ce-a693-a91e19ef9872",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc6087da-8ec1-4c0d-a8d2-a23d82492165"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe3a08a-09f7-4171-b55d-453448aefc62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8649db2b-4f14-4a27-8d3c-94a81f87fdde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbdce95f-030c-443d-930c-cfc8ba600e50",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773e3de3-5909-4377-80e8-f175db14396f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3138f2f5-97da-4bd8-a476-c6ae7144d91d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdbe303b-9287-4fe5-98ce-0d9f55f0ac1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20179e82-2563-49c6-af4b-31ef08d61724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc9199c-6fef-4736-bf7d-8fd06a644623",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8322eaf6-cf1b-4902-8a01-e321d099f978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c85b84-d42b-4808-a7eb-3a81e51974b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d60ebe7-03e9-403d-913f-ed370779620d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e054d5e-42bb-4d0d-b3f0-09b78aefac66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db083c7-37aa-468f-bcf7-8e35bae074ca",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb916d7e-2e65-4cae-9ea0-bf80a4bdadb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa5bc693-b014-4b11-985d-46d1982a092d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9efeb139-6738-4894-9e3b-a0802a7f3bad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02df8823-690e-4d99-af42-9be0f203e881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09b441c-dd81-4814-ae9c-94729c8172ab",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "817bf9be-48c9-4d70-bbca-cfb1d26aec27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd752caf-d90b-4ef8-8e33-589b3c114e88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1461bb02-7c55-48d7-9149-1d71ea669825",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9af80db5-7b06-4a3c-aa7b-af9ca6c51955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e76bf1e-f1c9-43d5-8d22-b646a13e8801",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "048b5a41-1d6f-42a6-95ea-c8f31afe8483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "979087b5-fa67-4105-84bd-b8af74d46a23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b545b269-389a-4358-bfdb-46bcb4afbac4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "596daa82-5ef3-47a2-b1f1-3c77177db246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acbc6e59-5478-4d92-9b2f-cbde150e9317",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd1c34d5-7c1d-492a-8121-60cb6b0ec0bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b23378e-3598-45ff-9137-28afd9df8d1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7909ea35-1a1c-434c-bd5b-463932e65952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d3aa5e1-e48c-4433-9398-3a915ebd4b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ced0e74-ab09-489b-beb7-de5ee1c485d6",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce5cb5aa-a961-4e16-8fba-7834057e18ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a29645d0-60d1-4996-9b5d-dc9c92f12043"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "544f9a1c-b7dd-4d54-a899-32059b619d33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cc64b15-9d5f-4cf8-8cd8-cd6f4bcd3732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc4e255-b386-4d8c-bb94-c4d10b43be19",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "420a0285-3af5-4da4-8d0c-398fa0be837d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2231ca1a-238f-4a61-b7e1-0fbf39bccab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52e6736-e907-42ad-81e9-d4d34eb597a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ef4588f-f5a7-4a32-8be8-cdbafb6660ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1781aa1c-ec7a-46a6-99db-1bf9c519f13b",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f93249-fcb7-46bf-944a-38641e4ce84c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1536a510-449d-4bcd-b33d-92b7a8159cb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c54164-c3cd-4f8a-9fb1-8668fbcdb54a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41f13948-192b-48c6-9728-9adb68ba0b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367524dc-e036-4a62-af85-edcb33905d3e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc019ca5-5e11-4a21-927a-3e7605246e01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fd72896-9747-478f-a7bf-8a0afebd3292"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "914c13c3-300e-4317-a65f-0a2a56ebc655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eda83d32-bcfc-42f9-ba6a-7706a1828dd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af216a5-8c82-483a-b5d2-b7792d811328",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef4ac6d1-6be2-437d-8c0a-bbcccf04f494",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a39818dc-a5b5-410b-b79d-3861e57da7ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d282471a-d31c-4124-b781-6cd4c36dc539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c91c2a30-d2bd-44a9-87fa-14899d8ef516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17ff9634-18bf-4f3e-89a1-f1a87f1d5548",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91c3a2e-f485-42bc-92f4-05b45eb5628c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "922914a1-1913-4dd4-a33d-a5f6689d8b5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac8e74fc-0365-4197-8f4a-ac83f1f834d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0558a9c-7a17-4cb9-8c14-b3e869b9e2fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b372e3a8-0650-40ec-a401-03c5968e01e6",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56b9f442-4705-45d1-b58e-661bd05ea0a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfc7fa33-e907-4572-9f32-7fc8724fa262"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef904026-8534-4af5-a16b-7be1df48c06c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12be0f78-bf6b-4022-b129-25a520a8007c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a524836-73c9-480c-a005-d1d412e0f90f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a06adaa6-45d8-40fc-8852-9c3b881c93c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ac0d687-8bc1-4c8f-900e-ce200749128d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69bdacb-5a4c-46a9-a31b-98d449559e2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2834f803-aae7-4881-9888-5f4f77dd1734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf694bc6-7b0a-46ed-ab47-f9d4ce80fcb2",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "837b3146-c8ad-42ca-81d4-cca9ed0efdd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e24bca-9568-4675-8c2e-75da15b31b63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae21d59b-b5ea-4739-8999-2fb54f4de65a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7604db7d-f0fc-45d2-a2db-0dc4262a656a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2b4574-45ea-4a76-a5d5-601d34f90d5d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531dce86-3025-4639-b6af-c386f7a2badd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc7d8d5b-a4db-478d-84e2-b8f64a700528"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c5ea654-f5df-4e45-84a1-a38242e60026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c91aef9-7fbc-437d-81c8-007c12cb4669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec2850c-1bef-431e-93ba-f70ec3a95740",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a903f5b2-3ee9-402a-aa5c-87d8137c014e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f713fe00-429a-4642-8463-d174a2556583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "511b3bc0-c1b3-4cc6-9108-1da6856b803d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "878baf36-ed5e-4cdf-a707-a29a1f1e7468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9695ee46-c66c-49a8-b0db-85a2970bae7f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5169bae-94a1-411c-aa39-ad717c3a89a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c1d59af-c5b5-4ca7-b37e-ec8639f15b64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b1aab3-91ad-4356-aa43-77d4db67b9cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2514a7b9-8d0c-4374-a605-3f2fd11aedd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79aa4fe1-bb05-4f79-95e6-d2bc7695519e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9a6593e-a392-4013-87a3-28b1852ffa5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cbdd498-2908-4f35-8907-57b43c1ac009"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dc16afe-4161-45e4-8bf5-3eefd7cc57d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4d1935a-3d10-44c4-907d-1b2999ab5779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "332d156f-1e6a-46c4-b0ae-93957522235a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "874d7d6f-6d9f-4255-8ebb-4a6b32150c35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b7c0608-0888-46f0-b80a-ca7ffc8508fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb9c7a7-c330-4c5b-981e-579aefae1c70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0e4bbc2-48e3-4f62-9da2-fa7cd4b47e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd85a94-320b-4dc5-89b9-3eea389c89f9",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90eecf9-28ff-4657-b214-5822d616f92b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c931b2a-a305-4665-bfd5-75fae767eeb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c70c6dea-45d9-4853-b480-2d315b3fe442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d758594-39a4-44b0-a8ef-c80dbf7fe5b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab89eae9-1c01-43ed-857f-426d8e4fe931",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fada68c-7592-40f7-a393-562f801e21c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd0b7ea0-1f83-4fca-aaff-de57f26f027c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4665ffa-1300-4c44-a62f-ef565bc3ff5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce20dd6d-c9df-4703-b7a7-4e9f8a9d5f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38c46f1-c91d-4994-bb85-0548a18e798e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "034504f9-6b7e-4c42-8c3a-f3fa16825e3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8f1bbd1-c46c-45ab-b03b-e01fdb1ed5bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee1a8c3-9c20-4f4d-8ecb-49c61ebcfa72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67cad62c-060a-4e87-85e5-52289a322186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f9b3601-0895-48bc-87cc-44aa8cc99118",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d59c998c-fd20-4bfd-bcf2-4e9f1968a64b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "799b66ca-f352-41b7-9d7c-b7360932b42e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e48ddb1c-deea-405c-ba9c-b1aef3c228e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcd143f0-0003-4998-a17f-1f6bcea50b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b41a1ba-dd8e-4034-a4cc-7204db648450",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ba3fe0-3d30-4fca-8535-7365cc017d22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a18cf36-c331-403a-afd1-dbc0dcbecb99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6073616-ff36-47b5-a4b5-d5c7bd8ee91e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8dcf7b0-2bca-4664-8dea-6837a73f9bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8378597-11d5-4669-8872-56e60bfe1213",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a40b7ac-2e76-472c-b694-ed590619f207",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "136c26ae-50c7-4195-8524-2c688abf69f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe984be-ec65-40be-a40e-3f16683ead4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "633d5910-c322-40be-8f34-15fa15bdec1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70663e7c-65fa-440d-978b-1f82560ee48e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2bcceb3-dd4d-406c-b891-abd5f85fdd27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2e96ff4-076b-4430-a8e4-f531364fed26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f7af44-4629-42f2-986e-e006f4ad5271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcd88ee1-03f0-4904-bcd5-a3547849d040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd12b893-4a55-4829-b393-da6412a53a27",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c426f89-5a88-472a-93de-0d0e6d8d95a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b9f8f5b-b5b3-41cf-9766-5f4f3f62ed3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6fdcf21-42f2-4512-ac59-f62131630bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aae7aee1-0fb8-4db9-8596-9e42c8b8767b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb3b0c34-6038-400e-b9cc-a9c484a9e6fc",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39572c67-cfe7-4594-b86b-57475c851f10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa05be78-a5c8-4e02-925c-d544ea77b12a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19060d36-c7fe-4ac2-8ba6-acd8a831e5ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddbbcda4-53a1-4869-9e38-c114ed11c970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d8bdda-330f-4fd3-aa4d-fc768029c3f1",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "988d2001-ecb8-471a-aa8b-85c0442fd6ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26a3d342-a088-4883-bffc-9b4c7e9a74be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa57913-b03f-4c40-aa9e-7c045ecbf903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "515db96a-64d5-4dce-8cdf-3310e20df67b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a15923-b459-4852-813c-7389283a79c6",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae6f6a0-c8e8-4bcb-a7a4-50f3a2d49d30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "342c9e04-10d0-4b4c-b5d1-cfaeddcd81c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c659af5-c668-4e75-b3e0-c8994ce6a7ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06c1dab2-49cd-42dd-b1ae-fc6208f6738c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bfca452-c2e0-47cc-bb1e-ecdbdede2ad2",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b88b1a10-14ce-4501-9680-7b238ada8002",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87e301fb-95c7-4fc9-a01b-e24f7ae7ae9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d479190-8ff0-4272-b846-3f9e1a83c49c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c10b0a4-980d-4300-af20-26a3d79a1f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbad2b7a-0963-4571-a5fe-a3c0efc3a3b4",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e7af40-eea2-4393-b4db-a6e4e4146f46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "137ca2c3-5189-45db-a549-6992b011feee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73da05a-e174-4d42-a4c5-da0c3d06140c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbd80d58-2013-4412-b295-cc232c4cec12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b66f1f-374a-4592-aa65-7ec315f66243",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06070c6b-e2cf-42f5-b460-cd5eb8ebd0ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0faeb283-161f-41f8-96ad-afaa538b2953"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1102f6-da87-4c29-ac9d-72f2b121b22b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee348014-ac43-4a5c-b8f7-422c8c9e5c51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661c7bc1-0d5d-41b1-a010-106aa252185d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e6819c-4739-4c21-bbd3-198d4115f957",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60a0b544-8ef0-4619-80a7-4f733c847b44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2735a3fb-2d17-41ca-b3b5-6bc5ed7bc1a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19ea89ef-4ef5-43dc-8345-39a453e8b400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06e70bc-b5eb-4353-92d7-15105329a35e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61fe208b-89ec-41f3-a3bb-ebca5c86f4c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d0db37d-6e66-415d-9ecd-eadc1156e6ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4465e623-c41d-482b-808c-e023ba0d4beb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecf44c3d-fc43-4edb-962c-07dd80a236d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb1db52-33c4-4510-9462-e3479b1b76ea",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd516c4-8791-4ea3-85e4-8ad5fce42c42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "feb0b36f-fa7e-45bf-a3a4-2f4d013af43a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d0fd35-ba69-4694-8d9d-a14b6ae2bda5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e130de3f-bd19-47c6-a3a7-072a0f4622ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c1ff7cd-465f-4c3e-9775-27f1ab2afd4f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaca1f39-b979-457a-88eb-cd64920b6136",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6435c5db-05d0-42ba-a2bf-36f8821106d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d380cd2-8999-4313-ab2e-16bc7fe0103d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c7cf30b-63ab-4f42-a97c-f79a22ab960e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "375ce1cb-fa60-45c7-9b69-567c79af0c54",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c539c3-5348-4277-b8dc-95f3ab12532d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aec18375-830f-4c0a-92a5-d8b11eab2dba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22b2fa56-6e69-4f72-9c4a-281c0fba6de1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79157da0-750c-407e-ae2a-2b59281e7db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a39ce79-fb95-4850-aaa7-7a53e676b564",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95ae723a-429a-43d1-917e-b9868ba6f318",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e924fbf-1546-4b19-9714-7dcce3f1b5ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13074741-f1ae-41b7-9961-8492e3baec5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07111397-6941-4487-af17-83d88f186008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcffd2c9-a628-402f-90c1-71f303244b78",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e36517f-f8bb-4202-8027-e111eddc31d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e204140-d3bb-402d-820f-94c49242c096"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa83fdc-d073-4c76-ac28-0602c37c52ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94b44af4-6b6a-48f6-ad71-4bbfdb5bd1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00af72b7-1cb7-4a59-aab8-a3a0ef84dba4",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56ce5b9-0ee4-4a4b-9f2b-7c44ee3f352e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a8e142c-50b4-4cd1-a777-ac9edb753543"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d66e5750-5c1b-44aa-a1f9-99f210239132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31b68ca0-9d59-49fc-b880-3d539a608857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b9807db-1593-4891-8363-63d72d47378f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71372afd-a059-4253-850a-8ac500f1704f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0640d046-b54c-4822-bc46-c46acd693b86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2106317-605d-415e-af16-22dce5d13227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae1944f3-ebf2-40d4-bce4-a2c91548452c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b159a8-fb4d-478d-828e-2ed903905017",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01428048-99fd-485e-aa1a-6d5a0e2f70c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20039838-513d-458f-8511-09f6c7a3935e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c74af382-48b2-4909-93e9-4b20ba6d0114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65dcd45f-5e49-480a-b176-34117f1d95ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9e5ddb-c810-48fd-9e8c-67968c66a334",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7875f06-8830-4289-bf26-2fb7dfa74bae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acce7699-dfaa-4626-bc85-30ca2c24cc90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e5fa3c-0cf7-4a9b-b86c-ddb2e15530f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78e88ee3-abc2-4d4e-8fc3-7a7710ad001d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88661b56-7827-48f0-b784-dd1b90c016fa",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3112f0a2-62e8-4d4d-9b27-a5963707b832",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "172ecd4d-d968-4beb-9c23-bc0c492f387f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7046453b-2c49-4eea-94f5-4ecef95d56df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86c454f8-3d30-4e9c-b186-b8dd27b774e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb5e45bf-3854-4ba5-8db9-d3680b5a0b81",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e301fb1-8bb1-4b3e-b0b4-3f9de091368d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ae7b097-d1a6-40ce-9098-1f67bac22795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df53c7e-2373-4c6c-bb44-22ef624a707a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59249bc5-d48d-44c9-b013-00c0a60e4200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee571ede-22f0-40d1-ba2a-c29ee38da2ef",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aea122a-42d8-4293-9ef0-f7b8b5936cc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e00f6d0d-4385-45d0-ab10-503814e2bab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c7365d-a8b3-48ad-a2ae-e7bbef08e8ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c91d976e-55b6-4b71-9add-6fbd81901c46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f3b35ee-c987-46a1-862e-3c65ec34f12b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef4471c-9040-4473-b730-8455f8d15ca1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "362744ef-06cb-407e-ab1d-b5c259154b72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ae4f5f-4281-4003-ba46-470a65d85b51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8979ea0-a56d-4f79-940e-95e40b6a0e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e323bab1-a214-4f83-9ac4-69365797d5d2",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b35ee055-6e3f-459b-b4f8-ace773a7a178",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7a81501-3087-4b65-8caa-d6fb7c99e835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b4eef8-bb03-42e5-b2af-eb25799fbd30",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e358c038-4d4e-41b1-9bb4-3d1c05add340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "060043f1-2513-4e04-bb8d-f4694936730c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a9abec-8ef0-4c56-8b0d-69b9c52162a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ba5cb96-4df8-4e48-8b3f-648b55994e10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9732ae4-b281-45c0-8397-5cb67204e1b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4d6603e-e4fd-49be-84a1-8d7eb972b626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2aaaf6a-a99a-4c3c-b485-9a9ff656c8f5",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15c7d94d-dde8-4986-ada3-71b4fb796bdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f1c0d8e-1502-4404-b875-bcde20eb18d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09483907-5d8c-4017-8bf9-509f4870a60a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5db2acfa-a19d-4a57-bf6c-359ee7422a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda55be5-cc77-4ad4-b67d-56d6994d84cc",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a92ed73f-0815-4405-94e8-266e2e7cf504",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e215f98-a59b-4eab-9074-7059f3703705"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "666b8358-406b-442d-8843-8b23abbc8f3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d1acc83-b678-4a3b-852f-16d155dc1547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cacd236e-1d62-4dfd-ae1e-b5a579f76fe3",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf65d0d2-0cfc-4ffe-8c94-f9ca24c8a48c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd4343b7-0498-477e-9471-8b8c29586bee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2babe418-7cb5-457d-bdf4-034841b734fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d42d949a-7b94-4cb4-b8db-df2c6bc1b09f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c081e2fb-6702-4ad1-b147-d3f2c7070643",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5375fbe-2fb3-44e4-be57-cb85046302c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c60385af-0d5f-44ce-8c8e-c9bb6f539ced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d903ba-ceda-4316-a02f-76b0624f728c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c69a058-e17d-4793-a68a-646052bfd6ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f253fb94-1647-447a-9094-c31b9c7da80b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e642be-9ed7-4da6-a39f-e80094714a52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26bfca01-2c98-4a6c-91bb-21aaed52c48b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98743bb8-8a38-4ea4-9723-38b011e57a4c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12c7aadc-7fb8-4a72-beff-65b9d4deac88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6616ef1-676f-437b-8eaf-d177613df126",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f912fd61-081a-43b9-8246-5973451c7dc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36e4c2de-f2bb-4ef6-82c9-1193d6c736f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef94f05-7709-4850-8be4-ec55d1e0faa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "116ea911-8a2b-47fa-8812-43f0a923aa56"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8fec385-80f4-42af-8f6f-4297c6ccc5fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87f701e7-a91f-44b0-b2bf-c727997ddcde"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "98595829-dd21-41ee-bbb4-95a0c4ecedce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "871468ec-eec8-4dcf-9631-23fba5567471"
                    }
                  }
                ]
              },
              {
                "id": "a9799141-f8c1-4ea4-b3be-40949ee07b56",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "706783cf-2875-463a-b3a1-5348b43c1ac3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f403e252-00ff-4c31-a4f4-13fdc6db31ac",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "fd00a63d-846d-46d5-9b8d-83138735abeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61aca490-4452-458b-8d9c-70fcc9b3041c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8695614-0fef-4fd5-9661-c31e2691ae11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301dc51a-d11f-4ce3-adf4-d490d532a964",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb3d5a3-e6ec-481b-8834-5774de28ce6a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d5bec4c0-70a1-46dd-bc90-d384a7e254f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c236a58-7552-4093-bf5a-786333f10209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ad5e1b4-24c8-4197-980f-a61faf95c2f4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1221c8e-a971-4518-ad0b-e0703e0d1c00",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ab519ea-88a1-4fb1-94cf-d00a75455301"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "34fe77df-7d42-4d27-b0fe-f2718e5a7176",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68cc39bb-6232-4652-b17b-6790521f49a2"
                    }
                  }
                ]
              },
              {
                "id": "19fdf6ec-1b70-43c8-a155-2404a8dabb45",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "8fceb0be-1492-4c63-aa58-44cfa276ac60",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c91a4a8-5a78-4419-80e3-2b0019dbef64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "5a757115-051e-43b9-9f43-780c2cf37a51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deabe500-3ac6-444c-95d0-4c24a6a48ae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ea2238e-f64d-4831-a839-a66f7f2ecef5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "72e4f41c-7099-42cc-8d08-0dc240ae7d55",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9c5f8337-5889-4160-80c1-093667a330f0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "de0c65a5-f9f3-47a0-9ffc-04c75b35374e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "00f8dc9e-6266-4112-a51e-dbb05ab19d56"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a16192fa-358e-4644-a120-664203634343",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2cc5b777-b7c1-4024-8648-b3421f4a2f06"
                    }
                  }
                ]
              },
              {
                "id": "4a2248af-2423-4bdb-977e-9fb474570357",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d01fd3e8-be15-49f0-9979-30a128af9741",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d08a2d09-c199-455d-81d3-e7dc266970a1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b31adcad-b870-44ea-9c54-9421286424f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37d1aa7c-652a-424b-b00f-a4b7944438e2"
                    }
                  }
                ]
              },
              {
                "id": "42ee607f-dcba-45e8-9f58-48183c76366e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f7ab88c-b95c-4c4a-b107-5a856fd105c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b145f432-53bb-4f86-8e74-6a4d640403ed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ecafde37-43f1-4fcb-9e1a-e4d0f9edfeb4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "324c4a67-9980-4ace-bdaa-26131d375c6c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c4a252ed-29ea-449c-8982-2b3230664ed3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "81983bdf-8d90-4e21-8435-7a294bd6c8ba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "703341c6-5d53-4722-b0d5-31c46ab88b5a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fdba4d02-c181-4794-90ba-a642eb1cfc36"
            }
          }
        ]
      },
      {
        "id": "8ec471ec-aff9-4602-9d09-4eb7bd9eea04",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "62b0f305-7314-4f06-aa58-754bedc95eb9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0a9cde53-9c40-4d2a-945e-f7d1a8be913a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6c390487-533a-42ee-9deb-ddc34d57889e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "701264a2-3356-4c3c-b48e-aeebd0d9923e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1da70718-6850-4565-82f5-24340bf3fb40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc32319-f4d2-4ef0-b692-99cecbe6d9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4838ee5b-7ceb-415a-b120-ec2aa6a30d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "243c6a98-925c-4b20-8126-c4c4891f395f",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf94eca6-ac79-4cd5-8afe-ed43e5a3d471",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0dbb82fa-0e91-4970-9f3b-11be76e0f9c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34d4533-d1be-4855-b4aa-82a4e31d3221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02d0d889-8e66-42bd-9a39-dddc293b9c1b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0dd9f0e8-2d3e-4adf-9a77-ba2fe28bccf9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bba162be-3dd8-4938-a808-3340ce413267"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "98c21c34-8c2b-4312-9192-997695736c68",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "973c95b1-3903-4627-9c0b-d72316edc3f1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4ce4889-4638-484c-b56a-4a1fb9592e8d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fdf1b7c5-0d22-41b6-854b-c1aec80df04e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e6fd66e4-7672-40eb-a010-81378beeab54",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c5e68610-8260-46c0-b308-7b23abbcfe8c"
            }
          }
        ]
      },
      {
        "id": "334b89ba-ac23-49c1-84af-47b87e8d1096",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6d7f7b5a-5f91-4a8b-ba0e-cb05bcc6cd05",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fa14a912-e846-40e5-9bbc-e8a5f41a7c5b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e0eafefe-7523-41e0-a487-09e4ad019507",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b766f7-4665-4c11-9b53-08193de99453",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f6383c46-0c39-426c-888e-abc354480bfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec603e5f-0e05-451a-af99-e84b4934d444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d10c2ff-fb91-4408-98c7-55dfe0185d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6feeee2-028e-40b8-8078-ae088ebec25e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95168053-343c-45bd-898a-5f5edd4f1aa6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2a874c43-ab26-4bc8-8b35-43e92e78ab24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e98f7e12-e26e-4b48-ac0f-adaaff08ff23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "769eb40d-d036-4a28-9afe-3374ccb4b35d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dfe555cf-fde9-4cac-98a2-8d4cf49527a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d42937d4-88fb-461e-a508-6e118170fc93"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f038c64f-9697-4397-b07d-f37c73d3035d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8b47bb4-952f-4c57-9397-55b4b64f454e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e73466ca-7825-4562-859c-12122e06b705",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f5511970-7575-4eee-9001-53a93c2f1b52"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "74694de0-010e-4088-aa12-21a8fd179258",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f004c5ee-1e82-4f89-9968-075f9e30c5b3"
            }
          }
        ]
      },
      {
        "id": "51bc0597-d060-433d-ab5c-a9c8565e7109",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ef23bd3c-bf2d-4cab-ae19-5ad70a883a37",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4db23243-8919-4b57-9c55-6275b1bc9840",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "094f942b-a239-469f-b93d-686f4f03e046",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed14ee94-3e5a-4f72-a688-0efd03fe0cfe",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b7c00091-26c1-431d-aeb2-4512daf3efc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d49ca5-8325-4608-be12-89c2d2a3e7d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "021e8100-9e15-4d0d-a7c3-393b29572756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d499fa8-0310-4d5b-a155-f6f96a051422",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ccbbcb-1501-439f-9077-b825cfc8907e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9531d28f-39b3-4962-9a00-c64e69fdc377"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82cfcb1f-fd26-4fd5-89aa-baa075931d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee7c4cde-dfb4-468e-9aa0-9af9e9852958"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9dee471-dc3c-499c-9d03-9308c6464b0e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "46034e75-5370-4dc7-b1c0-4174f806eacb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "34b72f2d-9491-4cd7-bb27-2183a409a963",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bca7977d-8d91-4bd9-97ae-1b5f8757b4b8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f097c85-5068-46b5-b609-3c7e0d2db27d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ed7ee241-64b5-47e4-afb2-d144e178c3f4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e480308d-80ec-499b-8013-93f3ecdceac0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c43ed536-1e85-4c7e-accb-5f9f477f6bd1"
            }
          }
        ]
      },
      {
        "id": "1245e429-4d9e-4728-9077-2c9b7cc6aa4e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5e4c3b5a-ef9d-47f8-af5f-da90ddb84963",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "65cba5af-861f-4411-8579-7e77fa5842a4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ec0ed5f8-3609-4409-98cc-eac3d98f9c80",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d0244345-461c-4b4c-a30f-dd47e2415ff4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7385f310-d498-4ac8-b36a-000ea841fd07",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 267
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 47.754789272030656,
      "responseMin": 11,
      "responseMax": 558,
      "responseSd": 48.4540429461687,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1669595914344,
      "completed": 1669595937812
    },
    "executions": [
      {
        "id": "4ecd6ab5-a100-478c-9328-9d5aac385506",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a90dc42b-4882-49ef-a0d8-df887b2f3a11",
          "httpRequestId": "29138705-7a42-496b-a29c-9fe66d17acaa"
        },
        "item": {
          "id": "4ecd6ab5-a100-478c-9328-9d5aac385506",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ed3d138e-0c5d-48fd-a36d-7bec9f6746b4",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 0
        }
      },
      {
        "id": "e63bdb39-f9d2-4300-8650-b32c6948915f",
        "cursor": {
          "ref": "b77f8a6d-cb7c-4642-aa13-8973bb081a18",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7c07ebf4-18b5-40c3-8508-738883b7f6a2"
        },
        "item": {
          "id": "e63bdb39-f9d2-4300-8650-b32c6948915f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "11d2e25f-72f0-4bbe-8572-5344ad5c9386",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "cfa16231-68ec-44d9-9d3e-c412e007c7bc",
        "cursor": {
          "ref": "006e53d2-a73d-488c-bc98-8a9a4f6d3620",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3c2acf56-e546-40e3-b298-e7b13622af30"
        },
        "item": {
          "id": "cfa16231-68ec-44d9-9d3e-c412e007c7bc",
          "name": "did_json"
        },
        "response": {
          "id": "b1d0132a-8669-4b58-804c-9648a81ec044",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4389bbf5-814d-4c9a-aefc-dcea4373e8e5",
        "cursor": {
          "ref": "00098479-8ebb-4801-bf6d-37ee8822a837",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d5c56b6b-507e-4549-95ec-9eeb18bc5602"
        },
        "item": {
          "id": "4389bbf5-814d-4c9a-aefc-dcea4373e8e5",
          "name": "did:invalid"
        },
        "response": {
          "id": "928a784b-8212-4552-bfbd-0e4634c53038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4389bbf5-814d-4c9a-aefc-dcea4373e8e5",
        "cursor": {
          "ref": "00098479-8ebb-4801-bf6d-37ee8822a837",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d5c56b6b-507e-4549-95ec-9eeb18bc5602"
        },
        "item": {
          "id": "4389bbf5-814d-4c9a-aefc-dcea4373e8e5",
          "name": "did:invalid"
        },
        "response": {
          "id": "928a784b-8212-4552-bfbd-0e4634c53038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e530c1c4-4bdd-43e6-b805-33c1eba73b92",
        "cursor": {
          "ref": "c0a94393-98ae-4f13-a639-0f76eb9a10af",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6d5d2994-b7db-40ef-9489-df588e31fb7b"
        },
        "item": {
          "id": "e530c1c4-4bdd-43e6-b805-33c1eba73b92",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "724cb3d0-d062-48b5-9323-dc3e6bf4e4d6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 183,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a504fa6-c46d-47dc-8f5b-473fd8f29825",
        "cursor": {
          "ref": "fd46ca5c-38db-4b49-ad81-16593fd600be",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a418b883-4b55-4961-87dd-bceff26ee262"
        },
        "item": {
          "id": "8a504fa6-c46d-47dc-8f5b-473fd8f29825",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "84e99a84-1481-48c6-880d-f728877487cf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4d28a4-6fc2-461d-9792-d5a4829eaedd",
        "cursor": {
          "ref": "5e44d303-010e-4b81-b2d1-29109d95c840",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "634ba76a-95ad-4d00-8c93-4f15df957700"
        },
        "item": {
          "id": "ef4d28a4-6fc2-461d-9792-d5a4829eaedd",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "51870fa7-f4dc-4027-9944-541e03a93ebc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e319062-ab66-4aa4-a62d-38c44cecb6d9",
        "cursor": {
          "ref": "94712ba3-3c83-4bef-b91b-c1ccf4af7ba6",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c90e85f2-83dc-4121-b3e4-74fc6d80c867"
        },
        "item": {
          "id": "0e319062-ab66-4aa4-a62d-38c44cecb6d9",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6a270516-f7e4-4993-9a03-b4648e273630",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "0e319062-ab66-4aa4-a62d-38c44cecb6d9",
        "cursor": {
          "ref": "94712ba3-3c83-4bef-b91b-c1ccf4af7ba6",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c90e85f2-83dc-4121-b3e4-74fc6d80c867"
        },
        "item": {
          "id": "0e319062-ab66-4aa4-a62d-38c44cecb6d9",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6a270516-f7e4-4993-9a03-b4648e273630",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "dee2e39f-d717-482f-a71a-f2154cdbd4cc",
        "cursor": {
          "ref": "376e0c4a-ea4b-4d37-aca3-c532dbf07bb4",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f1cff887-56b0-4c90-8d0c-f289ebffa12f"
        },
        "item": {
          "id": "dee2e39f-d717-482f-a71a-f2154cdbd4cc",
          "name": "identifiers"
        },
        "response": {
          "id": "1f35d9c6-fc6f-4403-aa36-0fd87fa190f5",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7751a2-8bad-4688-85de-3f4770001c4a",
        "cursor": {
          "ref": "fa6dc3c3-3764-4ec8-b9ff-b11ce68854ae",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9b7ea0bc-d0d8-48f6-a77a-d8b824709156"
        },
        "item": {
          "id": "dd7751a2-8bad-4688-85de-3f4770001c4a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b239479b-609f-496d-b413-413cb63ee1af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "dd7751a2-8bad-4688-85de-3f4770001c4a",
        "cursor": {
          "ref": "fa6dc3c3-3764-4ec8-b9ff-b11ce68854ae",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9b7ea0bc-d0d8-48f6-a77a-d8b824709156"
        },
        "item": {
          "id": "dd7751a2-8bad-4688-85de-3f4770001c4a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b239479b-609f-496d-b413-413cb63ee1af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "617e4896-8507-4514-abbc-355768812030",
        "cursor": {
          "ref": "efa6fa06-13ae-447f-87fd-b40cc663ca73",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bebf34e0-36d1-4e06-a9bd-f0ebfda87966"
        },
        "item": {
          "id": "617e4896-8507-4514-abbc-355768812030",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "88291e6b-8a84-4e5e-9cdf-ea93917f6bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "594b406c-cf2a-4749-a143-08f73c855940",
        "cursor": {
          "ref": "db2d1f6c-856a-46d8-966f-bd1c5324b9cf",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "773f05b3-6154-4d05-b04b-d45827ce5d82"
        },
        "item": {
          "id": "594b406c-cf2a-4749-a143-08f73c855940",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "af928a6a-1554-4aba-952f-4ba6e86eb2a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "98e6fa88-3465-47e2-a7fb-197466933a2f",
        "cursor": {
          "ref": "68b7e3dc-12fd-4190-8dcd-7ffa6a1757fe",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "18073e0f-45ea-4869-b250-3459cd8384d9"
        },
        "item": {
          "id": "98e6fa88-3465-47e2-a7fb-197466933a2f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "82696ba8-8b63-4c85-865e-a213b8074ff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "6ea1eadd-9090-4a97-a9b8-0ef2d9a1e89c",
        "cursor": {
          "ref": "43af64b8-0383-479c-a27a-c92c32884cda",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "28eddd45-a648-47ac-acc9-f5d64fb1ce87"
        },
        "item": {
          "id": "6ea1eadd-9090-4a97-a9b8-0ef2d9a1e89c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "cf9a8eb6-fdf3-428b-99ab-f14f5a0c75da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "2b57cfe0-8e8f-49cf-bd12-a7677172c582",
        "cursor": {
          "ref": "589430d3-ef54-49ef-8b39-fc1c219a24a1",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "720fa085-4774-4d73-aa4a-553a0306d2ff"
        },
        "item": {
          "id": "2b57cfe0-8e8f-49cf-bd12-a7677172c582",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f2a7f7fe-7341-4d0c-866d-b613d410c95b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "9afd84a2-15a8-4c8b-8798-569a3bb60ef0",
        "cursor": {
          "ref": "9dcc6169-3f66-423c-af69-4b8965e17e61",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "acb918c7-0b48-41f3-a8ab-ebddfcb9dd15"
        },
        "item": {
          "id": "9afd84a2-15a8-4c8b-8798-569a3bb60ef0",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e6cafb23-2bc5-4125-b2d4-f6314468b7ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "b219cbee-2a76-4c24-8c22-2457f1a17e6b",
        "cursor": {
          "ref": "900879fd-acef-4a01-b047-544a1ebdbcbf",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "09d419ef-cad8-480b-969e-7b00cdb33abb"
        },
        "item": {
          "id": "b219cbee-2a76-4c24-8c22-2457f1a17e6b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "fa9888c3-0098-4f2c-a9c7-66bcc25f057c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "34a39859-2648-47aa-8464-20497a3406d4",
        "cursor": {
          "ref": "b6391513-ef70-49d2-b097-493a276a8969",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "32946650-0ab5-4f2c-ada7-0b169f0bb52c"
        },
        "item": {
          "id": "34a39859-2648-47aa-8464-20497a3406d4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d433dae5-6d66-4ac2-969f-0d4eaf2952d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "cbd162c5-954e-4047-b645-2434c110cec7",
        "cursor": {
          "ref": "55fd1f86-5507-4af8-b4d2-eef41293c9af",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "67c6288d-01b3-4fd6-8d34-6dbfa9ab65da"
        },
        "item": {
          "id": "cbd162c5-954e-4047-b645-2434c110cec7",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e49a84a2-0c3d-498e-8aec-4366ccdbd89d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "dae54fbf-15a6-4a3d-8652-c4fe47b7dc05",
        "cursor": {
          "ref": "0ba5f782-bd33-40d1-9528-b880ecd20f26",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "93dc606a-eb31-46db-a90b-b5ff1fa0d124"
        },
        "item": {
          "id": "dae54fbf-15a6-4a3d-8652-c4fe47b7dc05",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "40b13c87-5fc8-44fe-8c80-7826c0927e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "8583c7c7-50db-4c70-a104-914fc886bdba",
        "cursor": {
          "ref": "036a2a49-e5b9-4e0e-9f1f-63d12b332610",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "33c18661-7d5c-4f44-a179-6249c0a728d5"
        },
        "item": {
          "id": "8583c7c7-50db-4c70-a104-914fc886bdba",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2b5e3f4c-0a5f-4093-8823-5e8abd6b3989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "ec448c3d-7a31-43af-b6d2-30f7a063baf7",
        "cursor": {
          "ref": "e725e6a3-bb5b-43fc-9264-54950123f69f",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7493d3c1-5712-4daa-9357-03af798a2192"
        },
        "item": {
          "id": "ec448c3d-7a31-43af-b6d2-30f7a063baf7",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ac31f671-6e56-4b5c-bbfd-71412f3c4c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "623e49ac-1c0e-45f7-aa08-7967e084efb7",
        "cursor": {
          "ref": "ca9d13c7-caf1-4e5a-97f7-0c959f47f25f",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f26dfd81-8130-4b65-9c9c-53e7857762ee"
        },
        "item": {
          "id": "623e49ac-1c0e-45f7-aa08-7967e084efb7",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "dd9ee828-363b-495a-836d-f856be043543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "da197b57-1c48-4f60-ad1b-2d4268bfd569",
        "cursor": {
          "ref": "662f3ff3-80e4-4d70-95ed-1849b11bacd1",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d62a291c-316f-482a-bcf5-1eda05244d03"
        },
        "item": {
          "id": "da197b57-1c48-4f60-ad1b-2d4268bfd569",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "05927011-3870-4ed0-9754-60326e4739e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "7d87c0cc-70fa-483d-b952-41071dd4d04d",
        "cursor": {
          "ref": "d3b02915-76e2-4972-9be1-8a0faf38c2d5",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "18b9cbd1-e9a1-45ca-89ca-583c4608b32c"
        },
        "item": {
          "id": "7d87c0cc-70fa-483d-b952-41071dd4d04d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "8fdf36c3-dd2e-4e4c-ae7d-811541dd3524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "2b9e8707-a86b-4df9-9d02-9e15df95ce5a",
        "cursor": {
          "ref": "69d74663-ece4-40e9-8dd9-c220710d9992",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "22f9e1af-b573-4d74-a1e8-7f48dbb73e42"
        },
        "item": {
          "id": "2b9e8707-a86b-4df9-9d02-9e15df95ce5a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9f66596d-b1af-42e1-9a6d-2228ca133b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "506d3062-49f2-45bb-9761-30571c8ae66d",
        "cursor": {
          "ref": "251435ab-1459-4e94-84ce-d383fa4d4540",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ca8f168a-81fb-4cff-a905-8581a7fdc313"
        },
        "item": {
          "id": "506d3062-49f2-45bb-9761-30571c8ae66d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1a1faec3-163e-48b0-9bcf-5ce900e1d068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "e52d4876-cd96-4800-a0f2-7a6c7a0508f1",
        "cursor": {
          "ref": "88423c17-9957-4260-af2e-9a135611a1cc",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "790f2fe2-6b35-4ffe-a512-46d6308c3ad1"
        },
        "item": {
          "id": "e52d4876-cd96-4800-a0f2-7a6c7a0508f1",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "40efad6b-1686-4d12-bc37-cc06b1bc2172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "47f15a59-a0a7-4f5d-9f44-8599bd3ec31a",
        "cursor": {
          "ref": "26180ab8-5ca8-4201-b789-fc53bb630d85",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "096e5b78-1df3-4b15-895b-e2641f04b3d5"
        },
        "item": {
          "id": "47f15a59-a0a7-4f5d-9f44-8599bd3ec31a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "166b5dce-8a5d-4b4b-ab43-38b811c577b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "8e1a0a74-b206-4b25-afd4-d8f3026d419e",
        "cursor": {
          "ref": "7d6220ec-c447-4ee2-9abc-d935af1fe88b",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "017fea74-2dc7-4946-9480-09a95759b1e7"
        },
        "item": {
          "id": "8e1a0a74-b206-4b25-afd4-d8f3026d419e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8392b2fd-3b1d-4b5a-a8be-47172a5cfd04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "7a189452-c8fb-4268-ba84-a663bf855109",
        "cursor": {
          "ref": "195c5dbf-09a6-4d89-9719-fe73b71ca73b",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "795203fe-b70e-463f-adc6-561a9e1392d9"
        },
        "item": {
          "id": "7a189452-c8fb-4268-ba84-a663bf855109",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "9d478b29-8260-4536-94a3-5e63362268ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "90035efd-1b03-4c71-9c40-2f55f8389174",
        "cursor": {
          "ref": "94497fab-5a51-4f2c-ad60-887e3f941296",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8f6f0b8d-83b4-41d5-bb2f-6dd69818816d"
        },
        "item": {
          "id": "90035efd-1b03-4c71-9c40-2f55f8389174",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f6e1b48c-772e-4e17-b766-7940c02cb26a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "131e8f95-2538-4bf1-93bc-2676c59c6347",
        "cursor": {
          "ref": "d34e643b-fcde-4a28-b9b3-d9712b6f3250",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "93c43013-6ad0-4163-a398-8eb8d9844e6d"
        },
        "item": {
          "id": "131e8f95-2538-4bf1-93bc-2676c59c6347",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7cd81b64-bdf2-4379-bf21-d6bf5691ca79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "1878adab-c497-4ec1-8d7d-aef0881a54e7",
        "cursor": {
          "ref": "4a66909a-3b87-475a-b489-6a00783b570a",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8199210d-6614-44d9-aad3-07e02f300324"
        },
        "item": {
          "id": "1878adab-c497-4ec1-8d7d-aef0881a54e7",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "39bdf8a5-d279-48ef-97a0-5f0e240e476f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "54c5199c-e34e-4f94-a4bf-73427d1331d2",
        "cursor": {
          "ref": "019648a6-cc63-424c-a2ec-23972eadb903",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "47acbac7-b15f-4ba1-8b68-7aba9337e6df"
        },
        "item": {
          "id": "54c5199c-e34e-4f94-a4bf-73427d1331d2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3b63426a-740b-467e-bd93-23f3428399f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "863de66e-753b-42ae-ad50-ea7367c3789c",
        "cursor": {
          "ref": "d46925c1-a0ee-4e64-9acd-fc31325e54d1",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7ec1d823-5cce-4ae4-a0da-2bfbb23b4a32"
        },
        "item": {
          "id": "863de66e-753b-42ae-ad50-ea7367c3789c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "08df0815-c0ba-4325-8217-c7aa7e63d91d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "c10d7316-52e9-40a2-97f8-f4adfddf6a2d",
        "cursor": {
          "ref": "8e72c441-3f53-40d5-9ecb-aef485673a88",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e5f4bea9-2bcd-47d6-8ec6-e9d181525422"
        },
        "item": {
          "id": "c10d7316-52e9-40a2-97f8-f4adfddf6a2d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1f8e257b-2b9e-43f5-81bf-3441c99061b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "cf79f1cf-8dfc-4c19-8e78-94e697a672ab",
        "cursor": {
          "ref": "6e3db8b3-b428-4a6c-92d9-529468f6c8cf",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ca5c67db-0d6b-4015-9292-2f7b042e2180"
        },
        "item": {
          "id": "cf79f1cf-8dfc-4c19-8e78-94e697a672ab",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d8a1e45d-d5dd-41fd-9a0d-3c2978ae7acc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "3b681204-15b5-4e2a-9764-11d070994805",
        "cursor": {
          "ref": "ba42dee9-c28d-4f80-9960-1b5136de7909",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8cef5e1a-9db6-487c-8d00-a28f8ed03305"
        },
        "item": {
          "id": "3b681204-15b5-4e2a-9764-11d070994805",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "24571726-4244-42d1-b85a-ba07a413e075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "c01e9413-db0a-4562-8c41-74950e27efd5",
        "cursor": {
          "ref": "66816385-c064-43b8-ae7f-96e4d9a5f076",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "557d59ee-b134-45c2-8cb0-0dcd29b27808"
        },
        "item": {
          "id": "c01e9413-db0a-4562-8c41-74950e27efd5",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "1bacdace-a39c-444c-8e07-e6f5debdaed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "d4496386-6204-4b21-a8e6-5ea57196aea2",
        "cursor": {
          "ref": "b7e6af2b-19f6-4079-8080-56e80d2ef6a6",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1f9fd98f-cea3-4f0b-9a54-45a87ea728bf"
        },
        "item": {
          "id": "d4496386-6204-4b21-a8e6-5ea57196aea2",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a4e21e9c-67d7-45b5-823d-ab82d2c7d39e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "bb741a05-3d1a-45f8-8bdb-f281a2ac9129",
        "cursor": {
          "ref": "97cc43db-4db5-4733-9be6-91f5de37d135",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "3dd8bf52-316c-46e7-a4ca-442eba23a08c"
        },
        "item": {
          "id": "bb741a05-3d1a-45f8-8bdb-f281a2ac9129",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4d3a32b5-4e21-4084-ba3a-2c04f9bc23d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "bf6a51b7-7aee-4c86-9454-f13d5b95106e",
        "cursor": {
          "ref": "c9f40038-1e11-4143-b811-74d79cb0a86b",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "598dafcd-2629-4476-8d6c-926cd306396b"
        },
        "item": {
          "id": "bf6a51b7-7aee-4c86-9454-f13d5b95106e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "086ee625-1869-47e8-981e-1e540554b9c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "34241ec9-57c9-4763-bf14-acf71cff654a",
        "cursor": {
          "ref": "8b45e13f-ee6d-415e-928d-247273c9699a",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "40a997bc-367f-4002-9417-621c8dbe7e09"
        },
        "item": {
          "id": "34241ec9-57c9-4763-bf14-acf71cff654a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e6eb4ec4-8592-4a9d-b6b2-22a31eb399ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6c50ab52-5d7b-403b-9510-09add0a72b88",
        "cursor": {
          "ref": "d9e309aa-69e5-4042-bf1b-2e96e97dcbb5",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "4284360d-c499-403b-9319-a112ca259071"
        },
        "item": {
          "id": "6c50ab52-5d7b-403b-9510-09add0a72b88",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d0d7239f-88a0-4d97-bcb4-2e4544328801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6b75a5bd-dc0d-4fa6-bccd-3e5ddf83f61c",
        "cursor": {
          "ref": "c02b87c9-2059-4831-ab83-2ac001a4c19c",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "33e21644-9a22-4e2b-88cf-08b4a83c2bb2"
        },
        "item": {
          "id": "6b75a5bd-dc0d-4fa6-bccd-3e5ddf83f61c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8e6a0afe-ce10-4a2e-bc43-e35488705454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "dda4f675-8670-42d6-9456-3aef34324be3",
        "cursor": {
          "ref": "cc45bd70-0272-482e-995b-21d6ad5cd2e5",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "cad79a34-ebc0-4423-be5d-6092361eab78"
        },
        "item": {
          "id": "dda4f675-8670-42d6-9456-3aef34324be3",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3c932339-0a06-480a-bc47-67e859128023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3471e051-fb66-400f-9602-988d547b3702",
        "cursor": {
          "ref": "83298a97-3b2d-40e4-b840-fb56a927f3ce",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2c3e15ae-decc-40c9-b1ae-5fca9ba44dae"
        },
        "item": {
          "id": "3471e051-fb66-400f-9602-988d547b3702",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a08bd861-a43b-4220-b8bd-7e40861f6f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "d603c15e-6541-4637-a673-c4b7c8ff8de4",
        "cursor": {
          "ref": "14bb7eb1-a2b5-4205-99ef-0af682958760",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "677417e9-dea9-4090-9010-1e37daf4e3a7"
        },
        "item": {
          "id": "d603c15e-6541-4637-a673-c4b7c8ff8de4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "cfce0810-8ed1-4beb-a902-9c74af815b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "880582cc-7014-4f85-98be-c48df6943bcd",
        "cursor": {
          "ref": "eaa4a148-9d4b-4f1d-bd33-718f7c37bf00",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "14c17cb9-7587-4d3e-ac9c-daed0b4c9f73"
        },
        "item": {
          "id": "880582cc-7014-4f85-98be-c48df6943bcd",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e312bee1-7a23-410c-af34-9f5cb6fc589c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "f7df1307-3a15-41c7-9d17-e98c6f1172fe",
        "cursor": {
          "ref": "433c8826-6459-44d7-8bba-187cb7eeb80b",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9281e608-6112-4d24-9952-adaf84c1d9c8"
        },
        "item": {
          "id": "f7df1307-3a15-41c7-9d17-e98c6f1172fe",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "077241d9-71af-4e4e-b5d9-c81606b46862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "532f994f-08ed-4459-aac7-998d24afb7ac",
        "cursor": {
          "ref": "a6e02b67-8558-47e2-919a-5e385cc6db0a",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "57f0eecb-1c93-460e-ba34-1dc42abb14b3"
        },
        "item": {
          "id": "532f994f-08ed-4459-aac7-998d24afb7ac",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "74e5ca2c-8efd-444f-bbd9-0f4272a1fe08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "f184a839-ae46-4582-b5d2-fa46949cd535",
        "cursor": {
          "ref": "9392dc02-9be1-4721-b86f-2b2bb5556ad8",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f1a656c6-ae00-40da-8516-7fc7b20b54e6"
        },
        "item": {
          "id": "f184a839-ae46-4582-b5d2-fa46949cd535",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "665f77fb-e492-43cd-a5dd-3ce1b461d702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "b3a8fa11-4a59-49d6-afb1-52496acd577e",
        "cursor": {
          "ref": "df5c17ab-cb3c-4b15-b117-8cd53f91f947",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "f5a0e120-cfb0-49b3-9e2a-463c996250d7"
        },
        "item": {
          "id": "b3a8fa11-4a59-49d6-afb1-52496acd577e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "22e6ca70-271f-4755-89ce-070eb0eb227b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "15385a40-c113-4c1b-abf6-ea1398994614",
        "cursor": {
          "ref": "01b4bd41-ecbe-4f8d-958a-bd9894ebcfcc",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "163d11df-d56a-47d1-b055-da3fe304dd8b"
        },
        "item": {
          "id": "15385a40-c113-4c1b-abf6-ea1398994614",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e5c38acc-91b4-4a6f-8aa5-63f02930e1f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "3a19ac89-1254-4e29-bc24-b9113d84d393",
        "cursor": {
          "ref": "e7984157-e1d7-4294-8b5b-5cb58dd5e5ee",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "bd113fae-d3a6-4afa-b632-d88f9b1c3b82"
        },
        "item": {
          "id": "3a19ac89-1254-4e29-bc24-b9113d84d393",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f7ae961e-77dc-498d-b8d4-f0cc14770d25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "6fc1fc39-6288-4cf3-b5cc-10c4b534ad4e",
        "cursor": {
          "ref": "9ba13634-94e7-48b8-8804-b1d3e41dca22",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "66b69dfd-952d-41d4-95d4-9619f313b71e"
        },
        "item": {
          "id": "6fc1fc39-6288-4cf3-b5cc-10c4b534ad4e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "13a40e94-2111-4d7f-9e0d-a12dbf3e6736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "397e94e0-538b-4d2d-8c50-11a7aa2461ab",
        "cursor": {
          "ref": "4e09af1b-eae5-4fd4-a8fb-7a26f40a5f4e",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "5d5a29f4-09f6-4d0a-9eee-66c91df0a7d0"
        },
        "item": {
          "id": "397e94e0-538b-4d2d-8c50-11a7aa2461ab",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9b17dbac-ac95-47fe-bbe6-a4e1998a1f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "cb2269ad-b157-4055-abb4-660575ed9da5",
        "cursor": {
          "ref": "73627e25-ad20-4fd3-9e87-422b10b513be",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "19768083-9e07-4989-8b5d-7c85abdec399"
        },
        "item": {
          "id": "cb2269ad-b157-4055-abb4-660575ed9da5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "109ba3fe-8fa8-4758-9d09-9156fb890c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "b7a6a327-67a6-4fc2-ae2f-7427cf339c3b",
        "cursor": {
          "ref": "58fe1a9d-58f1-4819-8f48-5cc84cfe256c",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b2f7c12c-74a4-46da-8c8f-3e20c9f08b80"
        },
        "item": {
          "id": "b7a6a327-67a6-4fc2-ae2f-7427cf339c3b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0d65497d-96d9-4a9b-89e2-b74af6e54ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "1ddb6205-b999-4e39-b6f7-47770d9041a1",
        "cursor": {
          "ref": "95b04102-48b4-4531-9667-3aca2c2831f6",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5c4e3e21-e58b-4b15-a58b-d5934a3ae0a3"
        },
        "item": {
          "id": "1ddb6205-b999-4e39-b6f7-47770d9041a1",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "84ee9a62-039f-4c5e-8258-19032d433f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "4d508018-ce21-49cd-bd83-41dac60e8918",
        "cursor": {
          "ref": "b5485cef-4129-4a62-9bf6-8fd38a8a35ec",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "78d731c7-5c40-4bdb-9a2a-b58227489841"
        },
        "item": {
          "id": "4d508018-ce21-49cd-bd83-41dac60e8918",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "51032024-01cd-4600-9aef-b6e5eed1ac9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "2e6f7d7e-283c-4701-b96d-51f2e74e1873",
        "cursor": {
          "ref": "2fea1785-8b12-4af2-ae43-7b11754257e1",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "bfd77d7a-5908-43cc-ac26-78e0e38e8cf3"
        },
        "item": {
          "id": "2e6f7d7e-283c-4701-b96d-51f2e74e1873",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a8ee285b-122e-4980-b983-20392b8eb9fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "f205d7fb-e53f-4d2a-9b49-b36b85c9b8b2",
        "cursor": {
          "ref": "e20f11e5-30ef-4706-8f4f-4b72aac7fb83",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "df7486f0-0ecc-4941-b2f7-093520fdcb5f"
        },
        "item": {
          "id": "f205d7fb-e53f-4d2a-9b49-b36b85c9b8b2",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "36c2854d-77ae-4f61-ad7f-916bee4a4941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "941058fe-399f-49c1-9021-1a31c27fbe7e",
        "cursor": {
          "ref": "0d06e582-a008-48c0-946f-ed0ceb371cad",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "cf0fef7d-74fd-4fc0-9cbe-cbeefc587c19"
        },
        "item": {
          "id": "941058fe-399f-49c1-9021-1a31c27fbe7e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d2f290bd-e42f-4543-8fc1-7ccc26579e76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "9bd06a74-2964-4dea-a50c-1661e0e34dde",
        "cursor": {
          "ref": "24d1ade3-f7ca-46e2-9f91-168462dfd3d5",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0783d9ae-89fd-4e5f-97a3-20fe6eb062c7"
        },
        "item": {
          "id": "9bd06a74-2964-4dea-a50c-1661e0e34dde",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "3a2f0873-d02a-4724-9310-d29259121e3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "84313b5c-f793-412c-844d-86190bb933c9",
        "cursor": {
          "ref": "9c5d5ac4-e4be-403b-805c-1c2170f9ecbd",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5bc8c7ed-991d-4905-b353-6e07730e745e"
        },
        "item": {
          "id": "84313b5c-f793-412c-844d-86190bb933c9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "a484f29a-546c-4c23-ac4b-91eceedb3442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "968c2834-9ff0-4bf6-b10f-50bef4bcedd9",
        "cursor": {
          "ref": "fb0582ed-ff88-47d7-8f2f-cce708a9dbe1",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "76d1f8fb-fabe-4a44-9135-c321f4fa2781"
        },
        "item": {
          "id": "968c2834-9ff0-4bf6-b10f-50bef4bcedd9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d614a2ce-9c8e-49c0-ba83-4aac23b6f5df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "14a637aa-b743-45d8-ad88-685be825840c",
        "cursor": {
          "ref": "3ca41b03-d15c-4ac4-b8d4-7f89b46c790c",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "8f5da35d-6ecc-43fc-992d-c19c79f85c1f"
        },
        "item": {
          "id": "14a637aa-b743-45d8-ad88-685be825840c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d9d08dc3-8629-47a1-980b-d57923fa986a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "c6eb7499-128e-4f2a-87d7-9bf1ec537bfa",
        "cursor": {
          "ref": "c338ba36-038e-4c74-892f-7c585ac9b6ff",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "058c52a1-8d7d-4497-b3d1-3268d492f618"
        },
        "item": {
          "id": "c6eb7499-128e-4f2a-87d7-9bf1ec537bfa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "26d8f7a2-16a7-41a1-8050-431d9ba9fbd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "77f4f6ac-7356-4a4b-a768-01818ad326cc",
        "cursor": {
          "ref": "dd66a90b-689b-4e74-a4d9-97f00b0f2437",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "d15d9538-de33-4163-aedd-08790cc1cbac"
        },
        "item": {
          "id": "77f4f6ac-7356-4a4b-a768-01818ad326cc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "07f4c792-8caf-408c-a285-4fdae86ea7ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "5c51108a-9ed5-4775-bc92-cd92437d1b39",
        "cursor": {
          "ref": "f46d1772-1be7-46d2-9ce8-8cf2533cd930",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3a0b6f69-10a8-4ffd-b54b-dbb4b58b799c"
        },
        "item": {
          "id": "5c51108a-9ed5-4775-bc92-cd92437d1b39",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c6b921d9-03bc-4ede-94e1-491032917c57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "6c2853ba-9fc9-461b-bcac-359ec765ac5b",
        "cursor": {
          "ref": "10da0805-8509-4832-acdc-40055a99af11",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "6dcd5ef6-f6c7-4734-8439-e15db4609d62"
        },
        "item": {
          "id": "6c2853ba-9fc9-461b-bcac-359ec765ac5b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ee3b1622-80da-49a6-af6e-6a78b03937db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "eac4d0e2-8203-48aa-8965-6dcaac594677",
        "cursor": {
          "ref": "a16cb26c-459a-46ed-a74c-a807b20ff76d",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "2043b257-f136-4619-908f-b87803523341"
        },
        "item": {
          "id": "eac4d0e2-8203-48aa-8965-6dcaac594677",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "49cc07d0-ae41-4717-8c09-a7e41b6ab4f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "42cc0442-322b-4309-b143-7ccdd344f27c",
        "cursor": {
          "ref": "4108bb1e-4ef4-421b-8cd2-e32c7fa8263b",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "47a4305c-547b-4e69-b479-63976a5f4b87"
        },
        "item": {
          "id": "42cc0442-322b-4309-b143-7ccdd344f27c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4227113e-9785-4dda-bb17-cfe7f7e29fab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "bdca46dd-7ccc-465a-9127-04cd9a400335",
        "cursor": {
          "ref": "e0d15a38-a191-41cb-86b0-b1687511c125",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "69a57145-ffac-4cf3-8f9f-125ce452108c"
        },
        "item": {
          "id": "bdca46dd-7ccc-465a-9127-04cd9a400335",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3534987f-b1ff-4591-afb4-c052cbc054cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "f677a3d7-0fc7-42af-b8fb-f87b14f3ce59",
        "cursor": {
          "ref": "1f387986-cc2e-44e8-b386-836865858e7a",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a6f14ada-d923-43c6-becd-77283976bc95"
        },
        "item": {
          "id": "f677a3d7-0fc7-42af-b8fb-f87b14f3ce59",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ec5058b4-080c-4e4f-9574-5c80050506d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "dacd87da-cdb6-43ec-80ca-bb69363586ff",
        "cursor": {
          "ref": "d72073e3-fa7d-4d0d-90f7-b8ba9fb9e6aa",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "9822d2f9-58a1-406f-959a-abc0df6eecd4"
        },
        "item": {
          "id": "dacd87da-cdb6-43ec-80ca-bb69363586ff",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0382c1a1-0755-4ca0-b74a-2705d5ae644c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "b1b52880-e15b-4398-b091-4403683f5d43",
        "cursor": {
          "ref": "ae65aede-bc4c-4f4e-bfa5-3b13b6d73fcb",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a93530d7-a69d-45c4-82de-1d635d0405fd"
        },
        "item": {
          "id": "b1b52880-e15b-4398-b091-4403683f5d43",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "7366f634-a576-426a-8064-ffce04e252bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "fad0e22f-c4d6-47ad-91fd-988b88096313",
        "cursor": {
          "ref": "b6c7d2e4-a0b9-485a-8f4a-0edb14e37ce5",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "068624c4-f993-41d5-a891-8940f5018f87"
        },
        "item": {
          "id": "fad0e22f-c4d6-47ad-91fd-988b88096313",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "018cab6a-92b6-4818-9c3e-540dcf065a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "fb8ae391-c428-48d9-807c-e0284894914d",
        "cursor": {
          "ref": "d3e7532f-79e3-4d06-99ae-d2fce2125539",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b29a13ea-e47d-4a21-a6d8-27ca4c3729a4"
        },
        "item": {
          "id": "fb8ae391-c428-48d9-807c-e0284894914d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "abdc3ffd-08f9-4bdb-a39a-96e853d1e8fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "fa7ed0d7-bcdf-4cfa-9eee-ecf721b0de0e",
        "cursor": {
          "ref": "882eb031-474a-4b66-8866-6681daa1fe25",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "13892bc5-41d2-47a7-bb99-f40e80f1029d"
        },
        "item": {
          "id": "fa7ed0d7-bcdf-4cfa-9eee-ecf721b0de0e",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ca372f3c-f061-477a-bc32-f919e8a7ae4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "b0bb444b-5031-44ce-a040-e6aea289049c",
        "cursor": {
          "ref": "a72ee8d2-f773-48cd-8830-972dcc6b7e50",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c3338e60-95ab-427f-b547-f215e08772a8"
        },
        "item": {
          "id": "b0bb444b-5031-44ce-a040-e6aea289049c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c9db5dbe-0477-4790-8e41-ddb69544131e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "80e36c3b-2eb3-437a-8ecd-3529c8d7382d",
        "cursor": {
          "ref": "6182eeeb-2a25-458a-a6ee-7a6002e75e25",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ee4e27d5-cda4-4cbf-9040-a39032bcac1e"
        },
        "item": {
          "id": "80e36c3b-2eb3-437a-8ecd-3529c8d7382d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "71a67397-5820-4b0b-9fa8-499a6977dd37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "8dad5be4-24e8-41b3-ad2e-de4b038c6d4e",
        "cursor": {
          "ref": "3a466659-e54a-4267-accf-8d97031bc751",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "8ca25d3a-fcfb-4adf-b37f-f5129ed39f0f"
        },
        "item": {
          "id": "8dad5be4-24e8-41b3-ad2e-de4b038c6d4e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4d4509f1-ab21-446f-a46b-1dd327212918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "158b03fc-7e92-4155-b9d9-d78a4cd67d66",
        "cursor": {
          "ref": "46c8f4c7-a879-45aa-9125-e531c57dd0c0",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "964bd610-c021-458c-932c-0f5f5dcd7485"
        },
        "item": {
          "id": "158b03fc-7e92-4155-b9d9-d78a4cd67d66",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c18cc5e2-f685-46d8-b85c-1b9ad42b576f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "da648a3c-5d05-4123-8118-a763eb0817c7",
        "cursor": {
          "ref": "0b1e50cc-7c12-43c3-ad73-3782f5a5d65d",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "788be5a6-4487-4ced-8f45-f1cfbade74c9"
        },
        "item": {
          "id": "da648a3c-5d05-4123-8118-a763eb0817c7",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "be8ba600-bb7a-43e6-8e75-d8d79291a220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "acad5563-7093-4b42-907a-579fdadb7bd6",
        "cursor": {
          "ref": "4efa9579-16b7-40c8-a5e3-2ff56241faf6",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e4b27231-0457-42a9-9026-c42d1d146f4f"
        },
        "item": {
          "id": "acad5563-7093-4b42-907a-579fdadb7bd6",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "4d4cb3d9-c228-4c19-81d0-45bb10df268c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "24f03424-6a3f-45ab-a1b0-a7a6ed44c170",
        "cursor": {
          "ref": "81d6a0c6-1aee-4ccc-82aa-46a7ea538e1d",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "eb0d0fce-6732-4543-901d-da7435edd46d"
        },
        "item": {
          "id": "24f03424-6a3f-45ab-a1b0-a7a6ed44c170",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4571cafb-f17d-489b-b6ce-4186d73cb4ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "467179c7-d768-48d6-a28e-8fb02b8e12e2",
        "cursor": {
          "ref": "6ef63fc7-6575-4c8d-b4df-c88de2e92560",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ffe8176b-1a0d-40d7-b93b-3b2041b8d237"
        },
        "item": {
          "id": "467179c7-d768-48d6-a28e-8fb02b8e12e2",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ed65cbf3-ce27-4d2e-a1e8-dd5d783b8349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "416c976b-bd12-4a1f-a10a-8385043672f5",
        "cursor": {
          "ref": "c9be281e-b301-4d3d-bf9c-087a490529e5",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "445fd644-a3dd-4661-a073-3e264f06b9c6"
        },
        "item": {
          "id": "416c976b-bd12-4a1f-a10a-8385043672f5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "9d8b2058-9578-4ce7-af5f-8a43d60fa614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "e324d375-6ce3-44f4-9e0e-6a69e3f16cb6",
        "cursor": {
          "ref": "54648460-377d-46c7-9352-f58b4169b9a9",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a83fb42a-2c91-412f-a249-120c05ee6b7f"
        },
        "item": {
          "id": "e324d375-6ce3-44f4-9e0e-6a69e3f16cb6",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8f6073de-a238-4644-9d19-b165ac650968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "86259fcc-9525-4537-941c-5b76cf785850",
        "cursor": {
          "ref": "34b484e7-649a-4a21-806e-0f1faccad8a2",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "385ed803-efd0-4546-8d9f-4d7bd147bd30"
        },
        "item": {
          "id": "86259fcc-9525-4537-941c-5b76cf785850",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2314ca95-5d1a-472a-817e-342c755466d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "d8e53733-d9a2-44ae-bfe5-9849ce95167b",
        "cursor": {
          "ref": "63b5752b-3bfb-4f90-9fbc-c0b5228e1869",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2b38fffa-0e8e-4c5c-91d5-479150136e70"
        },
        "item": {
          "id": "d8e53733-d9a2-44ae-bfe5-9849ce95167b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "73864c70-af30-4dbf-b865-087e7adf4336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "a5a22fa0-19e5-4f8c-beb7-6001ee2d97a0",
        "cursor": {
          "ref": "2c0a2aa5-54dc-4224-bc36-371719381edd",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e5075c49-b250-4151-a4f1-7413ae2bb926"
        },
        "item": {
          "id": "a5a22fa0-19e5-4f8c-beb7-6001ee2d97a0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "de47fc53-afd7-4d82-b6ef-9fed80e5a3ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "44bf25f8-fd23-4ad2-b7f5-67d778223fbb",
        "cursor": {
          "ref": "32ad4729-fef3-4188-aa84-cb7721f84e05",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "baeb1bd3-6f20-496e-b201-bbadc6f67e65"
        },
        "item": {
          "id": "44bf25f8-fd23-4ad2-b7f5-67d778223fbb",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "79782316-4495-432b-84ac-cb1800c912cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "e931b30a-7fe6-42df-b77e-60426fb18038",
        "cursor": {
          "ref": "e69464d7-bd8f-4ec3-8da2-77c87b2b7ae9",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "cce7b856-4f09-4770-a2a3-fa16727c393a"
        },
        "item": {
          "id": "e931b30a-7fe6-42df-b77e-60426fb18038",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a1faa8dd-3ea2-4bd6-a13b-0869bf01c408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "e1d11063-ef41-4241-98aa-f57d406f5e9c",
        "cursor": {
          "ref": "27e928e1-e923-44cd-8b1a-af06f5ba6c71",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "19978899-92c9-4f47-8027-c928791f91b0"
        },
        "item": {
          "id": "e1d11063-ef41-4241-98aa-f57d406f5e9c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "85e21822-20de-49e5-8180-4e183677a619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "c5891a40-5dfb-4421-9cbd-813d9361e69f",
        "cursor": {
          "ref": "7e3ef532-444b-42f7-9da4-f90e2e4a354a",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "47adce90-3c93-4563-a2d4-fd4a3d0694d6"
        },
        "item": {
          "id": "c5891a40-5dfb-4421-9cbd-813d9361e69f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "97a0c44e-ff3f-4553-81da-e81262958eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "c3206708-4e92-4d48-870f-a5f504074e4a",
        "cursor": {
          "ref": "cb20d5f9-f31b-4666-97c1-d8642821cb88",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d77de20a-5edc-4e81-9fe7-527f328f6f61"
        },
        "item": {
          "id": "c3206708-4e92-4d48-870f-a5f504074e4a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "27f6cccd-63c4-4d68-97c3-b954b8a2b77f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "08fed7e4-3247-4a23-8b97-bdde021e0487",
        "cursor": {
          "ref": "10017801-26cb-45ae-af16-44474670c8c1",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "46ee7c66-5ac5-4018-aeeb-6a5752710ce1"
        },
        "item": {
          "id": "08fed7e4-3247-4a23-8b97-bdde021e0487",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ba7e2b28-7982-481c-8656-5012dfa23205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "695a4909-a8bc-4b9e-b833-3a2fc2e9037f",
        "cursor": {
          "ref": "b3b2619e-95e1-4315-aeab-1f91b8b45a66",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5058c75c-ea67-46e7-a1d4-a83e44bf6034"
        },
        "item": {
          "id": "695a4909-a8bc-4b9e-b833-3a2fc2e9037f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "49eb4087-3565-4ef3-ad6c-5de8cf059754",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3ce186-cc5c-4d45-a3b2-391679a205b8",
        "cursor": {
          "ref": "c06ccdda-9caf-4ee2-8212-e2b9f641f13a",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "7a7a0424-d556-4332-92b1-2b85b031de59"
        },
        "item": {
          "id": "ab3ce186-cc5c-4d45-a3b2-391679a205b8",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "fcedd2f2-acfc-4efa-b34a-f3a2d6ca3284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "25e55161-4028-4995-bd95-e882c8dc66cc",
        "cursor": {
          "ref": "52003789-3cf8-4df2-8f0b-8fcc4a61dfee",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "2b32c0d4-b8dc-4646-8072-93077f5ef57c"
        },
        "item": {
          "id": "25e55161-4028-4995-bd95-e882c8dc66cc",
          "name": "credentials_issue"
        },
        "response": {
          "id": "33afcfc8-cfe9-4078-89a5-b627abab5ec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:104)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:104)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:104)"
            }
          }
        ]
      },
      {
        "id": "c3e217bf-ee95-41de-83a7-70aa32429dfa",
        "cursor": {
          "ref": "fe89d202-4448-4189-912b-764f8021e3e5",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "8537f24c-7516-4ef3-8f58-0aac47860c21"
        },
        "item": {
          "id": "c3e217bf-ee95-41de-83a7-70aa32429dfa",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "b1b142be-07ef-4869-b972-8eb28e1557a8",
          "status": "Created",
          "code": 201,
          "responseTime": 91,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "78f261b2-5331-4545-b1a9-99bdc1adc6be",
        "cursor": {
          "ref": "f5d3c0ff-77e2-42a9-8e7c-61f1a4525000",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1231fa1b-2ab6-4cde-8914-1bf783b3bf14"
        },
        "item": {
          "id": "78f261b2-5331-4545-b1a9-99bdc1adc6be",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "13e3e693-ba5b-4809-b861-2a14904e470c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "0efa3f6f-6cc8-4c0a-be53-d6a7d6813eef",
        "cursor": {
          "ref": "37171ea5-1086-4a50-8d12-edbca6d22172",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5458b6e2-1878-4819-bca4-9eba07ba22f0"
        },
        "item": {
          "id": "0efa3f6f-6cc8-4c0a-be53-d6a7d6813eef",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e779ed2f-f151-4b55-b3f6-8d5acc395049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "e0c24596-9b60-4196-b364-be210132782d",
        "cursor": {
          "ref": "cb503457-4ec2-4684-bacc-acb5cec37663",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0297b3d9-fcd9-477c-a35e-4cdc8a56c282"
        },
        "item": {
          "id": "e0c24596-9b60-4196-b364-be210132782d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "343fbb6a-204b-4b79-a9d0-389b7a6af546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "2d6bc864-75c7-4c44-b368-92029eafbb89",
        "cursor": {
          "ref": "7872d8c5-9763-49f0-a86e-6021746c3d33",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "09d1b46d-977c-4bd3-b5d7-46ff9acd5d2c"
        },
        "item": {
          "id": "2d6bc864-75c7-4c44-b368-92029eafbb89",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6140a432-b420-45ea-948c-890fd23dcba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "6b0353a4-3da1-4a5f-be82-dfbf73dcd926",
        "cursor": {
          "ref": "2f70eaa4-c8b7-46bd-82fb-665763537268",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5174367a-047b-48f9-8f3f-fcabcc22e9ef"
        },
        "item": {
          "id": "6b0353a4-3da1-4a5f-be82-dfbf73dcd926",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "704d8ca2-c7d7-4ea2-8d0c-aba24caead71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "6b0353a4-3da1-4a5f-be82-dfbf73dcd926",
        "cursor": {
          "ref": "2f70eaa4-c8b7-46bd-82fb-665763537268",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5174367a-047b-48f9-8f3f-fcabcc22e9ef"
        },
        "item": {
          "id": "6b0353a4-3da1-4a5f-be82-dfbf73dcd926",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "704d8ca2-c7d7-4ea2-8d0c-aba24caead71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "e26f0144-f8cf-447c-83b5-c850a0f7cac3",
        "cursor": {
          "ref": "c02d93a5-bd60-48d4-8d6a-ec47dec9277e",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "5b75898e-ee0f-4f1a-a7aa-e7eb7f9c92d4"
        },
        "item": {
          "id": "e26f0144-f8cf-447c-83b5-c850a0f7cac3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d22074cd-39bd-4d24-88cb-c77f3dec333d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "5bf39835-8feb-4c85-8492-261594e62d6c",
        "cursor": {
          "ref": "2d594899-9bce-4ee6-93e9-a319c9a0df2f",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e01ff35c-dff5-4a39-84c8-ed5420c89aa5"
        },
        "item": {
          "id": "5bf39835-8feb-4c85-8492-261594e62d6c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "58d7aeb7-fd7a-4ea0-bdba-ba0cbdf079ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "9d7d6cfe-736c-451f-b9ac-6e1e3527f36a",
        "cursor": {
          "ref": "d81c4499-fad0-4860-9b44-64012ff5e39a",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "5b49b857-5e89-400a-a748-51d4c5a9441d"
        },
        "item": {
          "id": "9d7d6cfe-736c-451f-b9ac-6e1e3527f36a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0a1643fe-9963-4457-bbc6-9ceefa522f6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "c44d71da-77e9-4d0c-82ca-39aa0aec365c",
        "cursor": {
          "ref": "6fd9b590-4d18-466d-a643-8aeee4297510",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "46e00a89-ef3f-4f7d-ab10-3ec800a041f1"
        },
        "item": {
          "id": "c44d71da-77e9-4d0c-82ca-39aa0aec365c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3ca407d8-08d9-4a8c-a845-2d8a8fa19ce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "05c76172-074c-4d8f-9725-bdd7fa04870c",
        "cursor": {
          "ref": "ee63d6b3-2d24-4c98-b634-cae8c164ae66",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "533277e9-feb7-4661-9a1d-ac8cc87bcf0b"
        },
        "item": {
          "id": "05c76172-074c-4d8f-9725-bdd7fa04870c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3555b9a0-eaf1-4b8b-8303-48533dd95eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "9c9b2562-d648-4e39-974d-ecd14200d165",
        "cursor": {
          "ref": "830e2a19-24ee-432d-9a8d-9846ab7ec423",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "05fc6027-25b2-4e78-8451-43cd7bf99f7f"
        },
        "item": {
          "id": "9c9b2562-d648-4e39-974d-ecd14200d165",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "6f5b0d89-0adc-4e58-8087-105d1da2a44c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "82c6b3a0-d26d-47a9-a46d-f6bc9d35feb2",
        "cursor": {
          "ref": "ab4486c2-65b5-4329-94d3-00a72e445061",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f6a7fa5c-35d2-4faa-bc00-2977b23ac518"
        },
        "item": {
          "id": "82c6b3a0-d26d-47a9-a46d-f6bc9d35feb2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c6169420-96c7-4739-810a-e8ca53235fc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "e0251252-4176-4c83-8221-a4bc2a92e0ac",
        "cursor": {
          "ref": "53aec436-e42c-47ea-b973-2131f35265cb",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "95878399-880e-45d2-9d0a-084babd7c850"
        },
        "item": {
          "id": "e0251252-4176-4c83-8221-a4bc2a92e0ac",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "051b0a4b-996b-4262-b84d-7db7d27d42b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "12d75dc2-9677-4c20-a26c-ecdeae1657ff",
        "cursor": {
          "ref": "ec45dc4d-7829-43bf-a511-167f72581fc8",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f76e50ae-2ceb-4997-9c4a-b75050365e71"
        },
        "item": {
          "id": "12d75dc2-9677-4c20-a26c-ecdeae1657ff",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "44aec700-cfea-4e57-929e-554bc0da8e7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "3c73ee29-fee8-40a3-bbd4-8bc24d4c5841",
        "cursor": {
          "ref": "d4e56cdb-9a68-42c2-b6c7-9a17ca304986",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "99b23378-1a38-4ce3-bafc-45fc9368efd0"
        },
        "item": {
          "id": "3c73ee29-fee8-40a3-bbd4-8bc24d4c5841",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ae82d3af-83bc-498f-8640-902b9733d220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "301ca6fd-adbc-4f89-a294-a4c9c9f80c66",
        "cursor": {
          "ref": "7ce7aa6a-5b86-4e9f-979b-2445c23007dc",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "bf29ae92-0fd7-4cd7-9a7c-3c72d5498d9d"
        },
        "item": {
          "id": "301ca6fd-adbc-4f89-a294-a4c9c9f80c66",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2d22247f-f230-4b6a-ad5a-5ad22032df39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "d1dc715f-7eb2-41e6-a1d2-9a66909f8132",
        "cursor": {
          "ref": "03b6c713-2db2-4909-92c3-2f33b341a5ba",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ff2ccd56-6d69-4e96-ba7d-2e211ca29056"
        },
        "item": {
          "id": "d1dc715f-7eb2-41e6-a1d2-9a66909f8132",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c55c4d2e-c72c-4408-9a65-1ea242c9b9cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "bb1a8815-9171-4a74-b7a7-0127e4ae4d94",
        "cursor": {
          "ref": "d375c7fc-1293-4f8c-81fa-351cdfda9554",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "931a470e-83da-4e93-988f-4ad20ddd5b08"
        },
        "item": {
          "id": "bb1a8815-9171-4a74-b7a7-0127e4ae4d94",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "535f5d64-8ac9-4b67-a8aa-cc000b5a3f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "16c76d74-99da-4e6e-b758-3e5f531a4fdf",
        "cursor": {
          "ref": "13f08291-3bf0-4734-b9c1-25d23baf4a5a",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "9d832662-7459-47c1-8b54-536d57d784cc"
        },
        "item": {
          "id": "16c76d74-99da-4e6e-b758-3e5f531a4fdf",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3d6bef8f-d714-41d5-8416-74b7d13301d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "db993ba1-9a53-4a7b-9a7a-ef6132f20f7c",
        "cursor": {
          "ref": "4410b6c2-d0fe-41cc-a3a9-8835f5dcf955",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2aa325aa-3aaa-4914-853b-f14a75e16d02"
        },
        "item": {
          "id": "db993ba1-9a53-4a7b-9a7a-ef6132f20f7c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b645d76f-5460-4636-9d7e-2df9d59d9c47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "70479fde-856d-4455-865e-d3dc0ed6d725",
        "cursor": {
          "ref": "6593fe71-7802-44dc-ba8c-774e8b0f0848",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4785a243-65a4-4f2b-8c7c-ad771257946e"
        },
        "item": {
          "id": "70479fde-856d-4455-865e-d3dc0ed6d725",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bb19ed2c-2ac9-474b-a9cd-615a3a4f2033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "06fae789-d904-4499-ad40-21cba96ce0ac",
        "cursor": {
          "ref": "6bdcd492-7227-4f55-9b3a-1bb882edcf06",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c2c4fb55-0e0e-4dd5-989b-3a53086461b3"
        },
        "item": {
          "id": "06fae789-d904-4499-ad40-21cba96ce0ac",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b1f66d03-2c90-4a58-988a-e89ce20e00f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "ecc90afa-37ba-4e3d-85a3-aa98d78b298a",
        "cursor": {
          "ref": "89cf7cc8-5115-4009-aa7d-4589f0fb4e08",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e2c8ada5-916e-4f58-ab86-f2d41ab601af"
        },
        "item": {
          "id": "ecc90afa-37ba-4e3d-85a3-aa98d78b298a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0252948d-9418-4dbe-9a26-226ed3d6875a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "8bdb8f67-b002-4ed2-81b7-955afb4078c4",
        "cursor": {
          "ref": "2b24ed3f-2ca8-4c47-8f4b-82c13261bdc7",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "4a979987-31bd-4183-ac4a-9af46ee15403"
        },
        "item": {
          "id": "8bdb8f67-b002-4ed2-81b7-955afb4078c4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "85f616a2-de49-42ad-b167-e1fcd51955ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "83fe56f8-43ec-4b49-a4e5-1913fa5002c7",
        "cursor": {
          "ref": "b223a4ee-2c74-453c-abab-0afb292ac40f",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "94a65525-a9b7-4428-ba5d-fbf031f5aa1d"
        },
        "item": {
          "id": "83fe56f8-43ec-4b49-a4e5-1913fa5002c7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2ff617f1-ec99-4a74-b9c4-b90494bbe746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "3c0fcf19-a943-42a4-b296-be90295c4942",
        "cursor": {
          "ref": "26c06336-152f-4b66-9af0-40e8fe1eab0c",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "16b4d32d-f95d-4397-9bb1-fda5388907da"
        },
        "item": {
          "id": "3c0fcf19-a943-42a4-b296-be90295c4942",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2abadfe5-7aae-4a0d-8878-7c63430d5309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "0598de41-0188-401a-bb64-5c5e81b0f10a",
        "cursor": {
          "ref": "2dd55b38-dbae-4452-b344-d3249c2363a4",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7583241c-3981-487f-ba11-c5597ee5473b"
        },
        "item": {
          "id": "0598de41-0188-401a-bb64-5c5e81b0f10a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6113d6a1-ac41-4999-9e13-ac0d6c015c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "2deb7bf7-dbb6-4f08-a638-f9b57533478b",
        "cursor": {
          "ref": "97b21683-2db6-4182-8bad-4cd4f2181a76",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0a3225f4-c087-4d82-9117-200a278e97dc"
        },
        "item": {
          "id": "2deb7bf7-dbb6-4f08-a638-f9b57533478b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e4e8ab65-6784-43a3-8ed0-a7153610e939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "9b6d9e6e-e273-4fe3-9c0b-6386d5a79135",
        "cursor": {
          "ref": "8c38eab4-5d7e-4b70-bedf-d3238d85c07c",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c9865412-674b-46ab-b97f-d5089864f4b1"
        },
        "item": {
          "id": "9b6d9e6e-e273-4fe3-9c0b-6386d5a79135",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b617d9b8-9699-4d6a-9912-57ee118517f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "dba73592-51c9-41d4-90b3-9b72e499adf7",
        "cursor": {
          "ref": "f446764e-b0c7-4849-844a-7e340d6aba69",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c8faeb6a-b3f9-4b56-b1d5-5d95e6b1b1a4"
        },
        "item": {
          "id": "dba73592-51c9-41d4-90b3-9b72e499adf7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "658a072b-d7f1-4305-86fd-ee87fff7e389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "fd4eb5f3-6f6d-4fdd-8508-1cd2edaf9d47",
        "cursor": {
          "ref": "19820a5c-37d3-4df1-ba13-66bcf7c2daac",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "18feada1-7ed8-455d-8827-14e75bc81c4c"
        },
        "item": {
          "id": "fd4eb5f3-6f6d-4fdd-8508-1cd2edaf9d47",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ef0d2ee4-b364-4bdc-91bd-375c9bc25ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "d5b918de-bb24-434a-bc3b-5719283c8dd2",
        "cursor": {
          "ref": "0b33e9fd-fc56-4543-923a-502360817558",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "546aafa1-49f1-4381-ac77-16341b47f81b"
        },
        "item": {
          "id": "d5b918de-bb24-434a-bc3b-5719283c8dd2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7a170154-313b-445c-8f66-f4622d0d2abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "b12ea578-72e2-4c06-8d1a-4dca056265e5",
        "cursor": {
          "ref": "72792040-b280-44e6-aaac-6e10e956411a",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6c6818a4-f0ff-4ba4-84fd-f8e5b230120f"
        },
        "item": {
          "id": "b12ea578-72e2-4c06-8d1a-4dca056265e5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4aed1a9e-341d-4fdf-8846-348f111744d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "a9d86b63-f6c6-4f8d-a88d-e54d6ba0656b",
        "cursor": {
          "ref": "ed53122c-0b5f-4947-bdbb-637fb6f4040e",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "eee8397b-4d1d-497b-a67e-41452454a014"
        },
        "item": {
          "id": "a9d86b63-f6c6-4f8d-a88d-e54d6ba0656b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "219dc2e0-529e-4917-84bb-59ae4f8ae0d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "a0a519a4-fe7f-43ba-936a-6df4e569e894",
        "cursor": {
          "ref": "4a0df3aa-1c8a-4c88-b115-2cdbd2225e6d",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "416d2546-03d7-4cd9-9c42-c0092812de1e"
        },
        "item": {
          "id": "a0a519a4-fe7f-43ba-936a-6df4e569e894",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7ea9ebb3-b203-4df2-bd1f-2312a3d80df0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "ebfcdabb-89f8-4b48-8c5f-21e786ebba36",
        "cursor": {
          "ref": "179d6ddb-9a7c-4f1d-97b2-4e858a69da3e",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "67991974-0919-4495-bf93-75e4bcc9e41a"
        },
        "item": {
          "id": "ebfcdabb-89f8-4b48-8c5f-21e786ebba36",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "23efd998-2568-4ffb-86e7-7344a4d39600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "ef1fac1b-6fda-4495-8fcc-5f2a96c7c5b8",
        "cursor": {
          "ref": "3f778cce-d1c0-4fae-8e1a-94e63b52587c",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3f0d8a6e-14d0-4fe0-bb50-323cec0b56c7"
        },
        "item": {
          "id": "ef1fac1b-6fda-4495-8fcc-5f2a96c7c5b8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "47f5e708-8055-4e54-91a9-1dfc8f486a37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e20cca6-9395-4355-bab7-3bf462c68e3d",
        "cursor": {
          "ref": "11b166e5-2ba1-4229-b714-2685165b5d8b",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2f1d85cc-4001-4903-9088-293c86985605"
        },
        "item": {
          "id": "0e20cca6-9395-4355-bab7-3bf462c68e3d",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "ed3e2cb5-fb1a-4412-99a8-90a93a9878dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "caf9f835-d18c-4ca8-84ef-0c01424cf9ce",
        "cursor": {
          "ref": "0455e9ea-114b-4d72-9f24-76fa3f26f19e",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2b9f6f0c-74ed-44f5-897a-a616d5fb3c84"
        },
        "item": {
          "id": "caf9f835-d18c-4ca8-84ef-0c01424cf9ce",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0d371297-56fb-4fc4-8c2e-321583c94e83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "caf9f835-d18c-4ca8-84ef-0c01424cf9ce",
        "cursor": {
          "ref": "0455e9ea-114b-4d72-9f24-76fa3f26f19e",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2b9f6f0c-74ed-44f5-897a-a616d5fb3c84"
        },
        "item": {
          "id": "caf9f835-d18c-4ca8-84ef-0c01424cf9ce",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0d371297-56fb-4fc4-8c2e-321583c94e83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "7bc4bfcf-c811-4d37-a3ea-d88cee7d95f4",
        "cursor": {
          "ref": "8d785e41-d0a2-4a10-b222-8b2b2f2274fa",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ef99c138-ece3-4064-9baa-408a26c531e7"
        },
        "item": {
          "id": "7bc4bfcf-c811-4d37-a3ea-d88cee7d95f4",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0778a74f-21e2-4876-90da-42e416b5514b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "d4470db9-66ee-4b08-8c21-89410d81c812",
        "cursor": {
          "ref": "707ad4c3-ffbc-4682-9e25-d19696cd050f",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "159d447e-2cac-49e2-88ee-4b346dfc8030"
        },
        "item": {
          "id": "d4470db9-66ee-4b08-8c21-89410d81c812",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "299e8793-6a12-4518-a1d0-7e3f4c7f1561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "176e3edb-8181-4462-88eb-a5998446132b",
        "cursor": {
          "ref": "9039d55a-f925-42c1-a813-3dd203372c02",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4bcf1f22-f6eb-4666-a892-755ab81cfe15"
        },
        "item": {
          "id": "176e3edb-8181-4462-88eb-a5998446132b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f332ba6d-8921-48eb-9906-edb3aa9810c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "a5cb9f54-4c8a-4e65-b276-f1e52cd17200",
        "cursor": {
          "ref": "313d87dc-b81c-4861-bfaa-bc0e987596a4",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a9c8c626-e59d-4f48-9301-5f2fa98183ae"
        },
        "item": {
          "id": "a5cb9f54-4c8a-4e65-b276-f1e52cd17200",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d6da99f0-3be8-4302-9d97-2515fa85c627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "f3d15c9b-c235-4800-9569-d78c5dcd57d8",
        "cursor": {
          "ref": "1cf0016b-fd3d-47cd-b7e5-1b0afdaf614e",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "398b13b4-419c-4d90-94c2-cd927fe81443"
        },
        "item": {
          "id": "f3d15c9b-c235-4800-9569-d78c5dcd57d8",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e3aab68d-5338-434d-bc61-94f26c4f1039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "27119303-6076-4156-a676-d3681283e895",
        "cursor": {
          "ref": "4e0aaa75-f581-4617-bc59-69f618d3908c",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "68506a29-adc8-45e2-968a-f927822c16d9"
        },
        "item": {
          "id": "27119303-6076-4156-a676-d3681283e895",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3ff120c8-ea59-4668-a02c-2f5f77319489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "1ab11956-8abf-4966-8be5-3853ecfdf805",
        "cursor": {
          "ref": "769e3d70-b851-48dc-8553-50956b47f7aa",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d703a345-45bb-4dbf-9e5f-aa4c8d2c34bf"
        },
        "item": {
          "id": "1ab11956-8abf-4966-8be5-3853ecfdf805",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "7da4a72f-b504-4fb2-8d62-9e0946440a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "66c26b8e-c1fe-4cf9-bd0a-e5c0492122dd",
        "cursor": {
          "ref": "91d1e228-64f9-4eb3-bd57-80ebb95d78d2",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0f0df51e-8cf8-4dcb-8c5f-12f1cc6ba946"
        },
        "item": {
          "id": "66c26b8e-c1fe-4cf9-bd0a-e5c0492122dd",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "160890ac-6808-404e-a894-15654f451933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "d969fb56-1ecd-4361-b755-aa4bad10b9a8",
        "cursor": {
          "ref": "2d27d4c5-ff6a-499b-a45e-a195a4ed962e",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c951762e-a23a-4a68-ae65-1e04cd978267"
        },
        "item": {
          "id": "d969fb56-1ecd-4361-b755-aa4bad10b9a8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0388d95b-127c-4b1b-bcd6-aaf3b5724fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "90bb8964-18be-4b35-aec8-f0cac5748518",
        "cursor": {
          "ref": "7a69d399-8e13-43eb-ae57-c15a43709802",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "8a16b025-23d6-4e5e-bc71-f663436b7199"
        },
        "item": {
          "id": "90bb8964-18be-4b35-aec8-f0cac5748518",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e1686634-3e46-44ef-b368-48d53348f6a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "d8015867-d9cd-4ef5-933c-db9345798615",
        "cursor": {
          "ref": "4be2aa14-84ce-4255-b973-d5f5514013d1",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "e7652072-ba8d-43a0-93b5-ba918a117e85"
        },
        "item": {
          "id": "d8015867-d9cd-4ef5-933c-db9345798615",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "73b68319-810b-4d08-9af8-0ddc4a714a09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "fb6a5188-3f91-41da-b7f7-293ab9103528",
        "cursor": {
          "ref": "028861ae-1740-436a-94af-4e31aefe1f05",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "37e7b0c2-4ca9-41dc-a0cf-f48ed027d365"
        },
        "item": {
          "id": "fb6a5188-3f91-41da-b7f7-293ab9103528",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2f328a7f-7a1f-4787-b486-b6ed2293f7aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "ae3a177b-b700-4f8a-8213-840a2d423e72",
        "cursor": {
          "ref": "ff87036d-beaa-4685-9ec0-a27c5f7ba6b5",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e5a4705e-6ec5-472d-ba88-6411505c39bf"
        },
        "item": {
          "id": "ae3a177b-b700-4f8a-8213-840a2d423e72",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bae702f1-a4f5-4979-8b61-b1ef05894d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "80544616-39db-494a-a479-7b3ed4e6eaac",
        "cursor": {
          "ref": "729ff1e7-0fb8-46f9-b753-c450387b793b",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f27416a3-cb99-4802-9098-740ef794d6c2"
        },
        "item": {
          "id": "80544616-39db-494a-a479-7b3ed4e6eaac",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9fe4e027-d15e-41ad-a42d-a04c5fb18904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "8a2ab1a9-eb4c-44ff-b48f-d8249595ac97",
        "cursor": {
          "ref": "ec75f523-9cd9-47c3-9da5-3ebc126ebef3",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "5c834068-f468-46c1-8850-1cec292bfa65"
        },
        "item": {
          "id": "8a2ab1a9-eb4c-44ff-b48f-d8249595ac97",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3241fd77-d725-4593-9ddd-bd6e9f0171d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "0b796ca8-dad0-400d-8f40-7fbc807fa194",
        "cursor": {
          "ref": "a90a05a2-7f7c-470e-b2f6-ef7df70f26cd",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "913fd623-82a7-48fe-9da6-e8c67f8ae673"
        },
        "item": {
          "id": "0b796ca8-dad0-400d-8f40-7fbc807fa194",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3ea3039f-25d1-4116-9402-33247a940644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "a0a310a4-b9a8-4037-acff-e393f10c0138",
        "cursor": {
          "ref": "596a50f4-a31e-4b16-be82-60d2a036284d",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "51d393b4-45f1-421d-9aa4-9dabb6d4f687"
        },
        "item": {
          "id": "a0a310a4-b9a8-4037-acff-e393f10c0138",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "de0a9a39-e719-4bef-b078-33a65233fe54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "99640a8c-c7b6-4c4d-937f-a0aeec3d8fc9",
        "cursor": {
          "ref": "803414a3-b0e7-492f-bd99-e50dee12b4c3",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "98a7a531-5ba3-4c33-b067-908827716787"
        },
        "item": {
          "id": "99640a8c-c7b6-4c4d-937f-a0aeec3d8fc9",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "168cbfec-4ad1-43ef-b372-1dc02b2a90d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "3a78ed55-d292-4d65-a3b9-86fddfaac578",
        "cursor": {
          "ref": "741f0635-f535-4369-a2af-11338b65835b",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2e554ca6-6c70-4b6b-838e-4e0944bfc1ef"
        },
        "item": {
          "id": "3a78ed55-d292-4d65-a3b9-86fddfaac578",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d8709ddf-1556-406c-a150-89ac0d6b3c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 558,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "ef1cc9d6-9937-421c-a5cc-e994d3c579da",
        "cursor": {
          "ref": "1995d826-f4f7-419b-be8d-d8ad85123b24",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4d6d0d9b-283f-49f6-ad95-565ec8380d94"
        },
        "item": {
          "id": "ef1cc9d6-9937-421c-a5cc-e994d3c579da",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e3e737b4-40bb-40dd-a07e-e1aa50a0769d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 352,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "ad1ed402-27ca-4d95-9a43-9b81a9fad3b3",
        "cursor": {
          "ref": "aa064048-b970-4a28-adc5-eccc94f9461d",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "fc45f80c-5f0c-428e-9114-c6165297b819"
        },
        "item": {
          "id": "ad1ed402-27ca-4d95-9a43-9b81a9fad3b3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "103c25ad-f531-4084-a75f-fc6c596d1be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "e317c5ca-ed1a-4d84-b7b2-fdd9770857a6",
        "cursor": {
          "ref": "88fa60eb-577d-4385-94ca-32efc00ede94",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "14ad1b53-b034-49bf-bbbd-5361cee5529b"
        },
        "item": {
          "id": "e317c5ca-ed1a-4d84-b7b2-fdd9770857a6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "cde1cf8e-ad39-4d43-92e3-eb46feed3881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "e7d85d60-a71f-4db5-bd49-85951f54414c",
        "cursor": {
          "ref": "57628185-4163-41c9-86e3-e97c1f9e5b4a",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ffa99295-289c-4488-9714-9143aa6b27f7"
        },
        "item": {
          "id": "e7d85d60-a71f-4db5-bd49-85951f54414c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "47a7a733-a332-40a9-8618-8250904562d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "9e0f5dc9-b858-4903-ad81-68d77fac236d",
        "cursor": {
          "ref": "d6e91e58-e205-4b01-856c-61341e07744a",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "2f8a8da2-7bb0-45ed-b7c5-8349ee184dfa"
        },
        "item": {
          "id": "9e0f5dc9-b858-4903-ad81-68d77fac236d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b0cd0330-ef81-435b-b656-a33c55c23e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "42ea379f-26c3-4f2a-8aba-c6227a356dbd",
        "cursor": {
          "ref": "bf3de94f-f14e-4c9f-ab95-617cd2e25487",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1299d0c6-f35f-458a-81fe-1c05c2997057"
        },
        "item": {
          "id": "42ea379f-26c3-4f2a-8aba-c6227a356dbd",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0a0cfb81-730f-4b3c-bcac-0073c9a3af1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "cc7be726-46ed-48d5-89b5-208e02e429e5",
        "cursor": {
          "ref": "1ba99313-c38a-403b-9d13-97dcfcc1d49f",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d6901fe0-b30f-4cb3-8c5c-ab8bb4a7bdd1"
        },
        "item": {
          "id": "cc7be726-46ed-48d5-89b5-208e02e429e5",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "2b91cad6-6f1e-40c6-95b4-36e4df44a73f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "9b70afa4-7518-44d5-b63c-5a7c0d44bf4f",
        "cursor": {
          "ref": "29815e9a-d14f-4311-b581-e88c0219f2c3",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "74b02155-ada0-48bd-8c59-3925b52f3485"
        },
        "item": {
          "id": "9b70afa4-7518-44d5-b63c-5a7c0d44bf4f",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "65076b76-a3be-4059-97e4-e2b3e0fb99f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "f834b8de-e978-4da1-9f98-69141547a5c9",
        "cursor": {
          "ref": "3c056f9f-b29f-462f-b07b-542f1990bcb9",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d7e463db-a9f5-42f9-a748-9fc519993a01"
        },
        "item": {
          "id": "f834b8de-e978-4da1-9f98-69141547a5c9",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7cebbac5-bfb8-443b-921e-d5e04bc34e3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "25997be2-a014-4649-93a4-aff9ca5d9328",
        "cursor": {
          "ref": "60c35c29-4a9b-43a1-b575-ed72ad6a5781",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7c2461e1-81c9-41d7-8e86-822d603391ae"
        },
        "item": {
          "id": "25997be2-a014-4649-93a4-aff9ca5d9328",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "452b8c84-f751-4591-a577-21f013609ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "a3293453-f300-4bf3-937e-f1d7ef005b5b",
        "cursor": {
          "ref": "75e18b72-f962-49de-9a24-ffb6d22ca4e0",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3461ffcd-a6c9-4449-8cd1-e4098eff6605"
        },
        "item": {
          "id": "a3293453-f300-4bf3-937e-f1d7ef005b5b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6d9f3a8f-fe40-4d2d-82ad-87169038e983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "a6019230-ffae-47c6-acf1-c8b1636908fc",
        "cursor": {
          "ref": "9126fcdb-3851-482e-9dc8-c0aee23c9928",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d325c5fc-a347-46a4-b240-7c4ac0e0c0b9"
        },
        "item": {
          "id": "a6019230-ffae-47c6-acf1-c8b1636908fc",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "2af4bd5f-840c-4f01-b540-e0c8ce67f9c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "3171642f-aa75-45cc-a91b-b6249fedc58e",
        "cursor": {
          "ref": "149fce0e-d7d4-4e06-99b8-3b688b5dd56b",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2ca3b329-3760-4a9a-8de1-22c2fa7face3"
        },
        "item": {
          "id": "3171642f-aa75-45cc-a91b-b6249fedc58e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "16c09d8b-c349-4345-8610-765e5df71b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "f925c66c-aaae-4867-8f2e-e1ce8a189979",
        "cursor": {
          "ref": "952cc980-54a2-478a-9ceb-252856b827fe",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "93d40ea4-dc51-4fbf-b76d-526e8a3d27ad"
        },
        "item": {
          "id": "f925c66c-aaae-4867-8f2e-e1ce8a189979",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "8c8852ea-e770-4c2b-b794-1571ff61ef2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "3388a8a8-5d34-4243-a645-99f2a392f321",
        "cursor": {
          "ref": "b393c37f-9c6b-49ee-be53-94a964189121",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e72dbfb9-8ef8-4f47-bb95-33d71b20089d"
        },
        "item": {
          "id": "3388a8a8-5d34-4243-a645-99f2a392f321",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8211bc10-da84-42f9-9d2e-3b39df85e1b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "b7de3ccd-49d4-4b15-87bf-f0c62f3af7ab",
        "cursor": {
          "ref": "ecab46f3-b4b5-4dbf-a1aa-b1426b562e45",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "5a2bb491-8cec-460e-b964-746497417068"
        },
        "item": {
          "id": "b7de3ccd-49d4-4b15-87bf-f0c62f3af7ab",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a5d371e4-1dc1-44cf-90ec-be985c1e95c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "35b6de36-1ab5-48fb-a7e7-3953897ade7a",
        "cursor": {
          "ref": "ae675e27-e207-4afc-b353-684dff0b63c2",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4b0df81c-93fb-460b-996f-70b325508c82"
        },
        "item": {
          "id": "35b6de36-1ab5-48fb-a7e7-3953897ade7a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "701baf8d-b119-4046-bbb2-cde6f3d597d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "177093ba-774f-45d0-842f-50bdce3e3dc3",
        "cursor": {
          "ref": "bfa7e052-3e01-4568-92b0-46404530ccd4",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "467ceb1b-a7f0-4005-86fa-642df26ac37f"
        },
        "item": {
          "id": "177093ba-774f-45d0-842f-50bdce3e3dc3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "50e4eaeb-1e58-4c43-b18e-28baebbc9b1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "3d53af77-7e6d-479c-97d5-90241e0a8efe",
        "cursor": {
          "ref": "ec4a1931-89da-4b61-989b-f64fe20085c1",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "32e69c5c-02fb-45b8-86b0-3348e38a5787"
        },
        "item": {
          "id": "3d53af77-7e6d-479c-97d5-90241e0a8efe",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a29da90b-fcc0-4fc4-8f30-cf3dc7c79c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "93fd7e47-f0da-4414-af14-7dbf1e0556f1",
        "cursor": {
          "ref": "2bbf760e-802e-4f18-bfff-b72f5e854f6f",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7510d45a-6a9e-4f66-88a5-c4da52d805bf"
        },
        "item": {
          "id": "93fd7e47-f0da-4414-af14-7dbf1e0556f1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "079f9c04-76a0-4249-a7ec-7f5fd0967579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "bbdce95f-030c-443d-930c-cfc8ba600e50",
        "cursor": {
          "ref": "5384e204-8c67-45e8-81c0-a38b3a16d2d4",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f8466e91-7a3b-4210-987f-bff5e269e870"
        },
        "item": {
          "id": "bbdce95f-030c-443d-930c-cfc8ba600e50",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "9965bee5-0897-4a72-b9a9-7070d4ea92a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "1fc9199c-6fef-4736-bf7d-8fd06a644623",
        "cursor": {
          "ref": "191d8f87-5412-4c83-8035-cb4a1281aa43",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "64aad73a-81e4-4f4b-b828-ddffa0e20e7b"
        },
        "item": {
          "id": "1fc9199c-6fef-4736-bf7d-8fd06a644623",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "331225e8-7cf8-450b-99a8-a7804c1dd93b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "7db083c7-37aa-468f-bcf7-8e35bae074ca",
        "cursor": {
          "ref": "30fc7150-9d55-4819-a98a-c59908050914",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "7d1d8b4a-4357-4f6b-b31b-f252f9f5980a"
        },
        "item": {
          "id": "7db083c7-37aa-468f-bcf7-8e35bae074ca",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2971620a-a909-4ddc-90f2-aa06a3c2d9fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "a09b441c-dd81-4814-ae9c-94729c8172ab",
        "cursor": {
          "ref": "ea9496d2-fffc-4a0c-b940-133f14c8b7ca",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8dcbf491-41ae-4533-98f5-9336ae442cf3"
        },
        "item": {
          "id": "a09b441c-dd81-4814-ae9c-94729c8172ab",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "7a9faca4-04b6-4d8a-acba-45785b960265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "4e76bf1e-f1c9-43d5-8d22-b646a13e8801",
        "cursor": {
          "ref": "3798385c-57a9-4aa6-910d-3920ecc5b2d8",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1a678658-7e5c-4877-a46a-0133a48a327b"
        },
        "item": {
          "id": "4e76bf1e-f1c9-43d5-8d22-b646a13e8801",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2d5a3231-fddc-4fd4-8b9e-3f291b55c765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "acbc6e59-5478-4d92-9b2f-cbde150e9317",
        "cursor": {
          "ref": "d5ee5656-09a8-4bdd-a12c-27b3f1b1d328",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "16a4cf22-a718-46d1-b10d-11079a19627d"
        },
        "item": {
          "id": "acbc6e59-5478-4d92-9b2f-cbde150e9317",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "85cd3f22-31f6-4042-bf94-e23208322f84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "0ced0e74-ab09-489b-beb7-de5ee1c485d6",
        "cursor": {
          "ref": "743a8954-68b1-4594-ad23-686301f62fe5",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2af75ab3-4f6e-4a24-a8df-a22b77ca0a14"
        },
        "item": {
          "id": "0ced0e74-ab09-489b-beb7-de5ee1c485d6",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1e902a0c-1a39-4d58-bc1c-b0c69db4e451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "3cc4e255-b386-4d8c-bb94-c4d10b43be19",
        "cursor": {
          "ref": "b4369f59-0d12-462e-979a-339452407c29",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "862728cf-d3d0-45b3-a81a-80d6808660d1"
        },
        "item": {
          "id": "3cc4e255-b386-4d8c-bb94-c4d10b43be19",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "17442373-46d5-4d81-8600-40c495cf57ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "1781aa1c-ec7a-46a6-99db-1bf9c519f13b",
        "cursor": {
          "ref": "97549a00-3082-4b4f-b99f-32c40bf1db4c",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "b2ea2303-c624-44be-8b2f-e0707fed4a93"
        },
        "item": {
          "id": "1781aa1c-ec7a-46a6-99db-1bf9c519f13b",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "21c2bdc8-8299-4560-860a-2ed643fb9eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "367524dc-e036-4a62-af85-edcb33905d3e",
        "cursor": {
          "ref": "f3863012-170f-4393-a030-71c6bf2ad123",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "cd293425-5e51-4558-8115-bcf92ec17189"
        },
        "item": {
          "id": "367524dc-e036-4a62-af85-edcb33905d3e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "c8c2afe4-39ef-47ce-ae25-b3aa4c988d2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "7af216a5-8c82-483a-b5d2-b7792d811328",
        "cursor": {
          "ref": "312da9b6-88cf-4248-8f43-d11389696bbc",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "26d4c1b8-be46-43cd-a124-80556e4454d8"
        },
        "item": {
          "id": "7af216a5-8c82-483a-b5d2-b7792d811328",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f7db4975-a55e-4449-bd32-d842dfa0b61d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "17ff9634-18bf-4f3e-89a1-f1a87f1d5548",
        "cursor": {
          "ref": "4fb3afdd-31c9-4781-a306-8a0ad842037c",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4a196e39-f092-4093-b7cc-cad98fef5088"
        },
        "item": {
          "id": "17ff9634-18bf-4f3e-89a1-f1a87f1d5548",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "96aaaa1c-5a85-4037-82f7-387756cc9b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "b372e3a8-0650-40ec-a401-03c5968e01e6",
        "cursor": {
          "ref": "482b5d91-12b6-40e2-a450-6b01dd4babc4",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "6d373d16-5044-407f-99d5-e2df957070ab"
        },
        "item": {
          "id": "b372e3a8-0650-40ec-a401-03c5968e01e6",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "04916525-3999-4c2f-825b-7d4c7ea86f4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "9a524836-73c9-480c-a005-d1d412e0f90f",
        "cursor": {
          "ref": "a9dad94c-5a17-4132-a32e-9692105fc11a",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "dcd7b687-547b-4656-94cf-df71166af653"
        },
        "item": {
          "id": "9a524836-73c9-480c-a005-d1d412e0f90f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f5fd417a-f73a-4fc5-bc4b-5f81a22050d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "bf694bc6-7b0a-46ed-ab47-f9d4ce80fcb2",
        "cursor": {
          "ref": "081cdb63-ff3a-412a-a4b6-ab40e9c1d31c",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1cdd779d-e1e0-4ba8-a654-9a9b1536a2a7"
        },
        "item": {
          "id": "bf694bc6-7b0a-46ed-ab47-f9d4ce80fcb2",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ff437b8a-55f3-4eaf-8a52-31d0de22ccc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "5f2b4574-45ea-4a76-a5d5-601d34f90d5d",
        "cursor": {
          "ref": "dcff467f-e460-42fd-b43f-7fe12b39be84",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c8c3c3df-c212-40df-b336-75a96c829050"
        },
        "item": {
          "id": "5f2b4574-45ea-4a76-a5d5-601d34f90d5d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "14478925-2c7d-4fe3-96e1-c6f1dd0494b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "2ec2850c-1bef-431e-93ba-f70ec3a95740",
        "cursor": {
          "ref": "4a7b2101-ae88-4779-b1a9-033074a2bd35",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "22d5d583-dfb7-4427-b471-7d72ff7e45c5"
        },
        "item": {
          "id": "2ec2850c-1bef-431e-93ba-f70ec3a95740",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e2086c8f-d74e-4754-aa3c-aaa82a2bf7a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "9695ee46-c66c-49a8-b0db-85a2970bae7f",
        "cursor": {
          "ref": "da986b24-619b-4063-89f3-526872fa41f8",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "af204776-09e4-4cda-a14b-5ab176f9554c"
        },
        "item": {
          "id": "9695ee46-c66c-49a8-b0db-85a2970bae7f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "2439ece0-1648-4341-a4ac-c33faab715fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "79aa4fe1-bb05-4f79-95e6-d2bc7695519e",
        "cursor": {
          "ref": "cbe0473e-876a-4105-9147-080796ce3c1f",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "79357900-4ec7-4b76-809a-e62b89eeea0d"
        },
        "item": {
          "id": "79aa4fe1-bb05-4f79-95e6-d2bc7695519e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "43bacb02-2bf8-453d-9179-f699def779f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "332d156f-1e6a-46c4-b0ae-93957522235a",
        "cursor": {
          "ref": "ec3274e2-a15b-4dec-bed9-9811acb53d9a",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "32c36c19-862b-4c12-9971-aa5b2364f368"
        },
        "item": {
          "id": "332d156f-1e6a-46c4-b0ae-93957522235a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8e185c93-50da-4400-aa64-458ce2a91f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "7bd85a94-320b-4dc5-89b9-3eea389c89f9",
        "cursor": {
          "ref": "f1ee7791-4f7a-4c75-a961-b832fcab5621",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "db0e61bc-bf4d-4b84-90b2-53619f9f0755"
        },
        "item": {
          "id": "7bd85a94-320b-4dc5-89b9-3eea389c89f9",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "07be1fbd-389b-494a-adfa-af51c3651f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "ab89eae9-1c01-43ed-857f-426d8e4fe931",
        "cursor": {
          "ref": "854100b9-5bda-45c8-a8af-bd096aaf979d",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "fec22a80-51f2-4d4b-ae1f-5bacb2d6eaaa"
        },
        "item": {
          "id": "ab89eae9-1c01-43ed-857f-426d8e4fe931",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "7a6c5187-8f02-4519-96a1-70638bde973e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "e38c46f1-c91d-4994-bb85-0548a18e798e",
        "cursor": {
          "ref": "e6bc021b-01f8-4dc6-977b-76c3deedc088",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "6e57cd65-dcca-4fb4-b83d-8c30d52b7fa8"
        },
        "item": {
          "id": "e38c46f1-c91d-4994-bb85-0548a18e798e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a3a0393f-ab36-4e9d-8823-81f0f2f544ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "3f9b3601-0895-48bc-87cc-44aa8cc99118",
        "cursor": {
          "ref": "0cdf3f0c-1dee-439c-858e-4fb94e5a9545",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b3ee6d1e-f91f-4364-a96f-f1ef65f60f6d"
        },
        "item": {
          "id": "3f9b3601-0895-48bc-87cc-44aa8cc99118",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ae6a1173-5a81-459c-bd00-7faf88759fb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "2b41a1ba-dd8e-4034-a4cc-7204db648450",
        "cursor": {
          "ref": "e9710600-6858-44ba-bdcd-f82864006184",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a0995f17-a1a6-453e-a22f-d18dcce73e2c"
        },
        "item": {
          "id": "2b41a1ba-dd8e-4034-a4cc-7204db648450",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1057024e-4df4-47b9-88a7-1106749be3d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "f8378597-11d5-4669-8872-56e60bfe1213",
        "cursor": {
          "ref": "422c867f-6e05-4b4f-9395-a51565585b14",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "2125d364-8ae6-4947-aeab-3704e6ee4de8"
        },
        "item": {
          "id": "f8378597-11d5-4669-8872-56e60bfe1213",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "900a0202-5225-4306-9999-51cdd654782a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "70663e7c-65fa-440d-978b-1f82560ee48e",
        "cursor": {
          "ref": "aabfda06-d7c4-411e-8a6a-8140f70ffea1",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7da35a1e-798e-426c-8156-c02d6b60f7e4"
        },
        "item": {
          "id": "70663e7c-65fa-440d-978b-1f82560ee48e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c6a15140-1f33-4a9f-ae17-88701a200b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "cd12b893-4a55-4829-b393-da6412a53a27",
        "cursor": {
          "ref": "879b802e-1347-4106-a3b4-6b60701cb497",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f55cc9a9-4b76-42a7-a9d6-08b05c659d00"
        },
        "item": {
          "id": "cd12b893-4a55-4829-b393-da6412a53a27",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "98c774e8-6269-422c-8d4b-eb185d2de363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "eb3b0c34-6038-400e-b9cc-a9c484a9e6fc",
        "cursor": {
          "ref": "b79feb38-115f-4b06-84fd-7070332af7af",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "bcc61b72-627c-4638-8099-73de2aef73b2"
        },
        "item": {
          "id": "eb3b0c34-6038-400e-b9cc-a9c484a9e6fc",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e68cb980-032a-437d-9eef-7e15608511c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "77d8bdda-330f-4fd3-aa4d-fc768029c3f1",
        "cursor": {
          "ref": "2fd79ad5-15fd-4eee-a0f1-bff60f8c031d",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9883b824-3b58-4899-9ac8-d15d15255a49"
        },
        "item": {
          "id": "77d8bdda-330f-4fd3-aa4d-fc768029c3f1",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "55237e7b-0055-4f49-8fb4-8813bf26a9b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "49a15923-b459-4852-813c-7389283a79c6",
        "cursor": {
          "ref": "df55030e-2fee-4d18-b8a1-50d0c8a96588",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "22d012e4-b925-4486-a742-a712f315bdad"
        },
        "item": {
          "id": "49a15923-b459-4852-813c-7389283a79c6",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "837bc092-67fc-40c7-9f51-ed26182ea4c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "2bfca452-c2e0-47cc-bb1e-ecdbdede2ad2",
        "cursor": {
          "ref": "99fbe232-9aea-4884-bd78-ca4aacaaff2f",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c72a627a-9711-4123-9bd4-1a737ca68dc7"
        },
        "item": {
          "id": "2bfca452-c2e0-47cc-bb1e-ecdbdede2ad2",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5593b197-e451-49b4-a9d4-394955838ec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "fbad2b7a-0963-4571-a5fe-a3c0efc3a3b4",
        "cursor": {
          "ref": "feba662e-f910-485d-8bb4-127fedd3f719",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "740f8668-fa88-4199-8eb1-e96fc591f52c"
        },
        "item": {
          "id": "fbad2b7a-0963-4571-a5fe-a3c0efc3a3b4",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "2fa5975d-0686-446a-8771-f3d3d50fdf6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "02b66f1f-374a-4592-aa65-7ec315f66243",
        "cursor": {
          "ref": "85ff25aa-5066-4551-81d7-ec14d0bf53dd",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e0e36941-5579-4c0b-a1c2-7a8fdf982fe2"
        },
        "item": {
          "id": "02b66f1f-374a-4592-aa65-7ec315f66243",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5f977685-c9eb-4ec9-a3d9-87299f63eae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "661c7bc1-0d5d-41b1-a010-106aa252185d",
        "cursor": {
          "ref": "0ee53f5d-da01-41df-9ae6-015f08652751",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "fed9611d-d3ae-4c71-a491-dbde84dc70fb"
        },
        "item": {
          "id": "661c7bc1-0d5d-41b1-a010-106aa252185d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1c19bf08-6816-426e-ac43-a06231c88dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "b06e70bc-b5eb-4353-92d7-15105329a35e",
        "cursor": {
          "ref": "291b48a3-abe9-4f6c-a482-5b8d58930b78",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "530b762d-aed4-4995-a46c-e6e4daba2579"
        },
        "item": {
          "id": "b06e70bc-b5eb-4353-92d7-15105329a35e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c6a9d0bb-ce52-4ddb-a7b7-7762a09321b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "3fb1db52-33c4-4510-9462-e3479b1b76ea",
        "cursor": {
          "ref": "d7f1d4d0-5e93-4c2a-b7cb-bba9df035c1a",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "87064dd0-6521-470d-868d-36d00759f27a"
        },
        "item": {
          "id": "3fb1db52-33c4-4510-9462-e3479b1b76ea",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "65efb356-47be-4c1a-a2b8-44e5f4e37407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "3c1ff7cd-465f-4c3e-9775-27f1ab2afd4f",
        "cursor": {
          "ref": "28092da7-d1ae-44b7-bbfb-1c5f4608d316",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "eba0e8de-dca8-4e30-89f8-3efd5eda238f"
        },
        "item": {
          "id": "3c1ff7cd-465f-4c3e-9775-27f1ab2afd4f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a8f1d41f-733e-4d01-bf00-ad3dbe425759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "375ce1cb-fa60-45c7-9b69-567c79af0c54",
        "cursor": {
          "ref": "2f59e69d-278d-4ef8-aafb-0e44537cd4c4",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "0c96c9a1-7c6e-4a0b-9808-61cc9daf5087"
        },
        "item": {
          "id": "375ce1cb-fa60-45c7-9b69-567c79af0c54",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "edd9040d-2fcd-48a9-b213-a17bbd62ef03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "7a39ce79-fb95-4850-aaa7-7a53e676b564",
        "cursor": {
          "ref": "fe4614f0-8a78-4d58-8f25-a8f146867a23",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f25197e8-90c5-4eb7-a4fc-43a815015ca7"
        },
        "item": {
          "id": "7a39ce79-fb95-4850-aaa7-7a53e676b564",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a553c079-18f0-4cd4-9c92-a76a478511f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "fcffd2c9-a628-402f-90c1-71f303244b78",
        "cursor": {
          "ref": "1e4394ec-3364-474a-865e-67e766d07241",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a0c46b0a-3829-4c78-983b-ba0fc7a4638b"
        },
        "item": {
          "id": "fcffd2c9-a628-402f-90c1-71f303244b78",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "95f4ff99-0f30-4f36-8ab2-701045e8f4c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "00af72b7-1cb7-4a59-aab8-a3a0ef84dba4",
        "cursor": {
          "ref": "df1c451d-7515-49bf-97c0-231d90f8493f",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2aa2531a-3310-4097-b510-cb40b9f9e7d6"
        },
        "item": {
          "id": "00af72b7-1cb7-4a59-aab8-a3a0ef84dba4",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f5cdc80c-c8f3-4a37-aaf4-17ab092c2974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "9b9807db-1593-4891-8363-63d72d47378f",
        "cursor": {
          "ref": "f52a2e44-f13b-4f13-bd3b-310e6ad35d8e",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "40474fde-1ec8-4b6d-be35-6daea62162cf"
        },
        "item": {
          "id": "9b9807db-1593-4891-8363-63d72d47378f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "67d42d07-45c6-4510-84fc-028fe6754214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "a5b159a8-fb4d-478d-828e-2ed903905017",
        "cursor": {
          "ref": "c6557156-e98d-4fd5-82d0-bbd1f917018d",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "94275079-24f2-4a83-9e8b-f13f0402ac14"
        },
        "item": {
          "id": "a5b159a8-fb4d-478d-828e-2ed903905017",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "de835a48-6aed-427a-8efa-b8026c5f8ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "6a9e5ddb-c810-48fd-9e8c-67968c66a334",
        "cursor": {
          "ref": "ae97305f-0f26-4026-9558-8452c097a902",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4a1ff79d-1d2f-406f-bc4d-4d3453d27db4"
        },
        "item": {
          "id": "6a9e5ddb-c810-48fd-9e8c-67968c66a334",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0b4bbae4-28ed-43c4-b9e7-6a4b7ca711e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "88661b56-7827-48f0-b784-dd1b90c016fa",
        "cursor": {
          "ref": "1606a998-e10b-4c1f-bcb1-9a068285b479",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "bbaf6de7-5b95-4ab2-8b5d-31a3eefc3d83"
        },
        "item": {
          "id": "88661b56-7827-48f0-b784-dd1b90c016fa",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b7ede243-ab27-4db3-bbe5-ddb6dfb67e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "cb5e45bf-3854-4ba5-8db9-d3680b5a0b81",
        "cursor": {
          "ref": "76eff14f-95c1-4b16-8b9a-579d7c921a4b",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "732c96eb-379f-4da3-9ca2-74b668e2c12d"
        },
        "item": {
          "id": "cb5e45bf-3854-4ba5-8db9-d3680b5a0b81",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "da103f24-8ce7-462b-bc7e-d5b1d4391bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "ee571ede-22f0-40d1-ba2a-c29ee38da2ef",
        "cursor": {
          "ref": "ca24481c-de9e-4163-a0d5-87950e9ca465",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "241dcc8c-aeab-40a1-ac80-5461bd150565"
        },
        "item": {
          "id": "ee571ede-22f0-40d1-ba2a-c29ee38da2ef",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5c6428d5-58d6-4dab-b59c-4ce273fa9869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "9f3b35ee-c987-46a1-862e-3c65ec34f12b",
        "cursor": {
          "ref": "0c919af5-1bd6-46b5-9528-ea131d054cdc",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "675438f1-0039-4174-82c8-2a475fcce35e"
        },
        "item": {
          "id": "9f3b35ee-c987-46a1-862e-3c65ec34f12b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ddec5c30-c630-4532-a7a2-291d5df43715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "e323bab1-a214-4f83-9ac4-69365797d5d2",
        "cursor": {
          "ref": "29300573-5685-479b-9e24-d359330db9bc",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "afaf104f-fc32-48b0-bb1f-7e82ee2fb40f"
        },
        "item": {
          "id": "e323bab1-a214-4f83-9ac4-69365797d5d2",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "714eeefa-45ee-4bbe-9ea6-8ca3a8baee34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "060043f1-2513-4e04-bb8d-f4694936730c",
        "cursor": {
          "ref": "90c9ef1d-ec9a-4e73-b48c-3f0bb11f2285",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c064b0d2-013a-407b-b1f3-0010e505c897"
        },
        "item": {
          "id": "060043f1-2513-4e04-bb8d-f4694936730c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7d81d652-1ae0-4d9b-bcbd-ec4925ecc4f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "b2aaaf6a-a99a-4c3c-b485-9a9ff656c8f5",
        "cursor": {
          "ref": "c0d243b9-99b8-40c2-8666-6a988befcb4b",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "41cfe396-3082-4732-92c2-26a7d32a7fec"
        },
        "item": {
          "id": "b2aaaf6a-a99a-4c3c-b485-9a9ff656c8f5",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f45d55b4-cee9-4df5-9967-52094ceacac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "fda55be5-cc77-4ad4-b67d-56d6994d84cc",
        "cursor": {
          "ref": "dd5d6eb2-306f-4910-b165-b0f6f9ad87bf",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d34ef2c1-73fc-44d8-ad60-168c15438199"
        },
        "item": {
          "id": "fda55be5-cc77-4ad4-b67d-56d6994d84cc",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "fde86a03-ac77-40e4-abb8-e389af88e10a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "cacd236e-1d62-4dfd-ae1e-b5a579f76fe3",
        "cursor": {
          "ref": "b535a6eb-f8a5-439c-8d71-f6864f86138e",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "df4f71cd-cfae-4861-8268-85edb1986280"
        },
        "item": {
          "id": "cacd236e-1d62-4dfd-ae1e-b5a579f76fe3",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ce725f66-9703-4487-8ca1-33accec22d32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "c081e2fb-6702-4ad1-b147-d3f2c7070643",
        "cursor": {
          "ref": "f64aa54c-a47d-4400-9682-2dad08f0b751",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b1effbe2-fd4c-4bbd-a9df-b097e3b4125a"
        },
        "item": {
          "id": "c081e2fb-6702-4ad1-b147-d3f2c7070643",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ad589885-660d-4f47-904b-202d688301f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "f253fb94-1647-447a-9094-c31b9c7da80b",
        "cursor": {
          "ref": "c94ce485-c920-4965-a957-8522a132c791",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c678af14-be5e-4d5a-bc1a-8c0ff6d81d6b"
        },
        "item": {
          "id": "f253fb94-1647-447a-9094-c31b9c7da80b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "48aaaf0c-9ffc-41d5-9a4d-4b35e2793466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "a6616ef1-676f-437b-8eaf-d177613df126",
        "cursor": {
          "ref": "98dba1e0-e133-4ceb-bd3c-e319af6f19b7",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "75ddf81c-e166-451e-a002-382f52548618"
        },
        "item": {
          "id": "a6616ef1-676f-437b-8eaf-d177613df126",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "20206b46-47ce-416b-80e5-d928fd410a18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "706783cf-2875-463a-b3a1-5348b43c1ac3",
        "cursor": {
          "ref": "cc98ab56-4587-4490-8622-546c4dcf0dae",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "1998cec7-dd9a-41e8-ae7b-b89e4246e414"
        },
        "item": {
          "id": "706783cf-2875-463a-b3a1-5348b43c1ac3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4cb49229-579f-444a-8bc6-2cc4b54d94a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "301dc51a-d11f-4ce3-adf4-d490d532a964",
        "cursor": {
          "ref": "be929a1c-5631-4728-9e07-d748cacfc15d",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "58db8c81-ffbe-4fdf-b02d-6eb94bac4635"
        },
        "item": {
          "id": "301dc51a-d11f-4ce3-adf4-d490d532a964",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "5cc4e95e-36ca-4505-9884-925d6a6662dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "8fceb0be-1492-4c63-aa58-44cfa276ac60",
        "cursor": {
          "ref": "28556102-e395-40ad-96b3-4dd04a62eccb",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "056863ed-293a-4e2e-b738-2a870eb9f69d"
        },
        "item": {
          "id": "8fceb0be-1492-4c63-aa58-44cfa276ac60",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "51c84b6c-0a62-497b-9ff5-0a101c139854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:243)"
            }
          }
        ]
      },
      {
        "id": "9c5f8337-5889-4160-80c1-093667a330f0",
        "cursor": {
          "ref": "6f2b62e5-1673-4b1b-aa11-73f64b919eed",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f07544e8-c192-4230-8e8b-2dccc5a8a3e1"
        },
        "item": {
          "id": "9c5f8337-5889-4160-80c1-093667a330f0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8cbcf594-adf0-4298-ac09-a7fcc49e6a77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "4a2248af-2423-4bdb-977e-9fb474570357",
        "cursor": {
          "ref": "8d4aff3a-d9ab-4f71-97b5-c4bd26edf87e",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "dd00c748-4865-4b12-8677-fcfde4a1a543"
        },
        "item": {
          "id": "4a2248af-2423-4bdb-977e-9fb474570357",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "92506fa1-8419-4bea-bbca-027df7dca453",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ee607f-dcba-45e8-9f58-48183c76366e",
        "cursor": {
          "ref": "d20ad858-c9a6-447d-97be-2689c954280a",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "11e2c7e4-cdaf-4fef-99df-2c5c7f893b6a"
        },
        "item": {
          "id": "42ee607f-dcba-45e8-9f58-48183c76366e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "766e59df-4fb2-4d3d-a911-f1d9043d4ea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "6c390487-533a-42ee-9deb-ddc34d57889e",
        "cursor": {
          "ref": "9a6d700e-f95b-420d-824d-fa26719c5135",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3001823a-a08f-49ee-8e26-b3e9116d8408"
        },
        "item": {
          "id": "6c390487-533a-42ee-9deb-ddc34d57889e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1a7a1619-cddb-4e72-9328-c12dda9025e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "6c390487-533a-42ee-9deb-ddc34d57889e",
        "cursor": {
          "ref": "9a6d700e-f95b-420d-824d-fa26719c5135",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3001823a-a08f-49ee-8e26-b3e9116d8408"
        },
        "item": {
          "id": "6c390487-533a-42ee-9deb-ddc34d57889e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1a7a1619-cddb-4e72-9328-c12dda9025e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "6c390487-533a-42ee-9deb-ddc34d57889e",
        "cursor": {
          "ref": "9a6d700e-f95b-420d-824d-fa26719c5135",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3001823a-a08f-49ee-8e26-b3e9116d8408"
        },
        "item": {
          "id": "6c390487-533a-42ee-9deb-ddc34d57889e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1a7a1619-cddb-4e72-9328-c12dda9025e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "243c6a98-925c-4b20-8126-c4c4891f395f",
        "cursor": {
          "ref": "3972c586-f3a6-4f84-a3a5-fdd995408e33",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d001a53a-7658-4a49-829d-5c7667801e74"
        },
        "item": {
          "id": "243c6a98-925c-4b20-8126-c4c4891f395f",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "a9493208-67ab-4b11-b874-92dcdbaaa86d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "e0eafefe-7523-41e0-a487-09e4ad019507",
        "cursor": {
          "ref": "6a08f903-b696-4161-8cda-470a8518b0f8",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7345de24-5171-4cd9-9a88-91c8b9e93707"
        },
        "item": {
          "id": "e0eafefe-7523-41e0-a487-09e4ad019507",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bb2f6b89-b55e-4543-9001-5557f42eeea0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "e0eafefe-7523-41e0-a487-09e4ad019507",
        "cursor": {
          "ref": "6a08f903-b696-4161-8cda-470a8518b0f8",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7345de24-5171-4cd9-9a88-91c8b9e93707"
        },
        "item": {
          "id": "e0eafefe-7523-41e0-a487-09e4ad019507",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bb2f6b89-b55e-4543-9001-5557f42eeea0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "d6feeee2-028e-40b8-8078-ae088ebec25e",
        "cursor": {
          "ref": "b2cd063b-0acc-4414-b0d2-1669ff25ca97",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "379d988b-e3f3-4634-939c-0516e742db33"
        },
        "item": {
          "id": "d6feeee2-028e-40b8-8078-ae088ebec25e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "acedb52e-a41c-4ef0-9cba-ef41182be635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 87
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "094f942b-a239-469f-b93d-686f4f03e046",
        "cursor": {
          "ref": "704ee8c0-cdbc-4ebc-b498-6123065c1b5d",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e856b26f-960d-4d56-b419-814db6420d6c"
        },
        "item": {
          "id": "094f942b-a239-469f-b93d-686f4f03e046",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6dbebd32-073a-4058-9500-79af16b34074",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "094f942b-a239-469f-b93d-686f4f03e046",
        "cursor": {
          "ref": "704ee8c0-cdbc-4ebc-b498-6123065c1b5d",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e856b26f-960d-4d56-b419-814db6420d6c"
        },
        "item": {
          "id": "094f942b-a239-469f-b93d-686f4f03e046",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6dbebd32-073a-4058-9500-79af16b34074",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "7d499fa8-0310-4d5b-a155-f6f96a051422",
        "cursor": {
          "ref": "59e37bc2-fa1b-4881-9f88-edd5107130f8",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "824bd6af-008d-4515-a4a5-c805b5e54dab"
        },
        "item": {
          "id": "7d499fa8-0310-4d5b-a155-f6f96a051422",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "7d3cfaf8-4e81-4151-91f4-b73f8722e3ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 97
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}