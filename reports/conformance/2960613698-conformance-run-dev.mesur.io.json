{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fd9d7f34-c00e-4be0-b19e-290c702db949",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d412382b-403b-4de8-932c-25356167d854",
            "name": "Positive Testing",
            "item": [
              {
                "id": "12079998-20f3-4533-a243-f41a078b370b",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b95d3a9c-61db-4674-b9d9-6b4a0f24c31f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4d8e6176-91a4-4244-acc8-ec56aed4662d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "4cddc793-9f15-412e-909f-103382b0505f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "07e9db0f-511c-44b8-9953-2e3f5883b70a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dc38b3d5-c908-406d-ae9d-ecdcc38461bc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dc8a67a1-a2e6-4e5a-93e6-0b3e910010c6",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e9ef6b1-a597-4ba3-ae7b-12edd1ebb426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9819193-fc32-4293-b68d-fbd25124e0ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a920c692-6790-40b0-afe9-c6d64453b39a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9912691-500a-4d85-b934-493185b79f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef137faa-3ad4-49e2-af66-b29b3aa54be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c1a863-d3cf-41f5-8165-f774ecd22b0b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e78b08-5073-4d3a-9959-adb805b9b273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0be44e00-dc3c-4a08-ba9a-6a3a581f30bf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9f753162-179c-4bec-a97b-f6432f452146",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5b1d92db-aa57-40ba-bbb4-5d7f5cea55f2",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78d4295-d7e5-42a5-9158-bb1f6b143677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c9c8470-310e-48c6-ad3e-706ab3dfdee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fcf284c-329e-4cfd-a481-cb3b85735df8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f10ca81d-0d69-4d11-983e-784877472508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b83496d-0c2a-47f9-bd1b-13dc8d611c51",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68959fa5-a860-47cd-bda4-1455b951d36b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0eb845e4-5061-45b9-b472-46af127344d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "888fdd02-841c-43f2-80b6-871d0b256e47",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "75ac0032-9c7b-49b9-b824-a0bf5dfeea32"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "381b277c-6833-4d59-998c-4d131a283ce9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ca090eea-dc1d-4b22-93b9-fa1e567e0472",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "14e8993b-25f8-41ff-ba97-2facb6c98162",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "75cc8e1e-f7cf-49ab-94f9-7c7993dacad0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5e7e998d-be96-4e1c-b9ba-f02478b5903d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "e149346e-47ae-46d9-9fd4-b774d11bc956"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3292a160-aa52-4707-ae7f-7d06ab219ad2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c2aaffd3-a121-4063-981c-d843c81f7fca"
            }
          }
        ]
      },
      {
        "id": "75892c83-5979-41a0-8e67-0172a9581b2a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a2bd0ac2-fe47-4e74-a604-baeb1d369721",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2cd48f30-78cf-43dd-9cdb-e5fe57cb2266",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "82696b2f-0465-443e-a4d5-6b4e8cf93638",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8257e865-f59e-4633-ae84-0acc302c5dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d90b1c0a-f5d9-4295-8e41-571e18877c77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fabab95-2d93-4971-add3-03c2be5593ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5534729-e821-465d-8caa-1a166d56ded7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5652c591-d683-4974-a896-4c576c2f8b08",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "524faf73-6170-4757-a725-f5a196f3f2ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed05e5e8-46a8-44a6-be27-11f81cd081fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfae25ed-c028-41f0-8d61-d88d6e8c36ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f35ea9db-b617-47f9-a28a-991e026af0c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854a532a-8939-4c70-be30-b3d8bedec255",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8691586-a8fe-4f18-b5f0-f6e2e3fdb7bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3314661-a905-455b-b21e-6a8f00342920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "272c9102-a248-493a-acfd-c669bda38ae4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72e6b387-a63d-4b41-8d86-547fa3755c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df97faa4-27c5-4e28-bd21-f0eed9202524",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a23ae6-77a8-452b-a800-82850f852fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34ad9a02-47b0-4bab-9408-81701da41626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73aae0c3-ae11-47d5-b034-143b0479576c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d723a6f-2a4f-4157-8e90-4f0a8a454240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653b0c1b-5cf9-469f-92a3-cd1c9eeae066",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "516e21c7-c684-4968-9a7d-8e8967e146da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba3c0180-9924-4fcc-bcfb-333945352ec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa66fd9-e0c6-4fde-97bf-794bcff1bc38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "406882f7-d4b3-402c-a2df-0f5bd02c179a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fcf1b28-bd46-410b-a3ac-91744230aa97",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a509f5-87a7-4291-a2ea-ea06d9af8a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62373336-0ed0-4861-9130-d83ef80a5ab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd726ebc-9831-46ee-ae98-d9ec115b8e11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "632ebdea-0a2e-403f-86a5-0eeee9a84d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c9768e-3e88-4b42-ba85-6b5ed2836c1a",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0049dab-481e-4528-8a39-f0cdd870206f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f2c7991-ee3b-4f07-a1b4-1092dae7906a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21de1d5f-3de4-4875-afbe-e74f23f78ed5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "486b2321-971e-4cf5-8d43-8f3c4edc20d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d995fb48-155b-4073-a1a9-c6e7fbddaf43",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f6f51f-2c6c-4dfb-8970-8b6cedb2edea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9936d87-ba5a-47b9-b3d0-78e6a6d4b47e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d99e59b0-55e0-4c71-b558-4c95b4471e42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c442c68-f12a-4879-97e0-28e82a41593c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ba1b28-67e3-49ea-8895-10cb837fce22",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f8b77c-a493-40a3-9fe2-a16dc0032f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d274396e-8e66-48e6-bac3-39c30d5f6882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901a7e0e-963a-41a7-9529-e5a2ba1927c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1aa043dc-ccfb-412d-806a-17b363e33b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f797fd0-d4fe-48fc-afa0-075ee8d3248b",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dede2773-e8cd-4a3f-b951-7ff44bd23560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ca648d-cde6-41a8-a342-5ae6e4fcef0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7022d30-befd-4c6c-b8b9-966da3cfcf50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb3201c7-3c15-4a0e-ad09-dbda528209ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8cd35b3-5662-4814-8d9b-06c89e80f9a9",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3599e7f2-4f24-48b1-8d8d-e83b9b2eb050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e97958d7-4eea-4c80-ba6b-3e0cfb20e0ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af5c30b-a472-4d81-bcf1-8b4d5716ad14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "b4d58674-6d30-49f2-a6e2-50ddbe5a9807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6a646bf-08a3-4011-ae66-0dd49f705289",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab0ffc4-1187-4205-9c5d-cdddd3150968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eb08622-0518-4b01-8d9b-12739a0894e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06de4013-47c1-4995-b254-eddb4edc272d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "8cc18d7c-2c63-4fd4-b63c-bc574f7ace1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f9a7148-293b-43e7-95c5-e00616829f6e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2c34105-254c-48e0-b7e4-e4daa7fd8205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b90f820-114e-4aa2-a724-20d7cca4a7c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0681ba58-e261-4c19-b7ad-5531308eefa3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79f1dd21-a80f-4352-b182-546609517f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fbf9dde-1e7d-455f-8e00-ff8ac30ef8a7",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d894bf15-9cc9-4aeb-b936-28855605047a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71426856-913d-46c5-ba08-412f1cb742c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8463de13-f22f-4d67-a249-111e614dd882",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db979fd9-7677-4c66-aeb2-1e95c12094bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2fc96c5-5fe4-49f6-b165-25264ed01fda",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b51050d8-fa42-42ce-a1d1-d8b11e180e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a83cbd9d-5c7b-4e3a-9741-ef1fe674f078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9a569f-b8e0-47a1-8c9b-be48fe35102d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "d1147ddb-45cc-4d84-a829-59cae02b0aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a46241-58d8-45ca-b8ef-4a7f0f0f5949",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc253ad-97c1-4143-89e7-94ee1d1ee2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ab288a-21d7-45ed-a0cd-114c03282a66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "245bc85d-76db-48ce-bffd-164ce52681b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "1cb0eea6-1d0c-4f33-a877-d214af8b58ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc694bb1-a79e-41e4-addd-922f451bf7fc",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e015b059-afdd-4032-9973-3d0f114a7c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6479dd75-ea9b-4213-b63f-38289edb7ac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1744a44-34fb-4698-bdc5-9ef2f092ed0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1de0df3b-abba-4850-bcce-946e1ad8bcf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba9918d-4559-48ce-a78a-d3214a42107b",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "660231d4-50fa-4854-b781-99f2ecee69a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ec130ba-37b2-493b-b2b2-abe1ced91fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b688926d-e16a-4e2f-a3f8-9cc2309ce915",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "700a595f-7383-4fb1-8c7c-6d654b24f004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c14271-decf-4f35-aa16-d5676cdaa52e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c755bea-09d9-43d7-948b-4ece6dc74b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c9ead4-99f6-49df-9ac5-5f04e5b54b96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "284d4246-fe2d-48f4-82eb-b7eb8987b6f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0630d1eb-b137-428c-aff7-3c5aa67d1983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d486686f-e2d6-4973-bf17-3aca3b088f90",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6579bc3d-97af-48a0-8528-4e549ca84bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "685abcba-abfc-4825-9bde-5416ca4b0969"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db11965-c9ee-4294-8d12-7ca780872812",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a14055f5-09b7-4f2f-83ae-87763c97a767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534a09df-9383-44f1-ae8c-267a619bbf72",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4295242-9089-4b40-a336-8afff332eca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dd98eca-855f-4e00-bdaf-348c15a0de42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c37058-bc6d-4e5b-a3bf-27d1b3d6bbb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be a string or an object",
                            "rawBody.credential.credentialSubject = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "387753f4-a594-40de-89af-43d50cadeba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3393df0f-20a3-4300-8842-3f961861408d",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0009b99-9ded-41fb-8932-cad74a9416b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c814f6ce-36e1-4160-91a9-cc5c62aaf523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c46e87-021b-4bbd-ab7e-a2ceeb26e87d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63871133-7825-4442-b07f-ad2fc7bab009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f84a89f-ae1c-434d-8a32-e84b00e58bb8",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "835044f2-e41f-41ee-9504-1bd10a787a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b07d635-2f5a-4775-9601-20c5d15b9086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3302fe0-0fc0-471f-95bc-6947a36dd30a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e606753a-090b-431d-9d0b-a9247a6e01b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd835b3-a167-42ff-ab6d-a42ef28a2080",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3bf1388-8f0a-4e20-816e-5f79c955c4e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71309e4f-d1c1-42a7-9049-dc0536256418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00fc4526-7326-44c4-9daf-4c8fec59ff6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb049337-39e0-44f8-843c-67e65fabd121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c87ae2-054c-402b-bbbf-ecbbd6d75234",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c9a696-b5b6-4d13-b8bf-d6f00cb6d990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4200c0-75df-4241-8bfa-61985191c85d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e4c31bb-f93f-4a85-96ec-b8c0e3dd4903",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61ad82f8-0f79-4559-862a-12f80e81f8ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8da7dfd0-abd9-4567-a895-e93a03e64ffa",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc947ea-0973-49b4-a0e5-0086ca0f628f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37d333d1-5288-4dfb-87c4-47b04ca3183c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d9eae9-58f1-4c08-ac29-028ea4b906da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "282a007f-ca25-48be-8d8a-f88508bd2087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0f48fb4-dd7b-408f-aab0-979500219c1a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "136a12c9-5c03-41c4-a86d-680fbd697387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9008232-7c10-439c-8c55-e67f4e5a022c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eaa7ac3-bfbe-4af4-884e-19b441ecdfdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35e7a179-1a20-4089-a0fb-fcdc6f3751af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730de0ec-02cf-4d07-acfd-4b64a1ccaf0e",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "633b192b-d29a-4010-98ab-447d64ab8de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c340957-1a9c-46f7-be4a-64e5f83bf350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef94e4af-e4e7-463c-9ebd-f69f928a703e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a88e82b-1cb2-4528-bcbd-3bff61cba65a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1270d6c-5909-4dba-a5e9-b450c90ef61e",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d3723e-3563-4e8c-8920-1fcc96579c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37d62846-0dbf-455d-b538-6791235ae851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c041ef-f6c0-49bc-8552-1d300b931392",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0654b0b8-32ba-4bd9-8513-3a8e4d6201ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df230791-ca35-464b-ab47-41bfd5901fac",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9795438-defb-4b82-9fba-30cfcc0915d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c448b3fd-c3b2-4174-84b1-085822539e4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1958b4a-5bb7-481b-a221-c0b3e5da5513",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05c8f981-7f5d-495b-a958-4e5150675d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89131405-3b12-4252-bcb7-6c81edcd91fb",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4400834-32aa-4606-affe-f2a6d458c5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2f30802c-ec15-4052-97ef-1d60618bf9a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e1e211-e3fc-4b80-8bd6-db83f30f3449",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eefea9c1-6df8-4382-9f93-2744b9de4d52"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "870235c3-7911-47e6-8f20-6b231c410200",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "892cf8bc-194a-4d95-8e3b-42db4c9ca294",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "894fb81e-10ab-4939-9164-53a9f1e65d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "44317004-1abd-41e2-b5a5-5ddc320c773e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d9cda23-94a0-4d17-a3dd-e63617cba537",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "702361d0-fb78-4a9d-997b-dd35b633838f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d23d02-7ec4-4148-9ec3-590b54751280",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8c54398-2122-4a12-8224-aeffb434700a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "301665e3-1e69-4a2b-a549-d361f4425b37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a8fc249-7a0e-4a1e-8f05-9703c5dbe462",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "3332726c-99f2-4cf9-8995-0292de82157d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3366b198-3593-4180-860a-10fbe197cb20",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4c1383a-16f9-4a76-a34c-fdd2eaaf4297"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b90f9cd6-b77b-4981-b1f2-1cc60565df08",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a1beab5-8f6d-4e7a-8293-ff7b469bfb2c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f2518f3e-34bf-467b-a695-4a0c3bd525bd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cf8ba3db-48c1-4f54-8211-82cc7c678816"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "12b65d88-bf90-4108-9d79-b77ccf8b1ea7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3387e6be-9866-45bd-abe6-a4e57856861d"
                }
              }
            ]
          },
          {
            "id": "147e70a9-d2e4-4d02-88b4-f9fb261dc53a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fc6fc051-69bb-4755-ae36-e4eb53e8b06f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b949fc79-7be3-4cb0-b334-271390b1f71d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dc5693c2-7e0b-4dd4-a729-5373735e8c55"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a41d2a5-7c6f-4bbc-a04a-d9245aabb8f9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "fa70af46-449a-4b30-98f4-aa0078c0124b"
                    }
                  }
                ]
              },
              {
                "id": "9f4ea47b-d646-4488-88b8-cf17a75f37d2",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a12aa5e2-e1ae-40c7-8742-c7a76826e2c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b52c624d-ba9b-422e-bb8f-49703a1dec7c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82afd48b-77d7-4b31-862b-3f93758b2988",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "e09a04fe-3d02-49da-8a05-9961c98d4fcd"
                    }
                  }
                ]
              },
              {
                "id": "a3bae735-48f0-4368-b995-d5cff13d0165",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db36b37b-f402-46fd-927d-f04c90705b75",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c578227c-0061-4af3-a5a6-a0911b7337a2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c886075b-a939-4d5f-b1b3-d6bca7effca5",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "edf1a54c-416a-49f7-b16e-bd30c1090d22"
                    }
                  }
                ]
              },
              {
                "id": "0b1001c6-ac18-4449-b962-b269c5d79223",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a447ed1-beb3-4dcf-a3ce-db9cd5552976",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "00794eaa-7ecc-400d-a778-1c7860d1cd4a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da628085-f51f-418b-9ea9-79e2b976b430",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "326f0703-a22c-45ea-8f94-5427f4d4aae6"
                    }
                  }
                ]
              },
              {
                "id": "5709483d-a179-4fa2-9656-b3c6c5fff545",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b69515a9-80d6-4d37-a3fa-1638732601a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "c1ba9cd9-f666-4578-bc0f-295f2195c6c5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ebbd9609-e958-4e36-96ca-87bcaa891a6f",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "030073fc-5d8e-4f01-8cf8-e5ce11a39838"
                    }
                  }
                ]
              },
              {
                "id": "e216fae9-00af-4ead-bf38-4451d4c27bb2",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a26790a-8e78-4fe8-bfa8-806fa84f1a96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e43ccb71-4bd6-4367-bf6b-7a60de3c088d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8b6ef24-6e2c-4ca1-8f21-b68ce79199f7",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "f4dafdd8-db2c-4024-87f2-277062d5483a"
                    }
                  }
                ]
              },
              {
                "id": "3b67751a-71c9-4e43-8837-e4f508fdbf6d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ec5a45e-d0d5-4311-b0d6-bb054ec9e0b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5153893a-48b2-4138-abaf-7ded3260503a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ceb6512-0a36-4a6f-88c7-dcd591977d54",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "1b37c75d-48b4-423a-ae10-ef06ebe55463"
                    }
                  }
                ]
              },
              {
                "id": "cc37e886-ebd7-48d1-906c-d12e761928ef",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1690155-4151-4696-bb21-e612b4aabdea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7e191c8a-9504-4f14-b434-4c0f1f87af2c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f94c1362-1753-470a-a7e9-46b58c3b6d53",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "3816d8bb-f7bc-4b13-8543-41969fe0396f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2dde93aa-b596-4280-a722-4f4031e5fccf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c0d8b186-6dbc-4db7-95a7-d18c6baa34c8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "eb4b3017-a706-4afa-b061-07d12956f093",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bbe6f942-dff4-4865-8602-f8cb98de0ccd"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f775257c-367b-4154-93d8-61f143960137",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": \"{{credential_subject}}\"",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "9e7beaf8-ea24-443e-a5e4-c300e30469cc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8cc08ae9-48f8-4220-b300-47f605f9a5c3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c5ef1948-da08-4155-bbc9-6218c80c79b3"
            }
          }
        ]
      },
      {
        "id": "dbe85c02-1fc5-4daa-a461-7384b0021de2",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2334ffbe-31c7-4c47-bf6f-64bcc723cbfa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b8fd8f84-14ec-40f0-86f0-dd7087b5a54a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8036161b-e184-4a6d-a2cc-8d0eba61e2cb",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6914f365-7ac6-43e7-93db-b03ade1728e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bde190aa-4e29-44da-aa7f-5c90a7b15b83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef54915-8a21-4def-a462-8d519033d28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc491053-a92a-4ecb-ac4e-7eb04fd18a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a7c496-ab4d-484e-8ca6-cda1ce6d2644",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a59eb7-ea97-4b29-bbc2-2d043305d9a2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "7d7f2b0f-502e-44c8-873c-0e415a691f7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce321d2-7c19-4ef7-a7aa-1f25005bd4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3772a58-d612-41f8-972a-8918c1e96b36"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1becdd4-ee79-4f36-bc7b-7f3be82bf6b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0c93556-f5ba-4904-b370-a4f0d828a2a1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce39b857-34ed-4586-8f34-9aa677b4cbcc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5c1ae55-190b-43b8-99b4-86341a30811d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a66877c5-838e-4daa-9eb6-db915d1ed1ea",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "11569c5e-e0c4-46fd-8472-d64c7e3488ad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "45238d83-c788-4726-92cb-29f131ae2691",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f33cc969-8c8b-4bbc-bd2b-2ae9493d056f"
            }
          }
        ]
      },
      {
        "id": "96424a7a-34b7-4fcc-8c3b-532ab0ac520c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7f005b86-ebc7-42e6-b8b9-7b35bb729f25",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fe0cfa86-b3ff-4cdb-b7fb-1e29f21c3820",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "12fcfae4-0f7b-4a93-84fc-2c91d5d1ac68",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8fabbf-0e11-4a6d-b89a-73cfb0537783",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "76c67849-b9ec-47b2-874a-1c232e91f02a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d5a9af-94f5-4b43-9cac-66a96eda7f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "22ddb81f-c689-41c7-80b3-c97f9895d610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dda8910-18ee-4b28-b64c-207b6d64efba",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f67ec09-f164-4a8b-8bac-0ab6075e0f80",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "ad9af5e0-ba03-4f76-8b9a-de0236975b7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c76dce-ecfc-4c84-a32d-a89e009a5978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2e8be195-678c-4304-b881-983d29ee9737"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9a9aea6-7d0b-41a5-b18d-3b19691bd6a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68f45486-e9b5-4724-8a37-fac1aed3004e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7771f63b-8647-41b1-ad50-0d0405e10024",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b7e8b0e-d883-40b7-8a0a-d7f3f628b05f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b93245b1-90cb-4273-9c99-f86ee1b991bd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "4b4bd1ec-e01b-4521-815c-81857be475a2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "50671e12-fa6a-4444-b955-ef986d62e2ac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bb3e7a55-77e1-49e1-a25d-5bc4c8e4dbf8"
            }
          }
        ]
      },
      {
        "id": "0911d190-ecc5-4450-b65d-fd3f0251c97c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7e2d0411-d7ca-484b-9437-7ec37f712b9a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b6e28253-3560-4b56-ba32-082a0e18fcd2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a5d2cab3-1ea1-4873-aafd-f458debb6f73",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd27ec6-0fa7-4a0d-b3d7-e295f788cdb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "259d5d59-9220-484c-8165-9d3f8990c579"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc07f801-1038-4eee-98ae-90818de4dedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2fe54eb1-fbb9-4949-bfd6-4c93cad54304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851c077c-4294-4a1e-8449-4e70bed8805a",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e31f51bf-5fc8-4f02-aeae-1be2d516887c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "3cb5229b-0a32-40a0-a9a5-dc12fb3d40f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c36cde-944a-4876-b0af-00199ac2b9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d0d8c81-40ba-446c-9881-bf6c6f81f0a4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a2e52f31-03d9-4795-a607-59e959fec155",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86ae35a2-b886-4d2c-90cc-9d66d422663f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f458e70-66ad-4be5-93da-8d67aed62dcf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e40be2f5-df9d-4851-b2d2-20cdeb59d667"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fda383c1-ad99-495d-aa82-d02407bbb019",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "1235927a-8f0a-405e-9a6d-0e06650c17c2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d602035d-9941-46f4-9f43-9738717d3501",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0f417261-4209-4e2e-9611-ddfedf54b77b"
            }
          }
        ]
      },
      {
        "id": "6ded371c-5576-4611-9b4f-b1dd70fd1815",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f6b7e38d-dc01-4c14-99ca-7973717ecff7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "07867f99-8b4f-418c-86a6-be6e9e77f186",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "77ce7177-9f7b-4251-83a8-093f32e1adc5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45566e3f-e389-4a66-a668-8ce71037728c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3417ceb-8e40-413a-a5a1-3051f805b1ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96a9fbd-084b-4de4-9a96-accd6f5ff50a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cbaf6d85-7eeb-4e49-889a-3b1c584dd67c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f48808-cfdf-48fc-9242-e6c0196cf8cb",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a766851b-4365-4ffd-ab7a-6fed3cb6838e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "cd3e1cb1-6f41-4826-87a2-1e483a17ce23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d3738f-23a9-436e-9f79-964a0f6ff891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d200d393-8cae-46c1-8e7a-d284635f3168"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ff7df7f-cb4e-4617-af8b-852fd62aabcc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f18baf41-59a5-414c-8f51-a2985675c11a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d7409a8-7a14-482c-9f86-46e8e936ed59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7f47395-cbd5-432e-8100-00131778c084"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "577be55c-f493-4e21-99f0-3a5ed6d8c465",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "70fdfe64-83b8-4433-969e-af9a38493e00"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "37e31016-f75c-4148-a605-210717cfec56",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8390f0df-c92b-43d8-9cb4-7509fbf95e3d"
            }
          }
        ]
      },
      {
        "id": "33beb4af-f3dd-450e-b869-f5c74bdf941c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c3e4617f-15f7-4c35-81c3-d26aff45f315",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4637175b-dbcd-44d0-bf31-2f055e0bedeb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "29482b3d-00a7-44c5-9564-d8ef4eee9d4c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ab210c-d68e-470e-942d-c9af5c3b6e07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb1b26ba-f3c6-4fd3-a095-50e407f86ccf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e452b775-5b29-420b-9aa8-9fa35c8cbd8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c55656b-4ce2-457b-98b9-36229f57a90c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8edced-ff05-4d6e-8b5d-47e4a8081939",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85cf5359-3eef-4a5e-a386-59ed3ae41243",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "a323fd39-4cad-4b84-ac0d-f728707bcb3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e512eee6-a2fd-4156-abf2-6639755b7369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4df19d2-5894-47d2-83f2-c61255a14cf7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c619531b-109c-4782-8463-e2ac544dec43",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "80776f6d-7635-4dd5-adbf-0f7689b2d866"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0c5aed47-1038-40df-bb2d-6fafe4771ddd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad7b20e8-8140-43cb-8e76-c65a70746ed5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3e5857c0-2740-49ff-aab0-534c71e22454",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "7395735c-5767-4981-8b46-532a3a0760ab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e92137ee-2bcb-4023-9d53-fef4ae141b14",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0a260dc8-48db-4e24-86c0-0a81df7a6380"
            }
          }
        ]
      },
      {
        "id": "1a2386e6-9b51-4867-b314-266fa6ed09a4",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "1f612076-7722-41da-8c77-c10057ab555e",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 447,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 107,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 58,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 121,
        "pending": 0,
        "failed": 19
      },
      "testScripts": {
        "total": 226,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 221,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 62.92523364485982,
      "responseMin": 4,
      "responseMax": 668,
      "responseSd": 128.53391137209258,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1661907445536,
      "completed": 1661907455163
    },
    "executions": [
      {
        "id": "12079998-20f3-4533-a243-f41a078b370b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 58,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9d2f6ef9-21e8-437a-aa1e-00edcf388f91",
          "httpRequestId": "b7e6ec9d-c8b8-4d8c-a848-c2e33c2ed94b"
        },
        "item": {
          "id": "12079998-20f3-4533-a243-f41a078b370b",
          "name": "did_json"
        },
        "response": {
          "id": "bf99e147-7338-491f-9ef7-59e1f8fdadbe",
          "status": "OK",
          "code": 200,
          "responseTime": 287,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc8a67a1-a2e6-4e5a-93e6-0b3e910010c6",
        "cursor": {
          "ref": "599a8f2c-f86e-4e1a-96ee-7b2a2eb155bd",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1f33f455-8c87-4d9b-8d15-2e30623df032"
        },
        "item": {
          "id": "dc8a67a1-a2e6-4e5a-93e6-0b3e910010c6",
          "name": "did:invalid"
        },
        "response": {
          "id": "c05a1da8-4cbd-4f8a-8ad7-ced6790197a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc8a67a1-a2e6-4e5a-93e6-0b3e910010c6",
        "cursor": {
          "ref": "599a8f2c-f86e-4e1a-96ee-7b2a2eb155bd",
          "length": 58,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1f33f455-8c87-4d9b-8d15-2e30623df032"
        },
        "item": {
          "id": "dc8a67a1-a2e6-4e5a-93e6-0b3e910010c6",
          "name": "did:invalid"
        },
        "response": {
          "id": "c05a1da8-4cbd-4f8a-8ad7-ced6790197a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a920c692-6790-40b0-afe9-c6d64453b39a",
        "cursor": {
          "ref": "a0cd361e-97e2-41b6-bb05-563c34949059",
          "length": 58,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b55f610d-895d-4a6a-9725-b3b44cf112b8"
        },
        "item": {
          "id": "a920c692-6790-40b0-afe9-c6d64453b39a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "94de7e0d-a8c1-48e6-b96a-aabc0469b5e8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 67,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c1a863-d3cf-41f5-8165-f774ecd22b0b",
        "cursor": {
          "ref": "ff2efff1-0967-4254-b50c-e433f8e48d9a",
          "length": 58,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9da68179-ca7a-4d98-bb70-68890438d278"
        },
        "item": {
          "id": "04c1a863-d3cf-41f5-8165-f774ecd22b0b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5a5cbb26-c4e6-46fc-b7ac-e75d6ae342f2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 6,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b1d92db-aa57-40ba-bbb4-5d7f5cea55f2",
        "cursor": {
          "ref": "75742c94-5ecd-4c4a-8701-8fbe01b1d7e8",
          "length": 58,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b922a20f-5ced-4477-b91c-465ee3e1e3f7"
        },
        "item": {
          "id": "5b1d92db-aa57-40ba-bbb4-5d7f5cea55f2",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9fdb346b-6325-4e17-9c0d-8e5c71d1c14c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 6,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b83496d-0c2a-47f9-bd1b-13dc8d611c51",
        "cursor": {
          "ref": "a0cdd603-51f1-43cf-ac98-2793faf54849",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4ffa9e46-e7d4-4e66-a2d9-4c8fbb6e71c1"
        },
        "item": {
          "id": "2b83496d-0c2a-47f9-bd1b-13dc8d611c51",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "a3cca484-a280-42e8-b2cd-d62b9e6904db",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 7,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b83496d-0c2a-47f9-bd1b-13dc8d611c51",
        "cursor": {
          "ref": "a0cdd603-51f1-43cf-ac98-2793faf54849",
          "length": 58,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4ffa9e46-e7d4-4e66-a2d9-4c8fbb6e71c1"
        },
        "item": {
          "id": "2b83496d-0c2a-47f9-bd1b-13dc8d611c51",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "a3cca484-a280-42e8-b2cd-d62b9e6904db",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 7,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca090eea-dc1d-4b22-93b9-fa1e567e0472",
        "cursor": {
          "ref": "bb22f2a7-b5e8-4f04-a9ac-8f5b4e1ca3c7",
          "length": 58,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "44bc18f5-e422-40ef-a655-c39a8a162e9b"
        },
        "item": {
          "id": "ca090eea-dc1d-4b22-93b9-fa1e567e0472",
          "name": "identifiers"
        },
        "response": {
          "id": "c1037933-ba5e-4caf-a341-b663d874e1a5",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82696b2f-0465-443e-a4d5-6b4e8cf93638",
        "cursor": {
          "ref": "273a74ab-2601-444d-8472-e3d2d4fa9d9c",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f20cdda2-925b-4f5e-9197-95653c786c30"
        },
        "item": {
          "id": "82696b2f-0465-443e-a4d5-6b4e8cf93638",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5113ff12-6624-4961-afb2-b8764c94ef6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82696b2f-0465-443e-a4d5-6b4e8cf93638",
        "cursor": {
          "ref": "273a74ab-2601-444d-8472-e3d2d4fa9d9c",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f20cdda2-925b-4f5e-9197-95653c786c30"
        },
        "item": {
          "id": "82696b2f-0465-443e-a4d5-6b4e8cf93638",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5113ff12-6624-4961-afb2-b8764c94ef6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82696b2f-0465-443e-a4d5-6b4e8cf93638",
        "cursor": {
          "ref": "273a74ab-2601-444d-8472-e3d2d4fa9d9c",
          "length": 58,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f20cdda2-925b-4f5e-9197-95653c786c30"
        },
        "item": {
          "id": "82696b2f-0465-443e-a4d5-6b4e8cf93638",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5113ff12-6624-4961-afb2-b8764c94ef6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5652c591-d683-4974-a896-4c576c2f8b08",
        "cursor": {
          "ref": "6caabd74-3504-40f4-866c-fb6eb6ee6576",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "187a6fde-7b92-40eb-96a0-fe2de64f669c"
        },
        "item": {
          "id": "5652c591-d683-4974-a896-4c576c2f8b08",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a1ba9bfd-e017-4987-8da3-a5e0c7289ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5652c591-d683-4974-a896-4c576c2f8b08",
        "cursor": {
          "ref": "6caabd74-3504-40f4-866c-fb6eb6ee6576",
          "length": 58,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "187a6fde-7b92-40eb-96a0-fe2de64f669c"
        },
        "item": {
          "id": "5652c591-d683-4974-a896-4c576c2f8b08",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a1ba9bfd-e017-4987-8da3-a5e0c7289ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854a532a-8939-4c70-be30-b3d8bedec255",
        "cursor": {
          "ref": "abb809e5-102c-4deb-bd42-a0ff38116aa7",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "340d8685-19da-4b68-a167-892e5f157bbb"
        },
        "item": {
          "id": "854a532a-8939-4c70-be30-b3d8bedec255",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "53f84a13-98ca-4be1-bf7e-3dbea8d80378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854a532a-8939-4c70-be30-b3d8bedec255",
        "cursor": {
          "ref": "abb809e5-102c-4deb-bd42-a0ff38116aa7",
          "length": 58,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "340d8685-19da-4b68-a167-892e5f157bbb"
        },
        "item": {
          "id": "854a532a-8939-4c70-be30-b3d8bedec255",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "53f84a13-98ca-4be1-bf7e-3dbea8d80378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df97faa4-27c5-4e28-bd21-f0eed9202524",
        "cursor": {
          "ref": "1c90b26a-28d2-4f27-aae3-bd7c9178bf6a",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c613ed96-95c8-4ffe-9835-7256edb8f9cf"
        },
        "item": {
          "id": "df97faa4-27c5-4e28-bd21-f0eed9202524",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "e48fbca5-d92e-4ff6-8681-ee8cadc28615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df97faa4-27c5-4e28-bd21-f0eed9202524",
        "cursor": {
          "ref": "1c90b26a-28d2-4f27-aae3-bd7c9178bf6a",
          "length": 58,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c613ed96-95c8-4ffe-9835-7256edb8f9cf"
        },
        "item": {
          "id": "df97faa4-27c5-4e28-bd21-f0eed9202524",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "e48fbca5-d92e-4ff6-8681-ee8cadc28615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "653b0c1b-5cf9-469f-92a3-cd1c9eeae066",
        "cursor": {
          "ref": "db940e37-a310-49e3-a949-b86dabb3a82e",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "08e4b7dd-1717-4b94-9e8e-10be756c520c"
        },
        "item": {
          "id": "653b0c1b-5cf9-469f-92a3-cd1c9eeae066",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "67858f43-68c1-4513-89dc-6435e48c82d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "653b0c1b-5cf9-469f-92a3-cd1c9eeae066",
        "cursor": {
          "ref": "db940e37-a310-49e3-a949-b86dabb3a82e",
          "length": 58,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "08e4b7dd-1717-4b94-9e8e-10be756c520c"
        },
        "item": {
          "id": "653b0c1b-5cf9-469f-92a3-cd1c9eeae066",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "67858f43-68c1-4513-89dc-6435e48c82d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fcf1b28-bd46-410b-a3ac-91744230aa97",
        "cursor": {
          "ref": "8a5f0787-76ce-4d54-a0d8-1e4dc61387fc",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "61ecd586-436d-471c-80b7-c827ff95378b"
        },
        "item": {
          "id": "4fcf1b28-bd46-410b-a3ac-91744230aa97",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3f6181c0-1e4a-450e-a908-0d6745311c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fcf1b28-bd46-410b-a3ac-91744230aa97",
        "cursor": {
          "ref": "8a5f0787-76ce-4d54-a0d8-1e4dc61387fc",
          "length": 58,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "61ecd586-436d-471c-80b7-c827ff95378b"
        },
        "item": {
          "id": "4fcf1b28-bd46-410b-a3ac-91744230aa97",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3f6181c0-1e4a-450e-a908-0d6745311c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c9768e-3e88-4b42-ba85-6b5ed2836c1a",
        "cursor": {
          "ref": "54d987bd-7d93-44a8-a0e2-33482a55dde1",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "efb70d33-a9bb-4744-bbe1-a80fe23c563f"
        },
        "item": {
          "id": "53c9768e-3e88-4b42-ba85-6b5ed2836c1a",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "1195c341-42f0-459b-aafd-a3340ab2ff39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c9768e-3e88-4b42-ba85-6b5ed2836c1a",
        "cursor": {
          "ref": "54d987bd-7d93-44a8-a0e2-33482a55dde1",
          "length": 58,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "efb70d33-a9bb-4744-bbe1-a80fe23c563f"
        },
        "item": {
          "id": "53c9768e-3e88-4b42-ba85-6b5ed2836c1a",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "1195c341-42f0-459b-aafd-a3340ab2ff39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d995fb48-155b-4073-a1a9-c6e7fbddaf43",
        "cursor": {
          "ref": "e0e16e05-3c50-4055-a5c3-024fcd630507",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "201eb1e3-9995-48c0-8006-fc125367a8b0"
        },
        "item": {
          "id": "d995fb48-155b-4073-a1a9-c6e7fbddaf43",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "309e6f20-bc2a-439f-bf1b-2285b965e6b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d995fb48-155b-4073-a1a9-c6e7fbddaf43",
        "cursor": {
          "ref": "e0e16e05-3c50-4055-a5c3-024fcd630507",
          "length": 58,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "201eb1e3-9995-48c0-8006-fc125367a8b0"
        },
        "item": {
          "id": "d995fb48-155b-4073-a1a9-c6e7fbddaf43",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "309e6f20-bc2a-439f-bf1b-2285b965e6b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ba1b28-67e3-49ea-8895-10cb837fce22",
        "cursor": {
          "ref": "ff056a0b-3f95-46c5-9315-99407bcf760e",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8ac54d04-09b2-4217-96f1-4bae00b402b8"
        },
        "item": {
          "id": "66ba1b28-67e3-49ea-8895-10cb837fce22",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "91b1adce-8bba-437c-8350-882906030f1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ba1b28-67e3-49ea-8895-10cb837fce22",
        "cursor": {
          "ref": "ff056a0b-3f95-46c5-9315-99407bcf760e",
          "length": 58,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8ac54d04-09b2-4217-96f1-4bae00b402b8"
        },
        "item": {
          "id": "66ba1b28-67e3-49ea-8895-10cb837fce22",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "91b1adce-8bba-437c-8350-882906030f1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f797fd0-d4fe-48fc-afa0-075ee8d3248b",
        "cursor": {
          "ref": "2f0fb9d6-059e-4c03-bb4f-0066fda61d40",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5aeecf9a-0bc6-44b1-83eb-d4371220f61d"
        },
        "item": {
          "id": "3f797fd0-d4fe-48fc-afa0-075ee8d3248b",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "8167ba82-6e35-4354-9c16-5148146ce9e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f797fd0-d4fe-48fc-afa0-075ee8d3248b",
        "cursor": {
          "ref": "2f0fb9d6-059e-4c03-bb4f-0066fda61d40",
          "length": 58,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5aeecf9a-0bc6-44b1-83eb-d4371220f61d"
        },
        "item": {
          "id": "3f797fd0-d4fe-48fc-afa0-075ee8d3248b",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "8167ba82-6e35-4354-9c16-5148146ce9e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8cd35b3-5662-4814-8d9b-06c89e80f9a9",
        "cursor": {
          "ref": "8b4b607f-e8a2-4c70-a57b-6dee5727750e",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6293ca92-ef63-436b-8ba1-e607eecb4360"
        },
        "item": {
          "id": "e8cd35b3-5662-4814-8d9b-06c89e80f9a9",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "71023b71-9e92-41b5-8391-ff4bed0959e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8cd35b3-5662-4814-8d9b-06c89e80f9a9",
        "cursor": {
          "ref": "8b4b607f-e8a2-4c70-a57b-6dee5727750e",
          "length": 58,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6293ca92-ef63-436b-8ba1-e607eecb4360"
        },
        "item": {
          "id": "e8cd35b3-5662-4814-8d9b-06c89e80f9a9",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "71023b71-9e92-41b5-8391-ff4bed0959e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6a646bf-08a3-4011-ae66-0dd49f705289",
        "cursor": {
          "ref": "5bf813e4-1a90-4780-95d9-a10fb6e5c86b",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0a070cff-7f94-462a-94bb-f067d1cba0b2"
        },
        "item": {
          "id": "c6a646bf-08a3-4011-ae66-0dd49f705289",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0165243f-e258-4c4c-896c-edd04b2c0e77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6a646bf-08a3-4011-ae66-0dd49f705289",
        "cursor": {
          "ref": "5bf813e4-1a90-4780-95d9-a10fb6e5c86b",
          "length": 58,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0a070cff-7f94-462a-94bb-f067d1cba0b2"
        },
        "item": {
          "id": "c6a646bf-08a3-4011-ae66-0dd49f705289",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0165243f-e258-4c4c-896c-edd04b2c0e77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f9a7148-293b-43e7-95c5-e00616829f6e",
        "cursor": {
          "ref": "e734ed87-f409-46a8-bbf4-ff52c12e36d0",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2f017a9a-f364-47a2-badf-5007a162937c"
        },
        "item": {
          "id": "9f9a7148-293b-43e7-95c5-e00616829f6e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "17100ddf-93e9-4821-9c5b-616905b29323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f9a7148-293b-43e7-95c5-e00616829f6e",
        "cursor": {
          "ref": "e734ed87-f409-46a8-bbf4-ff52c12e36d0",
          "length": 58,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2f017a9a-f364-47a2-badf-5007a162937c"
        },
        "item": {
          "id": "9f9a7148-293b-43e7-95c5-e00616829f6e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "17100ddf-93e9-4821-9c5b-616905b29323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fbf9dde-1e7d-455f-8e00-ff8ac30ef8a7",
        "cursor": {
          "ref": "022e850d-61e5-4691-b089-77822f24600e",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "bd9a3ba4-193f-4fe4-b5eb-ddbdf778a9b2"
        },
        "item": {
          "id": "1fbf9dde-1e7d-455f-8e00-ff8ac30ef8a7",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "ed9ffd70-12d6-43a7-87c8-904aa4e17a56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fbf9dde-1e7d-455f-8e00-ff8ac30ef8a7",
        "cursor": {
          "ref": "022e850d-61e5-4691-b089-77822f24600e",
          "length": 58,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "bd9a3ba4-193f-4fe4-b5eb-ddbdf778a9b2"
        },
        "item": {
          "id": "1fbf9dde-1e7d-455f-8e00-ff8ac30ef8a7",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "ed9ffd70-12d6-43a7-87c8-904aa4e17a56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2fc96c5-5fe4-49f6-b165-25264ed01fda",
        "cursor": {
          "ref": "793bc40d-c541-4483-97c6-266f04eec4cd",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4506f46f-06a1-4837-b653-dc626b63bdd2"
        },
        "item": {
          "id": "e2fc96c5-5fe4-49f6-b165-25264ed01fda",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "8cd1cef3-5e66-47e7-8269-b00007b5a981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2fc96c5-5fe4-49f6-b165-25264ed01fda",
        "cursor": {
          "ref": "793bc40d-c541-4483-97c6-266f04eec4cd",
          "length": 58,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4506f46f-06a1-4837-b653-dc626b63bdd2"
        },
        "item": {
          "id": "e2fc96c5-5fe4-49f6-b165-25264ed01fda",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "8cd1cef3-5e66-47e7-8269-b00007b5a981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a46241-58d8-45ca-b8ef-4a7f0f0f5949",
        "cursor": {
          "ref": "40dbe4c1-decf-43bc-96b3-bbe0937b9fdf",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "10c74c1b-0e52-422a-8689-6470905db131"
        },
        "item": {
          "id": "17a46241-58d8-45ca-b8ef-4a7f0f0f5949",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "bcbdf598-45c9-4673-a48b-39362a096e31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a46241-58d8-45ca-b8ef-4a7f0f0f5949",
        "cursor": {
          "ref": "40dbe4c1-decf-43bc-96b3-bbe0937b9fdf",
          "length": 58,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "10c74c1b-0e52-422a-8689-6470905db131"
        },
        "item": {
          "id": "17a46241-58d8-45ca-b8ef-4a7f0f0f5949",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "bcbdf598-45c9-4673-a48b-39362a096e31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc694bb1-a79e-41e4-addd-922f451bf7fc",
        "cursor": {
          "ref": "e246a427-923d-4051-aa77-4e26bf1be2da",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3703dcb3-b48c-46c2-b62d-669a0d16bb4d"
        },
        "item": {
          "id": "cc694bb1-a79e-41e4-addd-922f451bf7fc",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2fc04c83-c73b-4739-8f07-fd6116d70953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc694bb1-a79e-41e4-addd-922f451bf7fc",
        "cursor": {
          "ref": "e246a427-923d-4051-aa77-4e26bf1be2da",
          "length": 58,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3703dcb3-b48c-46c2-b62d-669a0d16bb4d"
        },
        "item": {
          "id": "cc694bb1-a79e-41e4-addd-922f451bf7fc",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2fc04c83-c73b-4739-8f07-fd6116d70953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba9918d-4559-48ce-a78a-d3214a42107b",
        "cursor": {
          "ref": "87e855aa-c11a-428c-a82c-53d55dca89f5",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "cb3c26c3-245a-4a5e-9b6d-cfac35bb63ed"
        },
        "item": {
          "id": "1ba9918d-4559-48ce-a78a-d3214a42107b",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "231a2fd5-2f8a-4688-a9f7-2180bb0e9bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba9918d-4559-48ce-a78a-d3214a42107b",
        "cursor": {
          "ref": "87e855aa-c11a-428c-a82c-53d55dca89f5",
          "length": 58,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "cb3c26c3-245a-4a5e-9b6d-cfac35bb63ed"
        },
        "item": {
          "id": "1ba9918d-4559-48ce-a78a-d3214a42107b",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "231a2fd5-2f8a-4688-a9f7-2180bb0e9bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c14271-decf-4f35-aa16-d5676cdaa52e",
        "cursor": {
          "ref": "c2d83477-1c01-4392-8b66-ca1b304275a7",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8fcc5f05-5cb7-4e72-9640-2ddaf351391a"
        },
        "item": {
          "id": "a6c14271-decf-4f35-aa16-d5676cdaa52e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "dbdb3e7a-ad41-4f77-a1b7-974b8c63225f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c14271-decf-4f35-aa16-d5676cdaa52e",
        "cursor": {
          "ref": "c2d83477-1c01-4392-8b66-ca1b304275a7",
          "length": 58,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8fcc5f05-5cb7-4e72-9640-2ddaf351391a"
        },
        "item": {
          "id": "a6c14271-decf-4f35-aa16-d5676cdaa52e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "dbdb3e7a-ad41-4f77-a1b7-974b8c63225f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d486686f-e2d6-4973-bf17-3aca3b088f90",
        "cursor": {
          "ref": "61d938bd-c0a3-463e-ba50-fc6445279c90",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "1caaea91-7170-429f-9066-9577213fd217"
        },
        "item": {
          "id": "d486686f-e2d6-4973-bf17-3aca3b088f90",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "cc9c9e96-73c0-4e57-8eb3-af84d7fc5456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d486686f-e2d6-4973-bf17-3aca3b088f90",
        "cursor": {
          "ref": "61d938bd-c0a3-463e-ba50-fc6445279c90",
          "length": 58,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "1caaea91-7170-429f-9066-9577213fd217"
        },
        "item": {
          "id": "d486686f-e2d6-4973-bf17-3aca3b088f90",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "cc9c9e96-73c0-4e57-8eb3-af84d7fc5456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534a09df-9383-44f1-ae8c-267a619bbf72",
        "cursor": {
          "ref": "42121a67-f802-480d-b19c-ca895530f478",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "cf49d4b0-9c0c-473f-9b4c-6f9bf782db70"
        },
        "item": {
          "id": "534a09df-9383-44f1-ae8c-267a619bbf72",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "a4b89f07-677b-4829-8b85-3ecdcc7f0d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534a09df-9383-44f1-ae8c-267a619bbf72",
        "cursor": {
          "ref": "42121a67-f802-480d-b19c-ca895530f478",
          "length": 58,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "cf49d4b0-9c0c-473f-9b4c-6f9bf782db70"
        },
        "item": {
          "id": "534a09df-9383-44f1-ae8c-267a619bbf72",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "a4b89f07-677b-4829-8b85-3ecdcc7f0d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3393df0f-20a3-4300-8842-3f961861408d",
        "cursor": {
          "ref": "bba6c412-2a30-45a9-9322-7e57d41dc679",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a63206eb-f31c-4b14-a09a-d7afd1e5554c"
        },
        "item": {
          "id": "3393df0f-20a3-4300-8842-3f961861408d",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "9c4203b7-d5f3-4efa-96de-de8ecaf802c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3393df0f-20a3-4300-8842-3f961861408d",
        "cursor": {
          "ref": "bba6c412-2a30-45a9-9322-7e57d41dc679",
          "length": 58,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a63206eb-f31c-4b14-a09a-d7afd1e5554c"
        },
        "item": {
          "id": "3393df0f-20a3-4300-8842-3f961861408d",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "9c4203b7-d5f3-4efa-96de-de8ecaf802c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f84a89f-ae1c-434d-8a32-e84b00e58bb8",
        "cursor": {
          "ref": "24758c25-1b36-4fad-a742-65385e2b0ba6",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "847333e9-5de6-4c8f-839d-343849cc1262"
        },
        "item": {
          "id": "9f84a89f-ae1c-434d-8a32-e84b00e58bb8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "dfb8e43b-4204-4de0-960c-550e67381067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f84a89f-ae1c-434d-8a32-e84b00e58bb8",
        "cursor": {
          "ref": "24758c25-1b36-4fad-a742-65385e2b0ba6",
          "length": 58,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "847333e9-5de6-4c8f-839d-343849cc1262"
        },
        "item": {
          "id": "9f84a89f-ae1c-434d-8a32-e84b00e58bb8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "dfb8e43b-4204-4de0-960c-550e67381067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcd835b3-a167-42ff-ab6d-a42ef28a2080",
        "cursor": {
          "ref": "862f889d-8e4e-4dca-ae70-4e80885d0fe2",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6144d6cf-9aee-4efd-8f01-61325ebf744f"
        },
        "item": {
          "id": "bcd835b3-a167-42ff-ab6d-a42ef28a2080",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "b33a4cd1-ce8e-41c9-a27f-99556fd5f6ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 395
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcd835b3-a167-42ff-ab6d-a42ef28a2080",
        "cursor": {
          "ref": "862f889d-8e4e-4dca-ae70-4e80885d0fe2",
          "length": 58,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6144d6cf-9aee-4efd-8f01-61325ebf744f"
        },
        "item": {
          "id": "bcd835b3-a167-42ff-ab6d-a42ef28a2080",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "b33a4cd1-ce8e-41c9-a27f-99556fd5f6ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 395
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c87ae2-054c-402b-bbbf-ecbbd6d75234",
        "cursor": {
          "ref": "f29ff6a1-25e0-4518-9168-c364800675e7",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e499464a-aea4-4cab-8395-b56444252039"
        },
        "item": {
          "id": "77c87ae2-054c-402b-bbbf-ecbbd6d75234",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "014389f0-5736-4304-888e-97af864cb06b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c87ae2-054c-402b-bbbf-ecbbd6d75234",
        "cursor": {
          "ref": "f29ff6a1-25e0-4518-9168-c364800675e7",
          "length": 58,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e499464a-aea4-4cab-8395-b56444252039"
        },
        "item": {
          "id": "77c87ae2-054c-402b-bbbf-ecbbd6d75234",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "014389f0-5736-4304-888e-97af864cb06b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8da7dfd0-abd9-4567-a895-e93a03e64ffa",
        "cursor": {
          "ref": "cdbbac3f-4458-4c13-b526-a52558dcdc8e",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4dddafea-384d-4517-996e-85f89f709583"
        },
        "item": {
          "id": "8da7dfd0-abd9-4567-a895-e93a03e64ffa",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "a4c7d035-a7c1-40bc-9cfd-549d02583063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8da7dfd0-abd9-4567-a895-e93a03e64ffa",
        "cursor": {
          "ref": "cdbbac3f-4458-4c13-b526-a52558dcdc8e",
          "length": 58,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4dddafea-384d-4517-996e-85f89f709583"
        },
        "item": {
          "id": "8da7dfd0-abd9-4567-a895-e93a03e64ffa",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "a4c7d035-a7c1-40bc-9cfd-549d02583063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0f48fb4-dd7b-408f-aab0-979500219c1a",
        "cursor": {
          "ref": "f9ed7c29-1bbb-42ec-83e9-bb31a2adbeea",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8065d267-94e3-40e8-bd63-ed605a7ec585"
        },
        "item": {
          "id": "c0f48fb4-dd7b-408f-aab0-979500219c1a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "38eb6a18-b688-4b43-8b27-7c7b0e5813c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 644,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0f48fb4-dd7b-408f-aab0-979500219c1a",
        "cursor": {
          "ref": "f9ed7c29-1bbb-42ec-83e9-bb31a2adbeea",
          "length": 58,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8065d267-94e3-40e8-bd63-ed605a7ec585"
        },
        "item": {
          "id": "c0f48fb4-dd7b-408f-aab0-979500219c1a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "38eb6a18-b688-4b43-8b27-7c7b0e5813c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 644,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "730de0ec-02cf-4d07-acfd-4b64a1ccaf0e",
        "cursor": {
          "ref": "194d20a4-07bb-4fba-8719-1af5296c2bf8",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "abfebafb-9196-4206-ac6c-279cd1dc579c"
        },
        "item": {
          "id": "730de0ec-02cf-4d07-acfd-4b64a1ccaf0e",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "b463b582-3371-4cdb-8724-ed939efb3a94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "730de0ec-02cf-4d07-acfd-4b64a1ccaf0e",
        "cursor": {
          "ref": "194d20a4-07bb-4fba-8719-1af5296c2bf8",
          "length": 58,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "abfebafb-9196-4206-ac6c-279cd1dc579c"
        },
        "item": {
          "id": "730de0ec-02cf-4d07-acfd-4b64a1ccaf0e",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "b463b582-3371-4cdb-8724-ed939efb3a94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1270d6c-5909-4dba-a5e9-b450c90ef61e",
        "cursor": {
          "ref": "e007bd53-275a-4a7d-8d0f-e8fc0ec4d936",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4398090b-dcef-4a1e-9750-18acb41facf6"
        },
        "item": {
          "id": "a1270d6c-5909-4dba-a5e9-b450c90ef61e",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "d13a0c05-8b50-4611-9519-ac0aee6dc54d",
          "status": "Created",
          "code": 201,
          "responseTime": 668,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "a1270d6c-5909-4dba-a5e9-b450c90ef61e",
        "cursor": {
          "ref": "e007bd53-275a-4a7d-8d0f-e8fc0ec4d936",
          "length": 58,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4398090b-dcef-4a1e-9750-18acb41facf6"
        },
        "item": {
          "id": "a1270d6c-5909-4dba-a5e9-b450c90ef61e",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "d13a0c05-8b50-4611-9519-ac0aee6dc54d",
          "status": "Created",
          "code": 201,
          "responseTime": 668,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "df230791-ca35-464b-ab47-41bfd5901fac",
        "cursor": {
          "ref": "62557814-f526-44ab-b843-88e00ec484bd",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f2231d50-82e9-4dd5-9d73-e9c63ee19c21"
        },
        "item": {
          "id": "df230791-ca35-464b-ab47-41bfd5901fac",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "9bfb2280-2e4d-4c7c-8135-16799ede1431",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "df230791-ca35-464b-ab47-41bfd5901fac",
        "cursor": {
          "ref": "62557814-f526-44ab-b843-88e00ec484bd",
          "length": 58,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f2231d50-82e9-4dd5-9d73-e9c63ee19c21"
        },
        "item": {
          "id": "df230791-ca35-464b-ab47-41bfd5901fac",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "9bfb2280-2e4d-4c7c-8135-16799ede1431",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "89131405-3b12-4252-bcb7-6c81edcd91fb",
        "cursor": {
          "ref": "f38b765c-e3f2-4b97-a54d-1a584b33a0ff",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9d5dd011-8f67-4021-b22a-341dca8c400c"
        },
        "item": {
          "id": "89131405-3b12-4252-bcb7-6c81edcd91fb",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "5cf3e90a-3752-4ca8-8c6a-f4a2b59a0d84",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "89131405-3b12-4252-bcb7-6c81edcd91fb",
        "cursor": {
          "ref": "f38b765c-e3f2-4b97-a54d-1a584b33a0ff",
          "length": 58,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9d5dd011-8f67-4021-b22a-341dca8c400c"
        },
        "item": {
          "id": "89131405-3b12-4252-bcb7-6c81edcd91fb",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "5cf3e90a-3752-4ca8-8c6a-f4a2b59a0d84",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "892cf8bc-194a-4d95-8e3b-42db4c9ca294",
        "cursor": {
          "ref": "1605f598-0152-43e6-a459-d017af5ace88",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4adf35c2-6af6-409f-a237-7a9ce2f5cf93"
        },
        "item": {
          "id": "892cf8bc-194a-4d95-8e3b-42db4c9ca294",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3eb32681-633d-4013-8446-086661afe025",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 8,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "892cf8bc-194a-4d95-8e3b-42db4c9ca294",
        "cursor": {
          "ref": "1605f598-0152-43e6-a459-d017af5ace88",
          "length": 58,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4adf35c2-6af6-409f-a237-7a9ce2f5cf93"
        },
        "item": {
          "id": "892cf8bc-194a-4d95-8e3b-42db4c9ca294",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3eb32681-633d-4013-8446-086661afe025",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 8,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d23d02-7ec4-4148-9ec3-590b54751280",
        "cursor": {
          "ref": "56891d45-580c-45b2-97a4-a2791baca941",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6ed58f1a-9c56-4197-959e-cc43eafc0170"
        },
        "item": {
          "id": "41d23d02-7ec4-4148-9ec3-590b54751280",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "190ce90e-478e-46c0-a8cf-428d2704fd20",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d23d02-7ec4-4148-9ec3-590b54751280",
        "cursor": {
          "ref": "56891d45-580c-45b2-97a4-a2791baca941",
          "length": 58,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6ed58f1a-9c56-4197-959e-cc43eafc0170"
        },
        "item": {
          "id": "41d23d02-7ec4-4148-9ec3-590b54751280",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "190ce90e-478e-46c0-a8cf-428d2704fd20",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc6fc051-69bb-4755-ae36-e4eb53e8b06f",
        "cursor": {
          "ref": "5a2b2b9a-b37e-407d-aa9a-69ad45ef313e",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "19035406-b965-4c4a-af68-bf72ded30c3c"
        },
        "item": {
          "id": "fc6fc051-69bb-4755-ae36-e4eb53e8b06f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ce692b96-1ed6-4272-babc-8e2c936fac6f",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc6fc051-69bb-4755-ae36-e4eb53e8b06f",
        "cursor": {
          "ref": "5a2b2b9a-b37e-407d-aa9a-69ad45ef313e",
          "length": 58,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "19035406-b965-4c4a-af68-bf72ded30c3c"
        },
        "item": {
          "id": "fc6fc051-69bb-4755-ae36-e4eb53e8b06f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ce692b96-1ed6-4272-babc-8e2c936fac6f",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4ea47b-d646-4488-88b8-cf17a75f37d2",
        "cursor": {
          "ref": "ee965903-f665-44be-8c86-8da04d5f6043",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2f4fa751-9a95-484c-acb5-3abc2c98b10c"
        },
        "item": {
          "id": "9f4ea47b-d646-4488-88b8-cf17a75f37d2",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "33bfbac9-9a4a-4281-b32a-c8d2223d76bf",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 671
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "9f4ea47b-d646-4488-88b8-cf17a75f37d2",
        "cursor": {
          "ref": "ee965903-f665-44be-8c86-8da04d5f6043",
          "length": 58,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2f4fa751-9a95-484c-acb5-3abc2c98b10c"
        },
        "item": {
          "id": "9f4ea47b-d646-4488-88b8-cf17a75f37d2",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "33bfbac9-9a4a-4281-b32a-c8d2223d76bf",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 671
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "a3bae735-48f0-4368-b995-d5cff13d0165",
        "cursor": {
          "ref": "2b794d02-2b5d-4c95-a4f9-2a68cfe7b3d1",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "20cdd272-d5eb-4afa-9b3e-1b918ca491bf"
        },
        "item": {
          "id": "a3bae735-48f0-4368-b995-d5cff13d0165",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e709c053-d42b-4765-b816-1d93278cb050",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3bae735-48f0-4368-b995-d5cff13d0165",
        "cursor": {
          "ref": "2b794d02-2b5d-4c95-a4f9-2a68cfe7b3d1",
          "length": 58,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "20cdd272-d5eb-4afa-9b3e-1b918ca491bf"
        },
        "item": {
          "id": "a3bae735-48f0-4368-b995-d5cff13d0165",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e709c053-d42b-4765-b816-1d93278cb050",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1001c6-ac18-4449-b962-b269c5d79223",
        "cursor": {
          "ref": "d764993f-1fc3-4cbd-931c-6054a2efb14d",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "301fd2ca-9acd-4fef-aebd-0e16ad66cdb3"
        },
        "item": {
          "id": "0b1001c6-ac18-4449-b962-b269c5d79223",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "e01b2fb7-0643-4dc4-8818-c5ca61887476",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 603
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "0b1001c6-ac18-4449-b962-b269c5d79223",
        "cursor": {
          "ref": "d764993f-1fc3-4cbd-931c-6054a2efb14d",
          "length": 58,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "301fd2ca-9acd-4fef-aebd-0e16ad66cdb3"
        },
        "item": {
          "id": "0b1001c6-ac18-4449-b962-b269c5d79223",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "e01b2fb7-0643-4dc4-8818-c5ca61887476",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 603
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "5709483d-a179-4fa2-9656-b3c6c5fff545",
        "cursor": {
          "ref": "2ecd8e02-8a7e-4538-9b83-ae9c62377481",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "363e8171-788a-4236-953c-0af02a983eff"
        },
        "item": {
          "id": "5709483d-a179-4fa2-9656-b3c6c5fff545",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ad1a0fb5-601c-4599-8ca8-541976da2557",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5709483d-a179-4fa2-9656-b3c6c5fff545",
        "cursor": {
          "ref": "2ecd8e02-8a7e-4538-9b83-ae9c62377481",
          "length": 58,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "363e8171-788a-4236-953c-0af02a983eff"
        },
        "item": {
          "id": "5709483d-a179-4fa2-9656-b3c6c5fff545",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ad1a0fb5-601c-4599-8ca8-541976da2557",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e216fae9-00af-4ead-bf38-4451d4c27bb2",
        "cursor": {
          "ref": "a1a8d0ee-ee92-4735-8b9c-54b69c5f8e24",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "964bec52-eac7-49fe-b1a4-1d4aeadf7115"
        },
        "item": {
          "id": "e216fae9-00af-4ead-bf38-4451d4c27bb2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d4392123-a104-4030-bac3-a79f05d6da22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "e216fae9-00af-4ead-bf38-4451d4c27bb2",
        "cursor": {
          "ref": "a1a8d0ee-ee92-4735-8b9c-54b69c5f8e24",
          "length": 58,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "964bec52-eac7-49fe-b1a4-1d4aeadf7115"
        },
        "item": {
          "id": "e216fae9-00af-4ead-bf38-4451d4c27bb2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d4392123-a104-4030-bac3-a79f05d6da22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "3b67751a-71c9-4e43-8837-e4f508fdbf6d",
        "cursor": {
          "ref": "3864b04e-a537-4dc2-a81d-5756fe49a600",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "54efb240-6807-44df-b1b8-a73340afe4d5"
        },
        "item": {
          "id": "3b67751a-71c9-4e43-8837-e4f508fdbf6d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a4336dc1-ed56-43c1-a0a2-654dc9132160",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3b67751a-71c9-4e43-8837-e4f508fdbf6d",
        "cursor": {
          "ref": "3864b04e-a537-4dc2-a81d-5756fe49a600",
          "length": 58,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "54efb240-6807-44df-b1b8-a73340afe4d5"
        },
        "item": {
          "id": "3b67751a-71c9-4e43-8837-e4f508fdbf6d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a4336dc1-ed56-43c1-a0a2-654dc9132160",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "cc37e886-ebd7-48d1-906c-d12e761928ef",
        "cursor": {
          "ref": "e476a12d-2573-47a3-b07b-f2b88ebb08ad",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3edeb77f-8431-46e8-afc9-f5b552876be1"
        },
        "item": {
          "id": "cc37e886-ebd7-48d1-906c-d12e761928ef",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "29199a26-d3fd-49f1-9569-5b94216416f6",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "cc37e886-ebd7-48d1-906c-d12e761928ef",
        "cursor": {
          "ref": "e476a12d-2573-47a3-b07b-f2b88ebb08ad",
          "length": 58,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3edeb77f-8431-46e8-afc9-f5b552876be1"
        },
        "item": {
          "id": "cc37e886-ebd7-48d1-906c-d12e761928ef",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "29199a26-d3fd-49f1-9569-5b94216416f6",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 618
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "8036161b-e184-4a6d-a2cc-8d0eba61e2cb",
        "cursor": {
          "ref": "8a6a41f5-0492-4d10-8624-f0df9c72a442",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b1b9de33-847e-421b-8c13-0b031bcd6630"
        },
        "item": {
          "id": "8036161b-e184-4a6d-a2cc-8d0eba61e2cb",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "293ed946-5fdc-47a9-ae6e-1d19491ccf27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8036161b-e184-4a6d-a2cc-8d0eba61e2cb",
        "cursor": {
          "ref": "8a6a41f5-0492-4d10-8624-f0df9c72a442",
          "length": 58,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b1b9de33-847e-421b-8c13-0b031bcd6630"
        },
        "item": {
          "id": "8036161b-e184-4a6d-a2cc-8d0eba61e2cb",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "293ed946-5fdc-47a9-ae6e-1d19491ccf27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58a7c496-ab4d-484e-8ca6-cda1ce6d2644",
        "cursor": {
          "ref": "9dd5070f-e102-46ba-9bfb-a87343170bed",
          "length": 58,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "335063fc-8034-4642-919e-14dc55dbb2c3"
        },
        "item": {
          "id": "58a7c496-ab4d-484e-8ca6-cda1ce6d2644",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "e19290d1-ffbc-4af7-9e35-3b98581a8674",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12fcfae4-0f7b-4a93-84fc-2c91d5d1ac68",
        "cursor": {
          "ref": "b24612ca-eb73-4389-aef9-60e3fa842661",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6d26bd59-b851-426f-ba02-80a0ae9b0d43"
        },
        "item": {
          "id": "12fcfae4-0f7b-4a93-84fc-2c91d5d1ac68",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "06d63b81-011a-4794-9add-ab53cbdb5284",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12fcfae4-0f7b-4a93-84fc-2c91d5d1ac68",
        "cursor": {
          "ref": "b24612ca-eb73-4389-aef9-60e3fa842661",
          "length": 58,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6d26bd59-b851-426f-ba02-80a0ae9b0d43"
        },
        "item": {
          "id": "12fcfae4-0f7b-4a93-84fc-2c91d5d1ac68",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "06d63b81-011a-4794-9add-ab53cbdb5284",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dda8910-18ee-4b28-b64c-207b6d64efba",
        "cursor": {
          "ref": "0d00d80a-5ae0-483e-b8e1-4d1318522cc0",
          "length": 58,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1f91efee-0d9b-4fa4-9886-0135b6be3177"
        },
        "item": {
          "id": "6dda8910-18ee-4b28-b64c-207b6d64efba",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "9310bb56-c70b-4279-9a78-61e599d3835f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5d2cab3-1ea1-4873-aafd-f458debb6f73",
        "cursor": {
          "ref": "97f43a61-9a88-4f86-ba51-537fca3d82b5",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "255766c5-9035-4780-9164-11906ce59caa"
        },
        "item": {
          "id": "a5d2cab3-1ea1-4873-aafd-f458debb6f73",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "890f016f-42d6-4a39-b713-5548b6f13d90",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5d2cab3-1ea1-4873-aafd-f458debb6f73",
        "cursor": {
          "ref": "97f43a61-9a88-4f86-ba51-537fca3d82b5",
          "length": 58,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "255766c5-9035-4780-9164-11906ce59caa"
        },
        "item": {
          "id": "a5d2cab3-1ea1-4873-aafd-f458debb6f73",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "890f016f-42d6-4a39-b713-5548b6f13d90",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "851c077c-4294-4a1e-8449-4e70bed8805a",
        "cursor": {
          "ref": "37b8b59b-e3d4-440d-aef2-149476db3ff9",
          "length": 58,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "7913f6d1-af81-400d-9feb-a4cf3fa3a35d"
        },
        "item": {
          "id": "851c077c-4294-4a1e-8449-4e70bed8805a",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "1f3e903f-a722-43ed-bc1f-22ac8254ddc4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ce7177-9f7b-4251-83a8-093f32e1adc5",
        "cursor": {
          "ref": "2476532c-3be7-4932-a014-02581ffc2b58",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1f5ce47f-adc1-4a0e-8afc-a503d430f7a4"
        },
        "item": {
          "id": "77ce7177-9f7b-4251-83a8-093f32e1adc5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c5426132-9c29-4a8a-8629-0ae67e19f2bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "77ce7177-9f7b-4251-83a8-093f32e1adc5",
        "cursor": {
          "ref": "2476532c-3be7-4932-a014-02581ffc2b58",
          "length": 58,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1f5ce47f-adc1-4a0e-8afc-a503d430f7a4"
        },
        "item": {
          "id": "77ce7177-9f7b-4251-83a8-093f32e1adc5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c5426132-9c29-4a8a-8629-0ae67e19f2bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "18f48808-cfdf-48fc-9242-e6c0196cf8cb",
        "cursor": {
          "ref": "756b3854-2c5a-4fb4-82d4-f9ce47da2957",
          "length": 58,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e42295de-ec0e-49b6-af2f-42ec58479a5b"
        },
        "item": {
          "id": "18f48808-cfdf-48fc-9242-e6c0196cf8cb",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "c72d5da9-cd6d-4998-ac7b-b44533afe842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "29482b3d-00a7-44c5-9564-d8ef4eee9d4c",
        "cursor": {
          "ref": "11da0d37-eed8-4d79-a1fd-cb522cb698a5",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b5e48c6a-f3fe-4606-a5e7-1bccca56698f"
        },
        "item": {
          "id": "29482b3d-00a7-44c5-9564-d8ef4eee9d4c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "50c8174f-47c5-4ad4-bf53-a25051dd4d42",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29482b3d-00a7-44c5-9564-d8ef4eee9d4c",
        "cursor": {
          "ref": "11da0d37-eed8-4d79-a1fd-cb522cb698a5",
          "length": 58,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b5e48c6a-f3fe-4606-a5e7-1bccca56698f"
        },
        "item": {
          "id": "29482b3d-00a7-44c5-9564-d8ef4eee9d4c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "50c8174f-47c5-4ad4-bf53-a25051dd4d42",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8edced-ff05-4d6e-8b5d-47e4a8081939",
        "cursor": {
          "ref": "a57fbc8a-9b62-4ab8-a76b-77dbff4b1294",
          "length": 58,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b08a26fe-b8ae-4293-8f7e-d248f66dd4ed"
        },
        "item": {
          "id": "cb8edced-ff05-4d6e-8b5d-47e4a8081939",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "f8a18436-cdff-45d8-aa27-6765784d81a1",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 6,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}