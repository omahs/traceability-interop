{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "caf71a66-9b78-4885-ab68-dad078cf93f9",
        "name": "Clear Cache",
        "item": [
          {
            "id": "139676d0-f9ce-433c-8a39-560f1b193d90",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9968c4a4-c148-472a-a6ad-c47a06706e3a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "44555f76-fa91-4a64-8d87-878fad692a53"
                }
              }
            ]
          },
          {
            "id": "5e1629e6-71e4-4288-899c-06a6fd12e4f0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c3738f44-fb1f-4100-b4ea-e3180cc49fd7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2aeabf43-fc76-432b-a229-5dce0a40d1bb"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "14933023-d668-4cd6-a554-25b58a8361be",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a849248a-4b25-4c26-a2fb-1c4a71701370",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2a0b2970-02eb-4dc7-a231-76bb9fffae5f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36c46b69-a887-4eb0-8039-a0255e5a18c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "60612fca-36f8-469e-aed0-e0d9723486b2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c972f2cc-3f14-4c08-addd-a61a41cead8e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0444249d-fe36-4a8e-8af3-21b1a8cb2126"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d59b38d6-7ea6-496a-9cae-704205c34147",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "96de3273-6d97-4cc3-a66e-bf1c2ae227e1"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "197e25b9-d734-41cb-a985-15df10c77946",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "82e26142-f3e8-4204-8e11-624058d47411"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3ee9e761-8ba5-4358-b68c-914bde763753",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "86a8b97f-b178-424e-84f8-754c549297f6"
            }
          }
        ]
      },
      {
        "id": "918f5d72-4cc8-4e32-924a-e3695cd762ca",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9e7dc248-304c-41bb-b8d3-7356d5aaee72",
            "name": "Negative Testing",
            "item": [
              {
                "id": "83ae20a5-0868-4c17-843a-8853b6cc9160",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7db3050e-7872-43ca-a1f7-ed64b2ad0971",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad0d7e9-c515-43de-afcc-2cd30d08dffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e37eac1-60c3-4e2a-8048-2f7930f94c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e7b5ba-21f8-4937-a161-e60ff43b83c5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78cbe337-73cf-42c2-b878-88ce3443e391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "526bffcc-c6ae-4e3d-91dd-d0e4b42f5179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9c54dfe-4f2c-4acb-ba13-fb00f37757a1",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "091c62e3-43e3-4a67-86f7-833ce8b419f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "83cd571b-2ea5-49f1-a0ad-64ac3af1941a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "52da4010-4179-441a-b3f7-c8378cb6e04c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "20c0bea9-3e9b-4c8f-a873-edb4240c21f6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0151116c-21a2-4e44-bc84-404f409fce54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "55ace2a9-6db7-40c6-b14e-a1197808978b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0a671c-e550-4116-9046-1fc2ba85ef3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cea3d760-b900-4603-8158-6c91b661c48a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb73c54c-7635-4091-b4dc-8231d74ff46e",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81683598-09e4-4a03-88a4-73cd51a080c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62f076bc-5918-4fc3-89b3-ada332280f0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b13fdc1-deea-440e-82d9-756aaee2de51",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "abd8c8cb-e662-47fa-82ee-8e593c93b689"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "326e2a1b-867e-45ff-8f16-dc1bdf114fcb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c75bec19-93d5-4fd0-826e-d20f26accf9e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b08228b9-e4ef-4be9-a938-1441d17d5217",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5f4088fa-e742-4581-9307-6394b3bb5061"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "68cea8bb-24f8-4114-bbd5-2edaf13bd1b3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "6cb509b9-d039-47b7-b093-1e9239752cce"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cdea339f-cb36-4cc6-8b75-71dffc782f30",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eb5b19f6-954d-45cc-b366-77903ebd3e1f"
            }
          }
        ]
      },
      {
        "id": "7aff9c55-cdbb-4fdd-8475-96c93465dcdc",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7de2261a-bf54-4ee7-a903-0e553e072ad9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "902079b8-2600-45b4-9fb5-af504084811a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b9ef5bc3-842c-41b2-b459-1a1d56cc9afc",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "820fb5c9-e332-4382-b461-20086f2b306c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d81af4ef-214d-4041-ac2f-319705606837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716d82aa-c1dd-40c0-85b0-09db5847643c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05ad03d2-d486-44e3-9654-29a4c273a766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eacfd579-9305-4752-b173-c96761c4ab36",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b89801-df12-4a3a-bda7-9a3c6db2f764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58da40c8-93de-4dbf-ae11-09d3bd3b7d24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd1eab7-1f9e-4824-a36e-555e2697c626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c3af864-da9e-4194-9fde-f8b558fa33dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3019901-192c-49f0-b20f-8f0371130802",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70ee9dd8-208e-4563-9268-8a7988391540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b930a043-e8de-4c47-9949-e2d836edceee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4dfe2ab-87c1-413e-87bf-1b0d8459fe48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6dee12b2-1bec-4c01-bf55-d0f9dc05a79c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bad0ada-ae23-47eb-8250-4709391d0f3f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b04116ab-1129-48e2-9a3e-1d613c4d7b94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95648504-bb33-418e-91db-ec6323931f12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac8ffcb-7ec9-4ab1-9dfd-162ead06f8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f36b9ff-a1d4-47c6-b1f1-731934ffe135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbdb2fac-f9f3-470f-9bcc-4ecd3325eb77",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "643f6fc9-4306-41ce-9506-48017cb1936d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d44f263a-2039-41ec-ad43-6cae42c3f3b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4878392f-2870-4a86-bb22-90fac771403c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "27619a40-bc31-4de8-b487-b8cd7b2ffcc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590b46ba-200d-4b3f-ac91-4b6e0add3e46",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade4afc6-8b7e-4ce1-b45f-df99472d8bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6688751a-d77d-46dd-be80-efc9c5b5d44f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04024db8-2d9e-45c6-b649-63d583332256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41078e73-caf1-4860-b4d1-90d942d9d7a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e43a9d0-f526-4e57-84f8-8bde7d2f92a6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df547711-d549-4db6-acb5-fdeb6e07150b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dde767e-ca0e-4941-92eb-53d37d2e2fdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "707200a8-dbfa-4fa6-8658-4d8729c088bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf5d4704-b181-4fff-ab52-00b23de0bb9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a00d2345-0662-4238-8d55-0eec38177579",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8dc9097-4da4-44bc-b7ec-578755f214cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1a6ed1a-dfdc-4cc9-bd62-c4f3a40c06e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b5dbec-89ef-4234-bda3-804e6f2c11d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9cfcafe6-04a7-4134-a7d8-c0f083f86bc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0ad3de-ec09-42f4-a852-88935a838468",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca31371-6cc0-4837-b344-32591c0566c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98d17a40-8077-4fa7-a90c-c89e7cdd821a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edd8c83f-b12d-4d20-9c30-37774f3e8358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d746c1b-da9b-4728-80c5-a74603e9efd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f554dae-ba0c-40b5-a6c4-6c5ee5bc326c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e91d93-f424-4fd6-a875-c3cf283e2273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27887afe-bd89-4bec-b7bf-4692c8f62a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db902c43-9149-4e9c-8ec9-ba99488c511f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3efdefee-27f1-42cb-b9da-ea9c320ba3d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a73890-5567-4127-98c7-4b94c078dd3e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e1ad58-c27f-4914-a9bf-5457280fe0a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "453b4093-69b8-4ab4-b2bf-d24c0c88c34c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea154267-0e83-4650-bf0b-5aaec5b1b4a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b8fe0bd-5b46-4a38-8cfd-f90f90ffa2db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c2e43a-3a8a-41d4-ab75-da21d9a661d9",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f36c0387-ee6a-45f1-a9fc-8c96977d9395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca56f84c-f220-41ac-92d8-15e094927a1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e32be7a3-ce8a-4bd6-b7cb-6c8a975a5245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a51af5f-7636-4041-8ea4-f18dcd5c2656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e041bb92-c3ed-41de-a57a-08a1ad8e3c4f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e163a77-37ca-4731-b320-00258add0e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34c80209-0775-41d9-ba1b-c4e4b1653543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd561b82-f52b-4ea9-8449-e6dfcc1994eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f036ff75-4a52-4ca2-b6da-4c5de1941c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "764f0441-1e5a-4fa3-a666-5f2900e4d087",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13564e4a-27ad-4a9e-b971-5b632edc36ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d745c047-55cc-4e27-99ba-03207f316c5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b840ca-5463-4e90-8f4c-5a357e2f43d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "591cac83-62d3-4a7e-b3a1-ef9693c1a899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5a4545-7e3a-4133-86d0-380c8df1400e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "949aecd9-7f66-4d0e-88b6-998a8a4f69b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81fab7ba-d5ad-4bb4-901d-a60b3d0ab422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c9c1ff-e55c-4519-bf29-079ac7ff7e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2755bd7e-9a49-4e16-ab4c-560918067ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c51f5e-87b6-48c3-9644-ac28eebfb55a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca7b9ff7-a986-42c5-bc95-f83cfc7b09cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f50e53a-fe07-4ba0-b750-206ce7e3f41d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b40f0b5a-03d6-416c-98ef-6a2088494caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee71afeb-4687-405e-b300-9df66dfbe09e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c1ccf5-fac8-42f7-a1dd-4fe2014395a1",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4d9a06-873c-46ce-b365-abd587e505cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fc0d898-5ac3-4c14-b8e2-6c5e3ed0e5e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a40d19-2586-419e-a529-407f2e57768e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc73c539-9c30-4313-83df-252224e48368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b15e8c1-8a2b-446d-aca1-2937a7e88bce",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc77bb66-a59e-4ab8-9272-be646e9514a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dad4af7-ce7e-4a6d-8b65-ad7237e74f6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6748ed-349e-46bc-8e5a-1899eaa4bad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b87a14dc-bbbc-4947-b9f5-d342dab3e4d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9305360f-7035-4f36-b7f5-58b74da5613f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c47531-8c94-4469-85a0-260f08aa4ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cd71d29-3275-4236-bc48-b84fce200b8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "336e6773-54a4-463e-adf0-7e6664e695e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92ecf214-9294-409b-81db-2b0346a1cee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1977509e-d5eb-4a5f-8228-84b23289fe81",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a8f67f0-4f5e-4732-92b1-c08cc28631e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "147dfd24-cd87-4e96-91ef-a5aa6d4f36fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa794ca2-8e06-4ca5-8ff2-695ca4a0f228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d549ae93-7993-4f9e-989d-30c1228adba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d847b3b-0819-43c3-b9a9-cc2835da2f9b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa766f25-17b9-457f-abcf-2c02ebd164bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17a99189-131f-4074-9e64-a4e26dc1fb1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e470dce-8304-4287-8043-060e78a18f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0809eff5-fd1c-4721-813e-6003ac521b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37bbe620-ed92-4eae-aa46-698e592b6ddb",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "856e3371-93b8-430a-b2f1-636028c5ce32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eeb9dcb-c851-49e3-8975-82a014d7cb88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccccf82a-036c-427d-b837-7dbb31dde202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f664729-9318-4cda-9a85-ee1419732c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057cb972-ad19-444d-aa35-ba0f4b2aa34a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "767956bf-abfa-4346-ac1e-77985a346c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10185f6f-f59a-45fd-ae9b-003026c23227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be61068b-aeab-4598-b840-eb73a4a4432e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b252261d-6b4c-42bb-a848-bf37060002c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61efa5a-b4b5-47e0-84da-cdae96faa530",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73165cdf-1720-4b71-9958-be30a190ad88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a3692f9-57ed-4620-92ae-c2c92a44b9d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910548d6-5fd7-462f-9240-e45456f0242e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4907504-d353-4a02-bd25-f9c641e205e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be12c3c-b371-448b-8dd5-b74af216fbca",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "814385b9-beb6-424b-be30-aaee93b5b6ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c43d6d53-6ba2-4b0d-b0cf-1d98b1125f5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b766ba4-095a-4f8c-833a-bf0a691621c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "65cc3cc9-bde7-4b03-b356-e93e48ffc0be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ae73fd-5822-47ef-b7b3-9f555e3bdbe2",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed185899-9498-4557-919f-fba0de3545b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08470123-a35d-46d0-be0f-c8980c769ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d7e4e94-3630-4aa1-92df-115395141b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae56bfa8-a2c0-4478-87f9-8b2cd31533cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0663033f-6477-4679-89c2-0aca9243014d",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7420a69e-4fc7-4303-8f1e-43e8d39666a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdc7c510-3f52-4c39-bac0-cf951e45ce41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619ebc51-809b-4cb6-a370-4ba865ba8394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec4b14ad-cc32-449b-8570-7e541be414f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4302457c-be62-44f8-b4f7-e29d40edb4ca",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4644f0-d069-4ba5-9211-3c983173da24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b165200-22cd-45f1-bd31-e81b4f0b623d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "477c183c-d308-465a-9d69-973ef552f092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "63b1a073-732c-4b57-b085-d4627a808afe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bce28bf-903c-4358-971c-69d8392c8f44",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23213ee6-dfd6-476b-b34b-7c88d245a842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90d77e8b-e180-4f16-b080-ecc8b2e62682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ed31cf-fc43-4d6e-91f4-747651f67f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "539bd8cd-77c7-4383-8bd4-56f6e9936ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc1f56df-6d0d-4888-8cdd-ace7cdfde956",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ef571e-7106-45e8-9463-0fccdcaa0235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea5375a6-06cc-4963-b475-e9a362dbc64d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd4cfcb9-55f3-4e3f-a5ae-8cd7c5aa69cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fad156b-3a47-41b2-b266-b453c60e9a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7531ebd3-b6a3-4747-8808-872060246ba9",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03d091f-2e14-46a5-b80e-11763fbce9ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7a4840a-c50b-4494-9df3-3e24402f0192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe1a65c-95fe-48fd-9385-464ccc949275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c750227-9935-4d19-aee5-1a546b33e024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb805dd-12a5-4e2f-84e1-e22e756acb8d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e338e40f-2097-4cdf-88bd-018e1d0eb61d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db3d3eb0-a8c2-42fe-b175-76ae8b7ee2c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf12098-cec4-404d-a273-6ec902190dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2dbe925-d9cb-44f3-876f-f6098a83b8ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5612d8ad-8c46-47fe-8cb4-91100319ebac",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51bea587-47ff-4966-935b-7096a0130fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54fb4212-11a3-4c7f-8fbb-7803db0c5101"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bff4cca-7134-49dd-a85e-18f7b5c6a53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3cfecc4-2072-4517-a86c-db5fce5b8c8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1cec102-e54e-468f-a74d-102cb3e7e47e",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca389ea-757a-4168-8987-ca6ae6a38ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d2f64a7-09af-4886-8d4b-2659fd7818a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf5c362-5ae4-43b1-838a-8f5d44b55293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b5f9eef-4bd6-430d-a0d3-cbd097a6cc28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3941643f-af91-409d-b743-a215231bb0fe",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b668244-5224-486d-98cf-b685335f7f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c255f1f9-621e-49ca-9ad7-aa72e49c260c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de55fe3e-7ab8-4484-a834-3209d2c464e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ab6d2cd-fea5-419e-8603-a408347e6909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a181573-506b-4e78-b0d3-316ac86d0e54",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf0b205-1557-4f43-a84c-860398ad8691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d70fd60-6f3f-4e72-b12b-8929e2ddc4b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2686be48-adb1-4349-a066-815ff9927965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "79f6507a-a3aa-45d4-9e3b-b20a28c107e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc38fc12-4783-45f6-9193-57bf96be036f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8b9e59-1e3f-43e3-a0ff-2f1cbfbab154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40d88326-5834-46ec-8147-b15b9e0b36c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1bed1e3-fb15-44a7-9e49-4f5fb08cd1a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3135fd99-364d-4110-b4c0-31b4efeb0956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c8601e1-3ede-411b-aeb2-0fdf8c36f9a2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef73ee3-a735-4de0-a83f-f813b338683b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "13c89533-2574-4d68-9c61-18d4ab90e4e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304624a9-f001-4d18-8076-16a4625b6fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4b6f0e83-4173-45a4-af10-73f9ce1e9e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "420e0adf-6b90-4f9b-9a2f-b61264d628f9",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad56cec5-ea45-4dd8-aedd-ce49913cca6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f18e1d5-cd30-4b53-82c5-cd80ede83157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96d8b48-e8ba-43e6-9ca3-7b304b57fc02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f622a541-eaf9-41a8-b8b3-49e732944b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02207df1-2d86-470f-a85f-7840a2f0c488",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "573cceeb-6926-40f7-a73a-7bb76a9998f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e57a53b1-9dae-49a3-9d86-1f24bcc8c532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c24d66b-015c-4f85-9ff3-3c65e9eefdcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd4ef33e-abcb-465f-aa5b-852750eda72e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c56782-a6c5-4c0f-9957-f2ed6b28708c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11550d85-0631-4401-a5ad-f2d3cbf1f9a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2af26040-48bd-4d73-a57e-698dc7ef101c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03470a13-135f-4387-9945-173d42a00444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "14419b5d-93e2-4012-965e-77fa341d2a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056865ed-a45a-4652-984b-1d9c00e716d7",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "811aa5c0-2161-4209-bb1f-503c20ad7708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abaae0b6-3740-44d3-96bd-4bba9bdd0d14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2bfc74d-f9af-4299-940a-e3fd03be3884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "36e9fe92-06f4-4750-9993-98a29bfc0cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b383a80-df54-4e2b-a50e-c114d2bac1ce",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3195a427-95ee-4791-8379-34794b1164b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c946e5d-a037-4c6d-8546-56a0b8f67f48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7f3b73-8922-44e5-9f40-ff8f04c0d14f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "768f7dfd-b02e-4366-9bd2-6ad4214f764a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08600c06-879f-4f23-81dc-0d92bef7a103",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdcbb51d-8c98-4b3b-b59d-a5cd39798a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b90796ac-a52d-4675-b864-af4439e6ba3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670c5701-2a87-4c0f-9807-67e5ccd0999e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8f5d35ee-8f48-4ae3-91d5-e9a863dd00b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c85c77-f643-44e4-8a8f-804bf1b103ca",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3121a93-e355-4407-a690-84f907d034f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d425d39-ac82-49a4-af52-12c30c94ba86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb1dbcf-edb0-496b-bd9e-fb882ff154b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d89515c1-fa56-466c-a094-d8facd932748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d78cb81-6162-4a8f-8744-100d6d4b1985",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21413808-e377-4257-9a5b-83b4577d103d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f5b6a59-5d33-4955-82a1-7274f6dc0a9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c66eaa0c-df30-42a5-95ca-0a78585e0f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cfa566c-1b3b-434d-ab2b-565d147a2477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa5a780-6275-440c-93b9-4ea09593685d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "083dddd0-043a-4e16-9ed3-91269ebb6b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84970533-4e45-4371-8ada-f655e7536f45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "793fcd0d-b996-47f7-9d29-b0a128e3963e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "548c8d6b-266d-492c-9587-6b84362372a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f55790-1858-456f-b280-01cfa4b19cd0",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b206e9-c18b-4721-b188-fcd6154f869b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5913a915-47f3-4a67-b246-428328777458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd03bbf-d959-46d9-9838-78c4b6bad239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "51a3ac65-8b41-47da-800a-52e038f8944c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea7a243-3175-41c5-980a-035292259c69",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b1684a-53c8-4637-b97c-a7b442626b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d759cb5f-6908-44f3-a232-40eb19bf7135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "209f9bba-1a3d-4a4b-a727-4c20e19a58de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f34b066c-7ae4-492b-b30d-12509e41bf37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a4165fa-6396-4998-9e3c-986fb827b28e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e907e1-e0db-4ec7-b838-fdd36cb3b050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb07a86-6db7-49ce-b101-c44de56c3a17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f54f2fc-1be1-46fa-85a9-ac3bef40310a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ee62297-4313-44ca-a752-809cc6bb0f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa678d1-abfc-42d7-bd95-d160c88b7218",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e3e494-6ded-41c9-93b4-71f981c87109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f28d105b-9d83-4d66-8bd2-d8cdc6cbad86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c6af567-2bc1-482c-97e2-b5ccb8f53354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f1d96b0-0892-457d-a882-7917b5a8532e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9be207-cba3-4796-855f-f49c7dbb0118",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2edc481e-2e6a-4646-bb4a-895a294ed712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b2282cc-3879-4077-942b-a3c10c0d7683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7195592-4550-46ea-919e-ef3f37583400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "01b419e1-186f-4cb4-b75e-0e48c185d794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "165f29bf-de3c-4d1c-9d95-918f390a48ef",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba8a3cd8-e833-48cd-80ab-a07b79821fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eb703cc-95d1-4f51-aacd-c147ead9ad52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915dacf8-f119-4a7a-89f5-75d05b71be8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fe538c3-d608-4266-b88e-4bccc74f2cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7913141-bdff-4b2f-b5d8-59f003184ec9",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2255c3cd-656e-44fb-b4be-63865fb4faac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e1b6ab8-a0e2-48b8-980c-85375d743709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da63357d-c06b-43e6-863d-7c82a7909b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc05bbc5-9fd4-42e1-95d2-0dc41042e489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e9e3a4-5015-413d-b26b-35dfb9dbf2d2",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c3406bb-3d84-47d9-900c-f48823ba77cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b341d9d6-d844-4f03-955d-4e2acdd53c90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55cb286-ca18-4c16-9c65-a1a18a174d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a075def-f777-433b-b03a-3da92f906420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6edff5-dfdd-447e-b27e-a77dc3366951",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad93b98f-d04c-41b7-a9ab-c6cbd29535bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11f8b5d8-f630-46f6-9d09-a144e205ad37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e3699b-045e-46a4-824c-046d1103dabd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c66ee04-85c2-4086-97d9-edd0734a8323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa786ba4-0b8c-4aa3-929d-f9f003bfc16c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fab98fe-fafd-4233-948e-3bbd21a0106b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e268116c-140a-4506-802b-90205dbad1ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdfaeca2-ae69-4dfb-8bba-963fccf79685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "762fa801-4c44-4999-8231-53759f83c392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941e166c-e7d5-4459-8b69-268eff6d2850",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b6a247-42ab-47cf-96ce-9791a3f8f044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f2079f4-17aa-4115-becf-bfe7e0891121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c1f22c-16a4-4187-ae6f-35a48fd77666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "cac4d318-f892-4a4a-9e86-ab9f6508eeca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae760da-5e79-4b82-bfc0-750ae99d37e0",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b6bf827-a14f-4448-b4fe-2c90bcebc13d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03c8c0f3-a8c0-4bd1-8b03-53bb17c315c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b21ba793-368e-4b17-ae70-297908464587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "31fad2c5-2055-47ae-a532-5f68debe8d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3476890d-08ac-4ef6-ae25-99ac946e75c4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6bfea6-1378-4674-8e5f-532777fc1be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba234993-2bd7-4c7c-9a7e-809d27cf156f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999c587e-5d51-41d4-8846-b16a5373df01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6395c2cb-cdb8-424b-96a3-cd0a72af62fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e6fe31-c9e6-4a66-bfd4-da9e619791a3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f30d18-1efd-490b-8d78-449a9f07179a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01dfe0af-64c9-4948-bce7-2362712bf7b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "527fd75a-7dc3-4ade-9f85-b542eebd023d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "63cde886-e090-4436-b71c-06831377e61f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab57d034-629f-4be0-bccf-3fb078442696",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ffa731-f87a-4ad1-9df9-cc08750f7abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "053f373b-1b17-4249-95c1-2a45a62b2c28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1217646-d217-41a5-a80e-0a6a6a9a1762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0122c231-b73a-402f-97e5-970f0df085db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b65932-f374-48e9-aa28-5029a9e895b5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f32a65c9-c88b-4ae1-a370-ce75b3cd1764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cfef65f-de1e-4044-98d3-0bb7afa00faf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc0743dc-004b-43c4-9d26-1d912ca668e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb5baaa8-a3e7-4b89-b977-b3976881a38c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3412a30-a229-4637-9db0-ecd63898071e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b704ef85-eba1-479a-86e2-da4de1e56b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "babf9dc3-161c-469b-ab68-8860599f679c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e43ead4f-d91d-42a8-b758-7f00e63dab7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3615ab3c-7e69-467b-b5af-63b2fd4f9e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b4f9c9-0d22-4c46-8788-8ab4dcb377f0",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e211deb-d512-4a17-8832-58b59bde0d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcd42fdc-17b5-4f4c-95fe-a7307e6d4bb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad3bf37-7ddf-409b-8252-7cd4926d2c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3cfee8b-3cf2-4d7b-9d22-de1546f32c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ba2271-c0d4-49a0-beb0-e8fdcf66713e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d9dcdf-8e4d-4327-b336-3a40f95eca83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5fb194e-5a6f-4b39-b854-d160511e6a86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3287cf2d-d1c1-4ba7-8d74-aa8bd3bc351c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9219cb07-69ea-4cbe-8f59-0ed75594cada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f00132-b60d-4e9b-a881-17decf04ecb7",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "768b2448-7a51-4676-86c9-754ba9768b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46725ec1-3e31-4dde-b812-b78ef44a8e60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0e02cf-dc05-439c-8c9e-a58ed2e70155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96ccdac5-c140-4d8e-acba-38b327b41308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b2a207b-8d20-4194-9ac3-9930e7f17238",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a9a54ac-777b-4b5d-962c-4291111c8b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1ae8e9c-2e3f-41cc-85d2-0b5c1d220abe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "792baece-e99d-4ccd-b4e6-c2ae6fab685d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "81d964ab-f862-4d4b-a401-5b8e12d5431a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89637ab2-ba03-425a-a2e8-697f8a585f60",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b836e3cc-3290-4863-a5ce-faa71c4540f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f5e04e1-dadf-40d8-91d5-0c30dee5d681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0910e43-207e-48f8-95b3-e53034308cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8ae56af5-3f33-429b-b58c-f1afd278ab5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d24ef9-4d73-480f-9b9c-f4c0c88de2ea",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4541db0-5215-43a4-afd2-dd2500809304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f854f5e7-3302-444b-afff-8e2d65bf567a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29de5373-5bb5-47c3-9bf2-75c8ea134aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "27a144b5-8ce2-4be8-9ecf-445ff04d59df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df75aea-b5a9-4c35-9949-736e489b1ef0",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86cc6744-9bf1-4c3a-8d77-2fb45085a6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2714d76f-6e73-42c7-b63d-adc41270e09d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ae61df-e22e-49f4-85bf-5446d41e719b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a324f639-2f7a-4693-ac0b-70ce2480dd17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1894bf2b-cf58-4c4b-95a9-2d31daca2774",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d627ff55-0740-4d1c-866b-a9aab786e62e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48146511-95de-4759-ac5c-0f3671776292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d737a76-2ebf-413e-9b0b-077adee4f5ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cff2d87d-0c63-405c-b120-74d115edc491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "658fc598-7ea4-41a0-a17a-1e041d1b8d22",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46cd122a-bbd5-42b1-ab23-1886e38764d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54510766-d55e-4f76-b02d-e559fb6c852e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2544de73-b048-4be8-bb9f-9fc274c66e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a87a18dc-ef19-4716-b795-35bdc4d3c045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b0ee18-5aec-4e9c-b627-7dc7ab35d009",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe7e2ed-7b3f-4cad-b673-432c801488d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "423ea5df-15d1-4cb3-8c8d-c01d31603927"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c54d7b-f1ca-4abb-9c7b-5ec118139399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c990bda-a28f-4c74-b545-1e8ec03ecc50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30308957-4660-47aa-b0e1-768f91951107",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e417f348-597f-477c-848e-9e4fe38af82a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "427f66f6-041d-4533-aee8-38c6ac26ec00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "313bf61b-3f53-4175-845b-b6c299f20866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d68326e-7d91-4bad-a45e-2788aa502d1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9590d91d-1307-4f79-8370-b7c1f686b9dd",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec4ce033-500c-4484-879b-9baa11e0f64d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a114dfee-f1f9-4b5f-8841-39888e1b1ab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84a4a64e-9258-4494-a430-63542f747fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cebed5fa-6ea6-44be-8a41-49b069abac99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f495801e-9cf8-480a-becb-3fb782f22491",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "567d7d3f-1490-4d4e-8ad9-4cd41dcdf81c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8422fca-bfc6-48ea-84f9-525bfdcac7af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb2c121-d5cf-4a66-9731-3f5a88c61275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f8203ba-d243-4b95-b1bc-67dd24a16b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8703823d-7cb7-42f4-aa4b-6d04faa468b2",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc55dcf0-a8ef-485a-a0d0-09a96703e7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04be8b2b-ca0b-43b1-9ef8-320762798f65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936fd6f5-2fd0-4615-84ea-2c5d730c8353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7be4672c-17c6-4501-9601-f55c81757844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37790576-4d8f-4bb3-bfe0-bcefcb46dd12",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53b8174-072c-4b5c-9d89-4579501728c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "318e35bc-ded6-4edd-a3f7-38b7550eab36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc4c9b0-0ba1-41d1-9e95-a7cb9e463c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "60b5981a-fa9e-47d6-ad00-5f6810699598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea7d4743-a4e0-43cb-8091-28a5c4b0c937",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e10a579-2bd7-47e3-a4b2-d93341840285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f7c2500-6636-428d-9965-4b6e4a1709dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3331d8de-bf20-4105-a771-891d4a29c6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b394cc07-3288-47db-a36e-2fe7296ef6c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc8e06c-60da-4231-afb4-e1645fbdeb08",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7e828d-117f-44c0-81a0-320e91a613a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "813b9a1a-27d6-40f3-b5ba-95614a494764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96fb6db-1d75-4dee-9741-c25f5e49c8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b77a65d-e282-44d2-a232-ed58cad3b1ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7a223a-906a-45ea-87b3-fa925e9fdca0",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf91083e-d87c-4ff5-8c66-8ff17937c022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4278397d-ab4c-4582-b242-5b71a92b0917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db48b20f-aff0-4abb-a88a-c4670fb5faf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0eaaec53-14b7-449a-aa3c-687330f93500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d6a25b-aeca-46d2-a566-3a66ca6b9449",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3605bd47-53be-43fd-b926-b2985110e13c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb3f003a-5cfd-48cd-9e9c-a8b29858c28a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b1f94d-bdc2-43ff-a0ff-f64f31400115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "98bba0ca-893f-4a2e-994c-7bda836a03a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96640de3-fd0f-4ca9-89a4-c9ed260ef58d",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e51a517-4f4f-40fb-bb22-4cc0d1f7c510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dbb33a9-cb16-46ec-b3cf-f1b6043a7af9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "752e144b-48bd-47b2-9402-51117c1c4bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2756ac45-c247-446a-bb49-b5ea2f1b8f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79cdd689-bafc-4e3c-9475-eeb3a7ce9567",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb5fd94-7d2c-41d0-b464-31fa89133ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c576a9c8-d188-46a7-8906-e3118330391d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be97b7a-ffce-4ef0-b4fb-69f8a6341c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3b98faa-9b71-4155-988c-a9b517672c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed61d3d2-ee8d-4b9a-801c-ba10f908fc85",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "752484d8-d42b-4e1e-8e5b-8b7838aeaf74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "347142aa-9831-4c6e-96b9-2e29aaba0734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e418229c-df47-4ba3-8f4d-d4de0100457f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "de326372-9204-41b6-8d60-633332b5d162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2d68973-57ba-4f8f-8bf5-1df1812f30da",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0966f0-f468-40bd-a1fc-d7265769d074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "645b3d00-2a0d-489b-9160-daf7728c2114"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a9c4ea-6cea-4607-a363-5b0311fbb417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "af18352c-d873-49dc-9bfe-91fe71d0b18f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714ab0f1-989e-4d5c-a48f-87bb97f692f7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c87d557-87ab-4695-9320-78911c95839b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e03ddf27-af17-4fd7-8a97-b71d95590317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1657e0-9688-429b-b4af-25bfc264c9fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f181921-5c21-4922-92f7-a7fdfae50beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec54f54-a648-4889-ab9e-93fe99b21099",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "784be331-837c-4365-a55f-fae0d22ca7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93957b79-06ee-4e87-a14e-18d8c5722662"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "918698d3-0efa-4a42-94d2-347d6d6c4640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c308363-2f78-49ca-911a-a2ff00582712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78fa60c2-da86-4730-b329-9a7a5e454bbe",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85da8a4c-b7c1-4096-99a9-38495e8c587c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0534f2b-f324-466d-b435-2f4019adf465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c4c26a-8410-45c4-93bd-12489bab19a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "02216abe-53dd-4e62-8c0b-f38e6bb98170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e031fe3-0a8d-4622-bb56-6a8f76f639f2",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3c7ba6-9851-48e9-b15b-9b6eaa578727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06a3a06e-2a67-41f0-8b05-080f2aa3b0c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f39f9302-cd83-4c2a-a9bb-9c5dff916a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2640192d-4789-45ac-bfdc-0b9ce9d7101e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f9d6b5-5ccc-4a75-a287-d52fe08f819f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7168562-0e0e-4447-8d08-f37e1a9dce23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f6c2787-6d91-4835-8075-0a328fc8fbbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d47b806-136c-48d1-8564-0cd02e3cb62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "59409809-a8fc-4ecd-b654-d64b20753528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb529082-7cbd-4854-adcc-3538beabdd9e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4582df-735e-4239-be54-d831929ab790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3b6123a-e3dd-464c-a614-dee37ea2ead3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9109cc73-1612-488d-9064-8ebeed46f8ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8994ef30-712d-4228-a6d6-2658a6c6f583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e394c73-4ce6-4cd6-9663-bfb3b97a041b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acae5d25-6e38-4e58-80a2-3b79b03b92fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b9bc974d-1c77-4cde-b0cf-74423084d0d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13cb81c-7eae-49f4-b54e-dd4eba5dde9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "68db6f7b-6f24-4fd3-925b-0245e6e975d6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ba337175-311d-425b-93a3-810a862db280",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f8311f6b-ea6b-4968-8836-c6c089218915",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83482388-4d1f-4b8f-8afe-d317d00c7139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8235798f-46b5-4ad9-b313-86fc8d16ab2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f059823-ec6d-4de3-bee5-aa08d0d0e39a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "7a2581c8-dd6b-4eb9-bf14-1839be25b719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb8c681-76e5-49a8-a7f8-5e87def28e6c",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e4c94c-028b-4641-964b-776b88c6ebba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b1a792f-8a2e-468c-b960-d7e6dee68a42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4bdd780-e39f-447a-b127-d5eb2356ff74",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "159e6020-233a-4b6b-9ae2-eff0631750ec"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4fa06d02-2195-44d6-bce1-df191e8cf425",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2e9eb80-c0b6-4853-97db-5a97821fc2a1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a0f84a5-1ea9-40a1-bb6c-b4b71f65e705",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba4b4c49-417e-4de9-a675-9ec459d2c24e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1426363c-db09-4a12-9f24-e136cac19ecf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f5e812aa-c008-448f-985d-c99d031edb15"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e7432e42-6581-426e-9552-38bc3639a5fc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7446c7d8-407e-482d-8709-abe722bc578d"
                }
              }
            ]
          },
          {
            "id": "c9ebd400-99d7-4e2f-b3d5-3d4ed3bc0508",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f3a939cb-50be-4434-9350-b021cc3a183d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ea09166-9b29-45a9-9ab7-c6053dc1cb98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4c15cdb7-bdd1-4bb6-a9fe-d2b997dd268a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7612fa13-a1ad-4be3-b5ef-0890af7c4b02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "12028083-49e4-49c3-865f-15b46e1aa45d"
                    }
                  }
                ]
              },
              {
                "id": "0ddf2e10-73d4-49e5-8662-dc233338e782",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e96a02bd-6516-4a5c-8411-47e7bf8c8cab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "69dce245-a282-4b18-bd22-9f0de6b9d172"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56b7260e-f652-46f8-9e75-2a0c60050fec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c218efd8-7a0a-4962-b8de-6c23c53b3131"
                    }
                  }
                ]
              },
              {
                "id": "522471e9-f0a0-4992-9a5b-e4e0312dd851",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c52cb190-7f0c-468b-9c6c-f71dc6ab6387",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "151cf7b1-4942-4228-8f8e-f885aac476fb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "692d409b-baad-4cba-b2c2-a0c8fe2b756d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "07fa5914-1611-4f52-b97c-491bdd64baad"
                    }
                  }
                ]
              },
              {
                "id": "b926d6d7-6073-463a-bff8-558a0f38cf8b",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b29e68b7-045c-46dc-ba73-29a856373908",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e9be6c30-a375-4684-a3b0-d20627475065"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01d380b4-a12d-433d-967f-dd76740cfeb9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "4d95be8e-2ff6-40d8-8c6d-01345ddb5380"
                    }
                  }
                ]
              },
              {
                "id": "0549b5a5-2fc4-4b5a-82ac-c9a9db0484bc",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ef70274-214a-4c07-b557-415f1943fe02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "739b3696-46f3-4b63-bd80-a5eaee1b650e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "54ff1489-9ada-49df-bb12-202cb427fa66",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a39fe5c7-da3c-4b8d-b61b-f881fa905c60"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fabe7796-9005-4fd0-b681-46bb9a03ba6a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "537795bf-291d-4ca7-be43-dfa1ae49de9b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f3cfd9f6-a852-4b6f-8212-b3262b8278c8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "621e5618-0e9d-45a0-8f90-88ebb5580702"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bfa51774-81b3-497c-8d8c-12b4b4aff463",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "53b41ece-b4c7-4101-b345-0306ac5a4857"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67283979-496c-436d-a80b-bb3093dc3c1c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e7eaf7e8-ad4a-4072-a52e-00cf599b4197"
            }
          }
        ]
      },
      {
        "id": "bbd0a28c-070b-4fd7-b02c-344d938d8cf8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "938b3bc8-0de7-44a3-adfa-8846100af6e6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ed58345f-c318-4a55-bfd5-307108dbb259",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9037ddf8-e59f-446a-940a-05ac482c864b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f48101f-6e9c-4d0b-93d5-6cf93ec19240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee67930f-4586-4613-b7c3-0a29e5c0c186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e239c57-9f2b-458c-aa92-1115e924e201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "46343070-25bf-424a-b2dc-060643c37280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1a0f88-11c2-4bca-9c2d-3ba5a2dbd38a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da72acae-8a9f-4468-87f2-ef0d59676709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d083a741-9dd7-4537-8436-2191e55b0507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7caf19c5-6796-4ac2-ab79-385f0ffc2b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e7d48e8-e28b-4c04-8115-716afacc22ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5696235-79ca-4edb-90ff-afd56e4f5865",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd60cbd-2d42-4888-9f2b-d33f7e202bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e68212ea-86c9-4985-b3e5-22a22f83e00a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e11cf5-8e7f-4d94-b4c9-e9611f36c5c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ee29ae6-41a6-4aff-bf63-df9b2424f15b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "658e94af-c5df-496b-a4f4-3c3fcc5f96bd",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d78b2f-abc4-46f1-9a3f-31372c2e68b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a7e3083-890c-4fb9-91d0-f98eb4a52fac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db155a20-6e62-4300-905f-6dcefcc40c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92436a2f-a08c-4614-8013-bdb21a61936d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e1c368-5ee2-47c1-a11c-bc6b62d78e77",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d5aeb6-20bf-42bf-83ae-b7b3b557359e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ccaa83-0c5e-4c37-a470-88de9819c754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "666d7e30-c24f-4c1f-b1d1-0fb788ab06b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "caac8208-7586-4d8a-9626-76ac7684b193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d01ddf-e474-4e77-8e94-480106d7c198",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde21666-e660-4493-a2e8-ce10f9e15f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a5ae142-5571-4029-ab5f-c2c0e436a7a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c5484e-5662-47cb-ab93-99b8d5caa07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6e02ec6-1c9f-4963-9102-e4d7e2267241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8ffb753-807b-4760-b49f-5ed4fa110ad4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa4ed31-211a-471a-b717-b3ab25ffe8d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4465a32-cbac-41ef-83c0-08712ac9b4e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad0424cf-341f-4226-8852-cf1befa7ff38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8225a0b6-92d5-4643-a117-f6cc99db67ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00009003-54f4-455d-9da5-0575cd4a9532",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "899f44f5-4bd7-41a6-afce-75c78ef60758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd72b254-cd1e-491b-9311-a89bb4a9f5e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b41a06-53e0-487a-83a8-39018add84bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3e78b6e-606a-4ba1-86b3-afc8dc635b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21fea40c-2438-4387-a885-98d84249b41a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f35b25-03ca-4aa3-aa62-3a56e2011e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8007399f-0c2e-4949-bec2-fe06b17211b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e284f005-5324-4706-8ee2-3f40fcb31721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7abcfc43-37b6-4023-81e8-c8fc10c499a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64cdeeca-961c-45b0-96e0-95aaac1e7a53",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb4ecc4b-2be8-4230-a7eb-d8fc3c8691f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd1fe19c-d6da-4e5d-9573-2189459ec973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "648ae751-8b92-4bd0-9026-22f1f590c000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f90cac9b-6ab5-412e-87e2-44534206a8d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a15b828b-e0db-4c64-88a8-7896ded22abc",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4628bd5e-8a04-4022-b4b3-81be9abf2f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10eff116-b328-4de2-bb85-402c84f96c37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e266f5-56eb-47bb-bf53-3d1513e47914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "747e5c97-a990-4abf-9883-e87c6c9eca48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d71eef4-cca0-436a-8026-6a30b5a92d0b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b05036b-3f43-40ac-bc8c-eec90a19f8c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6a0f49d-d432-4aca-aebe-13c4c85692b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a83ef5-3211-4bc1-beb7-5b9908ac46c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ce49a4dc-dc97-44e4-b41e-a8005d64cf60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b669e7-6272-410a-8a60-d4d8979318d5",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0fd629-a40b-4e04-9121-724c6471fefc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c6508b6-fe7a-424a-b87e-5b58600853be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d339b3f5-4253-4460-a1c5-378e38b235e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac33ba34-a038-4616-b446-b3a1e77f06ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd65af1-21f6-4597-8a9d-3492b6063846",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e34554-6ded-4d35-87ce-e668e73f9ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c202c95-8a7c-4597-b801-7e00da487416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c8a1e8-31b0-465c-9afe-dca0ce33fb0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f079fc5-cac7-4352-b467-f17a12e9f2b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2671186-8954-4acd-9825-b1e2157b7ebf",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "070df353-b9d9-459a-94a6-026eae181f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b619af7-8d72-40a0-970c-6db014be8fea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "647c99be-423c-4a4f-bb29-1041cec3511d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a20ede7-6d88-4035-9e30-079224a41acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6232614-5388-4c6a-8014-dace74a96499",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b510c36-6ea1-4a88-8bb9-bd2fab6846dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d64b721-6020-4506-b89c-4c915dc01de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f50d696-0f9f-4577-9ef1-781c8d16b810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a8db4fe-7752-46ae-a506-53e3efc669a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f17a57d8-bc56-4086-b951-3ae5a43ed905",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da2b520-b8f9-4765-a858-c2159d71a4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9715af1-b10b-411e-b80b-a9eede988d40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c92d2d86-7a91-456a-9c3b-0860ea57f858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "222f6932-736c-4d59-8922-1139578b4fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75afaba2-e178-47fa-92b9-f31a3b8dd76c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41640e77-96af-445a-9fc0-fb9aa4d17300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "495dc272-1fee-461d-b8be-96d2adbe69a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30408ed4-7185-47cb-8af1-a8a0a712fcb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "56b32aeb-8e87-427d-85c7-3b94b721a42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db5b8dbe-77bb-42d5-923a-261085fba0d3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc82002-b3e4-4b1e-8675-32b071098b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e9a4b21-36ea-4a37-8b19-dfb93ca7be87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b5169c-875c-49c7-9b46-3c4571084ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c22d4d64-77e8-4018-9648-f54006e22e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1bd69a4-d327-4749-a913-fde1b554f14a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ed599b7-c081-4a42-9dd4-57ffe4c408c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "884dfa0c-3e08-45a1-8ed2-b2ea074e0442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8975a5cd-96e0-4498-ab7d-c70e711f7343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ef854e0-dd7e-4696-a54f-3509549694d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5375753-1dff-4537-9d64-64fd17aa9f92",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd75abe-cbb9-4195-87a2-9eb326517d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aad3394b-f24d-414d-8c67-eda0b8535f2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dfaff3a-2a99-447d-9677-399ebe0497c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4b48ecc-ee1c-44e2-a7bb-e2a7752c672b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "894713eb-bacf-4a31-a9db-81fb0ffd84d8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ccd851-0a48-4490-b80c-a7859cfe8931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1902f4d7-0c48-4ef4-a831-e51a29148ef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6b3be44-c942-45ca-ab90-281db93ec1c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f99dfa56-eae5-48d5-9357-7b25983a3a05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d3a5ba6-551b-4c4f-adbd-5c6a5f5455a7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "143b828b-ef7d-4e8e-9a3c-46ff7a238b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "918251d3-2af5-4757-a39c-b57bc5b9e30c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c27ca98-db73-4971-86a4-71844eba5aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c1e5a2b-4d6d-400d-93ee-63165f1bab10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a2779bc-ceb6-428b-ab2c-80266fcd481c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb6e3da-34bd-4ab9-b064-300db167871c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6280e562-2854-41e2-ac8e-5315f41b1216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4e1884-50a2-4426-a37a-3806cbc62136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a574690d-fab1-4644-a87d-14fc7d27bc2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4805fb44-0b37-49c2-9b5a-4c955c3af219",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05052d5a-cccd-4208-a0b3-eee2871ddb0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b80aa4-bc6e-43c7-b875-4c5245e7bfed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ab9c2c-5ed2-4fc4-9d3a-9ea96141ffd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b005ce8-46b7-4554-81e2-2fadd9673e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95fc4876-338e-4105-8014-aa10f3f37154",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6251524c-a6d1-43be-8bd1-c172e9ef041c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a5267df-878f-463d-bead-4358a99464ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234b9c94-cde6-4f59-ac00-a6c6b6f18942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1683c066-cf1b-46d9-b61a-950900a70fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f937751-75a3-481b-8541-6142881c4d0d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "915c6b49-21e2-460a-a2fe-f6a6c385bc8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b368d163-a77f-4a5d-819a-4a3297c789b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a281c1-05d0-40ca-b492-e82ad984cb60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b994d419-7034-4168-b155-fbd4ae3200ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cccb091d-0a9c-44e9-a362-4cc8416e36a4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "446ba2cc-16f3-4a5d-b033-33a62d2cfcbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "642e2c52-3d72-4d46-af30-f1e44ffe872f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc6f1de-1a7c-4c48-9b4d-40872dd4304e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc2630d9-2457-459e-a154-6c4cd8ffa440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354889d5-3aa2-4ba7-af44-7738f41589cf",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da371b81-7b17-4536-a681-8a28a9c398c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91ab46bf-be88-4725-8bcf-4c9879142c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc15352-3dd3-4baa-895b-5a730b29e70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea4b5a62-3eee-4ac9-a3c6-5c3d62841509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8f3cc79-1de7-498a-8077-dd0dbde95e0c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "955f6193-5975-417e-9c0c-899f94c97706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63fb2b34-b504-4ba5-aac6-e99d136ac37e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "544b3bf6-fca2-4acd-b8c1-22d0cb711ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07a67d11-a760-4899-b555-60c9fd756b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbdb6cc9-cd15-4548-b5b0-0eae3f966f95",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7a7348-7071-4e00-913b-66f4299033f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bbc5607-96cb-4fb6-9b62-59e67668f7d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ab02fee-fd84-40f4-8cb4-2f54e7947761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16fcb6cd-c9e9-4fd4-a468-1eee5ad8ebbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cdf2c3a-53a6-42b4-9205-09c631d58c39",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6487956b-00ab-46ec-9e5a-179180553c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bbd1b96-af90-4411-86a8-982facfd7b00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb4ee77-82a4-45a4-a3e2-fe333e927f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04edbf4e-6bb5-4f36-8416-c43714d50e24"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b7b2234a-259b-474d-9978-cf43576f1798",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1248f1e7-ddfa-4c89-a1f8-7defa5bde6b9",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6e0357-4b20-4bb6-9c5c-fd6138aa37e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "789fb3b7-856c-42e0-bcf3-a35f0bb26e4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf088cc-0981-44c2-952f-0d6f1f97e48a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3a4a090-37d8-4359-bef1-4eef0ca4e923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc01ed7c-64ad-4c84-809b-25e9b9274b22",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc8c8dc-e143-435f-a4c0-72b6a41aaf6d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "422a7e01-6b09-486d-a7b3-514dda144f90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9477d1fe-0732-4aca-a0c9-11f7884c34c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2c6adcd-dcc0-4149-bf7b-90fbfda3d478"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a02d613-9739-45bb-ad1c-388ad64f2f8f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da361e44-1899-453b-b141-e92bc869ade0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c92cc617-4cd0-443a-b666-2067858809d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03a7858d-5b91-4886-af7d-bb582c4f56ff"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4167fdb-3b22-490c-9759-f43b93d26ea0",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b9414f18-b874-4854-b50e-8e51a376ed91"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d368c9ff-1010-468e-9519-fe7a1f6018a9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3834fa7b-ad0f-4c0c-920a-52575f695a12"
            }
          }
        ]
      },
      {
        "id": "699c4ae4-62bf-4066-a49d-769c41ae325a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c261482c-c7df-475c-8ad2-3debfe76b021",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3fb8f97f-17f1-4db6-a936-a90bb4ae099f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "81238e74-2ed1-484f-b469-b0816e0344d5",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9371f6-b2d3-424b-853c-62b648f79524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d4dd1a1-7247-4e4a-86f6-bcca2bd32704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b1f0a1-27c5-4d67-a358-f09acd20241f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7729685-6d56-4b9a-add9-b920b3f4d55b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a2c22c-59e2-4b27-afca-a8ec0fdc404a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81551286-bec7-4b99-9182-817e15da7d0c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef7342a6-2fa2-4162-9990-81ec5d6812be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bce783d9-4620-47e0-8c49-432e6b45e48d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff50fc23-75b5-4d61-a515-40f56ff79ccf",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b200cb0-24e9-4ea1-bb53-2d79f9a342cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5db573b5-2bd6-41df-83da-a9f583b06874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d1ac49-0b6d-4602-93f8-a0a083b28782",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d10486-aa25-4034-9f96-395780213304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9d1ea0e-2a45-4eca-a84f-9710024ba7e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84b293b8-b2f5-4527-9034-1690cd3dc4e2",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "638e8f22-96b9-45d6-9eda-f995b1687287",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6de33b37-3953-4ae0-8d7a-1358c2e8a39a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717489a5-40e3-4fc8-b576-d8cbf0aebd5e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b58af637-1821-4fa2-a6be-54cb14d40c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f99d2aa-aa10-4917-9db5-162ab5491cd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e4ba86-ff02-486b-8b7e-d0cf9fcfc72c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96959513-e4ec-4dcb-aca6-0c6740393309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c58e4a13-d225-4f94-98fa-05c1d87fcb8b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733fa921-455c-4bab-b17c-7c09e6214225",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8855dd2a-d96e-41b7-bf65-35ae0e3b2e4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8099aa32-0d7c-42d3-8ecf-7bf1d9c54859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4a8bd9d-51d4-4ae3-875d-2f94a222b093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d87d56-d8e3-4fea-aff3-f9ca98947386",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938c23da-b909-4e6c-b4c7-eee05ebdd2c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f1840b2-f648-4a1b-907f-25ccaf6f2f79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e95def-70fd-4530-a197-0587059f89a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae7db15-50f1-4a77-8cc0-df8d5917d1fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b591bfc6-94e6-428a-a1e0-4d4a135bc824",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f2079e-1e71-4fcb-9396-6d132c2f53d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "163f49ad-af66-4ee7-919f-70b901caeee0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc5db161-9949-46d4-a6d8-2fe6916d48ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "388bd7e4-126c-4c02-9e1e-c463a6e0e151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941773b1-c313-4743-8720-15a02a8fec39",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65cbbc16-62f7-49e2-866e-7162291689e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5798a681-b6e7-4a06-9e2c-4a08b283bd3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf0dbff-8881-4a0b-88cd-3fa5e2e1d666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e249fc64-04ab-4561-9ec2-5ff6c7a353b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c1dfc75-b742-46e8-ba7b-5b841c78439e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb6de7c-f37b-46f8-8d61-bbd9ccec43de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b34471c2-e294-489a-9b86-cd8013659ae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb7e59c9-e649-464b-a07d-c17bafa23090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4ac2d4b-1482-4150-93d9-4ce8d4a23e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c0eac4-40eb-47e1-a061-cacf09b92265",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb542d71-5c61-4a93-905c-152587d24f02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96255980-61a7-4e0d-8d56-ffe87b757e12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1742841-e69f-4a05-8fad-5d344bb36ea5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f527a1-b499-4c9e-b79d-5c46c2d1241c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67581490-9137-4c32-92d8-ccd24bf24b32",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d7a7e9d-1348-4fa0-9f79-637daac21810",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e009d9b0-1da3-4dfe-aaac-d306796646f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6283f6-cafa-4348-a584-1256163daff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a40116d5-211c-452c-86a8-20cd9dd349c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ada6a8-0757-482c-a41b-e9a7c6b2f094",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0312f1c7-3687-4057-9120-315c6cb8d484",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4877379-b169-439c-bdaf-d4ccb66d98fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e49f47-794d-4b3c-b9c3-d11d4d3f4338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ed6861-177f-4855-814d-8b4912768a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e65e5c14-1dd9-4c14-9d1c-565ba1aa9cb0",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df7416e3-ddf2-4a24-9513-64e19a96bc5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "813b4682-c5b8-42e2-90fd-4eb362503915"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6aa2bb3-a48b-4cbd-aed3-69bfa7360581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b7a1d54-0408-4c31-8df9-90dde3df80ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10f84cf-890e-4cfb-9875-7511f2cb33d0",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62d7203-8075-4511-8fb9-da57246f7034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30189f1d-a095-4dc3-81a1-8248e210a348"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b106c20c-66a9-440f-97e9-130e4fda1add",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83b36b1d-f9d6-4985-b0ce-00e0fcf40d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "817f9d77-df58-4413-879e-f45e9ab317c2",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6243f5-cb91-46ab-be72-f66faca1e16b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4ea2a0a-b42a-4d9f-baf1-713b97cbda6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "737ac541-7149-4fc8-bf97-6bf2050d64c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e43d14-e4e1-48b2-b72c-90cc826f22d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff595e49-f472-4c83-a372-95c70e4b1af3",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e47bba91-1251-48ad-98d4-f8122f848b27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72dcabb0-ff5c-497f-b814-366525205a59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0676c1-db2e-4c71-97f5-0de97254a3b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6250962-5792-4ea8-8721-f0cbd5f5dfad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df3db1b5-cd6c-488a-9323-2e1ed88760ca",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928bd047-f493-423b-bf23-4146ffd211e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "446c0087-032f-4e90-b50e-c42d05099476"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f97a24-fc64-45ec-ad06-ff5184abc59c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "005c26ef-5a74-4950-943b-f88a603822eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46a23630-a264-41c4-98ea-cab8f937d26b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689d49bd-c1ea-43b1-8fc1-3d2c84337577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e5730ef-bc57-4279-b825-85abc00a304e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "860c0333-8a69-4177-bbf5-6222aa17883a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3796fbf-48c9-4d21-b4d3-203e64720223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a297d4-dff1-4b93-b653-a78e6d04114f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a20d007-b6fa-4667-a8a0-1739a6f913c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "432a7216-c0d7-4217-8043-8f24d1b8455e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "078c7f99-0b64-40ae-afdc-6db9171dee83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3d2049c-dbd8-4b03-9d87-412a45f5be6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "027409bf-174a-4ba7-8a54-e54fdbb83465",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e15c586-7e28-4cc2-8ef2-5adf0a6848fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceeaae4d-ce31-4380-9371-dd82c52ef942"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f2ea460-ca2a-4662-a00e-86b0f0ea95af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9c34537-1db9-4809-9a68-8675f3f5d870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9731cae3-d414-4be5-a2fd-f1d8e7cc43b8",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfd436db-ba53-4319-9a15-0018ba0a9853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb4b5105-f32f-4826-afec-a7ae800a5956"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1796c498-ce05-478a-9e85-ea06ee623747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4531634a-11d7-4acf-9eb3-14c713d5792f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f1fceb0-d2e6-49b3-8324-1812c299cff3",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d018a10-3b8e-4d7f-8da8-913a6d84a932",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50cc576c-5716-4666-8f3e-0e6c35aee38c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1d5744-38ff-4dfa-94c6-94b5fc9d3917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48881f98-e08c-4ba3-9788-db2429da3770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722f84f3-7139-430c-b28b-6f4ec8a6d961",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec2896a3-1f20-4ec5-a97e-5c2e6492ccf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c27a9c8-ba95-4309-9fc8-cd8e09f4c014"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9647a883-561f-4dd1-ab43-b8d43e1de372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "853fad13-bb0f-4226-a480-c759239e4d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1edb52ac-26b2-4ad1-a423-29349674862d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d2db98-e046-4d4d-b8d5-db3d9041ee0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68fcfc03-9d5e-46f1-9d56-44483841256a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5855689-e3ed-4ede-85bd-c07d05faa919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abe371bd-aae8-459a-87d4-c08f84b932eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d009580-a668-4278-a0f3-7abb39cb6f10",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d25fa1-63a7-4693-8ea4-893e2d6301fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "325e2a9d-fad0-45a5-bb7b-7f1469d42f00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7b599a-fb42-4236-95a4-4a0286763e76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61160a57-f011-4b64-9711-8006cc06aad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efbf1f8b-a185-4137-af09-510a234bcffa",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8202c939-c7c7-4783-a46b-5ea4057c0031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67949b2e-8f13-4da6-ac5a-1113c44479ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce0aae31-52f6-4433-be99-e0ab70bd5eb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "438ac97a-8344-4657-8765-8020e530d0db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c73d935-1cfe-47d1-9c08-7b118b9ae5be",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31729f8e-06e7-431c-9013-dbda180e6951",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1506d86b-9adc-4df3-86b3-0567310058fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cbb60e8-2826-4d72-aa06-a2a082576eb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "469c13cb-d20c-4494-80cc-da25a42715da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd8c398-1157-4e50-b22b-d8f78e8e2172",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc445df4-858d-4f04-a025-91c109285656",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f58d5995-b52b-49cc-a2d8-6815177fbbb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aeb73c7-bc2f-433c-a0c5-39e04d52e85f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d856a53-1936-4291-b392-7c8ee0a70513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c6ed06-c7a5-446a-b645-f31f80e27fc0",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13b87867-d904-4fed-9e03-521cfc287226",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "628e8719-efc1-4a49-b138-b164661e2f55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b691ec5-b12f-4655-af80-d5921882a46d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bb89339-db66-4f83-bd6e-bcfb0e642593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "104955e3-523e-4784-9284-9f2e1eac0f29",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "123720b5-73b3-45db-8168-e485853b6458",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "805ad786-fc29-4a0d-b02e-9d1bbc042833"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e85ef3-f407-4114-aefc-432d3ccc6a1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4028257-0cae-496a-ad7f-2529d454e092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f575a738-1cb8-48d8-87b7-a68d6c716b69",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8caafc43-bd60-4d4b-9768-513f6f3556b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "319d68ef-faa1-42a0-9277-debe9fea84aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ab41b5-6ee2-4c11-9235-5eb202bc415b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d48d6ba4-d2bb-4bbf-8455-27c27a0e8840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3336946-a88c-4e3f-a969-6b5b2388d4b2",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8670e05d-beaf-4773-8490-d70f8ee42f5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5210273-79d9-4b81-ab27-148eab886214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9f2c403-e4dc-45e9-80b3-d97d6156b82c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bce4f057-fb67-4f13-984f-a85b252e522c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba57fb7-79e7-438c-ad6f-c01ea129db1f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afcd105-78b3-4761-b499-cdd1a3ff159c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2389469-ace5-4791-b2ac-151128964a47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed841b12-767a-475a-abba-663ac6e0adcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57d5e853-e0af-46b7-848d-79d7e094f6a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16940c48-e620-406c-b97f-af2629d3a712",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae784e6-1a31-46eb-b25e-a9cd86982804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "597843f1-834d-43a4-b629-0a89e2269b22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc1c02c-1ced-4a60-ac4b-2daa523b2712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f021934-8e59-406e-8859-a182acdd2baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491314e1-4ed7-47ef-91c1-b681789dd161",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca58a11-09ed-4acc-8476-0b9e811e0782",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e3ed3b7-187c-41f4-a3cc-76364b3b40b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a656802-e43e-4174-8c15-72badf7c3222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bdb6b85-2e19-4a0b-8f7f-9a83d2cb6840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f310bd-dc6e-40f1-bd12-9f5d0caec387",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1db2b91-883a-4131-b84b-3c93c2b0a074",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87f185e6-0645-45d2-884e-7c1d3ce6f113"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "803d8787-cfcb-42a5-b46a-c66168209ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ea512e8-503f-46ef-962f-2047d806eb81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d948266a-20f7-4e98-8efd-be51bdaa214d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e976b3b2-6a50-441a-a927-3126dd789bad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4caca59d-90ab-4755-b7f2-fb69678dc863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75f29a7b-b4e7-45fb-be14-5a7062f49217",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06cd0d05-596d-4395-bf82-bee718cd2af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c2f32f-c356-4e78-9359-c983bf0ad389",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0d388f-c381-47c4-b7e2-8ed76320fcda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "831ab362-b2cb-49a9-a95f-a9bb5f553c4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e55e459-ed64-4c53-a336-cb257507ec4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e084c66f-83cc-4727-ac48-1050ac01a00a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d6d5539-dbfc-40c2-85fb-3ef8fb04e047",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475ae48d-9454-4b7e-97fa-41d3a646d408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66425304-bce4-4298-804d-da520a3af646"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "842ff27e-bf44-4106-87d8-480eb8fcb67c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d5199b0-de38-46bf-9c78-429f1834d46f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e8b46a-8706-4fc0-a54b-1ea14926bb1a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9edce039-2508-4fd4-91eb-f55b271fe346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0966ef4e-2d8a-469d-86b3-aea0747bbcf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a59744d8-5108-4364-9fed-b0822d7a7e05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "117a54ab-5d72-4702-9fb2-eaaa4726be3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f796468-2e90-497c-8ed4-e7494c7cccc7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "765f9f89-5799-4923-ac37-4f46a856299c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "691ac9ad-ed11-44c8-ba27-3b3254f759e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93cb9005-7532-4024-84e6-e55d5ae165b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2646c326-a3bf-4253-a8cd-111477e4d597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f898eb-3911-44bd-91c4-bd90bb8597e9",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88429502-7a9c-4285-9ddc-1fe6352358e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e66c920-2c1e-4f0b-968f-c3f07ee52694"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "159b9741-c733-4ea9-89a4-0e6e0d8335c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5572b6a4-4782-43bb-8ff6-6ab9c68bbc39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b895d5-6a90-43fa-9811-6ddd225b7f54",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f385f0d7-e5e4-4dbe-9a12-6825be84183a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9b3d5e8-fb24-4c2a-9519-9dfd8b75e68d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42522cde-703a-41b0-9071-7dde1f64eeda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b776c1bb-b08c-4799-9d20-a9b37fc906b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c95e18-0c45-4db7-99b9-f2929805b070",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae28c51-45c5-4bc8-83aa-7109ab63c1c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ab38f63-a22f-47dd-9ce0-9dc5557a883a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e15d2d68-8d3e-4a04-9a3e-e16045b431ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ae50fd7-852a-4fc9-b3fa-dd42429a2e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea7663a-afde-44f1-80c6-a83e49b3ceef",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e936bf81-bec4-4354-856f-081a605b8e5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddb3c253-3465-4f11-b582-cbf76c6eceb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c92d53-f8ff-4b99-b7ae-c03ce492ce59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05602776-3f0b-4aa2-921a-67cdc0f2b06b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3166ba-64e7-4050-a828-01c7daa4066e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b77228-6cc7-4cbd-bbe2-4d42db37a0b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c456a0f3-0e0b-4558-b034-840c4f5b3cbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f63b7bd5-9841-4b11-8908-29dfcf16336a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdd6273a-d13c-4ee3-9027-c6969f0bbd4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf83f8f4-7f2c-4156-b5eb-b5a03491de13",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aceca0b6-0640-4028-aef0-a72fce8b0857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bf6c293-7121-4499-9e97-b553724a738e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd49f488-6c33-40b6-843a-669742e05bc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6b20edd-21ce-45c5-9b78-04b59be8e987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5718b225-27b5-439f-98e8-cbd0b45a0e0d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c78e0427-d7ad-47e2-9e32-88eecb828d06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9989680-9232-4112-bfbe-fc7e1060a828"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "729c2f03-b43a-440a-8b64-1e6dd7bb579f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68c445da-2231-4185-95c0-9b9964cbb4c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc947e87-9c9e-483a-845f-0bf8e7e97c0d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9bd3a00-7c71-431e-a6b4-56354588fb32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "730e404b-631f-4889-be1a-97ed4f266a26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5b8366-369d-4e07-ad00-bb4fb5a12d48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2edb522b-9c50-42f5-8565-be0a06d9af1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "042d79cb-b48d-43f5-8e00-29c9bd7b63c9",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8f1a4a-e083-4955-95b1-5596d5d47a12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60a482d9-647c-41db-9188-7bcd3f3ec702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9dbcc62-2db7-4589-8799-0ec500d77ea2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5af9115-06f1-406f-999a-6aafdf65e764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af8a923-d68b-4c0b-9d83-11a31f64fa43",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24062df0-2d37-42f8-8315-7eb477318d1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c987bf55-7d94-442e-b409-33b414c40aa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84f05f94-3541-43b9-8a11-b864566fe275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "333b2176-10f3-4e2e-8db3-96faf10769b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9a5b83-6414-43e0-bd25-ebe6c40fc202",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d2cc84-6e3f-4cf9-9468-aee18ba15706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bb40b3d-f19b-45ef-b726-2ed335f6ea7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4dd2f18-1156-459b-b4b0-a5c1d8e775c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deea0348-b1bd-4e0c-977a-b020169e7fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f94a6c1-caa8-447b-a670-4ce50e67c4ad",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb7f0ab-0ae1-4621-976a-99a1701f37f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc5b4691-01d9-45db-abf2-f2e87fac6f6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "840f1909-4b11-4787-8cf2-de5abd696586",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1094042-1753-47c7-993d-7a2ff7554a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c581d41c-c6b3-4ab3-8b9f-a07a237808e3",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f32009d-6f8a-440f-9f5b-8198a10768a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3afc9338-cdc7-4982-a4dd-eae61f029359"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a95493-4b58-4526-89c3-299939aeac4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e70a52f-4719-4f89-a05a-5a84693f1174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dac1ab7-0d55-4f8e-8680-298ec16bfd29",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85941ee1-6ef1-4f70-8ee3-bb934cfced20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42e1ec99-632f-403d-8a8d-5c0e1d3542ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "562c392c-c5eb-447e-8f5a-b0de353b9b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aacca7e-af75-4dad-acd3-7a65143748ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0d20c42-6e20-48be-8555-96d93e840d90",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f5887e-c485-432c-a282-2704f8160783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b23452a-ac10-4acd-86a6-2c6a0a1ce7a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "956288a9-b232-4cae-9b23-eda276eea7f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f841e00-d205-4947-bfee-685bd2a81f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7bb43cf-80ee-487c-9d65-17f7bf606230",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd20100-703c-4f56-b899-bc87719adba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25efe697-dcc2-49bc-aa7b-89078dadace0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e19465f-0a41-40b2-bccb-8f60f1946aad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5abf0065-8e9f-4610-a484-8f3faff7e23c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8f1a5a-ea9f-45b9-9f1b-f57c6e7e8286",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a14f4cf-9c34-4dcb-bdba-d0675c39c7a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf7ceb6e-c8d4-44c3-acfa-be7927f893a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b1b040-9d14-4237-8eb9-89293e4a330c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "074ae3af-27bd-4fc2-9968-0511216242e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f66286-6542-425e-8c36-8717aade224e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda3dc91-16dc-4d9e-b1db-2e9528cb5da6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b53b9e4-82af-44fa-a20d-d1f31b3d9dca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "412de3be-e9a4-4e18-8d1c-b6ece1fed210",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf1272a7-ef4c-4705-8f48-9f26ac3bc762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b05eecf-d78b-4c6b-95df-a5bbdeb7e3f9",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a183dc0b-166e-4f37-a7fb-09f5bca2b560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f576a69-3112-4f5b-a0bb-800dd7053456"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60cc5095-6f3f-4198-b87c-2765a0e7913b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "531194e2-e9eb-466a-a9b2-1dfc6135f0ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a976a0b7-6ef4-4dba-bfe6-679e69aea3d9",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a989d4-03bb-4ff2-960d-4ae08f16a2b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d38c073c-6d95-4dfa-990c-c945663bdce4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8259a4c-4472-46a3-9fc7-8e7339a85ce2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cd31efa-00dc-4238-b98a-9adb6cb6629d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f42f11-71f7-44e1-b4ea-07eb4dbdfcbc",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a780ca1-db9a-4eb6-9d1e-c221a286b691",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eaeb244b-5ff6-4345-a869-a7ac81a76b7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f30f296-61ac-46ad-9559-7c4653ff0dc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3c3680f-74db-4a0f-8d8c-3cff0cfc4ed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8694db8a-9d97-4ce1-b788-641e1c2ea409",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572f2ddf-d426-41ca-8d68-25574e85b3bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0d2fc53-8af4-4d37-809a-5e26e7d15587"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca2fcb4-3a59-475c-b6d4-2155cf8644ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "107932da-07fc-44f1-baf1-a9af86b5f957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3301ef78-0dcc-4087-b50e-a5aad7614eeb",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a38f3a8-3eb1-47f3-8d50-3a9179444f9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfc1261a-fd87-4472-b220-3c5049e01449"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b7516f-9f7c-4bdf-8232-8eb5f973fe10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94e109c9-d3d5-466f-b6a1-15c78d9e8a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b1457a5-e22e-456c-b534-e7843b1943a7",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce3971c-4813-4504-8a64-9c8432cc446e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "556b89a7-68f6-4fb8-9918-1721c50c7c7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cdcbc6e-6a13-4c35-98f9-875532b11c79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad27f5c5-106b-4334-8fc2-7ee1af8d1caf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8cd8778-db6d-4a11-a8d2-20d829d44e98",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d0e63e-cf72-4444-97db-ff49193f81e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b1e9047-78ec-4430-8209-5da47ddc3c49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fda6038-1fc7-452b-9035-73aa0b50d57c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d89701a-b34e-405c-8c04-2594df52707c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63514afb-ad6b-46b3-b6ea-fccd690e2690",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82485ee2-6355-4a74-8987-ad14adec4642",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f07ebbd-c334-4690-9aeb-03f149347b58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48bf632-a963-4999-87d6-5083ac799045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efc1121e-3a8d-4ec8-b430-cbb5b6c9ec81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6dc7e9-1854-47dd-a4ec-6b0023a6fb4f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57715814-8067-46bd-957e-d971c9d20b2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bff6b59-540f-4e4a-80e5-36f7a5535299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e341793-33d1-4970-8397-600f813b9392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f83e353f-a54e-4b49-b025-695e4b1712e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4288fe4b-0254-4f61-a7f8-7525a7a57454",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8faa167-5b92-4fcb-984b-6de353fe48c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d000eb89-9866-4e94-b035-a891726be68b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba8716d-34c4-4f8d-a8e0-7b4adeb639a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3e2b729-1428-4835-84af-107b925f2ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d45a19d-a1af-4787-8009-8c394db76d70",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fea646a-d403-431f-aba7-f6817ef867f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9400ce5a-4216-49c2-83d6-6cb662864739"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fed0395-7acf-4ed5-940f-582bf38b73db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "934e6341-0df1-480d-bfb0-1b7659d2fa3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04637658-8603-4b3a-bdb0-899e0f592803",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d77e3d-407c-4786-a30c-3a157206b79b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8df36a32-7f47-4bfb-bc95-11e62905b691"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3351e0-08a4-4727-8c56-9fd564afa537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f11e3f7-f125-402f-8cb2-5bb58104bd58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c97b9fbb-d180-4cc7-906e-d4af127f1773",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81650f0-e640-4d6c-a8f7-0865649f21aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd23348d-cf7e-4416-a7e5-72a2423a1954"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff01e1a-6de2-4891-a1be-bda93e68c478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "005a2a82-935b-4b6a-90e5-038944638d45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16027f62-fa54-48a7-b0aa-5de3ccc5faba",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b08eca3-a3c0-4d5d-8389-3f485c37a5c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f85588c-ea4f-4801-b470-d57abde2ddec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8192a5c7-474b-4abb-a581-c93b61fa7057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1940e788-60a2-428a-91b1-c017c5ebd630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dfcdc61-2148-4f0e-a46f-b7095060701c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d22fd2-5f8c-415e-95a5-2446dbddb80e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3386047b-77b2-4077-9148-bfd4b595d385"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fcbad3d-de6f-41bc-bf74-c6d630e2fc06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f4f8d7c-b5e7-4042-978e-7ed3af32d723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f94b96-067d-4124-88b3-9b74487aa653",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2db9f3-893d-40b9-ab6d-c0a9b77085e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cb74cf6-2c33-42b6-9eec-a0fc4e38b718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "406031e9-9cce-4e48-b2d1-381574d02e10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0510a434-ac27-428f-a035-89b9f13e31f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79b6dfb4-d16f-4db5-aaff-67050de83c70",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "998c33ef-15c6-4bc9-b79f-f53130998a72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c15895a-63ad-4af2-9410-e5b8b4410c96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eca1992-41e6-46a8-92d8-5d4f6c980212",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a810da1a-e620-4e74-ac8d-0c44d2679a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9117082a-c0af-47c6-a8e0-5d45951c4c0c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf47ce77-55f9-42ba-b1ed-999ab10d19c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ec813d7-1aad-4a06-80c4-61b7decd9b4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c2f270-eac4-4448-b996-0b249cf6c1a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee86bdcd-5d84-4367-a8f1-9107e914c3dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8046583d-a77d-4673-93c7-326d5a7dea21",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444e0fdd-fba0-4377-bc2f-553276735e38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c4382fd-5dec-42c4-9b2c-8d2b2919bd2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b7292e9-464e-41ae-9f9b-f3c9365063e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d40d8bcc-2347-44ed-a359-9665282dcb2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486924a2-8ae2-4834-a01c-cc0eac50b233",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8aede3-1e60-46c9-8829-4a17f7e1aad4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de74f077-47a6-4d53-8c06-f6f1a77304e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b27c87bc-0348-4b61-9ac1-40091c4c2a2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e6aa8ea-12b0-40fa-9090-0ed1c7dd1d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21600241-e0c9-42a0-bd9d-0976df9c87db",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57de0a5e-01ed-41dc-bd9c-d47a98024103",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0286c727-ff4f-4b0e-8fbb-cc72d24c5f8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2833425-9bd5-4873-a25b-73ddabc8ab47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dc4da46-5489-4fc5-90d4-008c45823ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733fb858-da93-4b07-82b2-a4c9f013fb16",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f97ef9b7-f9cc-4093-b5f5-ee683284228b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3519f10-91aa-44d8-9d9e-f08501062639"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8579e2-186d-4ad9-8e4e-af31b28310d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b786645b-392e-4649-ba98-6f4b5802115d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77214fa4-3869-4b17-8873-1b47816d1cef",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9489d90-f386-4f6d-888d-fbac492ca622",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e5803f6-41ab-436a-906d-1ab5dfcbc2a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a02542d-4f6a-4b41-a68a-5aa24e42c893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfe20ce2-4aa1-49fc-8c3e-2820d137797b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4255aa6-69a6-4c41-be26-d7285abd109f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "402aef27-a3d3-452a-b7ce-7c12e21c4ea5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a75c6b8-e4ea-498c-868e-9265b6648970"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2c8f171-5952-4802-873a-e6e52aae61fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0391340b-720f-4cbc-a15b-9b1b4c4a6a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083d5d16-e376-4466-a696-bcb326985adf",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7272be57-8a75-4221-9ff9-a254e397c115",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b11b4f47-7bad-4577-a611-5981d9f87ef2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b2048d-0547-43f9-8372-0d1e0c0ca993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6936da18-9d78-4b16-b869-0a7fc6347065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70249a64-468f-4075-a2cd-063c61188142",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b7577ba-c55f-4f71-81fd-80c9dda9fe79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54e0102e-a700-4704-9413-b8d7b48cee3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10d3982c-06cf-439f-b979-6e0985ccee67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "001971af-5c6b-42c6-a733-6586ae93a1ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4471d91d-99e1-4e22-8949-cb8f8e5ff28d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa5791d-1939-4297-844a-94f146065ea6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d807fd73-b36f-4465-a99f-a5e9ced5a73b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8152cef-1045-4d6d-9ab6-eca9b411cb1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaf29f6e-b4df-4984-a81a-a35ff92476d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ee730e-4007-431b-a632-ca35ff238a9b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301767c8-be30-49a4-a569-8e03798b8f83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f5eabde-68ce-4b01-8620-7590ec490a23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "453795fe-3c62-4a0a-a9c5-b0e0b0414629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9086011c-e980-4563-b57f-8c7d407614ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697cd638-4a91-47fe-84db-018b4c7a8c10",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57bba6da-08ca-470e-b6c7-de1fd4c368f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b2344bd-ffa9-4bd7-897f-7968eebb7598"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d83dd9-1e0c-45a2-bfac-1e49ec178c02",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "389ca0f2-3a7c-4984-b31f-732e9ec7cc9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e76f4b4-f0a6-4e60-924f-a1cac11e50ec",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e27ef16c-3331-420e-a306-f2421c355150",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca30fb21-2a1b-460e-aff3-d974ac942247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f8ce6e-bdbb-4bf6-a6e0-d597cc118ae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "822f3156-2845-4b2c-9feb-98fbc87ce344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea5c7af-ac97-46f3-9fad-46bc671e0e8a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9945336-058f-48a7-87db-b2f9bc10308b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5138e92-d912-4bef-b429-7523aa57d2d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9280f035-9882-489d-bb0d-7b4b4aff7636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d731678b-dd02-4104-9de2-0cc3f63e6991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1681cdd-3dc5-4e38-bda4-f12b9255ee15",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88aeccb-a9a0-4e6b-a402-a8867efc0ced",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f385f20a-9ef7-454b-bee1-521e1913ace1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "485c7d67-b1b0-49e4-84e8-e948756b3d42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b308c286-2689-43dc-855b-92133b90f357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "549576ca-e580-4c1a-94c1-ef2ea7d5fc46",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eec794b-a23f-4a97-a84f-6c52c47c8cb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "058fe9b7-ff5b-4d3b-a6b7-5c4da50cef9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "974b7b66-cb93-4c95-afb1-91d69971f34b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17424e3b-7284-41c5-a17a-6291ff0e7fb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb76e10b-3250-4ce9-8147-887432624c24",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5ee58b-e9d2-4759-943b-1d842268fe9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "172db94b-bd36-403e-9016-95425b568877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e4127d-01f2-413e-9daa-6cc7d2b4181d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13f5db72-6a25-4c34-82c2-da7fcca5173d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f03d2b21-3a0e-4a40-bd2d-bc49ef48fc32",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96bd7a40-e2e0-45b4-92f2-40635a7a722b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec38369b-a3eb-467f-9782-3b57fd838a27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb9c953b-d00b-426b-b854-be1781559cf3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2ccbce0-3fa6-4bd3-8380-9c76ea70c377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e448150c-1da8-4884-8d8d-249e43b4b94a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "737faa49-4c4a-492a-869c-306b67b8489a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44b8a963-d8bf-4e7a-8b59-4a382c41a5fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5133a836-c9e9-4435-bbec-51f98214d8ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb24cb67-4bc4-4ea9-a1a3-a94c10a3c8e0"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f14eb9f-9e2d-413a-ae60-f27203678ebc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "58525a51-d013-4e2f-8c15-4724067ab533"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2970c79c-c6ad-4084-a0ff-7b25db826f3a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ce8f93c0-2897-48f7-baa6-ec8b87f81b96"
                    }
                  }
                ]
              },
              {
                "id": "05349696-8ce9-4285-adba-34c913be2fe3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "828375e0-f7f2-4efa-b00b-338fc5a292db",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990e7f09-f473-4cc0-982c-6562e55b4c5e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ea575b05-baef-42ab-9b8c-a432bbe3d9e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "745bd710-c0cb-4a77-971e-1dd4d5ec522b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "474cf878-139b-4669-b86f-a5d4a8f0af1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44782c1b-6e12-4519-944f-e38e67ea8a2e",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa95fff-e8a3-459d-b06f-f00dd65e10d7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "08e62f55-125d-4775-85c8-695717afe7c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad7de60-74ad-4da3-87e8-ff219fbc76bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0566a5e2-d7f9-43fb-970a-1688c22552c3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd52ec04-1c77-493b-8027-0e03e4550dce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f59b3fc-c004-4cc3-861e-eab4725a5231"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9066652c-28a1-4aed-8a6f-b30bf57f34e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f84474f-777b-4c67-b077-c21894dfcd0a"
                    }
                  }
                ]
              },
              {
                "id": "280a0214-57cf-4b2b-938c-8d515ded5248",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ec9e665d-a0e8-47a3-8ddc-2d9394acdb23",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8df8a87-d250-4224-8082-2caa2f35545d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "0690517c-6f72-40e9-a519-acc650afeca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04429fed-3590-4cb4-a625-cb89bff0f85d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded51362-3383-4016-942e-c4fe76e629d7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "96a643d0-3df7-4f0d-9ba5-058ba89654ea",
            "name": "Positive Testing",
            "item": [
              {
                "id": "770d60b9-caf4-4291-97ec-838f01d22bcf",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ee0f024-76d5-4a9c-842b-965b3688dea0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e6b729a6-f87d-424a-8fff-8ccdc6ff5fcf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d4f82eb-4285-48b1-bd08-7e4f94865000",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e4b8b1b-3841-4844-90c8-24cb7a2b64a4"
                    }
                  }
                ]
              },
              {
                "id": "da605b2d-8bcf-480e-95c0-c8ad8e03e7dc",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "56708682-2c1a-4dd5-92ab-64ed6a11a879",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3517850a-b75e-4124-b094-b4f5bdbccfc4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0cf65c65-ac80-400c-a714-c92a7235a72a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2d2bf69-615a-4351-9395-6ab5434949c4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1ccecfc2-82b2-434a-84dd-cf68d089351d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "fe0afae2-2d31-41a2-8ecc-8c8ff5ce0ce4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "13126900-83c0-4f58-932d-f165b7ac2032",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d3eecf9e-16be-441b-8dea-8048bda362a0"
            }
          }
        ]
      },
      {
        "id": "e157174c-677a-4d55-aaa8-5679e88ccbe5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8c94935c-32ec-489e-9d1f-5ebc6865b980",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2b911fec-3dd5-4be7-a567-a38042622d25",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3eab2a7e-0f46-488f-ab53-bc9938983804",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f82528d-4aa2-4b7c-ac34-9f6a37754882",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3e2207e0-be2c-4466-94c1-bf55ac1ecc34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "735146f4-ce50-48db-ad97-4aacbde39737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c4e20fb3-6297-467c-9380-8dc68b4e39a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "737e5b7e-97cc-4687-bf67-000eaec37781",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8affae-c5e9-4631-b906-a64d22bcedad",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3240ddf6-7e26-419e-898b-132584410f64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a128af39-0201-44c8-8a89-9be2b8b94ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "180e9b31-a157-416c-b3ca-33aeab69f76b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1266bb70-fade-4b43-abc3-51a921e14370",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ceae5488-3e6e-41ba-88a0-216b38e323ab"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "003a6617-0823-4c49-b30d-17fb9cfba3fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ff8cf7c-14d9-4f11-af43-522bed0776aa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "60278cef-b254-4192-b554-7230a72a390a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "678c36ae-c306-4cf4-b81a-e3c26918de80"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca8fbdec-2af2-4e1b-ac82-852359e03245",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ebee0781-5bce-43fe-affb-44daa85071a5"
            }
          }
        ]
      },
      {
        "id": "ff31196f-1361-4542-b519-df44d784919c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4f9973b8-3627-4de9-b04a-5dd3415cd4e7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7899e37a-6bbe-4e88-9588-d01558c0d83b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e495eafa-2cf7-4800-9419-54dfad9eddfa",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "501532fa-e634-476b-8ae5-09109dd93308",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "818d4c0e-6685-4861-9765-dc1de2263fc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e8df37-4686-42aa-b8bb-ecac547eaa70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a92c1a08-b89b-445a-a713-c00ea0ec5164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41425bbf-c9e3-4ece-9c19-b32a2c4828e4",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a76c997-cf09-4001-bc27-3778f662bee9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "549a7f7e-b9e9-428b-acb6-2c2132019d1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea85a8b8-a053-4ef8-a547-0f66d2a43212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f1bdd21-eb4e-45bf-943f-4eca90e2996d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4328c0e-9952-4d30-971a-c6bc449cacba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5478e7f2-e387-4c3c-819c-2ebfd8ad88ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2be5117-754d-4a65-bd6b-f3322912517a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ccd91d9-86f1-48fa-8d9a-818b4fe7582c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "af813630-039e-4974-8bf3-0a1e155c4d3d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "53deaec1-c345-4f5a-8948-b51b34e52ed7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "567aa548-64df-4d59-9038-4a68cdfc37e6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "09900784-ea25-4134-883b-a04478402df4"
            }
          }
        ]
      },
      {
        "id": "83da1d64-21c8-431d-81f1-b5ea53051e8f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "06fa5a21-b08e-4eb9-a44d-f1e2de887137",
            "name": "Negative Testing",
            "item": [
              {
                "id": "47eb9d70-d068-4d0e-af49-da10d409a140",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5d82a409-c27e-40f2-bfa5-271599a4e043",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53154a57-90d5-4bc7-9341-51e1dd8580ff",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "da9973ae-11dd-4b0a-ba9a-8553f69e39aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3245e8e7-2598-4ef7-8473-2d33634c9e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0202ba54-1344-4e78-ab97-f923c2dc2f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cea6bf2-91bc-4da1-8c3e-e03c93ddd370",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec2554ec-a656-4ba1-b3d6-27d1562a2918",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "27cb05fd-3cae-4e0b-a7c3-31dee3ccba22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b9f170-9b9e-4a13-b4f3-0cdff5bdda35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8367a9da-1229-468b-a49b-5dea75273372"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c40a41da-0da2-43bd-ba60-ff42d0e3988c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "93aef4db-18aa-4e5c-bd5c-df80817030c9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "38110400-3943-4ad3-be00-b672e8399af0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a9409d5-4df6-405d-95b1-dbf44b83f1f0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "64eb5406-578f-4510-bbca-294270ccd880",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0f4414db-8b59-400e-9464-927c54ff7681"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "53a547da-2460-478b-bc17-46417327179e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "63b42a37-660d-45a1-bd86-df6041063975"
            }
          }
        ]
      },
      {
        "id": "6ce711e8-daf2-461b-af2b-020533982114",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad75b9da-f116-43e3-bded-446c25fa7a35",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e8130365-3eda-4331-b41b-9e4d2907e6d0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7c6a9572-91e0-49ae-b932-7d7acdd82847",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5451479f-d158-405a-aed8-755588ab4c9b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5e20a950-4cdf-4df9-9d05-332c0ee8c0c5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 405,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 473
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 188.39879238585405,
      "responseMin": 14,
      "responseMax": 5253,
      "responseSd": 759.6985971536207,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1671928779853,
      "completed": 1671928865081
    },
    "executions": [
      {
        "id": "139676d0-f9ce-433c-8a39-560f1b193d90",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "80b7cbae-08c4-4606-97b9-fcdccf3933e2",
          "httpRequestId": "d871b7ab-5b43-42b8-a0a4-20d8bdcc8a82"
        },
        "item": {
          "id": "139676d0-f9ce-433c-8a39-560f1b193d90",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "93d359c3-dae1-4e0a-8576-24e144b8ef4d",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 0
        }
      },
      {
        "id": "5e1629e6-71e4-4288-899c-06a6fd12e4f0",
        "cursor": {
          "ref": "1bf72830-aa70-4ac9-84bc-18d912703931",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "06cd8833-e245-4ed8-99e8-6c7d490ba425"
        },
        "item": {
          "id": "5e1629e6-71e4-4288-899c-06a6fd12e4f0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7ed264b7-0809-4dfe-b56b-3aa1f321aa5d",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "2a0b2970-02eb-4dc7-a231-76bb9fffae5f",
        "cursor": {
          "ref": "0826e254-2d92-44b1-9531-8f220afa450f",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "0d59c9c4-8354-4c07-981b-88c27a5df45c"
        },
        "item": {
          "id": "2a0b2970-02eb-4dc7-a231-76bb9fffae5f",
          "name": "did_json"
        },
        "response": {
          "id": "8a075c95-a53e-4a76-9d3b-c8c372776704",
          "status": "OK",
          "code": 200,
          "responseTime": 311,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db3050e-7872-43ca-a1f7-ed64b2ad0971",
        "cursor": {
          "ref": "ad071b7b-bff5-48e0-89a1-75349618a830",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1072e9da-15ba-4c12-a638-b51824546b81"
        },
        "item": {
          "id": "7db3050e-7872-43ca-a1f7-ed64b2ad0971",
          "name": "did:invalid"
        },
        "response": {
          "id": "9498ed20-1b46-47e8-b9c3-67ed42f46ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db3050e-7872-43ca-a1f7-ed64b2ad0971",
        "cursor": {
          "ref": "ad071b7b-bff5-48e0-89a1-75349618a830",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1072e9da-15ba-4c12-a638-b51824546b81"
        },
        "item": {
          "id": "7db3050e-7872-43ca-a1f7-ed64b2ad0971",
          "name": "did:invalid"
        },
        "response": {
          "id": "9498ed20-1b46-47e8-b9c3-67ed42f46ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e7b5ba-21f8-4937-a161-e60ff43b83c5",
        "cursor": {
          "ref": "9b1899c5-dda5-49b5-b367-18657d4ba59b",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9c96f315-d194-43d8-b22b-13477b712cbe"
        },
        "item": {
          "id": "78e7b5ba-21f8-4937-a161-e60ff43b83c5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9252d5b2-3fc7-4062-aaa8-ef56c2146354",
          "status": "Not Found",
          "code": 404,
          "responseTime": 329,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c54dfe-4f2c-4acb-ba13-fb00f37757a1",
        "cursor": {
          "ref": "e483adf1-8e05-45c3-b46b-0d2edafd7c15",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "62e557bf-e382-4584-8411-486493cd5e7c"
        },
        "item": {
          "id": "c9c54dfe-4f2c-4acb-ba13-fb00f37757a1",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ef5f7605-6310-4309-a87a-9573f7aaa437",
          "status": "Not Found",
          "code": 404,
          "responseTime": 57,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c0bea9-3e9b-4c8f-a873-edb4240c21f6",
        "cursor": {
          "ref": "7d0c5046-d359-4088-b15d-c3c334c8bca2",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4afea5fd-ff2c-4b99-9491-85fa123fb5bd"
        },
        "item": {
          "id": "20c0bea9-3e9b-4c8f-a873-edb4240c21f6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "535768ff-ef86-416d-a847-5c6a51db9332",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb73c54c-7635-4091-b4dc-8231d74ff46e",
        "cursor": {
          "ref": "6b663c67-1623-4a00-b77b-00f22fd07c43",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bc399920-f546-49d1-bf76-69b6ec7cd640"
        },
        "item": {
          "id": "eb73c54c-7635-4091-b4dc-8231d74ff46e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6fdbdfb3-f3e5-4418-87e2-a0a7a0c9603e",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "eb73c54c-7635-4091-b4dc-8231d74ff46e",
        "cursor": {
          "ref": "6b663c67-1623-4a00-b77b-00f22fd07c43",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bc399920-f546-49d1-bf76-69b6ec7cd640"
        },
        "item": {
          "id": "eb73c54c-7635-4091-b4dc-8231d74ff46e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6fdbdfb3-f3e5-4418-87e2-a0a7a0c9603e",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "c75bec19-93d5-4fd0-826e-d20f26accf9e",
        "cursor": {
          "ref": "e58418eb-1ae9-4dea-82ec-b0231af90640",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c88e9fb7-d2a1-4046-9462-f23dbbfe1e00"
        },
        "item": {
          "id": "c75bec19-93d5-4fd0-826e-d20f26accf9e",
          "name": "identifiers"
        },
        "response": {
          "id": "67de9dc1-9a3a-4625-900d-dafbaeae2862",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ef5bc3-842c-41b2-b459-1a1d56cc9afc",
        "cursor": {
          "ref": "52bd8924-5b10-4eba-8e99-5c7056d0788e",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "65201338-56be-43f6-a3f1-1b241de47c36"
        },
        "item": {
          "id": "b9ef5bc3-842c-41b2-b459-1a1d56cc9afc",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b4440cb8-8379-44ba-952f-93323e1f5f39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "b9ef5bc3-842c-41b2-b459-1a1d56cc9afc",
        "cursor": {
          "ref": "52bd8924-5b10-4eba-8e99-5c7056d0788e",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "65201338-56be-43f6-a3f1-1b241de47c36"
        },
        "item": {
          "id": "b9ef5bc3-842c-41b2-b459-1a1d56cc9afc",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b4440cb8-8379-44ba-952f-93323e1f5f39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "eacfd579-9305-4752-b173-c96761c4ab36",
        "cursor": {
          "ref": "48ef53b2-08c4-41f5-951c-334be484a28e",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e8d4accd-d222-4339-8581-70b47ce331a2"
        },
        "item": {
          "id": "eacfd579-9305-4752-b173-c96761c4ab36",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2b8666b8-66fc-4ee9-88cd-598172530573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "e3019901-192c-49f0-b20f-8f0371130802",
        "cursor": {
          "ref": "0fc9dc6b-c0fa-48b4-94d6-1379786bdce5",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "801d240b-252e-4462-8327-1e23bed0a0c8"
        },
        "item": {
          "id": "e3019901-192c-49f0-b20f-8f0371130802",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "c4844cbe-655d-405b-88dc-c7d7286e066f",
          "status": "Created",
          "code": 201,
          "responseTime": 137,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "6bad0ada-ae23-47eb-8250-4709391d0f3f",
        "cursor": {
          "ref": "5ca91c4b-62ab-47de-837f-0f9972ea7e35",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ea4bc010-cbe3-42af-8869-4edc5a6f4bd7"
        },
        "item": {
          "id": "6bad0ada-ae23-47eb-8250-4709391d0f3f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "dcc48888-1867-45da-b4a6-367280455bb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "fbdb2fac-f9f3-470f-9bcc-4ecd3325eb77",
        "cursor": {
          "ref": "dd525de7-db23-4840-8c69-5d0e1a8d9b0b",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d1831bc5-374b-4008-9fe0-1f82e10f7840"
        },
        "item": {
          "id": "fbdb2fac-f9f3-470f-9bcc-4ecd3325eb77",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "9a454421-a6ae-412c-88fc-3fbbd02b4d25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "590b46ba-200d-4b3f-ac91-4b6e0add3e46",
        "cursor": {
          "ref": "0f052574-71dd-4798-8e1b-65c8a422d56e",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1554321b-7e72-4c2b-9c6a-89be5d87b984"
        },
        "item": {
          "id": "590b46ba-200d-4b3f-ac91-4b6e0add3e46",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c081e2c6-62df-4deb-89ff-72e1213e3f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "5e43a9d0-f526-4e57-84f8-8bde7d2f92a6",
        "cursor": {
          "ref": "85594595-db38-43db-a09d-b6dc861b1262",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a4e13184-a2e9-4af9-9183-90b6e5b369fb"
        },
        "item": {
          "id": "5e43a9d0-f526-4e57-84f8-8bde7d2f92a6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5f492a9b-cba3-4ae3-a9ce-0f970fa42582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "a00d2345-0662-4238-8d55-0eec38177579",
        "cursor": {
          "ref": "63ed1223-6754-47cc-9cf1-be86de135268",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "58d110fa-4ecc-443c-b490-df05ac51d985"
        },
        "item": {
          "id": "a00d2345-0662-4238-8d55-0eec38177579",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f3780c64-aef5-4893-b917-811f0b54f2c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "6e0ad3de-ec09-42f4-a852-88935a838468",
        "cursor": {
          "ref": "21b65925-bc3f-469c-8e4e-2ff5704e525e",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "702c4ef0-3ce9-40ac-b662-8d076b1571ae"
        },
        "item": {
          "id": "6e0ad3de-ec09-42f4-a852-88935a838468",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4b8ea16b-05b0-4def-824a-ebfb79997cdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "9f554dae-ba0c-40b5-a6c4-6c5ee5bc326c",
        "cursor": {
          "ref": "5e80c62d-b5ab-419f-b9d5-f53c0e44eb77",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9dc8ed60-22cf-4fc1-9336-1327682d411d"
        },
        "item": {
          "id": "9f554dae-ba0c-40b5-a6c4-6c5ee5bc326c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "18acb30e-869c-46fd-ba82-218ee09681f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "54a73890-5567-4127-98c7-4b94c078dd3e",
        "cursor": {
          "ref": "ae88f137-0cc4-44bf-99b8-1b8a19a0e839",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9d59eab9-397c-4d31-a7d6-cca1de34d701"
        },
        "item": {
          "id": "54a73890-5567-4127-98c7-4b94c078dd3e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "85c5690c-6798-4d4c-9e00-5f4adf2528b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "49c2e43a-3a8a-41d4-ab75-da21d9a661d9",
        "cursor": {
          "ref": "c705f866-cf87-4d4f-b7d3-b60592bf63e9",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6a122c9c-cf90-4278-a4df-ddd87727c4bb"
        },
        "item": {
          "id": "49c2e43a-3a8a-41d4-ab75-da21d9a661d9",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f37c8707-a5cc-4169-a6ba-93b85f5840d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "e041bb92-c3ed-41de-a57a-08a1ad8e3c4f",
        "cursor": {
          "ref": "e1b60183-4a7d-4b27-870e-a67a885f501c",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "810be16d-40ad-477d-b490-e25ecece58e1"
        },
        "item": {
          "id": "e041bb92-c3ed-41de-a57a-08a1ad8e3c4f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ab525010-0143-44b8-a3a8-4a9a2474aa9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "764f0441-1e5a-4fa3-a666-5f2900e4d087",
        "cursor": {
          "ref": "d8cbbe39-edbd-407b-954e-0a3b969ec3cc",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "92216050-f6b6-45d2-8a24-346225308264"
        },
        "item": {
          "id": "764f0441-1e5a-4fa3-a666-5f2900e4d087",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "b12fc87d-cb75-461b-a9ce-d78fe2e2901e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "2e5a4545-7e3a-4133-86d0-380c8df1400e",
        "cursor": {
          "ref": "f916656d-e054-42fa-a39c-27663e70653d",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f60134be-1af6-498d-a2b2-732ba8b11926"
        },
        "item": {
          "id": "2e5a4545-7e3a-4133-86d0-380c8df1400e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b28571d6-165f-44bb-8efd-23054d9e0196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "20c51f5e-87b6-48c3-9644-ac28eebfb55a",
        "cursor": {
          "ref": "c8833650-d83a-4fe7-9cfb-79edee603d3e",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7c60f2e1-75dd-4a20-b244-52f139e46f9c"
        },
        "item": {
          "id": "20c51f5e-87b6-48c3-9644-ac28eebfb55a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ee1a9942-e2fc-4904-9acc-fec50e98ce61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "75c1ccf5-fac8-42f7-a1dd-4fe2014395a1",
        "cursor": {
          "ref": "cf4f48e0-1264-4dad-aa35-7e3e294291bb",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "efb14f80-d7dd-48cd-b253-d278a98d9571"
        },
        "item": {
          "id": "75c1ccf5-fac8-42f7-a1dd-4fe2014395a1",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "285cef3e-db11-4f42-ad07-705df491377e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "8b15e8c1-8a2b-446d-aca1-2937a7e88bce",
        "cursor": {
          "ref": "bea934c2-dacc-4272-ba6c-2d84cc8c85b9",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a1b0062a-a8f7-4763-b29a-7386f6d15864"
        },
        "item": {
          "id": "8b15e8c1-8a2b-446d-aca1-2937a7e88bce",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "0ec7c244-c3c8-40f2-83fa-4ece64f9562f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "9305360f-7035-4f36-b7f5-58b74da5613f",
        "cursor": {
          "ref": "1554f338-ef7f-4d7b-ae3a-249943483e54",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "950db0f2-4fd4-42b7-8a4e-b5ce59263bbe"
        },
        "item": {
          "id": "9305360f-7035-4f36-b7f5-58b74da5613f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2aec62ba-ada1-4b5f-824a-b73f4a9acd97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "1977509e-d5eb-4a5f-8228-84b23289fe81",
        "cursor": {
          "ref": "66e410a7-1bb5-4b2a-8056-ddb9f78ae0c9",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e9cd48d4-d4cd-460d-91fc-61eaf35d8967"
        },
        "item": {
          "id": "1977509e-d5eb-4a5f-8228-84b23289fe81",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "dffd678d-afe0-44d6-a982-5bfce0f5e4dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "5d847b3b-0819-43c3-b9a9-cc2835da2f9b",
        "cursor": {
          "ref": "73eea0e3-499f-4219-866c-19885c89a9bc",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7c6a1c64-89c8-41b6-a7bb-cca8968a6787"
        },
        "item": {
          "id": "5d847b3b-0819-43c3-b9a9-cc2835da2f9b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "aa7bc87b-ae64-478e-9e5d-ad6dee7081ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "37bbe620-ed92-4eae-aa46-698e592b6ddb",
        "cursor": {
          "ref": "43e9de97-c838-406a-ac5c-402cd79b2261",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a079401e-0b45-4f1e-9561-a9c32f5101c8"
        },
        "item": {
          "id": "37bbe620-ed92-4eae-aa46-698e592b6ddb",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c16db303-98ca-4187-a67f-89f9ec49836e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "057cb972-ad19-444d-aa35-ba0f4b2aa34a",
        "cursor": {
          "ref": "d4b953f7-bc96-4727-830b-051da604ca3d",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9b7ffe93-dbf3-454d-82da-dc3e86fe88f5"
        },
        "item": {
          "id": "057cb972-ad19-444d-aa35-ba0f4b2aa34a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "712ee4fb-b087-4962-8912-061ebc3b4979",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "c61efa5a-b4b5-47e0-84da-cdae96faa530",
        "cursor": {
          "ref": "e146d15f-94d6-450f-847a-0c7d7a2fcee5",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1f95f7ec-6107-4086-b3f0-a23d0a89dfdc"
        },
        "item": {
          "id": "c61efa5a-b4b5-47e0-84da-cdae96faa530",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "072689c9-f207-4309-929d-e741e1510d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "6be12c3c-b371-448b-8dd5-b74af216fbca",
        "cursor": {
          "ref": "189ac71c-c11c-468d-9c50-7662152f8ce0",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fffbb127-4ea6-482f-b507-82e06d8a61ce"
        },
        "item": {
          "id": "6be12c3c-b371-448b-8dd5-b74af216fbca",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "27724d59-d401-4b58-b9cf-dd3f03f467f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "e4ae73fd-5822-47ef-b7b3-9f555e3bdbe2",
        "cursor": {
          "ref": "9c68c682-09b4-4bd3-878b-d1393e60e45d",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "7430595a-93ff-4d66-9ff8-f41e3bd2fe3a"
        },
        "item": {
          "id": "e4ae73fd-5822-47ef-b7b3-9f555e3bdbe2",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "3a1b690e-dd24-4471-8144-f89d1009e837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "0663033f-6477-4679-89c2-0aca9243014d",
        "cursor": {
          "ref": "de54e1ee-064d-4752-8ed9-dbac490c6681",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e6fa1045-b7a2-4a8e-8e6f-f158bc68f887"
        },
        "item": {
          "id": "0663033f-6477-4679-89c2-0aca9243014d",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5ae95bc5-d157-4b06-bb69-2ac6463b6318",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5097,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "4302457c-be62-44f8-b4f7-e29d40edb4ca",
        "cursor": {
          "ref": "5d072b77-2dd1-47e2-8a3d-b84f5b80a7ef",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "358ad022-e4c9-4efd-87dd-bb803576dd51"
        },
        "item": {
          "id": "4302457c-be62-44f8-b4f7-e29d40edb4ca",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "673e75f9-0a45-44a9-8e7c-23e0c6212bd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5253,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "0bce28bf-903c-4358-971c-69d8392c8f44",
        "cursor": {
          "ref": "d400e199-4a7c-42b7-9747-f23a05c29a35",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6a456539-4f9d-4c08-8dfd-b18b59758dae"
        },
        "item": {
          "id": "0bce28bf-903c-4358-971c-69d8392c8f44",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b09c1928-4abc-4429-bfeb-f03cd5d31915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4254,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "cc1f56df-6d0d-4888-8cdd-ace7cdfde956",
        "cursor": {
          "ref": "14a30256-e742-41ac-8ff4-d341a33c7e88",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7859db6f-7012-4696-8011-6a94b13c4b04"
        },
        "item": {
          "id": "cc1f56df-6d0d-4888-8cdd-ace7cdfde956",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a2805e59-c570-4c37-a7dc-aa47bb1ce354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3854,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "7531ebd3-b6a3-4747-8808-872060246ba9",
        "cursor": {
          "ref": "b276911b-226e-4c33-b6c0-f7550707edb3",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "253801a9-92ea-43b8-aa4b-3ca2b28ea610"
        },
        "item": {
          "id": "7531ebd3-b6a3-4747-8808-872060246ba9",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "8511b22a-8df8-4e15-85bf-b43ffa63816e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3740,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "8cb805dd-12a5-4e2f-84e1-e22e756acb8d",
        "cursor": {
          "ref": "2e784a1d-df3b-4e95-9f17-b1895173dc2a",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a3abc390-07d0-48ad-b904-4c05b9daef85"
        },
        "item": {
          "id": "8cb805dd-12a5-4e2f-84e1-e22e756acb8d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "05887d95-b27e-4360-bf5c-eecbcb0551f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "5612d8ad-8c46-47fe-8cb4-91100319ebac",
        "cursor": {
          "ref": "8e7bd8c4-870c-4baf-ab30-ebdfc875450e",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8beebd74-1a5f-44e5-81fa-19b3299a7f0c"
        },
        "item": {
          "id": "5612d8ad-8c46-47fe-8cb4-91100319ebac",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "245ace5a-cade-41f9-bdb6-8cccdfeb9177",
          "status": "Created",
          "code": 201,
          "responseTime": 3484,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "d1cec102-e54e-468f-a74d-102cb3e7e47e",
        "cursor": {
          "ref": "818962a8-2d77-43dc-a39e-a095c1503910",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c1b20953-a1e4-470d-93f1-84f94fd3d61b"
        },
        "item": {
          "id": "d1cec102-e54e-468f-a74d-102cb3e7e47e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ad3e07b0-1789-48cb-9bfb-c31b0ce188dc",
          "status": "Created",
          "code": 201,
          "responseTime": 4512,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "3941643f-af91-409d-b743-a215231bb0fe",
        "cursor": {
          "ref": "2e0d149d-90d7-4dfd-980d-81eb33c73715",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ead83231-f8a8-4e0c-8054-867ad3f0fd17"
        },
        "item": {
          "id": "3941643f-af91-409d-b743-a215231bb0fe",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e95088b4-dcfe-4b1f-93b9-4935b766ec81",
          "status": "Created",
          "code": 201,
          "responseTime": 4530,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6a181573-506b-4e78-b0d3-316ac86d0e54",
        "cursor": {
          "ref": "59f2549f-21bf-4f77-a1cf-c04eb9727ecf",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "31614ec9-c685-4f01-8364-02bd64cf2cbc"
        },
        "item": {
          "id": "6a181573-506b-4e78-b0d3-316ac86d0e54",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d218129e-9187-4e6c-a855-6d406705e993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "cc38fc12-4783-45f6-9193-57bf96be036f",
        "cursor": {
          "ref": "d780ed9d-403a-478d-8e35-97c190315cab",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3ce504c4-12e3-4808-af96-883946986253"
        },
        "item": {
          "id": "cc38fc12-4783-45f6-9193-57bf96be036f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "80e10c75-d8b2-4eef-bad7-3f15e2af2dee",
          "status": "Created",
          "code": 201,
          "responseTime": 3665,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "2c8601e1-3ede-411b-aeb2-0fdf8c36f9a2",
        "cursor": {
          "ref": "64f88735-7a1f-4f5d-9dae-483804994473",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "48d7325a-a988-4e2b-96e8-5c514ac3379f"
        },
        "item": {
          "id": "2c8601e1-3ede-411b-aeb2-0fdf8c36f9a2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "afae360b-246d-4772-9327-2b6fdd05b2fe",
          "status": "Created",
          "code": 201,
          "responseTime": 3855,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "420e0adf-6b90-4f9b-9a2f-b61264d628f9",
        "cursor": {
          "ref": "e4243b01-097e-45d5-950a-ae13dd9740d7",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9d97f949-ee67-45fe-a46c-f55efdd2efc1"
        },
        "item": {
          "id": "420e0adf-6b90-4f9b-9a2f-b61264d628f9",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5edc1f97-0385-44b1-baac-4a2bc2fd6f02",
          "status": "Created",
          "code": 201,
          "responseTime": 3739,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "02207df1-2d86-470f-a85f-7840a2f0c488",
        "cursor": {
          "ref": "03e3f1ed-89b6-46cc-b6a8-86f600028dd3",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "13c983e8-fcb7-4153-8ae0-df5c12a8cfcc"
        },
        "item": {
          "id": "02207df1-2d86-470f-a85f-7840a2f0c488",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a420eec8-8a7c-41c1-bf47-8497fdc347f6",
          "status": "Created",
          "code": 201,
          "responseTime": 4114,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "c7c56782-a6c5-4c0f-9957-f2ed6b28708c",
        "cursor": {
          "ref": "cd70c54f-d79e-4343-b96f-93750b30114b",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "574da069-20b5-484d-9e0c-4b5db2a92001"
        },
        "item": {
          "id": "c7c56782-a6c5-4c0f-9957-f2ed6b28708c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "57a058f7-27a8-4e21-a54c-4cacbb37d36a",
          "status": "Created",
          "code": 201,
          "responseTime": 4011,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "056865ed-a45a-4652-984b-1d9c00e716d7",
        "cursor": {
          "ref": "c257baa9-d2f6-4bfd-8729-3b7a7016af26",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "890bb839-7bba-4dd2-8e08-17724274d851"
        },
        "item": {
          "id": "056865ed-a45a-4652-984b-1d9c00e716d7",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ff3cbaa3-7a62-41f8-991d-091eaacbc472",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 3814,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4b383a80-df54-4e2b-a50e-c114d2bac1ce",
        "cursor": {
          "ref": "a23e248a-7620-411d-97e5-ca3e7b574820",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "36b67d20-1b64-4821-bf66-3ba46859b8b4"
        },
        "item": {
          "id": "4b383a80-df54-4e2b-a50e-c114d2bac1ce",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "39d4f924-2bf5-4950-9fea-d9318e6d1217",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "08600c06-879f-4f23-81dc-0d92bef7a103",
        "cursor": {
          "ref": "d66f55e6-f5f5-4ee0-b8d3-20df02e59b07",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ee04ff9d-a473-464d-8349-2190d0112262"
        },
        "item": {
          "id": "08600c06-879f-4f23-81dc-0d92bef7a103",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "f460ca87-c053-49ae-8d05-290ec05926d8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "b7c85c77-f643-44e4-8a8f-804bf1b103ca",
        "cursor": {
          "ref": "5578fb3b-2f7a-43f3-9a38-ec30dd135f7a",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "f44b845b-b93a-4964-9261-894b49e77c95"
        },
        "item": {
          "id": "b7c85c77-f643-44e4-8a8f-804bf1b103ca",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "82b47ba5-9330-4992-ac88-64e70978daa8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 503",
              "stack": "AssertionError: expected response to have status code 422 but got 503\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "4d78cb81-6162-4a8f-8744-100d6d4b1985",
        "cursor": {
          "ref": "f2ea0d1d-abc3-425d-9435-29b88de1936b",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "de5cb2b8-b53d-40d9-873d-3faa1adb71ac"
        },
        "item": {
          "id": "4d78cb81-6162-4a8f-8744-100d6d4b1985",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e7ff5d34-7c04-49e7-b6a7-d088e18ed1b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "6aa5a780-6275-440c-93b9-4ea09593685d",
        "cursor": {
          "ref": "7e755770-542f-4f58-a72f-f800cc03e313",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "58aac295-2859-44b3-9fbb-ea21f26701ea"
        },
        "item": {
          "id": "6aa5a780-6275-440c-93b9-4ea09593685d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4b77ffbb-e5d2-4582-9cf2-941168bce5e6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "18f55790-1858-456f-b280-01cfa4b19cd0",
        "cursor": {
          "ref": "979d9719-c94a-431f-aba5-9b6bc849e6c8",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "23bc8afa-299d-466a-826e-37c3810bf93b"
        },
        "item": {
          "id": "18f55790-1858-456f-b280-01cfa4b19cd0",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "337f7701-9a60-49d8-bf19-f27c663c805e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "cea7a243-3175-41c5-980a-035292259c69",
        "cursor": {
          "ref": "a70743ab-6d34-45db-91b9-43ba9b583323",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "bc65c45e-d951-454c-b87f-88b9c09f0c77"
        },
        "item": {
          "id": "cea7a243-3175-41c5-980a-035292259c69",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "7503db17-60b3-457c-aff6-7f9bdb5777a1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "4a4165fa-6396-4998-9e3c-986fb827b28e",
        "cursor": {
          "ref": "62e2fcf1-e23d-4287-b52e-a43fa029870f",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "350e37fd-951e-471d-a2ef-fdaebfbc3ad4"
        },
        "item": {
          "id": "4a4165fa-6396-4998-9e3c-986fb827b28e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ab1eaf5c-ebc4-416f-bcba-53dc8e91fc06",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "1aa678d1-abfc-42d7-bd95-d160c88b7218",
        "cursor": {
          "ref": "61b3abef-7d3c-4df0-989c-68e5436905f5",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9ce75dee-96d7-4f45-951a-46b889e80cf3"
        },
        "item": {
          "id": "1aa678d1-abfc-42d7-bd95-d160c88b7218",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "235b93c3-2029-40cd-9426-b926a69ad11c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 46,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "3a9be207-cba3-4796-855f-f49c7dbb0118",
        "cursor": {
          "ref": "1b2471a4-728d-4b21-a15d-8eb1228dd89a",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "535074d1-45ba-454f-b56d-2fce520b9485"
        },
        "item": {
          "id": "3a9be207-cba3-4796-855f-f49c7dbb0118",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0d7b50ad-8006-4f9e-a7ad-096e345b3804",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "165f29bf-de3c-4d1c-9d95-918f390a48ef",
        "cursor": {
          "ref": "c903e1ab-c13a-4997-985d-b261e5bdbcc2",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d0af46e7-6f69-4c9a-9342-bcccfed12fbc"
        },
        "item": {
          "id": "165f29bf-de3c-4d1c-9d95-918f390a48ef",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f3d1d117-d9f0-4ffb-a2da-4a29debbaa44",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "b7913141-bdff-4b2f-b5d8-59f003184ec9",
        "cursor": {
          "ref": "a984d464-60d6-460d-b1b9-0c5ca292c110",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d888bf8c-186c-48b6-8f3f-bb31a4305db8"
        },
        "item": {
          "id": "b7913141-bdff-4b2f-b5d8-59f003184ec9",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "962b361a-db33-4148-bb56-9e0ee24a2a4a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "53e9e3a4-5015-413d-b26b-35dfb9dbf2d2",
        "cursor": {
          "ref": "9b53c1a8-34a0-4cfe-9c0a-34a7e917ba65",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "63729c3a-29bf-472e-bb77-beebecccb0b8"
        },
        "item": {
          "id": "53e9e3a4-5015-413d-b26b-35dfb9dbf2d2",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e6f69412-b4d7-44d6-8e2f-78250376d5c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "fa6edff5-dfdd-447e-b27e-a77dc3366951",
        "cursor": {
          "ref": "19f3910b-6a2c-491d-881a-a290ea46f483",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "40558dda-3c03-495f-9b1d-da230fb34b6a"
        },
        "item": {
          "id": "fa6edff5-dfdd-447e-b27e-a77dc3366951",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2a17210b-d57c-4753-bc9f-bc9dfba32428",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "fa786ba4-0b8c-4aa3-929d-f9f003bfc16c",
        "cursor": {
          "ref": "44a9c81b-b52a-40e6-8176-581e1d74e6bc",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5f663d39-2327-46d6-aa74-403f06b40250"
        },
        "item": {
          "id": "fa786ba4-0b8c-4aa3-929d-f9f003bfc16c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "91a1de0d-babb-4687-9755-5450224d1c5a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "941e166c-e7d5-4459-8b69-268eff6d2850",
        "cursor": {
          "ref": "04c81cbc-0cf5-45c6-9f21-98023cbb8ca4",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "3a4c9619-d22b-44bb-b206-921011b3c320"
        },
        "item": {
          "id": "941e166c-e7d5-4459-8b69-268eff6d2850",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "82a833b0-07f9-4af8-8473-24e7e66622d9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "4ae760da-5e79-4b82-bfc0-750ae99d37e0",
        "cursor": {
          "ref": "388e1172-52e0-40bc-9ca2-0fab9c5a833e",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5c75d8e0-1a2a-4ed4-b1cd-3bdf48e7d63c"
        },
        "item": {
          "id": "4ae760da-5e79-4b82-bfc0-750ae99d37e0",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e3a8da1a-0768-4069-9833-d7d930a95e58",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "3476890d-08ac-4ef6-ae25-99ac946e75c4",
        "cursor": {
          "ref": "38aad454-5402-4cfa-811c-4b289a31f6b0",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "edba6c12-23b0-47af-92c7-62adc10023a4"
        },
        "item": {
          "id": "3476890d-08ac-4ef6-ae25-99ac946e75c4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "32c19fde-e4ab-4106-a787-fd81503e6498",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "a8e6fe31-c9e6-4a66-bfd4-da9e619791a3",
        "cursor": {
          "ref": "3ec0bfcc-f401-40e6-80e0-e11de8d3c800",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0b7921e2-1246-439d-af18-7dc255d31a86"
        },
        "item": {
          "id": "a8e6fe31-c9e6-4a66-bfd4-da9e619791a3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "361218ca-48f6-4bb8-8120-061786c85004",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "ab57d034-629f-4be0-bccf-3fb078442696",
        "cursor": {
          "ref": "dd3edbd7-e23c-4fa6-8e05-0d5d342e9330",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "92762d18-4713-468d-9926-c05b5743c13b"
        },
        "item": {
          "id": "ab57d034-629f-4be0-bccf-3fb078442696",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "cafdd508-3895-4ecf-ba77-206e3894fd12",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "00b65932-f374-48e9-aa28-5029a9e895b5",
        "cursor": {
          "ref": "21075ede-0ecb-4a76-a73e-eccc891b67a2",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3f06b212-8082-48cc-92a4-57118205d8e1"
        },
        "item": {
          "id": "00b65932-f374-48e9-aa28-5029a9e895b5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "7ce21d46-dd0d-4be7-8817-e77562f89abf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "e3412a30-a229-4637-9db0-ecd63898071e",
        "cursor": {
          "ref": "8536b9a8-c1a6-4d29-ba04-57e2dfe52f82",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7f9e16b5-9670-4708-819e-89a9af8b97da"
        },
        "item": {
          "id": "e3412a30-a229-4637-9db0-ecd63898071e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "9425c740-66da-46f2-bf0f-1e305eb8005e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "f8b4f9c9-0d22-4c46-8788-8ab4dcb377f0",
        "cursor": {
          "ref": "efc36b71-a4f6-4deb-aad5-84c34bd1ecfb",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e027c0b7-fae0-473a-8e6d-e1311b0aadfb"
        },
        "item": {
          "id": "f8b4f9c9-0d22-4c46-8788-8ab4dcb377f0",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "897b18f6-705b-4f0c-a587-fe9fe7839012",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "40ba2271-c0d4-49a0-beb0-e8fdcf66713e",
        "cursor": {
          "ref": "fc97d3a9-ac42-4960-862e-25fed8e64ec3",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "08962857-7b87-4140-80c9-8133e87c98b3"
        },
        "item": {
          "id": "40ba2271-c0d4-49a0-beb0-e8fdcf66713e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "702fde51-9e69-40da-aa92-58cea324acb2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "97f00132-b60d-4e9b-a881-17decf04ecb7",
        "cursor": {
          "ref": "608beb66-8305-422a-a006-c177a4d3dd7d",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "28c5becf-f1a4-4f0c-8cac-178b203f402f"
        },
        "item": {
          "id": "97f00132-b60d-4e9b-a881-17decf04ecb7",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ce7fe47e-58e4-47ed-9b8c-0cf12bb7e38c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "7b2a207b-8d20-4194-9ac3-9930e7f17238",
        "cursor": {
          "ref": "b033dbea-d4f0-4dd3-9ce7-f2e8750fe573",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d88e29a4-5d79-4fb0-b03f-56894382d348"
        },
        "item": {
          "id": "7b2a207b-8d20-4194-9ac3-9930e7f17238",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "7b9db163-7989-43a2-b766-8c9d7a05be7e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "89637ab2-ba03-425a-a2e8-697f8a585f60",
        "cursor": {
          "ref": "1f5dcf5b-5c4d-459e-895a-45e278bc849b",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "8648550c-020b-4730-9632-025ddab92bc9"
        },
        "item": {
          "id": "89637ab2-ba03-425a-a2e8-697f8a585f60",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9cea2468-49b8-42ff-a477-8afc071250c0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "a2d24ef9-4d73-480f-9b9c-f4c0c88de2ea",
        "cursor": {
          "ref": "a7788ff2-e6d8-419b-a133-f11298bc9734",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "378c31af-36ca-402a-bfb7-682479ac6d7b"
        },
        "item": {
          "id": "a2d24ef9-4d73-480f-9b9c-f4c0c88de2ea",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "50a86a57-d855-46e8-92b6-e3ee14258ead",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "8df75aea-b5a9-4c35-9949-736e489b1ef0",
        "cursor": {
          "ref": "934dcfab-13d6-49c0-bd56-d2b75785a084",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "0c6f63f1-14c2-44ac-abe4-eb951b852ef9"
        },
        "item": {
          "id": "8df75aea-b5a9-4c35-9949-736e489b1ef0",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0ee11987-b58c-49c7-b607-26c1500eab2d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "1894bf2b-cf58-4c4b-95a9-2d31daca2774",
        "cursor": {
          "ref": "7d7a9e2d-5b21-4a46-83a8-82bc67b4ccf0",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c91c312d-367c-42f2-9861-7793efbec26d"
        },
        "item": {
          "id": "1894bf2b-cf58-4c4b-95a9-2d31daca2774",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "0b564dbf-0a68-4be2-8ae7-97ac44140c02",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "658fc598-7ea4-41a0-a17a-1e041d1b8d22",
        "cursor": {
          "ref": "df80a22d-1213-42a6-992a-bebe55e7dcab",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "ee599308-a323-4f29-b902-98a30b876907"
        },
        "item": {
          "id": "658fc598-7ea4-41a0-a17a-1e041d1b8d22",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c8e2e834-a52c-4f05-a99d-fd52b8309eea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "12b0ee18-5aec-4e9c-b627-7dc7ab35d009",
        "cursor": {
          "ref": "dd64a276-f732-44ad-85be-d7194aa22c42",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "990fa5f9-0275-4e73-a0d3-731ce254d24f"
        },
        "item": {
          "id": "12b0ee18-5aec-4e9c-b627-7dc7ab35d009",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "7c6e4da1-9647-44d1-83c2-4550639b8f75",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "30308957-4660-47aa-b0e1-768f91951107",
        "cursor": {
          "ref": "972a7e9c-ea36-47e4-9fa3-93b1987567a4",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "aabc0df4-e11c-4c5e-a721-98f75a3301f9"
        },
        "item": {
          "id": "30308957-4660-47aa-b0e1-768f91951107",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e3937fe2-e8c1-4a06-9059-e93b01f6d033",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "9590d91d-1307-4f79-8370-b7c1f686b9dd",
        "cursor": {
          "ref": "159d51ca-f943-4d8a-b86e-5d64af7aa0e0",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "3fb59897-3375-4031-910e-13b5c6386616"
        },
        "item": {
          "id": "9590d91d-1307-4f79-8370-b7c1f686b9dd",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "a4050d48-6d63-4606-9a18-0dd83cc227dc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "f495801e-9cf8-480a-becb-3fb782f22491",
        "cursor": {
          "ref": "c5d06f25-58f1-4cc4-9b09-b6751d8b1873",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a49bc714-cca6-46b4-ba66-880af809eedf"
        },
        "item": {
          "id": "f495801e-9cf8-480a-becb-3fb782f22491",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a63e28ce-597b-482f-94ec-81e471c9ffb5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "8703823d-7cb7-42f4-aa4b-6d04faa468b2",
        "cursor": {
          "ref": "3474bdef-5c32-466b-8580-3b74368b28d7",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "cff555ec-1a5d-4ce8-8543-091634b87450"
        },
        "item": {
          "id": "8703823d-7cb7-42f4-aa4b-6d04faa468b2",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a14b5103-74d3-4e54-809b-d90836aaf5f8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "37790576-4d8f-4bb3-bfe0-bcefcb46dd12",
        "cursor": {
          "ref": "ca9dbb46-2674-4ae0-816b-2a288c02f630",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "eb0436c5-61f9-4735-bac1-1a926f993535"
        },
        "item": {
          "id": "37790576-4d8f-4bb3-bfe0-bcefcb46dd12",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6e0c1bb0-abd2-4ef7-b00f-716966dbcfdc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "ea7d4743-a4e0-43cb-8091-28a5c4b0c937",
        "cursor": {
          "ref": "e4355bd2-2f90-40d2-924c-c18a48bd7ea8",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7c862bd8-f8ae-4fa8-b88f-990c9c92242e"
        },
        "item": {
          "id": "ea7d4743-a4e0-43cb-8091-28a5c4b0c937",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0c632b7b-8f14-4143-ab5c-2ec163a64e21",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "1cc8e06c-60da-4231-afb4-e1645fbdeb08",
        "cursor": {
          "ref": "c7eff9f9-2d6e-4396-b396-773f5bd3979a",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "146b5de4-c681-473e-9a82-5932a0bdf928"
        },
        "item": {
          "id": "1cc8e06c-60da-4231-afb4-e1645fbdeb08",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "4b8c9b51-b5ee-4672-bac8-e8046e335a67",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "8e7a223a-906a-45ea-87b3-fa925e9fdca0",
        "cursor": {
          "ref": "d7f16926-bd69-4517-a4a1-5316556cff19",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a703fb32-f740-40ca-829b-b75f20af4b20"
        },
        "item": {
          "id": "8e7a223a-906a-45ea-87b3-fa925e9fdca0",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1b017a10-9ad5-4d9d-acda-235319443ab9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "d5d6a25b-aeca-46d2-a566-3a66ca6b9449",
        "cursor": {
          "ref": "b82c00dd-22a5-4558-9342-4db6f2fafa70",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0e7d3f78-8add-4579-9b15-d606c4c100d1"
        },
        "item": {
          "id": "d5d6a25b-aeca-46d2-a566-3a66ca6b9449",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "12ab8dad-3e4e-4123-9d9f-7f644fddd05e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "96640de3-fd0f-4ca9-89a4-c9ed260ef58d",
        "cursor": {
          "ref": "5d634deb-210b-4bfd-8b38-9e80127ab8b0",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "abbd91c3-444a-476b-83a2-791dbb869a8a"
        },
        "item": {
          "id": "96640de3-fd0f-4ca9-89a4-c9ed260ef58d",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "aea954c5-04a7-46fc-bde1-1e608d5a17ff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "79cdd689-bafc-4e3c-9475-eeb3a7ce9567",
        "cursor": {
          "ref": "be792ded-3dfb-4013-a52e-8722e5aab25d",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e52403da-2b73-4f05-b640-04f561c94d19"
        },
        "item": {
          "id": "79cdd689-bafc-4e3c-9475-eeb3a7ce9567",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "21bd44af-20d8-4518-bbb2-88fd5380694a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "ed61d3d2-ee8d-4b9a-801c-ba10f908fc85",
        "cursor": {
          "ref": "7f50d576-3266-4947-bd33-fcfdd5048a94",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "5d318633-f390-49d9-9461-5ff846f3c466"
        },
        "item": {
          "id": "ed61d3d2-ee8d-4b9a-801c-ba10f908fc85",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "24efef96-008c-4e3d-b28c-abf2545f7c50",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "d2d68973-57ba-4f8f-8bf5-1df1812f30da",
        "cursor": {
          "ref": "95653aba-82c2-4ece-a989-646eaf4c4458",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f62c452d-1cd0-4939-bbac-ea18a42122fc"
        },
        "item": {
          "id": "d2d68973-57ba-4f8f-8bf5-1df1812f30da",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c9fb4c7b-f446-4778-b2d9-8746686bb989",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "714ab0f1-989e-4d5c-a48f-87bb97f692f7",
        "cursor": {
          "ref": "fd88e836-0d12-405d-b80f-1cd231088726",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3e432eaa-0e3e-47b3-8007-162726b687e6"
        },
        "item": {
          "id": "714ab0f1-989e-4d5c-a48f-87bb97f692f7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d8de94ec-cd0e-4a64-9583-c5dfcf438111",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "4ec54f54-a648-4889-ab9e-93fe99b21099",
        "cursor": {
          "ref": "0968e4ed-8316-4e34-8add-c37ac2cfdf8c",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "068cf8f5-c8bf-4f93-a5ac-4603155a0612"
        },
        "item": {
          "id": "4ec54f54-a648-4889-ab9e-93fe99b21099",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0dd7a6c8-acab-4d71-90a8-d7e291bcc265",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "78fa60c2-da86-4730-b329-9a7a5e454bbe",
        "cursor": {
          "ref": "3ee7fc50-259a-4710-afcf-9f0c57d42048",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8d37b140-dd21-4b9c-9f59-2f1099e2e756"
        },
        "item": {
          "id": "78fa60c2-da86-4730-b329-9a7a5e454bbe",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "aa529da3-f0a8-4b98-aab8-231d56e2cf8a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "0e031fe3-0a8d-4622-bb56-6a8f76f639f2",
        "cursor": {
          "ref": "7dcfd37c-b997-4c66-bac3-7c0c9e3bafcd",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d447106b-0c94-4e63-8b30-ded63ebe7d76"
        },
        "item": {
          "id": "0e031fe3-0a8d-4622-bb56-6a8f76f639f2",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b5fd5755-11d5-440f-b73d-71316377ff31",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "97f9d6b5-5ccc-4a75-a287-d52fe08f819f",
        "cursor": {
          "ref": "437399a1-42bf-49f2-802f-d5f4afeb1f38",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "82bacfb9-7e62-44e9-81d0-a8bb0b11c0a7"
        },
        "item": {
          "id": "97f9d6b5-5ccc-4a75-a287-d52fe08f819f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "6271c266-bcd6-4cd4-9877-88066669e653",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "fb529082-7cbd-4854-adcc-3538beabdd9e",
        "cursor": {
          "ref": "13eeffef-7954-4cba-afe5-ef3a08ad4483",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "bcf6299b-5f8c-42d6-8809-ddd7be958730"
        },
        "item": {
          "id": "fb529082-7cbd-4854-adcc-3538beabdd9e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "55b68468-cc28-4e01-98ae-f24f1e0177a7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "3e394c73-4ce6-4cd6-9663-bfb3b97a041b",
        "cursor": {
          "ref": "95bdecb3-7385-4e17-9305-7e6397508b8b",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "141cb001-6837-4736-9899-8da9311b0b86"
        },
        "item": {
          "id": "3e394c73-4ce6-4cd6-9663-bfb3b97a041b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "7406be7a-ac0e-45c8-bfc9-ed7881634731",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "f8311f6b-ea6b-4968-8836-c6c089218915",
        "cursor": {
          "ref": "27e6bef4-b24e-4ad0-a68a-a3a779051257",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d09e319b-09b4-4261-8f1d-8b51b940ec3e"
        },
        "item": {
          "id": "f8311f6b-ea6b-4968-8836-c6c089218915",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "79d866de-e55a-4e2d-b055-d30ce0400d35",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "8eb8c681-76e5-49a8-a7f8-5e87def28e6c",
        "cursor": {
          "ref": "7e17b94f-93ef-42b0-a22f-cdebac18afc6",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d58b2e70-137e-4e21-a4a8-e0274473b013"
        },
        "item": {
          "id": "8eb8c681-76e5-49a8-a7f8-5e87def28e6c",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "479515eb-3da3-4f32-8452-970699448a8a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 43,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "f3a939cb-50be-4434-9350-b021cc3a183d",
        "cursor": {
          "ref": "3cf13e6e-18d9-4912-bc82-289e9a235de9",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f79948ee-000b-4474-a755-d56671e4ef90"
        },
        "item": {
          "id": "f3a939cb-50be-4434-9350-b021cc3a183d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "709e2665-80bc-4bf1-bf10-b5f6742e4f5f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "0ddf2e10-73d4-49e5-8662-dc233338e782",
        "cursor": {
          "ref": "b9b33554-6de8-48b1-888e-177fb78ed41f",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3af72c22-ff41-495e-8947-b8bc977927a7"
        },
        "item": {
          "id": "0ddf2e10-73d4-49e5-8662-dc233338e782",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "19ecaf65-7447-47ef-82d5-2bf3bc1cd893",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "522471e9-f0a0-4992-9a5b-e4e0312dd851",
        "cursor": {
          "ref": "fdc28831-8f21-4f24-8497-055efce44f00",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "6df3116b-a966-4c92-a097-313193cc5411"
        },
        "item": {
          "id": "522471e9-f0a0-4992-9a5b-e4e0312dd851",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d693f23a-a6e7-4645-bda4-c31e27d9eca7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "b926d6d7-6073-463a-bff8-558a0f38cf8b",
        "cursor": {
          "ref": "83b7ff45-7f35-4a36-9f55-48bf8926d074",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "debebf0a-c8b3-4528-88e3-298387596728"
        },
        "item": {
          "id": "b926d6d7-6073-463a-bff8-558a0f38cf8b",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0eb015c0-3b42-4b87-bdd8-9dc0e3150263",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "0549b5a5-2fc4-4b5a-82ac-c9a9db0484bc",
        "cursor": {
          "ref": "c4a40357-8ec1-4fbc-bdea-43328107be6a",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "356ab6fb-5be1-409d-b6b0-58193e253228"
        },
        "item": {
          "id": "0549b5a5-2fc4-4b5a-82ac-c9a9db0484bc",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a7313fcc-5345-44ea-b4c3-09bdfbcd51ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "9037ddf8-e59f-446a-940a-05ac482c864b",
        "cursor": {
          "ref": "101569d5-d00c-479e-b930-8d8427e6c52e",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6e9b43ad-e565-48a3-a504-46daffae0d59"
        },
        "item": {
          "id": "9037ddf8-e59f-446a-940a-05ac482c864b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bf9f08a0-130b-4256-9038-958b61be77a1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "9037ddf8-e59f-446a-940a-05ac482c864b",
        "cursor": {
          "ref": "101569d5-d00c-479e-b930-8d8427e6c52e",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6e9b43ad-e565-48a3-a504-46daffae0d59"
        },
        "item": {
          "id": "9037ddf8-e59f-446a-940a-05ac482c864b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bf9f08a0-130b-4256-9038-958b61be77a1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "2f1a0f88-11c2-4bca-9c2d-3ba5a2dbd38a",
        "cursor": {
          "ref": "69aa3f7e-3a77-4a60-96b7-fa5698a515e6",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b36d402f-cb4c-494d-a840-a32f5da2cef3"
        },
        "item": {
          "id": "2f1a0f88-11c2-4bca-9c2d-3ba5a2dbd38a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2eb4a1cd-e717-45e6-a52f-57dc878a5455",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "2f1a0f88-11c2-4bca-9c2d-3ba5a2dbd38a",
        "cursor": {
          "ref": "69aa3f7e-3a77-4a60-96b7-fa5698a515e6",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b36d402f-cb4c-494d-a840-a32f5da2cef3"
        },
        "item": {
          "id": "2f1a0f88-11c2-4bca-9c2d-3ba5a2dbd38a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2eb4a1cd-e717-45e6-a52f-57dc878a5455",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "c5696235-79ca-4edb-90ff-afd56e4f5865",
        "cursor": {
          "ref": "08a18d31-7b6f-4820-a509-5eb477e714d5",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0efe8e74-2c1e-4619-961b-05926001e721"
        },
        "item": {
          "id": "c5696235-79ca-4edb-90ff-afd56e4f5865",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "95318609-fdf4-47f3-8c11-c70118e4053e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "c5696235-79ca-4edb-90ff-afd56e4f5865",
        "cursor": {
          "ref": "08a18d31-7b6f-4820-a509-5eb477e714d5",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0efe8e74-2c1e-4619-961b-05926001e721"
        },
        "item": {
          "id": "c5696235-79ca-4edb-90ff-afd56e4f5865",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "95318609-fdf4-47f3-8c11-c70118e4053e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "658e94af-c5df-496b-a4f4-3c3fcc5f96bd",
        "cursor": {
          "ref": "25612882-af52-4afc-acf7-5b4b270b2f99",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d00c89ba-4a67-4cdc-9b46-80c1d3762fb9"
        },
        "item": {
          "id": "658e94af-c5df-496b-a4f4-3c3fcc5f96bd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ea26296a-6730-43ca-b65f-ee32f1b36b53",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "658e94af-c5df-496b-a4f4-3c3fcc5f96bd",
        "cursor": {
          "ref": "25612882-af52-4afc-acf7-5b4b270b2f99",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d00c89ba-4a67-4cdc-9b46-80c1d3762fb9"
        },
        "item": {
          "id": "658e94af-c5df-496b-a4f4-3c3fcc5f96bd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ea26296a-6730-43ca-b65f-ee32f1b36b53",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "e9e1c368-5ee2-47c1-a11c-bc6b62d78e77",
        "cursor": {
          "ref": "ba6ee985-3e4a-4402-8290-b4e1e4199a4b",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "28ad5fc7-dc41-414b-9b17-6176a13e7ba9"
        },
        "item": {
          "id": "e9e1c368-5ee2-47c1-a11c-bc6b62d78e77",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "cc2dea8f-82ad-4278-92fa-8411d7a7a07f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "e9e1c368-5ee2-47c1-a11c-bc6b62d78e77",
        "cursor": {
          "ref": "ba6ee985-3e4a-4402-8290-b4e1e4199a4b",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "28ad5fc7-dc41-414b-9b17-6176a13e7ba9"
        },
        "item": {
          "id": "e9e1c368-5ee2-47c1-a11c-bc6b62d78e77",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "cc2dea8f-82ad-4278-92fa-8411d7a7a07f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "e1d01ddf-e474-4e77-8e94-480106d7c198",
        "cursor": {
          "ref": "c864b04f-0db4-4d4d-80be-7763f3bd49bd",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "280bcfee-f96b-4310-a911-a8177c39f9b4"
        },
        "item": {
          "id": "e1d01ddf-e474-4e77-8e94-480106d7c198",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cf7fe693-48ae-430c-9f90-7acc2d6257f9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "e1d01ddf-e474-4e77-8e94-480106d7c198",
        "cursor": {
          "ref": "c864b04f-0db4-4d4d-80be-7763f3bd49bd",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "280bcfee-f96b-4310-a911-a8177c39f9b4"
        },
        "item": {
          "id": "e1d01ddf-e474-4e77-8e94-480106d7c198",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cf7fe693-48ae-430c-9f90-7acc2d6257f9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "c8ffb753-807b-4760-b49f-5ed4fa110ad4",
        "cursor": {
          "ref": "51b991ab-2a4a-4129-baad-8c741f02473e",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "86d0e006-df52-4c09-b01e-4c2b6e613588"
        },
        "item": {
          "id": "c8ffb753-807b-4760-b49f-5ed4fa110ad4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c83a907b-30a4-4bda-be66-411fe462f6e9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "c8ffb753-807b-4760-b49f-5ed4fa110ad4",
        "cursor": {
          "ref": "51b991ab-2a4a-4129-baad-8c741f02473e",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "86d0e006-df52-4c09-b01e-4c2b6e613588"
        },
        "item": {
          "id": "c8ffb753-807b-4760-b49f-5ed4fa110ad4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c83a907b-30a4-4bda-be66-411fe462f6e9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "00009003-54f4-455d-9da5-0575cd4a9532",
        "cursor": {
          "ref": "231a8cf3-6283-4ca9-abad-38ef01109209",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "4070bb5a-50de-4dcf-a70f-380449834c25"
        },
        "item": {
          "id": "00009003-54f4-455d-9da5-0575cd4a9532",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "bf39c634-4ca5-4595-97c6-b73ed610950a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "00009003-54f4-455d-9da5-0575cd4a9532",
        "cursor": {
          "ref": "231a8cf3-6283-4ca9-abad-38ef01109209",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "4070bb5a-50de-4dcf-a70f-380449834c25"
        },
        "item": {
          "id": "00009003-54f4-455d-9da5-0575cd4a9532",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "bf39c634-4ca5-4595-97c6-b73ed610950a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "21fea40c-2438-4387-a885-98d84249b41a",
        "cursor": {
          "ref": "479a69ab-596f-4e1f-8360-954beb4e0e7b",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "37de6eaf-96d9-4417-ae16-280dfb21c13f"
        },
        "item": {
          "id": "21fea40c-2438-4387-a885-98d84249b41a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "231dcdbd-c2d0-47e8-bfb9-fa1c94155208",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "21fea40c-2438-4387-a885-98d84249b41a",
        "cursor": {
          "ref": "479a69ab-596f-4e1f-8360-954beb4e0e7b",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "37de6eaf-96d9-4417-ae16-280dfb21c13f"
        },
        "item": {
          "id": "21fea40c-2438-4387-a885-98d84249b41a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "231dcdbd-c2d0-47e8-bfb9-fa1c94155208",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "64cdeeca-961c-45b0-96e0-95aaac1e7a53",
        "cursor": {
          "ref": "27cd7830-5e00-4582-8bca-e61bee9e5bc5",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "5418a476-81f7-4d66-b6d4-9b06c94c60d6"
        },
        "item": {
          "id": "64cdeeca-961c-45b0-96e0-95aaac1e7a53",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "bd672300-32e6-43c3-9270-e48b5fe26909",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "64cdeeca-961c-45b0-96e0-95aaac1e7a53",
        "cursor": {
          "ref": "27cd7830-5e00-4582-8bca-e61bee9e5bc5",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "5418a476-81f7-4d66-b6d4-9b06c94c60d6"
        },
        "item": {
          "id": "64cdeeca-961c-45b0-96e0-95aaac1e7a53",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "bd672300-32e6-43c3-9270-e48b5fe26909",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "a15b828b-e0db-4c64-88a8-7896ded22abc",
        "cursor": {
          "ref": "a641a470-0e19-4af1-a158-8ec866a360b4",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b23f1298-30a6-421b-a73f-72df4f5e0631"
        },
        "item": {
          "id": "a15b828b-e0db-4c64-88a8-7896ded22abc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4de03ac2-5572-48f0-9e6e-c59b4fe0a984",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "a15b828b-e0db-4c64-88a8-7896ded22abc",
        "cursor": {
          "ref": "a641a470-0e19-4af1-a158-8ec866a360b4",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b23f1298-30a6-421b-a73f-72df4f5e0631"
        },
        "item": {
          "id": "a15b828b-e0db-4c64-88a8-7896ded22abc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4de03ac2-5572-48f0-9e6e-c59b4fe0a984",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "0d71eef4-cca0-436a-8026-6a30b5a92d0b",
        "cursor": {
          "ref": "4aeb31f3-40d6-49bb-96e0-06e4eb97ae22",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a7c59728-e4ad-4508-80c0-63acdeb02199"
        },
        "item": {
          "id": "0d71eef4-cca0-436a-8026-6a30b5a92d0b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "dbae5e42-5fa0-442f-b0b5-94ae0a5614cd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "0d71eef4-cca0-436a-8026-6a30b5a92d0b",
        "cursor": {
          "ref": "4aeb31f3-40d6-49bb-96e0-06e4eb97ae22",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a7c59728-e4ad-4508-80c0-63acdeb02199"
        },
        "item": {
          "id": "0d71eef4-cca0-436a-8026-6a30b5a92d0b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "dbae5e42-5fa0-442f-b0b5-94ae0a5614cd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "38b669e7-6272-410a-8a60-d4d8979318d5",
        "cursor": {
          "ref": "0d983042-6635-4919-806d-1411ef625626",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "4da6e270-696d-46a5-9a50-775a2b9ae1c6"
        },
        "item": {
          "id": "38b669e7-6272-410a-8a60-d4d8979318d5",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d056bd9f-5378-4699-9a7a-ed4b775e26f3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "38b669e7-6272-410a-8a60-d4d8979318d5",
        "cursor": {
          "ref": "0d983042-6635-4919-806d-1411ef625626",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "4da6e270-696d-46a5-9a50-775a2b9ae1c6"
        },
        "item": {
          "id": "38b669e7-6272-410a-8a60-d4d8979318d5",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d056bd9f-5378-4699-9a7a-ed4b775e26f3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "1fd65af1-21f6-4597-8a9d-3492b6063846",
        "cursor": {
          "ref": "7f939db7-9316-4ead-8124-402c6e4a196f",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "40992059-d143-49a5-a682-463b464a8f36"
        },
        "item": {
          "id": "1fd65af1-21f6-4597-8a9d-3492b6063846",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "af983381-5def-4fa7-8db7-2bdf12de875b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "1fd65af1-21f6-4597-8a9d-3492b6063846",
        "cursor": {
          "ref": "7f939db7-9316-4ead-8124-402c6e4a196f",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "40992059-d143-49a5-a682-463b464a8f36"
        },
        "item": {
          "id": "1fd65af1-21f6-4597-8a9d-3492b6063846",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "af983381-5def-4fa7-8db7-2bdf12de875b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "c2671186-8954-4acd-9825-b1e2157b7ebf",
        "cursor": {
          "ref": "d9e18180-407d-49eb-8d79-07388aeae704",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e5734a3c-2747-46d2-9e05-f80c1a3cdce3"
        },
        "item": {
          "id": "c2671186-8954-4acd-9825-b1e2157b7ebf",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ed25c4c6-d966-45bb-a954-8a90bb0eec17",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "c2671186-8954-4acd-9825-b1e2157b7ebf",
        "cursor": {
          "ref": "d9e18180-407d-49eb-8d79-07388aeae704",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e5734a3c-2747-46d2-9e05-f80c1a3cdce3"
        },
        "item": {
          "id": "c2671186-8954-4acd-9825-b1e2157b7ebf",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ed25c4c6-d966-45bb-a954-8a90bb0eec17",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "b6232614-5388-4c6a-8014-dace74a96499",
        "cursor": {
          "ref": "4da80fa8-d808-4670-970c-eb79396672bf",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "887e5b54-a323-4a75-9065-68dc60aa510f"
        },
        "item": {
          "id": "b6232614-5388-4c6a-8014-dace74a96499",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ddfd0463-b81d-4dcf-8ee8-ff1783b7a06f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "b6232614-5388-4c6a-8014-dace74a96499",
        "cursor": {
          "ref": "4da80fa8-d808-4670-970c-eb79396672bf",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "887e5b54-a323-4a75-9065-68dc60aa510f"
        },
        "item": {
          "id": "b6232614-5388-4c6a-8014-dace74a96499",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ddfd0463-b81d-4dcf-8ee8-ff1783b7a06f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "f17a57d8-bc56-4086-b951-3ae5a43ed905",
        "cursor": {
          "ref": "52532057-2807-4ec4-920d-a3dfb0f2ac12",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "70c988bd-c877-4438-b8ed-85ae42046a08"
        },
        "item": {
          "id": "f17a57d8-bc56-4086-b951-3ae5a43ed905",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "31fc5690-7163-45f8-a9c3-64fb52701241",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "f17a57d8-bc56-4086-b951-3ae5a43ed905",
        "cursor": {
          "ref": "52532057-2807-4ec4-920d-a3dfb0f2ac12",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "70c988bd-c877-4438-b8ed-85ae42046a08"
        },
        "item": {
          "id": "f17a57d8-bc56-4086-b951-3ae5a43ed905",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "31fc5690-7163-45f8-a9c3-64fb52701241",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "75afaba2-e178-47fa-92b9-f31a3b8dd76c",
        "cursor": {
          "ref": "d2553687-691a-45d0-ae52-bf80605f299b",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "cd3afa66-e848-4757-818c-5af98e5566fd"
        },
        "item": {
          "id": "75afaba2-e178-47fa-92b9-f31a3b8dd76c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d9a06e7f-9f80-468f-8e37-ee613f8b1692",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "75afaba2-e178-47fa-92b9-f31a3b8dd76c",
        "cursor": {
          "ref": "d2553687-691a-45d0-ae52-bf80605f299b",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "cd3afa66-e848-4757-818c-5af98e5566fd"
        },
        "item": {
          "id": "75afaba2-e178-47fa-92b9-f31a3b8dd76c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d9a06e7f-9f80-468f-8e37-ee613f8b1692",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "db5b8dbe-77bb-42d5-923a-261085fba0d3",
        "cursor": {
          "ref": "6569b1ed-8906-4689-b69b-31f83374f338",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "981fdfb5-ef7c-49ee-8902-f451137158fe"
        },
        "item": {
          "id": "db5b8dbe-77bb-42d5-923a-261085fba0d3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "258f4356-6216-4544-9aa7-a69b6cf7f618",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "db5b8dbe-77bb-42d5-923a-261085fba0d3",
        "cursor": {
          "ref": "6569b1ed-8906-4689-b69b-31f83374f338",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "981fdfb5-ef7c-49ee-8902-f451137158fe"
        },
        "item": {
          "id": "db5b8dbe-77bb-42d5-923a-261085fba0d3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "258f4356-6216-4544-9aa7-a69b6cf7f618",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "b1bd69a4-d327-4749-a913-fde1b554f14a",
        "cursor": {
          "ref": "71efd956-3e86-4dc3-a348-82ef48b1d162",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "62a315fe-963a-4252-a442-5e340a6d669b"
        },
        "item": {
          "id": "b1bd69a4-d327-4749-a913-fde1b554f14a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a2c4ebbb-43ed-4379-b514-743035054f5b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "b1bd69a4-d327-4749-a913-fde1b554f14a",
        "cursor": {
          "ref": "71efd956-3e86-4dc3-a348-82ef48b1d162",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "62a315fe-963a-4252-a442-5e340a6d669b"
        },
        "item": {
          "id": "b1bd69a4-d327-4749-a913-fde1b554f14a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a2c4ebbb-43ed-4379-b514-743035054f5b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "b5375753-1dff-4537-9d64-64fd17aa9f92",
        "cursor": {
          "ref": "1f5b3f77-f57d-41d0-8d5a-2e0339588d6c",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e136e78c-d8d6-4137-9820-645e275703de"
        },
        "item": {
          "id": "b5375753-1dff-4537-9d64-64fd17aa9f92",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5b76dd91-4f29-4aad-a268-7d02733ffd4c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "b5375753-1dff-4537-9d64-64fd17aa9f92",
        "cursor": {
          "ref": "1f5b3f77-f57d-41d0-8d5a-2e0339588d6c",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e136e78c-d8d6-4137-9820-645e275703de"
        },
        "item": {
          "id": "b5375753-1dff-4537-9d64-64fd17aa9f92",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5b76dd91-4f29-4aad-a268-7d02733ffd4c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "894713eb-bacf-4a31-a9db-81fb0ffd84d8",
        "cursor": {
          "ref": "e1f5e05e-2ca8-4e64-8c23-3343b2238001",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e73f28a6-3a15-4d3a-9b92-183476a3765f"
        },
        "item": {
          "id": "894713eb-bacf-4a31-a9db-81fb0ffd84d8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "cf6cdfd2-bc10-4314-a2fd-6a9dc39f0d4e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "894713eb-bacf-4a31-a9db-81fb0ffd84d8",
        "cursor": {
          "ref": "e1f5e05e-2ca8-4e64-8c23-3343b2238001",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e73f28a6-3a15-4d3a-9b92-183476a3765f"
        },
        "item": {
          "id": "894713eb-bacf-4a31-a9db-81fb0ffd84d8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "cf6cdfd2-bc10-4314-a2fd-6a9dc39f0d4e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "4d3a5ba6-551b-4c4f-adbd-5c6a5f5455a7",
        "cursor": {
          "ref": "1561ddab-5dfd-42f6-bcba-9605d71ef0ef",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "51a4248d-78ac-413d-8bbf-2710083e4437"
        },
        "item": {
          "id": "4d3a5ba6-551b-4c4f-adbd-5c6a5f5455a7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "19c418ca-86e1-4523-b6c2-896e542bcd94",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "4d3a5ba6-551b-4c4f-adbd-5c6a5f5455a7",
        "cursor": {
          "ref": "1561ddab-5dfd-42f6-bcba-9605d71ef0ef",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "51a4248d-78ac-413d-8bbf-2710083e4437"
        },
        "item": {
          "id": "4d3a5ba6-551b-4c4f-adbd-5c6a5f5455a7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "19c418ca-86e1-4523-b6c2-896e542bcd94",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "7a2779bc-ceb6-428b-ab2c-80266fcd481c",
        "cursor": {
          "ref": "a907d2fe-2f7a-4d85-a821-0fbb5ad4c58b",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7b6721ae-d339-42fa-a8c9-75f7a6e2b4db"
        },
        "item": {
          "id": "7a2779bc-ceb6-428b-ab2c-80266fcd481c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4d68e642-1233-4cce-bdbb-dca7e7fc1418",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "7a2779bc-ceb6-428b-ab2c-80266fcd481c",
        "cursor": {
          "ref": "a907d2fe-2f7a-4d85-a821-0fbb5ad4c58b",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7b6721ae-d339-42fa-a8c9-75f7a6e2b4db"
        },
        "item": {
          "id": "7a2779bc-ceb6-428b-ab2c-80266fcd481c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4d68e642-1233-4cce-bdbb-dca7e7fc1418",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "4805fb44-0b37-49c2-9b5a-4c955c3af219",
        "cursor": {
          "ref": "d994954c-1d23-42b2-9e40-62f0b1a0edf9",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f53f848a-0b11-4a93-b22f-a88890daf2f8"
        },
        "item": {
          "id": "4805fb44-0b37-49c2-9b5a-4c955c3af219",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9f061e95-4145-44e3-b4df-e4b77e733d58",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "4805fb44-0b37-49c2-9b5a-4c955c3af219",
        "cursor": {
          "ref": "d994954c-1d23-42b2-9e40-62f0b1a0edf9",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f53f848a-0b11-4a93-b22f-a88890daf2f8"
        },
        "item": {
          "id": "4805fb44-0b37-49c2-9b5a-4c955c3af219",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9f061e95-4145-44e3-b4df-e4b77e733d58",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "95fc4876-338e-4105-8014-aa10f3f37154",
        "cursor": {
          "ref": "f773b954-286d-423c-b02b-04f3bf2844b5",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4e5ab36c-2285-49e9-9c63-81dd1e2bdcd3"
        },
        "item": {
          "id": "95fc4876-338e-4105-8014-aa10f3f37154",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "39a586e7-eb41-4a06-8018-992e46e271a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "95fc4876-338e-4105-8014-aa10f3f37154",
        "cursor": {
          "ref": "f773b954-286d-423c-b02b-04f3bf2844b5",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4e5ab36c-2285-49e9-9c63-81dd1e2bdcd3"
        },
        "item": {
          "id": "95fc4876-338e-4105-8014-aa10f3f37154",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "39a586e7-eb41-4a06-8018-992e46e271a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "4f937751-75a3-481b-8541-6142881c4d0d",
        "cursor": {
          "ref": "8d529f2d-72d8-4b73-9913-139a3963e1cc",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9c680243-3107-4cff-b3a3-a1f2c8a55e99"
        },
        "item": {
          "id": "4f937751-75a3-481b-8541-6142881c4d0d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "720142bc-a008-42b3-bb98-aac5389d236f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "4f937751-75a3-481b-8541-6142881c4d0d",
        "cursor": {
          "ref": "8d529f2d-72d8-4b73-9913-139a3963e1cc",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9c680243-3107-4cff-b3a3-a1f2c8a55e99"
        },
        "item": {
          "id": "4f937751-75a3-481b-8541-6142881c4d0d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "720142bc-a008-42b3-bb98-aac5389d236f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "cccb091d-0a9c-44e9-a362-4cc8416e36a4",
        "cursor": {
          "ref": "8f9876e4-37f5-4349-8f39-003efddcb54f",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "db8a9dc8-287b-4e51-9db0-58a316d267ae"
        },
        "item": {
          "id": "cccb091d-0a9c-44e9-a362-4cc8416e36a4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e13a86b6-26fb-4f12-8488-ad79753acc2a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "cccb091d-0a9c-44e9-a362-4cc8416e36a4",
        "cursor": {
          "ref": "8f9876e4-37f5-4349-8f39-003efddcb54f",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "db8a9dc8-287b-4e51-9db0-58a316d267ae"
        },
        "item": {
          "id": "cccb091d-0a9c-44e9-a362-4cc8416e36a4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e13a86b6-26fb-4f12-8488-ad79753acc2a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "354889d5-3aa2-4ba7-af44-7738f41589cf",
        "cursor": {
          "ref": "96563ab2-c081-4b69-8afe-6f833e6f3b02",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6450cf9e-3930-40ae-9874-d17af369be79"
        },
        "item": {
          "id": "354889d5-3aa2-4ba7-af44-7738f41589cf",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a60520ff-2d61-4675-b4c6-cb4692fd5cd4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "354889d5-3aa2-4ba7-af44-7738f41589cf",
        "cursor": {
          "ref": "96563ab2-c081-4b69-8afe-6f833e6f3b02",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6450cf9e-3930-40ae-9874-d17af369be79"
        },
        "item": {
          "id": "354889d5-3aa2-4ba7-af44-7738f41589cf",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a60520ff-2d61-4675-b4c6-cb4692fd5cd4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "c8f3cc79-1de7-498a-8077-dd0dbde95e0c",
        "cursor": {
          "ref": "8f13611a-5079-4ef6-9a53-1ae11c8d1711",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a2337742-30a6-499c-9dac-92b905f50273"
        },
        "item": {
          "id": "c8f3cc79-1de7-498a-8077-dd0dbde95e0c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3fe058d9-e4c2-4358-896e-b67ebe3712f1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "c8f3cc79-1de7-498a-8077-dd0dbde95e0c",
        "cursor": {
          "ref": "8f13611a-5079-4ef6-9a53-1ae11c8d1711",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a2337742-30a6-499c-9dac-92b905f50273"
        },
        "item": {
          "id": "c8f3cc79-1de7-498a-8077-dd0dbde95e0c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3fe058d9-e4c2-4358-896e-b67ebe3712f1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "bbdb6cc9-cd15-4548-b5b0-0eae3f966f95",
        "cursor": {
          "ref": "100f35ec-5a32-45f9-8023-0af27ed5766b",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2bf97342-ed70-4cd4-8a4b-68f98b2c9144"
        },
        "item": {
          "id": "bbdb6cc9-cd15-4548-b5b0-0eae3f966f95",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "32e6dbdd-a5c7-45bd-a1aa-8b9e6ff0c45e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "bbdb6cc9-cd15-4548-b5b0-0eae3f966f95",
        "cursor": {
          "ref": "100f35ec-5a32-45f9-8023-0af27ed5766b",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2bf97342-ed70-4cd4-8a4b-68f98b2c9144"
        },
        "item": {
          "id": "bbdb6cc9-cd15-4548-b5b0-0eae3f966f95",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "32e6dbdd-a5c7-45bd-a1aa-8b9e6ff0c45e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "6cdf2c3a-53a6-42b4-9205-09c631d58c39",
        "cursor": {
          "ref": "6f0da47f-ce87-42db-b8fc-807357821d93",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8e08e6f1-9eaa-4920-b125-181e7abefa5c"
        },
        "item": {
          "id": "6cdf2c3a-53a6-42b4-9205-09c631d58c39",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f9467aa0-d82a-4ec9-85f8-96898bdc213c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "6cdf2c3a-53a6-42b4-9205-09c631d58c39",
        "cursor": {
          "ref": "6f0da47f-ce87-42db-b8fc-807357821d93",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8e08e6f1-9eaa-4920-b125-181e7abefa5c"
        },
        "item": {
          "id": "6cdf2c3a-53a6-42b4-9205-09c631d58c39",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f9467aa0-d82a-4ec9-85f8-96898bdc213c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "1248f1e7-ddfa-4c89-a1f8-7defa5bde6b9",
        "cursor": {
          "ref": "a9df2ef9-fcc8-4819-acf2-aa2810f301af",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d9cb417f-f8af-47c3-ae90-81ff36cd3afa"
        },
        "item": {
          "id": "1248f1e7-ddfa-4c89-a1f8-7defa5bde6b9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d8c00d33-f91c-46fb-9ed4-5c1de47e73f2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "1248f1e7-ddfa-4c89-a1f8-7defa5bde6b9",
        "cursor": {
          "ref": "a9df2ef9-fcc8-4819-acf2-aa2810f301af",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d9cb417f-f8af-47c3-ae90-81ff36cd3afa"
        },
        "item": {
          "id": "1248f1e7-ddfa-4c89-a1f8-7defa5bde6b9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d8c00d33-f91c-46fb-9ed4-5c1de47e73f2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "cc01ed7c-64ad-4c84-809b-25e9b9274b22",
        "cursor": {
          "ref": "ece6be4a-cafb-426f-a66c-44e769d5f6c4",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9e075ca9-f43f-41d5-b6c3-e8b64a173b91"
        },
        "item": {
          "id": "cc01ed7c-64ad-4c84-809b-25e9b9274b22",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "09334776-7a1d-4b43-a22a-13a59b84e7f5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "cc01ed7c-64ad-4c84-809b-25e9b9274b22",
        "cursor": {
          "ref": "ece6be4a-cafb-426f-a66c-44e769d5f6c4",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9e075ca9-f43f-41d5-b6c3-e8b64a173b91"
        },
        "item": {
          "id": "cc01ed7c-64ad-4c84-809b-25e9b9274b22",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "09334776-7a1d-4b43-a22a-13a59b84e7f5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "81238e74-2ed1-484f-b469-b0816e0344d5",
        "cursor": {
          "ref": "638dd15e-6520-4908-99ee-2ff61abc1dcc",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2f033911-d7e1-4157-9480-7120a0de0a78"
        },
        "item": {
          "id": "81238e74-2ed1-484f-b469-b0816e0344d5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "78606800-58e2-43a9-89b9-75ffe809d5c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "81238e74-2ed1-484f-b469-b0816e0344d5",
        "cursor": {
          "ref": "638dd15e-6520-4908-99ee-2ff61abc1dcc",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2f033911-d7e1-4157-9480-7120a0de0a78"
        },
        "item": {
          "id": "81238e74-2ed1-484f-b469-b0816e0344d5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "78606800-58e2-43a9-89b9-75ffe809d5c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "50b1f0a1-27c5-4d67-a358-f09acd20241f",
        "cursor": {
          "ref": "d0f26f12-e67a-4313-aa50-adf5f1ec2887",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5d2f58bb-40f4-41ed-9f8e-582588a0c4b9"
        },
        "item": {
          "id": "50b1f0a1-27c5-4d67-a358-f09acd20241f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "99f42e16-fc91-4385-9e5a-91c76e52f7ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "50b1f0a1-27c5-4d67-a358-f09acd20241f",
        "cursor": {
          "ref": "d0f26f12-e67a-4313-aa50-adf5f1ec2887",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5d2f58bb-40f4-41ed-9f8e-582588a0c4b9"
        },
        "item": {
          "id": "50b1f0a1-27c5-4d67-a358-f09acd20241f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "99f42e16-fc91-4385-9e5a-91c76e52f7ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "81551286-bec7-4b99-9182-817e15da7d0c",
        "cursor": {
          "ref": "42849621-898d-4e64-93a5-ca738960225f",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8b33bd8d-9576-4c90-b513-345ac0136d51"
        },
        "item": {
          "id": "81551286-bec7-4b99-9182-817e15da7d0c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "0fe3f8fa-dd8e-4ee9-812f-32a6d466c5fb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "81551286-bec7-4b99-9182-817e15da7d0c",
        "cursor": {
          "ref": "42849621-898d-4e64-93a5-ca738960225f",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8b33bd8d-9576-4c90-b513-345ac0136d51"
        },
        "item": {
          "id": "81551286-bec7-4b99-9182-817e15da7d0c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "0fe3f8fa-dd8e-4ee9-812f-32a6d466c5fb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "ff50fc23-75b5-4d61-a515-40f56ff79ccf",
        "cursor": {
          "ref": "5d20ae0a-d9ff-4508-a4f8-33d44e4ae5d5",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "1dff893d-6ef1-4705-8a66-f27831ba6b1e"
        },
        "item": {
          "id": "ff50fc23-75b5-4d61-a515-40f56ff79ccf",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f6524e7f-2ac8-4813-96fc-f9fb8ddd1dde",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "ff50fc23-75b5-4d61-a515-40f56ff79ccf",
        "cursor": {
          "ref": "5d20ae0a-d9ff-4508-a4f8-33d44e4ae5d5",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "1dff893d-6ef1-4705-8a66-f27831ba6b1e"
        },
        "item": {
          "id": "ff50fc23-75b5-4d61-a515-40f56ff79ccf",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f6524e7f-2ac8-4813-96fc-f9fb8ddd1dde",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "36d1ac49-0b6d-4602-93f8-a0a083b28782",
        "cursor": {
          "ref": "b43b3085-184b-4fb5-9fda-efb47c2444e5",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d969f604-e7cc-4c78-b2ea-b15f54339589"
        },
        "item": {
          "id": "36d1ac49-0b6d-4602-93f8-a0a083b28782",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "fe63ca81-b72d-4b4c-819e-04e075172de0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "36d1ac49-0b6d-4602-93f8-a0a083b28782",
        "cursor": {
          "ref": "b43b3085-184b-4fb5-9fda-efb47c2444e5",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d969f604-e7cc-4c78-b2ea-b15f54339589"
        },
        "item": {
          "id": "36d1ac49-0b6d-4602-93f8-a0a083b28782",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "fe63ca81-b72d-4b4c-819e-04e075172de0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "84b293b8-b2f5-4527-9034-1690cd3dc4e2",
        "cursor": {
          "ref": "b88667c9-a785-4696-ac64-b0766a0d476c",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "311d66ff-2e81-44e6-8811-2cd7b62cd359"
        },
        "item": {
          "id": "84b293b8-b2f5-4527-9034-1690cd3dc4e2",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0d4fdd96-6721-4749-910c-2acd13bcaade",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "84b293b8-b2f5-4527-9034-1690cd3dc4e2",
        "cursor": {
          "ref": "b88667c9-a785-4696-ac64-b0766a0d476c",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "311d66ff-2e81-44e6-8811-2cd7b62cd359"
        },
        "item": {
          "id": "84b293b8-b2f5-4527-9034-1690cd3dc4e2",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0d4fdd96-6721-4749-910c-2acd13bcaade",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "717489a5-40e3-4fc8-b576-d8cbf0aebd5e",
        "cursor": {
          "ref": "04dad3ad-af81-49d0-8086-879c8abcac9f",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "684ba40c-1cc3-4ceb-aa8a-ab807bcb706b"
        },
        "item": {
          "id": "717489a5-40e3-4fc8-b576-d8cbf0aebd5e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1a2bb50d-f3c8-4c14-be39-13e735c2e241",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "717489a5-40e3-4fc8-b576-d8cbf0aebd5e",
        "cursor": {
          "ref": "04dad3ad-af81-49d0-8086-879c8abcac9f",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "684ba40c-1cc3-4ceb-aa8a-ab807bcb706b"
        },
        "item": {
          "id": "717489a5-40e3-4fc8-b576-d8cbf0aebd5e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1a2bb50d-f3c8-4c14-be39-13e735c2e241",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "c58e4a13-d225-4f94-98fa-05c1d87fcb8b",
        "cursor": {
          "ref": "463b9cf3-06e0-45de-9521-806bbddd2a3a",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e49cf01f-a967-4548-92fe-9d55f5a7dc4c"
        },
        "item": {
          "id": "c58e4a13-d225-4f94-98fa-05c1d87fcb8b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "3e26fa50-b73c-478b-91ad-c2d613743746",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "c58e4a13-d225-4f94-98fa-05c1d87fcb8b",
        "cursor": {
          "ref": "463b9cf3-06e0-45de-9521-806bbddd2a3a",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e49cf01f-a967-4548-92fe-9d55f5a7dc4c"
        },
        "item": {
          "id": "c58e4a13-d225-4f94-98fa-05c1d87fcb8b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "3e26fa50-b73c-478b-91ad-c2d613743746",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "39d87d56-d8e3-4fea-aff3-f9ca98947386",
        "cursor": {
          "ref": "fce3a87e-a83d-48d0-a6cf-8b7a99ef7c05",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8d4f3d63-29b6-4846-84d8-78c8b9483a1d"
        },
        "item": {
          "id": "39d87d56-d8e3-4fea-aff3-f9ca98947386",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "61a587d8-073b-4e47-bfd1-bc29155bbfe8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "39d87d56-d8e3-4fea-aff3-f9ca98947386",
        "cursor": {
          "ref": "fce3a87e-a83d-48d0-a6cf-8b7a99ef7c05",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8d4f3d63-29b6-4846-84d8-78c8b9483a1d"
        },
        "item": {
          "id": "39d87d56-d8e3-4fea-aff3-f9ca98947386",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "61a587d8-073b-4e47-bfd1-bc29155bbfe8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "b591bfc6-94e6-428a-a1e0-4d4a135bc824",
        "cursor": {
          "ref": "b7b76068-27da-4ef9-8da0-aefd8dafd427",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f9d360c9-7fe0-4898-acb7-84ebebb4bb98"
        },
        "item": {
          "id": "b591bfc6-94e6-428a-a1e0-4d4a135bc824",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "480e575a-ac25-485e-9269-93ac0dd86866",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "b591bfc6-94e6-428a-a1e0-4d4a135bc824",
        "cursor": {
          "ref": "b7b76068-27da-4ef9-8da0-aefd8dafd427",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f9d360c9-7fe0-4898-acb7-84ebebb4bb98"
        },
        "item": {
          "id": "b591bfc6-94e6-428a-a1e0-4d4a135bc824",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "480e575a-ac25-485e-9269-93ac0dd86866",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "941773b1-c313-4743-8720-15a02a8fec39",
        "cursor": {
          "ref": "9a13700c-60ba-4077-93e1-057a17798caf",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "46680b1b-58de-40c9-a0b7-10662e432183"
        },
        "item": {
          "id": "941773b1-c313-4743-8720-15a02a8fec39",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3f760a0b-296f-45e9-8d9d-13257677c37b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "941773b1-c313-4743-8720-15a02a8fec39",
        "cursor": {
          "ref": "9a13700c-60ba-4077-93e1-057a17798caf",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "46680b1b-58de-40c9-a0b7-10662e432183"
        },
        "item": {
          "id": "941773b1-c313-4743-8720-15a02a8fec39",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3f760a0b-296f-45e9-8d9d-13257677c37b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "3c1dfc75-b742-46e8-ba7b-5b841c78439e",
        "cursor": {
          "ref": "a0006f79-905c-47b1-95f8-f2c981e86e6c",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "db851ff0-551a-45d8-ae61-e58b2fba8da3"
        },
        "item": {
          "id": "3c1dfc75-b742-46e8-ba7b-5b841c78439e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b7842fa7-1b06-4808-9bcf-1eb3fca13fb0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "3c1dfc75-b742-46e8-ba7b-5b841c78439e",
        "cursor": {
          "ref": "a0006f79-905c-47b1-95f8-f2c981e86e6c",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "db851ff0-551a-45d8-ae61-e58b2fba8da3"
        },
        "item": {
          "id": "3c1dfc75-b742-46e8-ba7b-5b841c78439e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b7842fa7-1b06-4808-9bcf-1eb3fca13fb0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "78c0eac4-40eb-47e1-a061-cacf09b92265",
        "cursor": {
          "ref": "8c764a2b-e463-4ca3-818d-27292817e8a5",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "66e4a39a-0642-49e4-b1ed-54eba6b8b6dc"
        },
        "item": {
          "id": "78c0eac4-40eb-47e1-a061-cacf09b92265",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d7c744b4-c6b6-42e1-ae86-07c05e8a40e3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "78c0eac4-40eb-47e1-a061-cacf09b92265",
        "cursor": {
          "ref": "8c764a2b-e463-4ca3-818d-27292817e8a5",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "66e4a39a-0642-49e4-b1ed-54eba6b8b6dc"
        },
        "item": {
          "id": "78c0eac4-40eb-47e1-a061-cacf09b92265",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d7c744b4-c6b6-42e1-ae86-07c05e8a40e3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "67581490-9137-4c32-92d8-ccd24bf24b32",
        "cursor": {
          "ref": "febc4556-f2f7-4c49-ab87-ba39ec987f10",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ed16cdcc-8739-4ee7-816c-e91ad89e7925"
        },
        "item": {
          "id": "67581490-9137-4c32-92d8-ccd24bf24b32",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "8fdd5e7c-7e3f-45d4-808a-7b77b896a765",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "67581490-9137-4c32-92d8-ccd24bf24b32",
        "cursor": {
          "ref": "febc4556-f2f7-4c49-ab87-ba39ec987f10",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ed16cdcc-8739-4ee7-816c-e91ad89e7925"
        },
        "item": {
          "id": "67581490-9137-4c32-92d8-ccd24bf24b32",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "8fdd5e7c-7e3f-45d4-808a-7b77b896a765",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "d7ada6a8-0757-482c-a41b-e9a7c6b2f094",
        "cursor": {
          "ref": "11535a06-b889-46e5-8316-978556992998",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1e733e96-e6fc-484d-b15b-5316b2dfeaa7"
        },
        "item": {
          "id": "d7ada6a8-0757-482c-a41b-e9a7c6b2f094",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0fe1e327-b392-4995-a495-68258a7f32ea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "d7ada6a8-0757-482c-a41b-e9a7c6b2f094",
        "cursor": {
          "ref": "11535a06-b889-46e5-8316-978556992998",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1e733e96-e6fc-484d-b15b-5316b2dfeaa7"
        },
        "item": {
          "id": "d7ada6a8-0757-482c-a41b-e9a7c6b2f094",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0fe1e327-b392-4995-a495-68258a7f32ea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "e65e5c14-1dd9-4c14-9d1c-565ba1aa9cb0",
        "cursor": {
          "ref": "9c9f364c-ee15-4b6c-bdcb-aeb0ef5d7955",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c99d91d7-8445-42fd-a714-288519efb9f9"
        },
        "item": {
          "id": "e65e5c14-1dd9-4c14-9d1c-565ba1aa9cb0",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "4ae2ff94-5d76-4192-8825-fb7b686d1a1c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "e65e5c14-1dd9-4c14-9d1c-565ba1aa9cb0",
        "cursor": {
          "ref": "9c9f364c-ee15-4b6c-bdcb-aeb0ef5d7955",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c99d91d7-8445-42fd-a714-288519efb9f9"
        },
        "item": {
          "id": "e65e5c14-1dd9-4c14-9d1c-565ba1aa9cb0",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "4ae2ff94-5d76-4192-8825-fb7b686d1a1c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "f10f84cf-890e-4cfb-9875-7511f2cb33d0",
        "cursor": {
          "ref": "6322bbd5-da60-4eda-ac0d-3a3b938e5409",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "fd712214-2312-4b93-97cd-a015bf0584f2"
        },
        "item": {
          "id": "f10f84cf-890e-4cfb-9875-7511f2cb33d0",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "93b1318e-8fda-4cc6-90b4-c346423b95df",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "f10f84cf-890e-4cfb-9875-7511f2cb33d0",
        "cursor": {
          "ref": "6322bbd5-da60-4eda-ac0d-3a3b938e5409",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "fd712214-2312-4b93-97cd-a015bf0584f2"
        },
        "item": {
          "id": "f10f84cf-890e-4cfb-9875-7511f2cb33d0",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "93b1318e-8fda-4cc6-90b4-c346423b95df",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "817f9d77-df58-4413-879e-f45e9ab317c2",
        "cursor": {
          "ref": "cdf63d23-aaf2-4da9-901d-5d3c0201e885",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "2416b8fb-3d09-424c-98f7-c398302668a4"
        },
        "item": {
          "id": "817f9d77-df58-4413-879e-f45e9ab317c2",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "05f710d4-a429-45c9-990c-7471026d1d1d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "817f9d77-df58-4413-879e-f45e9ab317c2",
        "cursor": {
          "ref": "cdf63d23-aaf2-4da9-901d-5d3c0201e885",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "2416b8fb-3d09-424c-98f7-c398302668a4"
        },
        "item": {
          "id": "817f9d77-df58-4413-879e-f45e9ab317c2",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "05f710d4-a429-45c9-990c-7471026d1d1d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "ff595e49-f472-4c83-a372-95c70e4b1af3",
        "cursor": {
          "ref": "b98bf482-5a3e-42b8-9985-d9aed0cd6bb3",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "dfd5c80b-a1da-48f3-9f63-062e73aedcfa"
        },
        "item": {
          "id": "ff595e49-f472-4c83-a372-95c70e4b1af3",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "38d8d719-3536-4dd6-ad61-5e0295b7084b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "ff595e49-f472-4c83-a372-95c70e4b1af3",
        "cursor": {
          "ref": "b98bf482-5a3e-42b8-9985-d9aed0cd6bb3",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "dfd5c80b-a1da-48f3-9f63-062e73aedcfa"
        },
        "item": {
          "id": "ff595e49-f472-4c83-a372-95c70e4b1af3",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "38d8d719-3536-4dd6-ad61-5e0295b7084b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 42,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "df3db1b5-cd6c-488a-9323-2e1ed88760ca",
        "cursor": {
          "ref": "463b9764-6be4-474c-8e73-6e5255db72f8",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "06841fa1-7ebb-4a9b-9535-cf66bb3b2ab1"
        },
        "item": {
          "id": "df3db1b5-cd6c-488a-9323-2e1ed88760ca",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "da5e8dba-0c2f-4aeb-a000-7548e271e18e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "df3db1b5-cd6c-488a-9323-2e1ed88760ca",
        "cursor": {
          "ref": "463b9764-6be4-474c-8e73-6e5255db72f8",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "06841fa1-7ebb-4a9b-9535-cf66bb3b2ab1"
        },
        "item": {
          "id": "df3db1b5-cd6c-488a-9323-2e1ed88760ca",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "da5e8dba-0c2f-4aeb-a000-7548e271e18e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "46a23630-a264-41c4-98ea-cab8f937d26b",
        "cursor": {
          "ref": "20664540-2f98-4f54-8a4c-5705d0e209da",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "412239f2-2c11-44b3-b0f8-1f4ec4d491d5"
        },
        "item": {
          "id": "46a23630-a264-41c4-98ea-cab8f937d26b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3d63bc0c-7f52-44a5-b556-ccc672d03750",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "46a23630-a264-41c4-98ea-cab8f937d26b",
        "cursor": {
          "ref": "20664540-2f98-4f54-8a4c-5705d0e209da",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "412239f2-2c11-44b3-b0f8-1f4ec4d491d5"
        },
        "item": {
          "id": "46a23630-a264-41c4-98ea-cab8f937d26b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3d63bc0c-7f52-44a5-b556-ccc672d03750",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "f3a297d4-dff1-4b93-b653-a78e6d04114f",
        "cursor": {
          "ref": "0891781f-aabd-438a-bbbb-2fa79965e673",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a77c38a4-a565-437c-8515-4b332b0a0d52"
        },
        "item": {
          "id": "f3a297d4-dff1-4b93-b653-a78e6d04114f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "2a6d0e31-5972-4fba-8fbf-8b23f09ff87a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "f3a297d4-dff1-4b93-b653-a78e6d04114f",
        "cursor": {
          "ref": "0891781f-aabd-438a-bbbb-2fa79965e673",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a77c38a4-a565-437c-8515-4b332b0a0d52"
        },
        "item": {
          "id": "f3a297d4-dff1-4b93-b653-a78e6d04114f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "2a6d0e31-5972-4fba-8fbf-8b23f09ff87a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "027409bf-174a-4ba7-8a54-e54fdbb83465",
        "cursor": {
          "ref": "f991049d-f3ee-46f5-add9-049e55811190",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "30117b46-b827-4200-80fd-313b8f27d44a"
        },
        "item": {
          "id": "027409bf-174a-4ba7-8a54-e54fdbb83465",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "71de9b5f-cf91-40b9-82c3-c0b42adabb7c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "027409bf-174a-4ba7-8a54-e54fdbb83465",
        "cursor": {
          "ref": "f991049d-f3ee-46f5-add9-049e55811190",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "30117b46-b827-4200-80fd-313b8f27d44a"
        },
        "item": {
          "id": "027409bf-174a-4ba7-8a54-e54fdbb83465",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "71de9b5f-cf91-40b9-82c3-c0b42adabb7c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "9731cae3-d414-4be5-a2fd-f1d8e7cc43b8",
        "cursor": {
          "ref": "42cff1e4-ea64-4032-b67a-9fb63cd702fa",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b391f674-246c-41f9-93d0-fcac7cae4423"
        },
        "item": {
          "id": "9731cae3-d414-4be5-a2fd-f1d8e7cc43b8",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c8973fe1-afc7-41e7-804c-30304c1765b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "9731cae3-d414-4be5-a2fd-f1d8e7cc43b8",
        "cursor": {
          "ref": "42cff1e4-ea64-4032-b67a-9fb63cd702fa",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b391f674-246c-41f9-93d0-fcac7cae4423"
        },
        "item": {
          "id": "9731cae3-d414-4be5-a2fd-f1d8e7cc43b8",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c8973fe1-afc7-41e7-804c-30304c1765b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "3f1fceb0-d2e6-49b3-8324-1812c299cff3",
        "cursor": {
          "ref": "04b4586e-7d14-4895-8c8b-e9e2f9e86207",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2ee78134-4a78-47ea-8c9d-bbf1777d727f"
        },
        "item": {
          "id": "3f1fceb0-d2e6-49b3-8324-1812c299cff3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ad3ce8e6-1c68-425f-adc7-488d25599aeb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "3f1fceb0-d2e6-49b3-8324-1812c299cff3",
        "cursor": {
          "ref": "04b4586e-7d14-4895-8c8b-e9e2f9e86207",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2ee78134-4a78-47ea-8c9d-bbf1777d727f"
        },
        "item": {
          "id": "3f1fceb0-d2e6-49b3-8324-1812c299cff3",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ad3ce8e6-1c68-425f-adc7-488d25599aeb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "722f84f3-7139-430c-b28b-6f4ec8a6d961",
        "cursor": {
          "ref": "0bfc6a8a-e7d1-40af-8508-ea1c81da7f61",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ef0c2a41-ffa9-45b3-b3fc-67129369a674"
        },
        "item": {
          "id": "722f84f3-7139-430c-b28b-6f4ec8a6d961",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8dd07b07-bca6-4813-bbaa-93adcd6b6a72",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "722f84f3-7139-430c-b28b-6f4ec8a6d961",
        "cursor": {
          "ref": "0bfc6a8a-e7d1-40af-8508-ea1c81da7f61",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ef0c2a41-ffa9-45b3-b3fc-67129369a674"
        },
        "item": {
          "id": "722f84f3-7139-430c-b28b-6f4ec8a6d961",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8dd07b07-bca6-4813-bbaa-93adcd6b6a72",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "1edb52ac-26b2-4ad1-a423-29349674862d",
        "cursor": {
          "ref": "f3484625-ea1e-48f3-93d0-d21eb1e85612",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "41fc8e1a-e412-4b70-9dfc-13c0eedca3f7"
        },
        "item": {
          "id": "1edb52ac-26b2-4ad1-a423-29349674862d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "494f0202-4389-40c5-a8f3-9e762064e2e3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "1edb52ac-26b2-4ad1-a423-29349674862d",
        "cursor": {
          "ref": "f3484625-ea1e-48f3-93d0-d21eb1e85612",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "41fc8e1a-e412-4b70-9dfc-13c0eedca3f7"
        },
        "item": {
          "id": "1edb52ac-26b2-4ad1-a423-29349674862d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "494f0202-4389-40c5-a8f3-9e762064e2e3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "2d009580-a668-4278-a0f3-7abb39cb6f10",
        "cursor": {
          "ref": "6dd275de-8031-4354-87d4-4a65908de407",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c9a137bf-e78e-4165-8a4e-3750a5364af0"
        },
        "item": {
          "id": "2d009580-a668-4278-a0f3-7abb39cb6f10",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "45d8b4c0-56b2-4db5-bb05-9ccd04345a69",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "2d009580-a668-4278-a0f3-7abb39cb6f10",
        "cursor": {
          "ref": "6dd275de-8031-4354-87d4-4a65908de407",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c9a137bf-e78e-4165-8a4e-3750a5364af0"
        },
        "item": {
          "id": "2d009580-a668-4278-a0f3-7abb39cb6f10",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "45d8b4c0-56b2-4db5-bb05-9ccd04345a69",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "efbf1f8b-a185-4137-af09-510a234bcffa",
        "cursor": {
          "ref": "8e51225a-a5d5-4d6e-b424-9b66be9d31ce",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "3cbd13e5-b77b-4e38-88e7-50e656053881"
        },
        "item": {
          "id": "efbf1f8b-a185-4137-af09-510a234bcffa",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9697b719-5c86-4f1e-abd9-48c2544cec24",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "efbf1f8b-a185-4137-af09-510a234bcffa",
        "cursor": {
          "ref": "8e51225a-a5d5-4d6e-b424-9b66be9d31ce",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "3cbd13e5-b77b-4e38-88e7-50e656053881"
        },
        "item": {
          "id": "efbf1f8b-a185-4137-af09-510a234bcffa",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9697b719-5c86-4f1e-abd9-48c2544cec24",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "0c73d935-1cfe-47d1-9c08-7b118b9ae5be",
        "cursor": {
          "ref": "3edb8fe6-5d0d-49b9-aa00-7c75ff7e8de0",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "1885f003-50b4-4623-9c0e-fd3b83185293"
        },
        "item": {
          "id": "0c73d935-1cfe-47d1-9c08-7b118b9ae5be",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "aa5bb4fa-a457-4615-9752-bb8ed3f7c3fb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "0c73d935-1cfe-47d1-9c08-7b118b9ae5be",
        "cursor": {
          "ref": "3edb8fe6-5d0d-49b9-aa00-7c75ff7e8de0",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "1885f003-50b4-4623-9c0e-fd3b83185293"
        },
        "item": {
          "id": "0c73d935-1cfe-47d1-9c08-7b118b9ae5be",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "aa5bb4fa-a457-4615-9752-bb8ed3f7c3fb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "7fd8c398-1157-4e50-b22b-d8f78e8e2172",
        "cursor": {
          "ref": "e0f45614-b67d-49e9-9783-4b2f9d295e29",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c7fa3fac-8cd1-4940-ac4c-abd078065425"
        },
        "item": {
          "id": "7fd8c398-1157-4e50-b22b-d8f78e8e2172",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e554925f-0ab0-45cf-bee2-14a8abb45d03",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "7fd8c398-1157-4e50-b22b-d8f78e8e2172",
        "cursor": {
          "ref": "e0f45614-b67d-49e9-9783-4b2f9d295e29",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c7fa3fac-8cd1-4940-ac4c-abd078065425"
        },
        "item": {
          "id": "7fd8c398-1157-4e50-b22b-d8f78e8e2172",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e554925f-0ab0-45cf-bee2-14a8abb45d03",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "82c6ed06-c7a5-446a-b645-f31f80e27fc0",
        "cursor": {
          "ref": "088c7e4c-ec01-46de-b5f7-cf1a58d12408",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "81e83f98-5f55-40cc-917b-9887fc208d41"
        },
        "item": {
          "id": "82c6ed06-c7a5-446a-b645-f31f80e27fc0",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6238ca44-a234-4ac0-8d57-8b1f5f9bd1d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "82c6ed06-c7a5-446a-b645-f31f80e27fc0",
        "cursor": {
          "ref": "088c7e4c-ec01-46de-b5f7-cf1a58d12408",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "81e83f98-5f55-40cc-917b-9887fc208d41"
        },
        "item": {
          "id": "82c6ed06-c7a5-446a-b645-f31f80e27fc0",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6238ca44-a234-4ac0-8d57-8b1f5f9bd1d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "104955e3-523e-4784-9284-9f2e1eac0f29",
        "cursor": {
          "ref": "836b04bb-ff85-48f4-8cb5-d6130b3f3b44",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3544cf1b-e630-4b20-ad71-5925a5f93e70"
        },
        "item": {
          "id": "104955e3-523e-4784-9284-9f2e1eac0f29",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "529fc395-2aff-4941-934c-3c23cbe15232",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "104955e3-523e-4784-9284-9f2e1eac0f29",
        "cursor": {
          "ref": "836b04bb-ff85-48f4-8cb5-d6130b3f3b44",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3544cf1b-e630-4b20-ad71-5925a5f93e70"
        },
        "item": {
          "id": "104955e3-523e-4784-9284-9f2e1eac0f29",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "529fc395-2aff-4941-934c-3c23cbe15232",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "f575a738-1cb8-48d8-87b7-a68d6c716b69",
        "cursor": {
          "ref": "8c6314d2-b589-4d41-9318-70cad8415c8f",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "6ec40c98-3e1e-4c51-8239-715bd62fa3bf"
        },
        "item": {
          "id": "f575a738-1cb8-48d8-87b7-a68d6c716b69",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "216b41fd-e336-4e31-b025-466815f42995",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "f575a738-1cb8-48d8-87b7-a68d6c716b69",
        "cursor": {
          "ref": "8c6314d2-b589-4d41-9318-70cad8415c8f",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "6ec40c98-3e1e-4c51-8239-715bd62fa3bf"
        },
        "item": {
          "id": "f575a738-1cb8-48d8-87b7-a68d6c716b69",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "216b41fd-e336-4e31-b025-466815f42995",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "d3336946-a88c-4e3f-a969-6b5b2388d4b2",
        "cursor": {
          "ref": "f9241e3f-2733-45ca-bd81-7401561cba36",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ffd45858-e6f8-402c-9684-72ef2e2aaaba"
        },
        "item": {
          "id": "d3336946-a88c-4e3f-a969-6b5b2388d4b2",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "56ac5c4e-161a-4f3a-99d7-954de28ce233",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "d3336946-a88c-4e3f-a969-6b5b2388d4b2",
        "cursor": {
          "ref": "f9241e3f-2733-45ca-bd81-7401561cba36",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ffd45858-e6f8-402c-9684-72ef2e2aaaba"
        },
        "item": {
          "id": "d3336946-a88c-4e3f-a969-6b5b2388d4b2",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "56ac5c4e-161a-4f3a-99d7-954de28ce233",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "5ba57fb7-79e7-438c-ad6f-c01ea129db1f",
        "cursor": {
          "ref": "18d42d49-eb80-4bfb-aed6-a10fffafd16a",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b5b8c146-b4ca-4b33-a185-437c8649737c"
        },
        "item": {
          "id": "5ba57fb7-79e7-438c-ad6f-c01ea129db1f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "44921620-f7a1-450e-b1a6-4049cc9f3d7e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "5ba57fb7-79e7-438c-ad6f-c01ea129db1f",
        "cursor": {
          "ref": "18d42d49-eb80-4bfb-aed6-a10fffafd16a",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b5b8c146-b4ca-4b33-a185-437c8649737c"
        },
        "item": {
          "id": "5ba57fb7-79e7-438c-ad6f-c01ea129db1f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "44921620-f7a1-450e-b1a6-4049cc9f3d7e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "16940c48-e620-406c-b97f-af2629d3a712",
        "cursor": {
          "ref": "8ceb2e1e-22de-460d-84e5-cfc53d67a7ed",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b75b0c06-99a7-4205-8032-1beddafa6843"
        },
        "item": {
          "id": "16940c48-e620-406c-b97f-af2629d3a712",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "4968a256-a535-40a9-a7ee-25727cd1c5e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "16940c48-e620-406c-b97f-af2629d3a712",
        "cursor": {
          "ref": "8ceb2e1e-22de-460d-84e5-cfc53d67a7ed",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b75b0c06-99a7-4205-8032-1beddafa6843"
        },
        "item": {
          "id": "16940c48-e620-406c-b97f-af2629d3a712",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "4968a256-a535-40a9-a7ee-25727cd1c5e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "491314e1-4ed7-47ef-91c1-b681789dd161",
        "cursor": {
          "ref": "e57f86cd-437d-46fc-a8c8-6fe9846a6235",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "38c84804-2fdb-4179-b952-0ef9ec968229"
        },
        "item": {
          "id": "491314e1-4ed7-47ef-91c1-b681789dd161",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a1ff1bab-60eb-4b8f-bd2d-6d6fab668aa4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "491314e1-4ed7-47ef-91c1-b681789dd161",
        "cursor": {
          "ref": "e57f86cd-437d-46fc-a8c8-6fe9846a6235",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "38c84804-2fdb-4179-b952-0ef9ec968229"
        },
        "item": {
          "id": "491314e1-4ed7-47ef-91c1-b681789dd161",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a1ff1bab-60eb-4b8f-bd2d-6d6fab668aa4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "29f310bd-dc6e-40f1-bd12-9f5d0caec387",
        "cursor": {
          "ref": "31579c67-05df-426f-a1e5-c1f551635223",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8a4f3c81-fd22-4ceb-8f9c-b93e28a23111"
        },
        "item": {
          "id": "29f310bd-dc6e-40f1-bd12-9f5d0caec387",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a0cf4500-4216-48d5-bb12-3bd1384144d3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "29f310bd-dc6e-40f1-bd12-9f5d0caec387",
        "cursor": {
          "ref": "31579c67-05df-426f-a1e5-c1f551635223",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8a4f3c81-fd22-4ceb-8f9c-b93e28a23111"
        },
        "item": {
          "id": "29f310bd-dc6e-40f1-bd12-9f5d0caec387",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a0cf4500-4216-48d5-bb12-3bd1384144d3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "d948266a-20f7-4e98-8efd-be51bdaa214d",
        "cursor": {
          "ref": "e6ee06aa-db0c-4391-9827-9cdf113ff851",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b9621c71-d9cb-45fe-a45e-d3cad75353f8"
        },
        "item": {
          "id": "d948266a-20f7-4e98-8efd-be51bdaa214d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "86f3bcc6-1f74-483f-a941-fadbf6526a39",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "d948266a-20f7-4e98-8efd-be51bdaa214d",
        "cursor": {
          "ref": "e6ee06aa-db0c-4391-9827-9cdf113ff851",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b9621c71-d9cb-45fe-a45e-d3cad75353f8"
        },
        "item": {
          "id": "d948266a-20f7-4e98-8efd-be51bdaa214d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "86f3bcc6-1f74-483f-a941-fadbf6526a39",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "c2c2f32f-c356-4e78-9359-c983bf0ad389",
        "cursor": {
          "ref": "2f241018-a982-4187-8c9a-edbf28f24c8f",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6c700773-a9a6-48a7-ac6f-dab27fb4ecf1"
        },
        "item": {
          "id": "c2c2f32f-c356-4e78-9359-c983bf0ad389",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "38181d46-dfbb-4bf8-a470-9d8b89bdab1f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "c2c2f32f-c356-4e78-9359-c983bf0ad389",
        "cursor": {
          "ref": "2f241018-a982-4187-8c9a-edbf28f24c8f",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6c700773-a9a6-48a7-ac6f-dab27fb4ecf1"
        },
        "item": {
          "id": "c2c2f32f-c356-4e78-9359-c983bf0ad389",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "38181d46-dfbb-4bf8-a470-9d8b89bdab1f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "5d6d5539-dbfc-40c2-85fb-3ef8fb04e047",
        "cursor": {
          "ref": "ad5d0fdf-a530-4751-a979-e44970836d6b",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a80572f5-9d80-4e49-b558-877a216f7b14"
        },
        "item": {
          "id": "5d6d5539-dbfc-40c2-85fb-3ef8fb04e047",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "03096eea-e288-41d6-be99-c58ed868f29d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "5d6d5539-dbfc-40c2-85fb-3ef8fb04e047",
        "cursor": {
          "ref": "ad5d0fdf-a530-4751-a979-e44970836d6b",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a80572f5-9d80-4e49-b558-877a216f7b14"
        },
        "item": {
          "id": "5d6d5539-dbfc-40c2-85fb-3ef8fb04e047",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "03096eea-e288-41d6-be99-c58ed868f29d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "94e8b46a-8706-4fc0-a54b-1ea14926bb1a",
        "cursor": {
          "ref": "b3c6d41e-8d70-4f6a-b044-22f3aaa6b02f",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "760f825c-f7f7-43c7-b63c-a419e65f793e"
        },
        "item": {
          "id": "94e8b46a-8706-4fc0-a54b-1ea14926bb1a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9de01d44-414e-4905-84fe-5fb37b725c51",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "94e8b46a-8706-4fc0-a54b-1ea14926bb1a",
        "cursor": {
          "ref": "b3c6d41e-8d70-4f6a-b044-22f3aaa6b02f",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "760f825c-f7f7-43c7-b63c-a419e65f793e"
        },
        "item": {
          "id": "94e8b46a-8706-4fc0-a54b-1ea14926bb1a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9de01d44-414e-4905-84fe-5fb37b725c51",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "0f796468-2e90-497c-8ed4-e7494c7cccc7",
        "cursor": {
          "ref": "dc827c71-93a1-4f70-aa89-95959f0e5624",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "635e89db-b8e6-419a-b775-2a1c5e7ba02c"
        },
        "item": {
          "id": "0f796468-2e90-497c-8ed4-e7494c7cccc7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "aad1dda7-2c7f-4b55-a439-b1ca3ea5daad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "0f796468-2e90-497c-8ed4-e7494c7cccc7",
        "cursor": {
          "ref": "dc827c71-93a1-4f70-aa89-95959f0e5624",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "635e89db-b8e6-419a-b775-2a1c5e7ba02c"
        },
        "item": {
          "id": "0f796468-2e90-497c-8ed4-e7494c7cccc7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "aad1dda7-2c7f-4b55-a439-b1ca3ea5daad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "13f898eb-3911-44bd-91c4-bd90bb8597e9",
        "cursor": {
          "ref": "e970f9b8-eed6-4e78-8b21-a2847b640809",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0b865711-bf78-4f2f-b612-40e14b8c2476"
        },
        "item": {
          "id": "13f898eb-3911-44bd-91c4-bd90bb8597e9",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f06bc9ce-36dd-40dc-93c5-ec29fb0e9b8c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "13f898eb-3911-44bd-91c4-bd90bb8597e9",
        "cursor": {
          "ref": "e970f9b8-eed6-4e78-8b21-a2847b640809",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0b865711-bf78-4f2f-b612-40e14b8c2476"
        },
        "item": {
          "id": "13f898eb-3911-44bd-91c4-bd90bb8597e9",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f06bc9ce-36dd-40dc-93c5-ec29fb0e9b8c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "e2b895d5-6a90-43fa-9811-6ddd225b7f54",
        "cursor": {
          "ref": "8296f651-fb99-4e46-900b-3fc11ef1c21d",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1e48e051-d257-4938-8f53-a2af5a291dd3"
        },
        "item": {
          "id": "e2b895d5-6a90-43fa-9811-6ddd225b7f54",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7b722fbe-ff2f-456d-8a05-b26c17fdf56b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "e2b895d5-6a90-43fa-9811-6ddd225b7f54",
        "cursor": {
          "ref": "8296f651-fb99-4e46-900b-3fc11ef1c21d",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1e48e051-d257-4938-8f53-a2af5a291dd3"
        },
        "item": {
          "id": "e2b895d5-6a90-43fa-9811-6ddd225b7f54",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7b722fbe-ff2f-456d-8a05-b26c17fdf56b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "c2c95e18-0c45-4db7-99b9-f2929805b070",
        "cursor": {
          "ref": "f34f2342-2a24-423d-9ab5-04517e1c3ec9",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7906849a-ad00-439e-b647-26951ad06a6a"
        },
        "item": {
          "id": "c2c95e18-0c45-4db7-99b9-f2929805b070",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "266bdfd0-8763-49d0-bec8-7c35c1297d11",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "c2c95e18-0c45-4db7-99b9-f2929805b070",
        "cursor": {
          "ref": "f34f2342-2a24-423d-9ab5-04517e1c3ec9",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7906849a-ad00-439e-b647-26951ad06a6a"
        },
        "item": {
          "id": "c2c95e18-0c45-4db7-99b9-f2929805b070",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "266bdfd0-8763-49d0-bec8-7c35c1297d11",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "aea7663a-afde-44f1-80c6-a83e49b3ceef",
        "cursor": {
          "ref": "fa5f7043-834d-4eca-bbe1-c3dd0b27970f",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9d53567c-fce1-494d-86c4-5c74078ab924"
        },
        "item": {
          "id": "aea7663a-afde-44f1-80c6-a83e49b3ceef",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f5bab189-f944-44b0-a527-90f0df21ba3f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "aea7663a-afde-44f1-80c6-a83e49b3ceef",
        "cursor": {
          "ref": "fa5f7043-834d-4eca-bbe1-c3dd0b27970f",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9d53567c-fce1-494d-86c4-5c74078ab924"
        },
        "item": {
          "id": "aea7663a-afde-44f1-80c6-a83e49b3ceef",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f5bab189-f944-44b0-a527-90f0df21ba3f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "6f3166ba-64e7-4050-a828-01c7daa4066e",
        "cursor": {
          "ref": "a414c549-5936-42be-83ad-381c506201f8",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "02b02852-27ad-4106-bb63-d2fb6a1629d0"
        },
        "item": {
          "id": "6f3166ba-64e7-4050-a828-01c7daa4066e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d3b1153d-a7b0-484f-984a-4df51122ee42",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "6f3166ba-64e7-4050-a828-01c7daa4066e",
        "cursor": {
          "ref": "a414c549-5936-42be-83ad-381c506201f8",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "02b02852-27ad-4106-bb63-d2fb6a1629d0"
        },
        "item": {
          "id": "6f3166ba-64e7-4050-a828-01c7daa4066e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d3b1153d-a7b0-484f-984a-4df51122ee42",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "bf83f8f4-7f2c-4156-b5eb-b5a03491de13",
        "cursor": {
          "ref": "013bb9c8-ebd3-4d10-bcfa-ec29862197a0",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a2c799ab-d187-4bf3-bc24-cd3e0283ab47"
        },
        "item": {
          "id": "bf83f8f4-7f2c-4156-b5eb-b5a03491de13",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3fea39e2-cf4a-4b7b-8d9e-86098011974d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "bf83f8f4-7f2c-4156-b5eb-b5a03491de13",
        "cursor": {
          "ref": "013bb9c8-ebd3-4d10-bcfa-ec29862197a0",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a2c799ab-d187-4bf3-bc24-cd3e0283ab47"
        },
        "item": {
          "id": "bf83f8f4-7f2c-4156-b5eb-b5a03491de13",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3fea39e2-cf4a-4b7b-8d9e-86098011974d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "5718b225-27b5-439f-98e8-cbd0b45a0e0d",
        "cursor": {
          "ref": "f4f99bd6-1067-4643-8a72-e89f865ebb06",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "38daeab0-a9c8-4ea5-bfdb-815414bcd820"
        },
        "item": {
          "id": "5718b225-27b5-439f-98e8-cbd0b45a0e0d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e9e2373d-907e-4aac-a55e-493c333f73ec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "5718b225-27b5-439f-98e8-cbd0b45a0e0d",
        "cursor": {
          "ref": "f4f99bd6-1067-4643-8a72-e89f865ebb06",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "38daeab0-a9c8-4ea5-bfdb-815414bcd820"
        },
        "item": {
          "id": "5718b225-27b5-439f-98e8-cbd0b45a0e0d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e9e2373d-907e-4aac-a55e-493c333f73ec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "bc947e87-9c9e-483a-845f-0bf8e7e97c0d",
        "cursor": {
          "ref": "48fd193c-ed96-4260-804c-ee702e328cdd",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "6a8dc885-8c18-40c8-b309-17d131646372"
        },
        "item": {
          "id": "bc947e87-9c9e-483a-845f-0bf8e7e97c0d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "7c26d00e-3c34-45da-bd59-5b9aaff9cc57",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "bc947e87-9c9e-483a-845f-0bf8e7e97c0d",
        "cursor": {
          "ref": "48fd193c-ed96-4260-804c-ee702e328cdd",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "6a8dc885-8c18-40c8-b309-17d131646372"
        },
        "item": {
          "id": "bc947e87-9c9e-483a-845f-0bf8e7e97c0d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "7c26d00e-3c34-45da-bd59-5b9aaff9cc57",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "042d79cb-b48d-43f5-8e00-29c9bd7b63c9",
        "cursor": {
          "ref": "6eda9e98-56e2-43d7-9392-c215224dd734",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b4202a91-aafe-4a80-a38f-edc5ed2650ad"
        },
        "item": {
          "id": "042d79cb-b48d-43f5-8e00-29c9bd7b63c9",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "73f41f0b-b7a7-428e-a582-de8242009a90",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "042d79cb-b48d-43f5-8e00-29c9bd7b63c9",
        "cursor": {
          "ref": "6eda9e98-56e2-43d7-9392-c215224dd734",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b4202a91-aafe-4a80-a38f-edc5ed2650ad"
        },
        "item": {
          "id": "042d79cb-b48d-43f5-8e00-29c9bd7b63c9",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "73f41f0b-b7a7-428e-a582-de8242009a90",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "2af8a923-d68b-4c0b-9d83-11a31f64fa43",
        "cursor": {
          "ref": "555bae63-7484-4ff7-b4f7-97073d87249c",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "69ac7b37-b871-4bfe-85e6-f924e450effc"
        },
        "item": {
          "id": "2af8a923-d68b-4c0b-9d83-11a31f64fa43",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7940ab65-0c1a-445d-b610-495150a8922f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "2af8a923-d68b-4c0b-9d83-11a31f64fa43",
        "cursor": {
          "ref": "555bae63-7484-4ff7-b4f7-97073d87249c",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "69ac7b37-b871-4bfe-85e6-f924e450effc"
        },
        "item": {
          "id": "2af8a923-d68b-4c0b-9d83-11a31f64fa43",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7940ab65-0c1a-445d-b610-495150a8922f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "7f9a5b83-6414-43e0-bd25-ebe6c40fc202",
        "cursor": {
          "ref": "5b7825d3-f8fa-4273-aad1-4597a55cac35",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ec1852b4-e440-46c8-a841-6e6149edb585"
        },
        "item": {
          "id": "7f9a5b83-6414-43e0-bd25-ebe6c40fc202",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "15312228-a7cd-4dca-a082-f54245c5480c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "7f9a5b83-6414-43e0-bd25-ebe6c40fc202",
        "cursor": {
          "ref": "5b7825d3-f8fa-4273-aad1-4597a55cac35",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ec1852b4-e440-46c8-a841-6e6149edb585"
        },
        "item": {
          "id": "7f9a5b83-6414-43e0-bd25-ebe6c40fc202",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "15312228-a7cd-4dca-a082-f54245c5480c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "5f94a6c1-caa8-447b-a670-4ce50e67c4ad",
        "cursor": {
          "ref": "265781cb-9443-40b0-88f5-c6361f0a92f3",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d588ba94-f6b2-42d5-9a5f-afca3cc94dac"
        },
        "item": {
          "id": "5f94a6c1-caa8-447b-a670-4ce50e67c4ad",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "deabad59-1b31-4afa-b236-d3b2664785c2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "5f94a6c1-caa8-447b-a670-4ce50e67c4ad",
        "cursor": {
          "ref": "265781cb-9443-40b0-88f5-c6361f0a92f3",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d588ba94-f6b2-42d5-9a5f-afca3cc94dac"
        },
        "item": {
          "id": "5f94a6c1-caa8-447b-a670-4ce50e67c4ad",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "deabad59-1b31-4afa-b236-d3b2664785c2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "c581d41c-c6b3-4ab3-8b9f-a07a237808e3",
        "cursor": {
          "ref": "f3611f32-d58a-439d-b678-145bc9c7f66e",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a1b5c272-7c98-4e69-a782-ca52f05b0337"
        },
        "item": {
          "id": "c581d41c-c6b3-4ab3-8b9f-a07a237808e3",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c14365e9-1e55-4294-9b54-fbfa5e0e1975",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "c581d41c-c6b3-4ab3-8b9f-a07a237808e3",
        "cursor": {
          "ref": "f3611f32-d58a-439d-b678-145bc9c7f66e",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a1b5c272-7c98-4e69-a782-ca52f05b0337"
        },
        "item": {
          "id": "c581d41c-c6b3-4ab3-8b9f-a07a237808e3",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c14365e9-1e55-4294-9b54-fbfa5e0e1975",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "0dac1ab7-0d55-4f8e-8680-298ec16bfd29",
        "cursor": {
          "ref": "c94b62a4-c3d8-4300-a866-7e1f823a05d6",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7d5d107f-dedf-440f-ad4d-c223e99b5bae"
        },
        "item": {
          "id": "0dac1ab7-0d55-4f8e-8680-298ec16bfd29",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "50d8ae0c-65f4-401e-9ccd-71e2280597df",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "0dac1ab7-0d55-4f8e-8680-298ec16bfd29",
        "cursor": {
          "ref": "c94b62a4-c3d8-4300-a866-7e1f823a05d6",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7d5d107f-dedf-440f-ad4d-c223e99b5bae"
        },
        "item": {
          "id": "0dac1ab7-0d55-4f8e-8680-298ec16bfd29",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "50d8ae0c-65f4-401e-9ccd-71e2280597df",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "b0d20c42-6e20-48be-8555-96d93e840d90",
        "cursor": {
          "ref": "85d3d58a-1fc3-4101-8976-3bd440817099",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "782554d5-c104-484d-a46a-64885c94c711"
        },
        "item": {
          "id": "b0d20c42-6e20-48be-8555-96d93e840d90",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5328ffc0-5565-4398-95c0-df7db3267a47",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "b0d20c42-6e20-48be-8555-96d93e840d90",
        "cursor": {
          "ref": "85d3d58a-1fc3-4101-8976-3bd440817099",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "782554d5-c104-484d-a46a-64885c94c711"
        },
        "item": {
          "id": "b0d20c42-6e20-48be-8555-96d93e840d90",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5328ffc0-5565-4398-95c0-df7db3267a47",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "a7bb43cf-80ee-487c-9d65-17f7bf606230",
        "cursor": {
          "ref": "2b5f61f7-e689-4b4f-9b60-3f8775947069",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0eef89ed-7943-42ac-a00d-359544fc6a33"
        },
        "item": {
          "id": "a7bb43cf-80ee-487c-9d65-17f7bf606230",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "0bcb5a7e-bb89-4709-94c8-7464711c2a64",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "a7bb43cf-80ee-487c-9d65-17f7bf606230",
        "cursor": {
          "ref": "2b5f61f7-e689-4b4f-9b60-3f8775947069",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0eef89ed-7943-42ac-a00d-359544fc6a33"
        },
        "item": {
          "id": "a7bb43cf-80ee-487c-9d65-17f7bf606230",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "0bcb5a7e-bb89-4709-94c8-7464711c2a64",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "bb8f1a5a-ea9f-45b9-9f1b-f57c6e7e8286",
        "cursor": {
          "ref": "bdfb487c-700b-49c1-a2ac-e768cdaa2663",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "97a6f78e-ba30-406c-b97a-21c8d4cb41d6"
        },
        "item": {
          "id": "bb8f1a5a-ea9f-45b9-9f1b-f57c6e7e8286",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "569d785a-c8d8-4048-a590-91a95c278e29",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "bb8f1a5a-ea9f-45b9-9f1b-f57c6e7e8286",
        "cursor": {
          "ref": "bdfb487c-700b-49c1-a2ac-e768cdaa2663",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "97a6f78e-ba30-406c-b97a-21c8d4cb41d6"
        },
        "item": {
          "id": "bb8f1a5a-ea9f-45b9-9f1b-f57c6e7e8286",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "569d785a-c8d8-4048-a590-91a95c278e29",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "40f66286-6542-425e-8c36-8717aade224e",
        "cursor": {
          "ref": "c6f5b8fc-4aa0-4460-8088-bc419e7e90a8",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "210bd281-adb3-4cff-b54a-9bdd6422d9da"
        },
        "item": {
          "id": "40f66286-6542-425e-8c36-8717aade224e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "5b278bd4-e94c-4704-88e6-e1b4dccbd947",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "40f66286-6542-425e-8c36-8717aade224e",
        "cursor": {
          "ref": "c6f5b8fc-4aa0-4460-8088-bc419e7e90a8",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "210bd281-adb3-4cff-b54a-9bdd6422d9da"
        },
        "item": {
          "id": "40f66286-6542-425e-8c36-8717aade224e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "5b278bd4-e94c-4704-88e6-e1b4dccbd947",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "3b05eecf-d78b-4c6b-95df-a5bbdeb7e3f9",
        "cursor": {
          "ref": "9e129981-f9cb-42b2-bb30-a9be242b9539",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1e82e3b6-9562-45a5-a288-399c8660cd90"
        },
        "item": {
          "id": "3b05eecf-d78b-4c6b-95df-a5bbdeb7e3f9",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ea361fdb-abb9-40c2-a667-f44f85654c37",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "3b05eecf-d78b-4c6b-95df-a5bbdeb7e3f9",
        "cursor": {
          "ref": "9e129981-f9cb-42b2-bb30-a9be242b9539",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1e82e3b6-9562-45a5-a288-399c8660cd90"
        },
        "item": {
          "id": "3b05eecf-d78b-4c6b-95df-a5bbdeb7e3f9",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ea361fdb-abb9-40c2-a667-f44f85654c37",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "a976a0b7-6ef4-4dba-bfe6-679e69aea3d9",
        "cursor": {
          "ref": "cd70abf5-1d67-4833-b114-9433a0b6775b",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "06ad0191-8c99-4e96-aab7-f5fcf27237e5"
        },
        "item": {
          "id": "a976a0b7-6ef4-4dba-bfe6-679e69aea3d9",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e5a73156-c615-4331-96fe-316fc9731a78",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "a976a0b7-6ef4-4dba-bfe6-679e69aea3d9",
        "cursor": {
          "ref": "cd70abf5-1d67-4833-b114-9433a0b6775b",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "06ad0191-8c99-4e96-aab7-f5fcf27237e5"
        },
        "item": {
          "id": "a976a0b7-6ef4-4dba-bfe6-679e69aea3d9",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e5a73156-c615-4331-96fe-316fc9731a78",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "96f42f11-71f7-44e1-b4ea-07eb4dbdfcbc",
        "cursor": {
          "ref": "6be245c7-192a-4024-ac58-ab21beb00ba5",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "2c9ede72-7266-47d5-8e72-09bb97988ecd"
        },
        "item": {
          "id": "96f42f11-71f7-44e1-b4ea-07eb4dbdfcbc",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8dd45f1f-06a7-4428-b996-643d616bfa99",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "96f42f11-71f7-44e1-b4ea-07eb4dbdfcbc",
        "cursor": {
          "ref": "6be245c7-192a-4024-ac58-ab21beb00ba5",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "2c9ede72-7266-47d5-8e72-09bb97988ecd"
        },
        "item": {
          "id": "96f42f11-71f7-44e1-b4ea-07eb4dbdfcbc",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8dd45f1f-06a7-4428-b996-643d616bfa99",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "8694db8a-9d97-4ce1-b788-641e1c2ea409",
        "cursor": {
          "ref": "2ad0e9e6-060d-400e-bf96-0a1025fda53b",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9c22c393-b62d-46f0-8f04-aaed80eb06ce"
        },
        "item": {
          "id": "8694db8a-9d97-4ce1-b788-641e1c2ea409",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "fa308bf8-2719-4fcd-b704-6944435310ae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "8694db8a-9d97-4ce1-b788-641e1c2ea409",
        "cursor": {
          "ref": "2ad0e9e6-060d-400e-bf96-0a1025fda53b",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9c22c393-b62d-46f0-8f04-aaed80eb06ce"
        },
        "item": {
          "id": "8694db8a-9d97-4ce1-b788-641e1c2ea409",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "fa308bf8-2719-4fcd-b704-6944435310ae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "3301ef78-0dcc-4087-b50e-a5aad7614eeb",
        "cursor": {
          "ref": "2b77f018-cff3-4df8-ac0e-9cb85c6f5790",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "81cea2e9-d312-478a-8929-808623489c02"
        },
        "item": {
          "id": "3301ef78-0dcc-4087-b50e-a5aad7614eeb",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "91977220-e5f2-46c6-8984-aabb68ebbe52",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "3301ef78-0dcc-4087-b50e-a5aad7614eeb",
        "cursor": {
          "ref": "2b77f018-cff3-4df8-ac0e-9cb85c6f5790",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "81cea2e9-d312-478a-8929-808623489c02"
        },
        "item": {
          "id": "3301ef78-0dcc-4087-b50e-a5aad7614eeb",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "91977220-e5f2-46c6-8984-aabb68ebbe52",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "6b1457a5-e22e-456c-b534-e7843b1943a7",
        "cursor": {
          "ref": "e28924e0-14ea-4626-b737-0f0c86a2209c",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d1908cf8-2d35-4950-9a53-85f3657edc03"
        },
        "item": {
          "id": "6b1457a5-e22e-456c-b534-e7843b1943a7",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5be01087-5b52-4450-8242-64975705290f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 48,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "6b1457a5-e22e-456c-b534-e7843b1943a7",
        "cursor": {
          "ref": "e28924e0-14ea-4626-b737-0f0c86a2209c",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d1908cf8-2d35-4950-9a53-85f3657edc03"
        },
        "item": {
          "id": "6b1457a5-e22e-456c-b534-e7843b1943a7",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5be01087-5b52-4450-8242-64975705290f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 48,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "d8cd8778-db6d-4a11-a8d2-20d829d44e98",
        "cursor": {
          "ref": "ca99d4a9-a60d-43af-911c-f7869cc7860a",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "be476b0a-81b9-45fd-bfc2-24cfc2724c54"
        },
        "item": {
          "id": "d8cd8778-db6d-4a11-a8d2-20d829d44e98",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ef77d67d-7617-41e4-b3c1-81e32b9d9049",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "d8cd8778-db6d-4a11-a8d2-20d829d44e98",
        "cursor": {
          "ref": "ca99d4a9-a60d-43af-911c-f7869cc7860a",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "be476b0a-81b9-45fd-bfc2-24cfc2724c54"
        },
        "item": {
          "id": "d8cd8778-db6d-4a11-a8d2-20d829d44e98",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ef77d67d-7617-41e4-b3c1-81e32b9d9049",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "63514afb-ad6b-46b3-b6ea-fccd690e2690",
        "cursor": {
          "ref": "638d21cb-cc7b-4870-ae69-870b261b85bf",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7e4f6758-818f-4712-95be-c3a53ae4c9f7"
        },
        "item": {
          "id": "63514afb-ad6b-46b3-b6ea-fccd690e2690",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e5d07802-86e2-4dcd-adb7-c5567d56d796",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "63514afb-ad6b-46b3-b6ea-fccd690e2690",
        "cursor": {
          "ref": "638d21cb-cc7b-4870-ae69-870b261b85bf",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7e4f6758-818f-4712-95be-c3a53ae4c9f7"
        },
        "item": {
          "id": "63514afb-ad6b-46b3-b6ea-fccd690e2690",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e5d07802-86e2-4dcd-adb7-c5567d56d796",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "2c6dc7e9-1854-47dd-a4ec-6b0023a6fb4f",
        "cursor": {
          "ref": "626ba7fa-4927-4eff-b530-2edde4842520",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "08a159ea-4936-492e-bdb2-59d10af8c70f"
        },
        "item": {
          "id": "2c6dc7e9-1854-47dd-a4ec-6b0023a6fb4f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e091ff96-5a15-4053-a057-3e45b43f4b66",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "2c6dc7e9-1854-47dd-a4ec-6b0023a6fb4f",
        "cursor": {
          "ref": "626ba7fa-4927-4eff-b530-2edde4842520",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "08a159ea-4936-492e-bdb2-59d10af8c70f"
        },
        "item": {
          "id": "2c6dc7e9-1854-47dd-a4ec-6b0023a6fb4f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e091ff96-5a15-4053-a057-3e45b43f4b66",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "4288fe4b-0254-4f61-a7f8-7525a7a57454",
        "cursor": {
          "ref": "105c2f8d-416d-4c0b-98fe-ebb8b0ae1ee8",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "189763f5-0bf3-4295-8939-09b629b5a741"
        },
        "item": {
          "id": "4288fe4b-0254-4f61-a7f8-7525a7a57454",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "882c3233-3174-4db4-b542-593f5d8990a1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "4288fe4b-0254-4f61-a7f8-7525a7a57454",
        "cursor": {
          "ref": "105c2f8d-416d-4c0b-98fe-ebb8b0ae1ee8",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "189763f5-0bf3-4295-8939-09b629b5a741"
        },
        "item": {
          "id": "4288fe4b-0254-4f61-a7f8-7525a7a57454",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "882c3233-3174-4db4-b542-593f5d8990a1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "4d45a19d-a1af-4787-8009-8c394db76d70",
        "cursor": {
          "ref": "667847fa-c7bd-4cc4-b221-de1bb0744a63",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b2709595-efaf-4d67-9eae-3ea0e07cad59"
        },
        "item": {
          "id": "4d45a19d-a1af-4787-8009-8c394db76d70",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "03f5883d-0783-4f51-b35f-5d50659f69a5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "4d45a19d-a1af-4787-8009-8c394db76d70",
        "cursor": {
          "ref": "667847fa-c7bd-4cc4-b221-de1bb0744a63",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b2709595-efaf-4d67-9eae-3ea0e07cad59"
        },
        "item": {
          "id": "4d45a19d-a1af-4787-8009-8c394db76d70",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "03f5883d-0783-4f51-b35f-5d50659f69a5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "04637658-8603-4b3a-bdb0-899e0f592803",
        "cursor": {
          "ref": "e9408e70-640a-41f8-9a25-f89a82ecd4ea",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7e60d995-601e-41c2-9c69-82832f73a9a8"
        },
        "item": {
          "id": "04637658-8603-4b3a-bdb0-899e0f592803",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b5887fa0-95c1-4836-91cb-0579ed810100",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "04637658-8603-4b3a-bdb0-899e0f592803",
        "cursor": {
          "ref": "e9408e70-640a-41f8-9a25-f89a82ecd4ea",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7e60d995-601e-41c2-9c69-82832f73a9a8"
        },
        "item": {
          "id": "04637658-8603-4b3a-bdb0-899e0f592803",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b5887fa0-95c1-4836-91cb-0579ed810100",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "c97b9fbb-d180-4cc7-906e-d4af127f1773",
        "cursor": {
          "ref": "02fb23df-b119-4eb3-8d1e-3a2071c82557",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "42d78676-350b-42ea-a55b-c317d3c76041"
        },
        "item": {
          "id": "c97b9fbb-d180-4cc7-906e-d4af127f1773",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a8f75d38-47da-4270-9463-c593ecf917d8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "c97b9fbb-d180-4cc7-906e-d4af127f1773",
        "cursor": {
          "ref": "02fb23df-b119-4eb3-8d1e-3a2071c82557",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "42d78676-350b-42ea-a55b-c317d3c76041"
        },
        "item": {
          "id": "c97b9fbb-d180-4cc7-906e-d4af127f1773",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a8f75d38-47da-4270-9463-c593ecf917d8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "16027f62-fa54-48a7-b0aa-5de3ccc5faba",
        "cursor": {
          "ref": "0a908d8a-5b02-47c2-98c4-78acb90a16ce",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "1384d420-a934-4159-963b-317c7c850e0c"
        },
        "item": {
          "id": "16027f62-fa54-48a7-b0aa-5de3ccc5faba",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "211feb87-04cf-4b4a-8cd5-b1b716db95b9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "16027f62-fa54-48a7-b0aa-5de3ccc5faba",
        "cursor": {
          "ref": "0a908d8a-5b02-47c2-98c4-78acb90a16ce",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "1384d420-a934-4159-963b-317c7c850e0c"
        },
        "item": {
          "id": "16027f62-fa54-48a7-b0aa-5de3ccc5faba",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "211feb87-04cf-4b4a-8cd5-b1b716db95b9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "4dfcdc61-2148-4f0e-a46f-b7095060701c",
        "cursor": {
          "ref": "154e910e-81c1-4195-a75a-0176d5d20264",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "12b4386a-9408-4f9f-8b93-174e4f939c10"
        },
        "item": {
          "id": "4dfcdc61-2148-4f0e-a46f-b7095060701c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "06a934bc-576d-4b5c-aacd-6415a3574073",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "4dfcdc61-2148-4f0e-a46f-b7095060701c",
        "cursor": {
          "ref": "154e910e-81c1-4195-a75a-0176d5d20264",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "12b4386a-9408-4f9f-8b93-174e4f939c10"
        },
        "item": {
          "id": "4dfcdc61-2148-4f0e-a46f-b7095060701c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "06a934bc-576d-4b5c-aacd-6415a3574073",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "83f94b96-067d-4124-88b3-9b74487aa653",
        "cursor": {
          "ref": "73818adf-472c-488e-aa92-207744e393c7",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "bf52692a-8e20-4fc2-ad6c-9e7be60cea33"
        },
        "item": {
          "id": "83f94b96-067d-4124-88b3-9b74487aa653",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "47ba88d3-8be4-444c-8c62-52386b9d7f91",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "83f94b96-067d-4124-88b3-9b74487aa653",
        "cursor": {
          "ref": "73818adf-472c-488e-aa92-207744e393c7",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "bf52692a-8e20-4fc2-ad6c-9e7be60cea33"
        },
        "item": {
          "id": "83f94b96-067d-4124-88b3-9b74487aa653",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "47ba88d3-8be4-444c-8c62-52386b9d7f91",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "79b6dfb4-d16f-4db5-aaff-67050de83c70",
        "cursor": {
          "ref": "76aa8624-1fbb-46e6-b0c1-c5220d58f94b",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "243d172d-63af-46e4-84a8-72945346ea50"
        },
        "item": {
          "id": "79b6dfb4-d16f-4db5-aaff-67050de83c70",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "9def325a-50c4-4743-a76a-0254c85c01df",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "79b6dfb4-d16f-4db5-aaff-67050de83c70",
        "cursor": {
          "ref": "76aa8624-1fbb-46e6-b0c1-c5220d58f94b",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "243d172d-63af-46e4-84a8-72945346ea50"
        },
        "item": {
          "id": "79b6dfb4-d16f-4db5-aaff-67050de83c70",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "9def325a-50c4-4743-a76a-0254c85c01df",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "9117082a-c0af-47c6-a8e0-5d45951c4c0c",
        "cursor": {
          "ref": "e19c3d19-9e59-4dea-8d12-a6bd9790b589",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4f597483-3925-4de7-9309-f53ff1250fff"
        },
        "item": {
          "id": "9117082a-c0af-47c6-a8e0-5d45951c4c0c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f0ad05d8-2b18-4a1c-a094-058fceffb670",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "9117082a-c0af-47c6-a8e0-5d45951c4c0c",
        "cursor": {
          "ref": "e19c3d19-9e59-4dea-8d12-a6bd9790b589",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4f597483-3925-4de7-9309-f53ff1250fff"
        },
        "item": {
          "id": "9117082a-c0af-47c6-a8e0-5d45951c4c0c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f0ad05d8-2b18-4a1c-a094-058fceffb670",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "8046583d-a77d-4673-93c7-326d5a7dea21",
        "cursor": {
          "ref": "f97b0a2b-187c-4afd-9d3c-319c5828a817",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "392a1020-8df7-4462-880e-d1f81e5077c9"
        },
        "item": {
          "id": "8046583d-a77d-4673-93c7-326d5a7dea21",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3357da71-7e1f-408d-86c8-2b6a0029c176",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "8046583d-a77d-4673-93c7-326d5a7dea21",
        "cursor": {
          "ref": "f97b0a2b-187c-4afd-9d3c-319c5828a817",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "392a1020-8df7-4462-880e-d1f81e5077c9"
        },
        "item": {
          "id": "8046583d-a77d-4673-93c7-326d5a7dea21",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3357da71-7e1f-408d-86c8-2b6a0029c176",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "486924a2-8ae2-4834-a01c-cc0eac50b233",
        "cursor": {
          "ref": "370634b3-2cc1-46cd-8741-bcee90ba2195",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "bc0d26fb-b653-4fde-96cc-a88eb8f790fc"
        },
        "item": {
          "id": "486924a2-8ae2-4834-a01c-cc0eac50b233",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8be1bc65-bc30-4988-bec6-d0a401f2ba74",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "486924a2-8ae2-4834-a01c-cc0eac50b233",
        "cursor": {
          "ref": "370634b3-2cc1-46cd-8741-bcee90ba2195",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "bc0d26fb-b653-4fde-96cc-a88eb8f790fc"
        },
        "item": {
          "id": "486924a2-8ae2-4834-a01c-cc0eac50b233",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8be1bc65-bc30-4988-bec6-d0a401f2ba74",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "21600241-e0c9-42a0-bd9d-0976df9c87db",
        "cursor": {
          "ref": "c970e2a1-3030-4208-a92f-c3a0da321d27",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c65d4710-64ee-4408-8ae3-7d48c9ac6a6a"
        },
        "item": {
          "id": "21600241-e0c9-42a0-bd9d-0976df9c87db",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "23180a16-b176-441d-a449-66cfa55bc2a9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "21600241-e0c9-42a0-bd9d-0976df9c87db",
        "cursor": {
          "ref": "c970e2a1-3030-4208-a92f-c3a0da321d27",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c65d4710-64ee-4408-8ae3-7d48c9ac6a6a"
        },
        "item": {
          "id": "21600241-e0c9-42a0-bd9d-0976df9c87db",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "23180a16-b176-441d-a449-66cfa55bc2a9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "733fb858-da93-4b07-82b2-a4c9f013fb16",
        "cursor": {
          "ref": "36b671c4-9fae-485e-8f39-837fb38c1b14",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "36192b08-9fb4-48dc-a05e-8730492d938c"
        },
        "item": {
          "id": "733fb858-da93-4b07-82b2-a4c9f013fb16",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "aef34d56-c4e4-43bb-8d3f-4f147f53aedb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "733fb858-da93-4b07-82b2-a4c9f013fb16",
        "cursor": {
          "ref": "36b671c4-9fae-485e-8f39-837fb38c1b14",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "36192b08-9fb4-48dc-a05e-8730492d938c"
        },
        "item": {
          "id": "733fb858-da93-4b07-82b2-a4c9f013fb16",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "aef34d56-c4e4-43bb-8d3f-4f147f53aedb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "77214fa4-3869-4b17-8873-1b47816d1cef",
        "cursor": {
          "ref": "6d6553e6-409b-42f3-882a-71f8337d9756",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "69796fb2-c1ad-4f89-8a07-2786aeaaa636"
        },
        "item": {
          "id": "77214fa4-3869-4b17-8873-1b47816d1cef",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "26fad311-d756-47b3-9e17-de9229b6585b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "77214fa4-3869-4b17-8873-1b47816d1cef",
        "cursor": {
          "ref": "6d6553e6-409b-42f3-882a-71f8337d9756",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "69796fb2-c1ad-4f89-8a07-2786aeaaa636"
        },
        "item": {
          "id": "77214fa4-3869-4b17-8873-1b47816d1cef",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "26fad311-d756-47b3-9e17-de9229b6585b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 41,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "c4255aa6-69a6-4c41-be26-d7285abd109f",
        "cursor": {
          "ref": "35e73a8e-882f-4751-97cb-aa7ab3570897",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "966c1b06-db90-4677-8bc4-591651918716"
        },
        "item": {
          "id": "c4255aa6-69a6-4c41-be26-d7285abd109f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "52dfba7b-27a2-464d-8987-c0d0b7d6b616",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "c4255aa6-69a6-4c41-be26-d7285abd109f",
        "cursor": {
          "ref": "35e73a8e-882f-4751-97cb-aa7ab3570897",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "966c1b06-db90-4677-8bc4-591651918716"
        },
        "item": {
          "id": "c4255aa6-69a6-4c41-be26-d7285abd109f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "52dfba7b-27a2-464d-8987-c0d0b7d6b616",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "083d5d16-e376-4466-a696-bcb326985adf",
        "cursor": {
          "ref": "0a762784-5778-4109-9d75-cae4c2f22a7f",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0d7cceba-37ae-4259-90cb-2cd8703289f5"
        },
        "item": {
          "id": "083d5d16-e376-4466-a696-bcb326985adf",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c09e2870-a8bb-43a1-81ea-183fa80fd19e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "083d5d16-e376-4466-a696-bcb326985adf",
        "cursor": {
          "ref": "0a762784-5778-4109-9d75-cae4c2f22a7f",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0d7cceba-37ae-4259-90cb-2cd8703289f5"
        },
        "item": {
          "id": "083d5d16-e376-4466-a696-bcb326985adf",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c09e2870-a8bb-43a1-81ea-183fa80fd19e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "70249a64-468f-4075-a2cd-063c61188142",
        "cursor": {
          "ref": "b3aa2cc2-85ca-4e93-85fc-2c1e73050a28",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b3a831cc-a7eb-4f1e-b5e5-e2888655ad7b"
        },
        "item": {
          "id": "70249a64-468f-4075-a2cd-063c61188142",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e0d0782e-7efa-47c3-834a-49c2ed3e6e8c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "70249a64-468f-4075-a2cd-063c61188142",
        "cursor": {
          "ref": "b3aa2cc2-85ca-4e93-85fc-2c1e73050a28",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b3a831cc-a7eb-4f1e-b5e5-e2888655ad7b"
        },
        "item": {
          "id": "70249a64-468f-4075-a2cd-063c61188142",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e0d0782e-7efa-47c3-834a-49c2ed3e6e8c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "4471d91d-99e1-4e22-8949-cb8f8e5ff28d",
        "cursor": {
          "ref": "d50a40b2-967a-41ee-b94b-d208ab426fc9",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2a3b6546-691f-4a8d-9289-a2143af3391a"
        },
        "item": {
          "id": "4471d91d-99e1-4e22-8949-cb8f8e5ff28d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "dc7ab6fb-a46f-4d28-a80f-b302e36c4d28",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "4471d91d-99e1-4e22-8949-cb8f8e5ff28d",
        "cursor": {
          "ref": "d50a40b2-967a-41ee-b94b-d208ab426fc9",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2a3b6546-691f-4a8d-9289-a2143af3391a"
        },
        "item": {
          "id": "4471d91d-99e1-4e22-8949-cb8f8e5ff28d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "dc7ab6fb-a46f-4d28-a80f-b302e36c4d28",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "34ee730e-4007-431b-a632-ca35ff238a9b",
        "cursor": {
          "ref": "c5cd0c84-8fea-49af-9e23-99c6aaa199a5",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1e25e999-18e9-4416-9084-8c9fca39d8be"
        },
        "item": {
          "id": "34ee730e-4007-431b-a632-ca35ff238a9b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5a3715da-ed21-41df-9320-bc28f4cbac92",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "34ee730e-4007-431b-a632-ca35ff238a9b",
        "cursor": {
          "ref": "c5cd0c84-8fea-49af-9e23-99c6aaa199a5",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1e25e999-18e9-4416-9084-8c9fca39d8be"
        },
        "item": {
          "id": "34ee730e-4007-431b-a632-ca35ff238a9b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5a3715da-ed21-41df-9320-bc28f4cbac92",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "697cd638-4a91-47fe-84db-018b4c7a8c10",
        "cursor": {
          "ref": "13abc48f-862c-41ca-8c89-6f979fe7026f",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "fae82f35-c19a-4336-ac82-a7b984eaf68e"
        },
        "item": {
          "id": "697cd638-4a91-47fe-84db-018b4c7a8c10",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6968164d-7cf1-46f6-be55-eac201beb021",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "697cd638-4a91-47fe-84db-018b4c7a8c10",
        "cursor": {
          "ref": "13abc48f-862c-41ca-8c89-6f979fe7026f",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "fae82f35-c19a-4336-ac82-a7b984eaf68e"
        },
        "item": {
          "id": "697cd638-4a91-47fe-84db-018b4c7a8c10",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6968164d-7cf1-46f6-be55-eac201beb021",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "0e76f4b4-f0a6-4e60-924f-a1cac11e50ec",
        "cursor": {
          "ref": "fb79ad19-9a43-4277-b271-10d0330b5567",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5ff6a347-d1cb-4b4b-86f9-649d6c70d3c9"
        },
        "item": {
          "id": "0e76f4b4-f0a6-4e60-924f-a1cac11e50ec",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "133b1335-fb4d-4080-b460-3d4677f19dc9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "0e76f4b4-f0a6-4e60-924f-a1cac11e50ec",
        "cursor": {
          "ref": "fb79ad19-9a43-4277-b271-10d0330b5567",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5ff6a347-d1cb-4b4b-86f9-649d6c70d3c9"
        },
        "item": {
          "id": "0e76f4b4-f0a6-4e60-924f-a1cac11e50ec",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "133b1335-fb4d-4080-b460-3d4677f19dc9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "cea5c7af-ac97-46f3-9fad-46bc671e0e8a",
        "cursor": {
          "ref": "d4caab8a-b279-4ae7-8192-57a35a82fe1c",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e0280185-ba0a-4933-b5e0-f5c63d206b57"
        },
        "item": {
          "id": "cea5c7af-ac97-46f3-9fad-46bc671e0e8a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "88b6af76-f76f-4002-a873-7686d047b611",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "cea5c7af-ac97-46f3-9fad-46bc671e0e8a",
        "cursor": {
          "ref": "d4caab8a-b279-4ae7-8192-57a35a82fe1c",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e0280185-ba0a-4933-b5e0-f5c63d206b57"
        },
        "item": {
          "id": "cea5c7af-ac97-46f3-9fad-46bc671e0e8a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "88b6af76-f76f-4002-a873-7686d047b611",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "f1681cdd-3dc5-4e38-bda4-f12b9255ee15",
        "cursor": {
          "ref": "c8775762-51b7-401a-a453-9ce1f4f6df0d",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7708756b-e7e1-4013-b5c7-d74aed6aaadb"
        },
        "item": {
          "id": "f1681cdd-3dc5-4e38-bda4-f12b9255ee15",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "89a37a00-01ba-42ad-b2c3-f03279b94c28",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "f1681cdd-3dc5-4e38-bda4-f12b9255ee15",
        "cursor": {
          "ref": "c8775762-51b7-401a-a453-9ce1f4f6df0d",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7708756b-e7e1-4013-b5c7-d74aed6aaadb"
        },
        "item": {
          "id": "f1681cdd-3dc5-4e38-bda4-f12b9255ee15",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "89a37a00-01ba-42ad-b2c3-f03279b94c28",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "549576ca-e580-4c1a-94c1-ef2ea7d5fc46",
        "cursor": {
          "ref": "ed1a6eb5-2a9a-4c98-a4b6-cfd9e664ec4c",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "0cb850a3-c945-4d1f-bbc8-61471f29b45c"
        },
        "item": {
          "id": "549576ca-e580-4c1a-94c1-ef2ea7d5fc46",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6ff7c286-b3da-42c3-8b11-269336ee99b6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "549576ca-e580-4c1a-94c1-ef2ea7d5fc46",
        "cursor": {
          "ref": "ed1a6eb5-2a9a-4c98-a4b6-cfd9e664ec4c",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "0cb850a3-c945-4d1f-bbc8-61471f29b45c"
        },
        "item": {
          "id": "549576ca-e580-4c1a-94c1-ef2ea7d5fc46",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6ff7c286-b3da-42c3-8b11-269336ee99b6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "eb76e10b-3250-4ce9-8147-887432624c24",
        "cursor": {
          "ref": "880d5463-9971-4407-a3c8-fa2d5d5e21d0",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8a645573-568e-4fd6-bc0c-d2e76f22621f"
        },
        "item": {
          "id": "eb76e10b-3250-4ce9-8147-887432624c24",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e10ae925-a379-4cd5-bb4d-70b46b3b240c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "eb76e10b-3250-4ce9-8147-887432624c24",
        "cursor": {
          "ref": "880d5463-9971-4407-a3c8-fa2d5d5e21d0",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8a645573-568e-4fd6-bc0c-d2e76f22621f"
        },
        "item": {
          "id": "eb76e10b-3250-4ce9-8147-887432624c24",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e10ae925-a379-4cd5-bb4d-70b46b3b240c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "f03d2b21-3a0e-4a40-bd2d-bc49ef48fc32",
        "cursor": {
          "ref": "20bde0ad-5e42-4e6e-b35a-435e1ee319dd",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3810501b-6868-45c5-852e-57094720f66c"
        },
        "item": {
          "id": "f03d2b21-3a0e-4a40-bd2d-bc49ef48fc32",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b0caaad2-6cce-4e40-8ec0-a801c4795735",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f03d2b21-3a0e-4a40-bd2d-bc49ef48fc32",
        "cursor": {
          "ref": "20bde0ad-5e42-4e6e-b35a-435e1ee319dd",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3810501b-6868-45c5-852e-57094720f66c"
        },
        "item": {
          "id": "f03d2b21-3a0e-4a40-bd2d-bc49ef48fc32",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b0caaad2-6cce-4e40-8ec0-a801c4795735",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "e448150c-1da8-4884-8d8d-249e43b4b94a",
        "cursor": {
          "ref": "cc1c19f0-b75b-4e37-8bdf-c7834e9839e9",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a3b2785a-7425-4c97-9bac-97cf63d75726"
        },
        "item": {
          "id": "e448150c-1da8-4884-8d8d-249e43b4b94a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2b13d681-b449-45a3-aa69-ff8fd81f5140",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "e448150c-1da8-4884-8d8d-249e43b4b94a",
        "cursor": {
          "ref": "cc1c19f0-b75b-4e37-8bdf-c7834e9839e9",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a3b2785a-7425-4c97-9bac-97cf63d75726"
        },
        "item": {
          "id": "e448150c-1da8-4884-8d8d-249e43b4b94a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2b13d681-b449-45a3-aa69-ff8fd81f5140",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "828375e0-f7f2-4efa-b00b-338fc5a292db",
        "cursor": {
          "ref": "7b0feec4-437c-403e-8773-cb9bd5dde92d",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ac744900-4b29-494e-bae4-d02f43a8c5ab"
        },
        "item": {
          "id": "828375e0-f7f2-4efa-b00b-338fc5a292db",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0b6fe69a-b2c6-4d02-a08c-0ae0c823556f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "828375e0-f7f2-4efa-b00b-338fc5a292db",
        "cursor": {
          "ref": "7b0feec4-437c-403e-8773-cb9bd5dde92d",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ac744900-4b29-494e-bae4-d02f43a8c5ab"
        },
        "item": {
          "id": "828375e0-f7f2-4efa-b00b-338fc5a292db",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0b6fe69a-b2c6-4d02-a08c-0ae0c823556f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "44782c1b-6e12-4519-944f-e38e67ea8a2e",
        "cursor": {
          "ref": "26a66651-15e8-4129-9db1-3b4207391b0c",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "053f23f7-94ea-435b-8d2e-3222726e86d8"
        },
        "item": {
          "id": "44782c1b-6e12-4519-944f-e38e67ea8a2e",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "614ca491-fdd6-4399-9da9-944c7039a395",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "44782c1b-6e12-4519-944f-e38e67ea8a2e",
        "cursor": {
          "ref": "26a66651-15e8-4129-9db1-3b4207391b0c",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "053f23f7-94ea-435b-8d2e-3222726e86d8"
        },
        "item": {
          "id": "44782c1b-6e12-4519-944f-e38e67ea8a2e",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "614ca491-fdd6-4399-9da9-944c7039a395",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "ec9e665d-a0e8-47a3-8ddc-2d9394acdb23",
        "cursor": {
          "ref": "0a383b12-f0b3-461f-85b1-5c7321838287",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8ec41a87-0f27-4b9c-bf1e-4223674453ce"
        },
        "item": {
          "id": "ec9e665d-a0e8-47a3-8ddc-2d9394acdb23",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "682d93f9-8325-4217-9a90-88e0121cc4bc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "ec9e665d-a0e8-47a3-8ddc-2d9394acdb23",
        "cursor": {
          "ref": "0a383b12-f0b3-461f-85b1-5c7321838287",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8ec41a87-0f27-4b9c-bf1e-4223674453ce"
        },
        "item": {
          "id": "ec9e665d-a0e8-47a3-8ddc-2d9394acdb23",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "682d93f9-8325-4217-9a90-88e0121cc4bc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 40,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "770d60b9-caf4-4291-97ec-838f01d22bcf",
        "cursor": {
          "ref": "55ab94e8-1b04-4c8d-a905-32c48eeeffc1",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f4133972-d2c6-44a9-bfe5-31aa06806d90"
        },
        "item": {
          "id": "770d60b9-caf4-4291-97ec-838f01d22bcf",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ee25642c-0b69-424e-a6e9-7b64d1f302b7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "770d60b9-caf4-4291-97ec-838f01d22bcf",
        "cursor": {
          "ref": "55ab94e8-1b04-4c8d-a905-32c48eeeffc1",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f4133972-d2c6-44a9-bfe5-31aa06806d90"
        },
        "item": {
          "id": "770d60b9-caf4-4291-97ec-838f01d22bcf",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ee25642c-0b69-424e-a6e9-7b64d1f302b7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "da605b2d-8bcf-480e-95c0-c8ad8e03e7dc",
        "cursor": {
          "ref": "90c3e584-c6fd-4fef-afd0-3a6ee7b46021",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "08f11484-3b01-49d2-8a40-60a5435458e4"
        },
        "item": {
          "id": "da605b2d-8bcf-480e-95c0-c8ad8e03e7dc",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "bc94ec78-1304-47d2-ad12-4bedd101bc3b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "da605b2d-8bcf-480e-95c0-c8ad8e03e7dc",
        "cursor": {
          "ref": "90c3e584-c6fd-4fef-afd0-3a6ee7b46021",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "08f11484-3b01-49d2-8a40-60a5435458e4"
        },
        "item": {
          "id": "da605b2d-8bcf-480e-95c0-c8ad8e03e7dc",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "bc94ec78-1304-47d2-ad12-4bedd101bc3b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 39,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "3eab2a7e-0f46-488f-ab53-bc9938983804",
        "cursor": {
          "ref": "e7fbe049-a238-4532-be82-9598a6c1c235",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "fb948ad1-b1ce-490b-a72b-0b0e88010b28"
        },
        "item": {
          "id": "3eab2a7e-0f46-488f-ab53-bc9938983804",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "3eab2a7e-0f46-488f-ab53-bc9938983804",
        "cursor": {
          "ref": "e7fbe049-a238-4532-be82-9598a6c1c235",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "fb948ad1-b1ce-490b-a72b-0b0e88010b28"
        },
        "item": {
          "id": "3eab2a7e-0f46-488f-ab53-bc9938983804",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "3eab2a7e-0f46-488f-ab53-bc9938983804",
        "cursor": {
          "ref": "e7fbe049-a238-4532-be82-9598a6c1c235",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "fb948ad1-b1ce-490b-a72b-0b0e88010b28"
        },
        "item": {
          "id": "3eab2a7e-0f46-488f-ab53-bc9938983804",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "737e5b7e-97cc-4687-bf67-000eaec37781",
        "cursor": {
          "ref": "68dad0d8-4145-4500-b3ab-4cbb006099ab",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ec576072-a82a-4b6c-a6da-66fac9db59c4"
        },
        "item": {
          "id": "737e5b7e-97cc-4687-bf67-000eaec37781",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "737e5b7e-97cc-4687-bf67-000eaec37781",
        "cursor": {
          "ref": "68dad0d8-4145-4500-b3ab-4cbb006099ab",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ec576072-a82a-4b6c-a6da-66fac9db59c4"
        },
        "item": {
          "id": "737e5b7e-97cc-4687-bf67-000eaec37781",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "737e5b7e-97cc-4687-bf67-000eaec37781",
        "cursor": {
          "ref": "68dad0d8-4145-4500-b3ab-4cbb006099ab",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ec576072-a82a-4b6c-a6da-66fac9db59c4"
        },
        "item": {
          "id": "737e5b7e-97cc-4687-bf67-000eaec37781",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "e495eafa-2cf7-4800-9419-54dfad9eddfa",
        "cursor": {
          "ref": "ccc2f0d7-bf36-4cc1-8789-0d4b5b2c7a4c",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e1b0088f-6be6-4f36-baac-6f6b8d647768"
        },
        "item": {
          "id": "e495eafa-2cf7-4800-9419-54dfad9eddfa",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "e495eafa-2cf7-4800-9419-54dfad9eddfa",
        "cursor": {
          "ref": "ccc2f0d7-bf36-4cc1-8789-0d4b5b2c7a4c",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e1b0088f-6be6-4f36-baac-6f6b8d647768"
        },
        "item": {
          "id": "e495eafa-2cf7-4800-9419-54dfad9eddfa",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "e495eafa-2cf7-4800-9419-54dfad9eddfa",
        "cursor": {
          "ref": "ccc2f0d7-bf36-4cc1-8789-0d4b5b2c7a4c",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e1b0088f-6be6-4f36-baac-6f6b8d647768"
        },
        "item": {
          "id": "e495eafa-2cf7-4800-9419-54dfad9eddfa",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "41425bbf-c9e3-4ece-9c19-b32a2c4828e4",
        "cursor": {
          "ref": "9d49731d-25ef-44d6-a8af-e2824c9147b6",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "913fb1dc-6684-4065-b112-e313c76f2a33"
        },
        "item": {
          "id": "41425bbf-c9e3-4ece-9c19-b32a2c4828e4",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "41425bbf-c9e3-4ece-9c19-b32a2c4828e4",
        "cursor": {
          "ref": "9d49731d-25ef-44d6-a8af-e2824c9147b6",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "913fb1dc-6684-4065-b112-e313c76f2a33"
        },
        "item": {
          "id": "41425bbf-c9e3-4ece-9c19-b32a2c4828e4",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "41425bbf-c9e3-4ece-9c19-b32a2c4828e4",
        "cursor": {
          "ref": "9d49731d-25ef-44d6-a8af-e2824c9147b6",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "913fb1dc-6684-4065-b112-e313c76f2a33"
        },
        "item": {
          "id": "41425bbf-c9e3-4ece-9c19-b32a2c4828e4",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "5d82a409-c27e-40f2-bfa5-271599a4e043",
        "cursor": {
          "ref": "edbf9c70-6ced-4e00-ac81-03f3816e05b9",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "85f07790-a051-4470-8283-079c08b71868"
        },
        "item": {
          "id": "5d82a409-c27e-40f2-bfa5-271599a4e043",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "5d82a409-c27e-40f2-bfa5-271599a4e043",
        "cursor": {
          "ref": "edbf9c70-6ced-4e00-ac81-03f3816e05b9",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "85f07790-a051-4470-8283-079c08b71868"
        },
        "item": {
          "id": "5d82a409-c27e-40f2-bfa5-271599a4e043",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "5d82a409-c27e-40f2-bfa5-271599a4e043",
        "cursor": {
          "ref": "edbf9c70-6ced-4e00-ac81-03f3816e05b9",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "85f07790-a051-4470-8283-079c08b71868"
        },
        "item": {
          "id": "5d82a409-c27e-40f2-bfa5-271599a4e043",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "7cea6bf2-91bc-4da1-8c3e-e03c93ddd370",
        "cursor": {
          "ref": "ed556bcd-3777-4584-a993-84c9cbdcdbeb",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "c854dfac-3b5a-49d0-86e6-a78dac620123"
        },
        "item": {
          "id": "7cea6bf2-91bc-4da1-8c3e-e03c93ddd370",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "7cea6bf2-91bc-4da1-8c3e-e03c93ddd370",
        "cursor": {
          "ref": "ed556bcd-3777-4584-a993-84c9cbdcdbeb",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "c854dfac-3b5a-49d0-86e6-a78dac620123"
        },
        "item": {
          "id": "7cea6bf2-91bc-4da1-8c3e-e03c93ddd370",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "7cea6bf2-91bc-4da1-8c3e-e03c93ddd370",
        "cursor": {
          "ref": "ed556bcd-3777-4584-a993-84c9cbdcdbeb",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "c854dfac-3b5a-49d0-86e6-a78dac620123"
        },
        "item": {
          "id": "7cea6bf2-91bc-4da1-8c3e-e03c93ddd370",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}