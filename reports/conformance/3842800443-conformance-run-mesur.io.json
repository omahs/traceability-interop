{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "61606376-777e-476b-8f6d-7a40acc2de5d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8979b54d-694b-440c-8ea0-1f23b5a2e9bf",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "059d833a-8dd4-492a-8c97-e75f32ae6014",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4f5b4020-1f24-4cdd-b9ad-c7cdb9e85ca7"
                }
              }
            ]
          },
          {
            "id": "2a3e1bba-1b9f-4c4b-aedf-6e10209507d9",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "11648afa-b083-4175-9638-a5d509a93ea4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "be701639-ddb6-4264-bd7e-96f82e15b944"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b1d37782-cbdf-40f8-8c64-c7d7bc550d26",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "fe3778e2-6a2e-4c24-8025-0189221df5d8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7a7beef4-1334-4e6e-aece-76ebe85a5748",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae3575fa-9cc0-46c9-af06-6f8b2ea1b609",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "02fe0c24-465b-4f60-9385-0ceae4e388bb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8423f846-3a51-4973-9f55-1d7af0564d40",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "966cd843-213f-4d74-8e63-9f9b41ecab55"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7ca889ea-cb99-4e47-8d51-79f5dc1dba07",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "37cded35-874b-4f05-8615-f1003ee8faaa"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5716498b-7636-467e-b0d8-bc25871c690c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "74e48d2d-d756-466b-96ad-e46ac70702b4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "13bbf788-5865-4ca9-9e6d-b3d3e1d58ba2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "48f813a2-768e-415a-bdee-6fe6a787b1ad"
            }
          }
        ]
      },
      {
        "id": "1b07f081-801c-4697-8985-1ae30f8c5f6a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ce86183d-e76a-41c5-919e-41b4b5758628",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5fe5d378-d173-4b25-b8bc-c3ab2a3c7adb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ddc5e3a4-4347-4718-b69d-bd838f3333fc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c1415b-bdad-4451-b98c-0cf6e9c3067b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78cb4d88-bcaa-461f-b584-393991d17a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef083002-1539-4de9-ae99-8ee57cdb506b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a72bb04e-cc8f-46d7-827a-1e47b849d550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "22994bf1-18cf-4a5a-88c8-85988576c31a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dca07aa6-4053-4709-906b-d85f75ddff32",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0611b9-7fd1-466b-aed8-d47db47088e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6f5500a-86ba-4caf-a1ff-34717b0081cb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2c6a3ea0-cfc9-498e-9c88-5cec72c907bb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "53926f99-d383-4618-8db5-e05afa72021e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45241f0b-3300-46ed-a7ab-bf715c809d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c1951f2-7d7c-4fae-8b71-c3278c10893a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a2c012-8185-4495-a9b4-f8dd4a56b442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dc16196-92c1-4048-a68e-2cfe9356ab28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b0747e4-94ef-4c8c-8084-ab8bf1c7ecaf",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd6fca3-6d08-4843-b111-f7e861b4923b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17942002-652c-46b8-80c4-9307480307a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecdcdd7d-4cb2-4509-b401-ab4620840def",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "a617c460-77e6-440c-8509-ae4e506e3fe7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "078d9a0b-448f-426b-ae8b-218aadbbe5ba",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6bb35ddb-c14a-4e8c-a17e-56fda93f9440",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fda34410-245f-4d19-b685-a1a80e10540f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "14e9f9d8-774c-45f6-9181-c09f80f085bb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "73371a81-5938-4569-ae4d-c03507600a19",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "2d391b24-bc63-4ae6-ac79-0ae10d925282"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "20c3dd97-ae71-4357-95e1-d01f2d94255a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "779de31b-cead-47fb-9e53-864d9dbb132b"
            }
          }
        ]
      },
      {
        "id": "0262d8d7-0bee-480c-8f99-6b2d783b3ea6",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7cfe419a-aabd-4237-b4c6-ad4b94328f55",
            "name": "Negative Testing",
            "item": [
              {
                "id": "37b33a1c-7986-4267-bc60-48d8c90c29b2",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "01c74328-7f6d-4959-bc33-3e09c034cea0",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92eac81f-4411-42f5-9a74-ded4cda8c8e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adf24413-1872-40f6-86d9-5d5f7cd588ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef52ede-0a0b-4f2b-8c1c-9024715f4e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0131c83d-b7d1-49d4-8d56-cfc5378d8ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941eab48-26a7-4c04-b6c3-d154c5e0e5a6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8e964bf-4526-4a3e-b28e-f6c9ce5ef033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9296e94b-73c7-458f-8a0e-6a82a408777f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546aa9f5-1eb8-4edb-9bf2-a8afc5b0b6a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9627dd2-beb2-4fd8-84d9-b142ff542260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0676bbda-faf0-4ad9-9194-a888c6eed719",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "967412ef-43e5-4bde-a9f3-1d3d91a5c50b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0bdf8bb-18c3-4c8f-9d49-105bf8b63941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63366446-08bd-4d7e-8f90-0810f1068bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dafc44fe-fefb-4b05-88af-325ac99a7310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad2d42e-a2fe-4261-8841-2d6d49eb0b8e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63886dc7-616d-4413-9a5e-b5ce704de917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84e62bf5-1d91-4a7a-b18c-fa9113e1a4e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd5e6b4-0b87-4411-8084-bdbad20f314b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee50c4ae-227e-46f1-be8a-078dd7ccd239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796dfc22-5f79-4b12-81bd-df6d8960c477",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f859a5c-be2c-420b-9d8a-bca5ab160811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96a1d5a9-79e2-4a4e-bdbf-ef2a08568de9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36fecc1b-aa9c-476f-b66e-f8ec9b38cfd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57f22907-c640-4e9b-88ca-42bf262a597c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c01a15-a70e-4e01-9b11-2ebde10f9f3f",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf469ad-9c6c-4cbd-af32-6199231a620e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56187276-6d33-4e62-bea4-849e979a64aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f0d2f6-4f74-40dd-bfac-a6b7ae6ac76f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f649562f-4858-418a-a0b7-50e6e64530af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "464be695-f286-42a1-b9cb-b9bea1196fff",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b105554f-cd08-4003-8dc8-1a31cd47006e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a6673b-e4fa-4ca5-912d-5262b584c70d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89fd90ef-90ad-4681-8975-0248f6e4a960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac028727-f34d-4cc6-94fb-e19cffbe4e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40674cb6-d3ff-4057-9c4a-bc278f37c6bd",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0548e391-d9d4-4fe3-a7e3-cb8a1225de09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63971b7e-a999-49e2-a9fb-86b83950f92e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de636f4-8128-4425-8086-cdfe9dfa66af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "facf1c78-56f9-4513-bebb-3f7017c3c287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef06d3f-4fd5-4ee4-9802-dd7c14006661",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "462aea17-3c67-4931-b4c9-b7b281307c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74b953e9-ed67-4043-a9e5-eccbd1cc28aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74482452-ec56-4e98-891c-6f27f344abdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f9b90e6-fe1d-445b-9938-ff68de60c904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41411888-4c21-4a7a-8247-c21080923b2b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d90b8a4b-d44e-44bb-a9a3-627ab6f3dde3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79549eae-4b68-4e10-aed1-63f4fe996cc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23964912-4039-4e10-ac83-2dc3f8faac6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea9bd6d6-550a-4897-8b4f-c463af670e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed0ee4a-c1c4-4bfd-bd3d-a6af538968d0",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e443da31-8958-4089-b1af-849e191f36b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "837a7d14-061f-4963-b075-d2cb7c58dc8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffaebdf4-63dd-410a-8113-4bb131af0cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3436d2ba-ec77-4182-a55a-83c227399e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d1be80-caa6-4e8e-813a-840e6c56b1dc",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a7f1e0-2894-4c0b-8a3f-c69045ede355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b8d1d2e-ae4f-461e-8e17-4641b2af0127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6fb5c7-9854-483b-a98f-16c0c8734b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b65f78d-4400-42bb-8d49-45a414f26413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1807b69-b4bd-4a36-9d54-fc155cabee8d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb99f777-16f2-4e8f-add8-205ff444fc2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8640f132-1187-45b2-bdff-a44f1d478420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9027a9a1-104c-437a-832b-c2909d37c9e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "226ef54f-fdaa-49f4-be8e-b7b5712dbf63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c17c2f-babf-4da5-9761-2f701f6779de",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df75a0bc-e541-49a5-ba25-9e591f79e4ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca0c34c2-b5e2-4097-8449-f65b48231fe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d571d5ab-d7dc-43fb-bd2a-53973cc94f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "f09ffc61-6a99-4c5e-b2b5-772a4d329bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4474655-023f-4f82-a2b8-2698cd086657",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f0bab8-f0f3-44c6-8f77-f89dff82226f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7233f9f1-7ce5-4d43-b34e-e1db1e5a247e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb5f67d-6ffc-4e19-8d3a-0b7bb0a23fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a91e8a9e-0a1e-475a-899f-e13f2713b7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5595524c-e330-422a-9fff-b6894f22e65d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ac3065-e1d2-4ae3-9aea-e938539374db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef8ce0f6-8f69-4d8e-82a8-f7da96e8ecce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab6b65c2-1b57-4074-a1be-1aed5369abd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c41b083-f14b-446f-8f1e-39b08b1b402c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a331fff8-0495-44b3-b89e-86d97c718b30",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f83ebf-247d-49dc-a2dd-712c6f6d9087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef4b4896-a66d-4e20-a8cf-67b2399748d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb600ede-95cd-4ec2-9540-f3a9803a262d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58aeab02-694b-4dd0-a764-290d4bac5a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555bb85a-da3b-4516-b236-47219b597942",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be7f2ad-4c0d-4b3a-9209-c920b2fb41a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d75d494e-9cff-451d-8e97-12d018abc582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12b13d5-c6aa-4037-8b0c-4ae17334379f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5ce855b-6433-4503-be05-b5c138794155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef312ab-df18-4124-bf60-8f716970bca5",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd66536-b01b-4b90-8e65-9b6da22009f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dbe3da0-dde5-4a0d-997c-17e8e1ff5a7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c14dc23-ca18-4b3a-b691-9a51d388e585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "233b4148-da26-4fbc-a92f-7d30f368c594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea65a7b-b9aa-400c-beed-f2c5926ec08e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d54c9c-0b21-4d1d-a7fc-bfe79bfbbb59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64ae98c2-1f0b-40d1-8d8c-3bc61ee68928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d9a8dd2-fc85-4fd3-b8cd-26a55e1066e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "917583d5-d70a-4e04-becb-e0da120075ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "924da3da-6866-416a-89e0-fe1a9521b78a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b4a1bc-5d0a-4987-9faf-69faaf8345ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed1e51e3-e74e-4919-889d-d6f63120ea52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48602146-c067-473e-ac74-d95beafaa8bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "72b76cce-34f8-485c-987b-092f4e434825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07db715f-9699-4e87-9e1b-3390efd44592",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19737ddb-e935-40e5-ac88-f64dbd90068d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d13d8f81-0483-477f-b8d2-8a0d2c242405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62df061d-47db-4700-8dd1-156de1b14651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e0a40c3-aed3-4d35-91eb-33bc34a4cd32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a87acd2-686e-4b58-9d84-3fc49fada30b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6906ab5-16d1-4aa0-9056-f1e6bdfadac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "133c2df7-df08-48a7-8ebf-6e4a67f1b859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b48397c-aa9c-42c8-b7f1-1abe1f35de06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9154cae2-60ce-4fc8-a0d2-da554584a781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6d6ea67-98fc-47c1-9b3a-cd8383ca515f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34221b1-7368-489d-98ee-6eb40b939940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dc314d6-b41f-447e-9a6a-800933900b56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fde5aac-f635-4a2d-b532-2fbe70a44d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f180e5c7-8a34-4b68-8a64-70ab271775e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7318b8d2-65dc-4e65-b408-268184ea07b9",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bdd4899-2625-4b61-a768-0645461178b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c90aadd-e09c-4341-928a-3cae33a15b75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bfb1e48-0517-402e-8bab-94afdc815435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c7b584f7-d9c8-493f-a1f6-aaffb1c37fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16286195-7564-4f28-b013-b588f6626dcf",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f79e0e1-6962-49dd-8052-fca1c1ccfc0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db140622-dcef-42d6-8dbc-57104c2842ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324df423-28e7-4bfb-8546-cc6ce75304d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ffc3b89-977f-4903-9adf-2a9ed87efedd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef2382b8-1d46-4362-bb80-274cc76c365e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b4c6ef-9c93-4a04-a525-a0172e772c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a113c20-bc56-4b01-aff7-aebdae17c472"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14491a64-0c78-49fc-ab5d-1e737481b3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "598ff7db-63ee-4387-8719-fabe74f3fc9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df4e14e-5db4-4a72-83e6-9fcf497bfcee",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7166b176-b0a2-4301-896b-79b7cc2ebbe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae3998f8-19ac-42b6-bcce-d221d1cc3b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bade8d4-9933-482a-880e-a6045e7cdb75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "03854f5f-c953-4724-9b54-158aba623aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e96a79-df79-463c-8d13-4895fe9457ee",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d0a672-f0a3-4a48-b55c-f6496e5d3677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "192bf535-c4d7-4e86-9940-2bce6f74cc52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "827ce17d-2032-4017-813a-83b7c19eb0f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6e47dcb-a4bb-4696-adc1-3be45aa04869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd13a405-3a0d-448f-ba2b-9152ce385f2a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c5c7aa-3d09-41bf-8fab-dfa4ab4a6973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7138948a-a8a9-4596-8cc2-544c6f4c2fa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e09ead-6bff-4eb2-8045-35512891d19a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c93803d-b4ca-4b12-998c-c1de5849779a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5d04cd-e15d-4259-a093-c5565decff08",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56057735-8e79-4e99-b95b-5dda892001a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c74cfded-aab2-4e71-8102-be568d672c98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed52546-6e27-425a-b75e-33e6d8eeb90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6304fd36-695b-4e99-8a58-9472ced88300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6ec4d8-7e0e-4e71-81ca-6255bb4a71c2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "117128d0-84fc-4bc2-ac42-39f3f5885ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1772bc0a-e407-4231-9615-144b6f25bddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa134dc-9941-4603-92c1-8c672bf0798c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "307bdcc8-b162-473c-978a-25af995cc9b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488db828-6210-4974-9862-eeaf5eaae97f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa94fa1-4154-407c-9e0a-c2ced9f0a798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be1be97a-5825-445d-867a-2d07fca1b1ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "277177e8-32f9-4d7b-9617-ce802c008c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b1dfe12-71b0-47c3-9c3e-c15d2ec76233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5538d640-c10f-456a-98d9-704d10697a41",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a21e20-5b12-40d4-aa0d-e5560b1b34a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49864863-9f50-465a-bde6-e85b67788206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c7ed724-e741-4752-aeb1-e65ad1a9994c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3d0e193-b5ed-4059-bc1d-646d43f51edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a565c69a-e346-44d4-b7a6-32426ca617d5",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "838e80a5-5e1b-4211-a3f7-809333145ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2af5d4f2-3a3d-495a-bea5-6f0f7835a6b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4790c52-9dc4-4873-89fb-2cceb2b5e18c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc997008-99d8-4a81-af0b-869ec078f28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a55e0e-115e-49f6-8be9-d56ce9f5f271",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac81d369-567b-4c6c-8cc0-0eeda83b536f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94c4b315-e520-498a-ba0b-5e7eeceea319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c19faa-dd89-4eed-8415-f8a05146ed1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "57fa5705-67e1-4dd4-bcc3-42f9b1e27851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a223cea6-9791-4bee-8c45-a5b86ce1d3f2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acfa8d11-5174-4e2c-90ac-9c8ddc2d61fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09bb48d2-45c7-4dab-9681-9561824f1fe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad01832-5ce2-4aa7-afa5-0a9be54435ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "92ad0428-7c7d-49cd-887c-5adf4f3e835d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6614c1d0-9f63-4eaa-8fa4-09661772db21",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f4478c-7f91-453a-8b8a-917f03851add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40a93796-c5cf-4100-a8a9-079ad87d6054"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a761abe-6cb6-48a8-a36e-58a7e62a7eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4100ce32-6e1c-4965-aaff-3aa47a36723b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f39db0-8ee7-4c12-a03f-a92e3609e804",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c53fa242-fb01-437f-b0b9-7d6a4e27d28d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "406ab427-bd2c-4ac2-b4d5-d72f036cff20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b49d286c-035f-4a39-a845-e7f9781f2aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1aef5758-b4aa-4702-b9fd-a2cfb26d818b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e49c395-be55-4f0b-b0b4-38d2a5f1eca2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41293e8-6b0d-41d6-baab-e86e56901ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae74b504-434b-4989-b409-08fd82b86f2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca7a11c-15e2-4bd6-adbc-a0d61eaee03a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1d7a2f0-1ed8-4d02-aef1-e3148c353796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b99e1d-8273-46f6-9449-27865b746d19",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed929693-2e9f-478d-80d3-7ae291f703ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c16f9d-6001-467d-a218-872954e65a37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e42514e3-3232-4263-9458-d059b233d8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b9d9713-32aa-46dd-8f8b-77e69f43e823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1be58460-a05d-4f5f-8257-8e880429a7a6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90cbe17d-32f0-4bc8-ab49-d98c51079b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3721a91f-30e1-4d91-b1cd-2ade8929c0b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ecd2113-6fbb-49ec-b7ba-8898c4c2df97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "03cdf1dc-4c8d-4667-86ae-fd135c52ba28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6de0eb9-ebcf-4e30-96b0-4b50f1e2117c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "165a7158-5567-49be-b09b-e78836d55c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dde5cd5-f1f1-4464-84ee-7f6d3c9baef4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9816995-5574-4f96-8aeb-8b0aef682f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "645bf0af-ea4a-41ba-8d5b-b36ddba7a5bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1194ceef-5ccd-4061-b8be-eef200ad32be",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ec66aa-c200-4258-b74d-291f2e0f78bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3139a5fc-3939-4771-9aa1-c687bd0d927c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "582f99e9-f9cb-4cd7-a5f4-804b51effc5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6da2ee47-2162-4f79-9426-f31588b7c1a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae84478-35ef-46c7-ad0a-7eeaf76a46be",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "439d143b-40cc-4123-b209-5428f8dd5bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3da7f069-95c4-43d9-b1db-bd3031debe39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63961ac1-0c10-4890-af94-85ab9b712604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "59414553-7131-4395-883a-11df905cbcc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba6e29e-e087-4e59-844c-b89e852ffffe",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c1d8be-e2fe-4c0e-964f-ced7da3a0832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57ab71d0-3c85-4482-81a5-eb9443273838"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d304a557-1ca1-49b6-aeea-323dbb3ebc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b1b3e5e-2f29-4e66-9707-31d32b9395b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b623df85-889d-4dc3-bb44-09673588026e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a1f5fd-f629-4e38-81ae-6fc96b0c096b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "044508a8-7040-4efb-839f-25928723c5ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78801914-cf08-4568-8577-c426157bd846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef34a391-c3b2-4c23-80d9-19949342ae99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d2a4693-c535-4f5b-ad6e-48e0f1d26e87",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa7b6ce-e2b5-41b1-8d66-be8db1ab3b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4a65d80-9294-40d7-8950-996a71843f67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c19f82-5166-4026-a157-4335200d3662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "db6a5bea-0c88-4bd8-90bd-01a2d241986c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6360426-6273-47e6-8341-072a73c6dd88",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d6c700-e98d-445c-abb1-8e0b363e5e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b29f61-8bf7-4043-94e0-b5c82e40131a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29d6a73-f626-4044-8226-73202295684d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddeb5b39-b992-410b-8b4e-a216dc09b259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5073ab9b-39be-4fe1-ab57-78eb8f36ef97",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de6435c-086c-4de0-822b-0055dda04355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "803dc2fe-3be4-4f73-9809-f29130e1a6a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f8d4a7-fe89-4ac0-ae2e-498af6fc857b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3ba703e-7ef9-48e7-aa6d-a59437c6e90f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69340204-db99-4df6-a370-06559cb7441a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b38832c-d658-408b-b5a8-1fedea5a54d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6541aa31-9552-4df1-8443-3f7e31cbf97a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd17f8ba-5d48-4ed8-99e7-4525c4dd6e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "75f8c30b-619d-4dd0-970d-783dfeb255a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffe520aa-ee82-4fe3-8137-7fcdfaf983f5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17aefa30-448a-4eb8-824c-d8ef7e44360d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c023a5bc-794d-4345-9d31-05c6bf600373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29c4528-fb35-4ef5-8179-5fee0b4d6f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9027b2ea-2f15-4103-82f8-60c9aca14742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c109c388-98d3-4e81-b5c4-c760f0d1b02c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0002ad6b-47fa-4c59-b30f-196c2e4cb279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09301b70-ae57-4aab-958c-8263d9a2e08a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa968d7-5c22-4fd7-a801-f7e76a88aab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "0383ceec-021b-4126-b39d-8cfda512dd40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb49d0b2-573d-4261-85a2-ec9bd4791e93",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db14d41-6269-4786-b62b-bd165295b7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ba5e01e-11a1-4fbc-b127-c8478596f7e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d67c7d-1bf4-4de4-905a-06c333d8ca65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dae780d8-ffb7-4509-bafd-edc613046d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2edb488-fa89-4f59-9ab2-3b3eb5292fde",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd59c41b-2abd-4425-8709-6fda1358698d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "427f561d-c28c-45e4-9c78-0f92425ffb3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40701beb-a794-470e-92e6-e80f4d06e34e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bf0fecd-f537-469b-8563-dbc12f2db4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e48e4f7-ec2a-4ab8-bddf-f7022dcaa4dc",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8338aaf-a767-46a4-b970-f0c84aab4f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "013b3188-c6fb-48e5-a9b7-4e969ef687aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0307e4-0985-4f5a-b659-77bf14081dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "088dfcd0-7a4f-48e6-bace-b582417cb96e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08008230-be6b-4b1d-9e73-416cc741f032",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a88dc7f-0fba-489d-a540-f478efde2bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2036409-ee88-4f42-8d30-c9d7f428efa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97984fd-3e74-4c16-99de-f7746ce49c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fdea50d-dc14-406a-865d-7b64ca779145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de683053-b340-4205-a835-a77a9929c5d2",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b9387a-1b04-4350-b09b-12ad8a938742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f1e27eb-c163-4f4e-a788-3d1d1065c1f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e542abd-ee9c-4e6a-a45b-9d5aea090e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "634bd17d-dbc0-4565-9e8e-25b6d7d33919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c3f859-37fc-4ff2-8aa5-e95342d1549f",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "298ad503-28db-41ca-a394-c4b0121ad635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40462efd-1d16-4c43-a705-ab7d83045e62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc03e8a-17a3-4982-b985-7f5a3c8fd848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "30aa0e6b-3d4f-4293-9bab-f8046bead30b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1588e69d-2aeb-405c-8c06-8e520eca3e01",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "075f96d4-53bb-4cfc-9f08-340331ec552d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05bbd089-725a-4850-b99c-8c217ef5476b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "383b11c4-21d4-49d8-a207-fb80a4422ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8aeda7d6-65dd-4dba-a204-6a3c747c64be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50ec16a-0869-4179-bd94-9d124ca9a9b9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "113270cf-7f4a-4614-9f70-5fdd49c7f10e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d00bb9f3-1395-414e-913e-c5f37728552f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e10a3fa-c914-4145-80ec-a4f01459d0f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "af3bd503-39ed-4232-bcff-58970ae2a330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b39805ff-6fca-4142-8d3b-bb631e37d305",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00a4fce-8387-43e8-a18e-cf00a6a91710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3258954-3935-4991-8077-0c591ee04dec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2722f2c4-daae-4e1b-81b5-cd67ad66831c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "de5f61dd-fa47-493c-8c7c-91a1c9edecb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4109e596-131f-40e1-b4ff-9e8e303fa4b3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "080a6526-a5e9-4434-8acc-b07b495039e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffe07de7-630d-4d08-bedd-73984968248a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2170f86f-c3aa-40ae-baec-33df787f3896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "07faa380-3dff-4aa8-b422-541a66a06bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0aed1a9-a0a9-4298-94f4-5efb0ecf0954",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a42fa4f5-3024-4f92-acbd-942193abfbc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a0f09a-b80c-4dee-a2f2-0c74cfb50cb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab8e3902-adfe-4fcb-b7aa-bec7c40843ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "796087f5-2a92-412e-825f-714bcc7da6a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13485b4e-85f3-4ca9-bfe0-6f0a97e12e72",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5785c47f-859f-47c7-ad91-38736007d6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1953bf16-350e-4d14-8cfe-b571cf01b32f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f1109b-6470-4191-b044-d9c3bb6f8454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a3b9ba1-8892-48e8-8587-2e9d6855e38b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9aabb27-7eb4-4121-b72b-befb3a026c73",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed4ccbe2-1244-44d5-aa4f-8a4e892bc2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b194a1a3-d80b-4238-b17b-f9b97a1ae855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7e9648-70ce-43eb-8296-952f993c51f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "40a15900-50e1-435b-8f44-b91fae5b4229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b05112-6641-492b-b0d3-42fff7b80a2b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "000c4d98-3396-4d12-add3-a53caff5e992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18c1c124-622e-417a-9c9e-fa77b7c47bac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec11834d-4668-4de5-b072-f53b63e85fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "65d72a04-82f2-4580-89e4-5a026f2afd3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de15ac2-6fc8-4665-9f28-3d5929a042f6",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e4ebf33-ccc4-4a27-be91-9cfa860f9343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36b84d74-1305-442a-b235-c00ffc8ec3da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1e0a61-7b20-431f-b0f5-1cb0f651d6b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3cc405d-82e6-49d1-b65b-c2a3360ffbdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e635411f-2d3b-4c88-8d58-541ea44d82f0",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfca055f-3036-41a0-80f3-edf36f763bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3da34091-8537-48d5-a5bf-8bbcbdced018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b61cded-614a-4d44-b92b-e53ddcb36411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a560e274-458c-4dc9-8635-9fa14a9710a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25cc1e44-5aab-433c-9722-066398adf377",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d8dec3-2f05-471a-bab8-6374dfb7469f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f29391d-094e-4af0-b369-e0938021d541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be10fbcc-4f0c-4cb0-93a1-fdb4f411b8e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e9eaf87-6637-48e2-8a0f-50c4d868f1b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaea0e7a-9e9e-4f38-a726-78ea02f550d6",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da7a365-6a29-402b-a15e-4a2872363f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18ed20c5-20c7-4b89-b52d-77fa4cc1e4fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e5f82b-45db-462b-a59b-db7a47d3650b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b2fabb2-3c2a-44e3-aa1e-0880767f38a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a17c041-70db-4471-93b6-06376bed513b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32aa48fa-47ac-4e05-9281-e983ef28af48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac956c2b-b579-46a2-ac4a-8cac8720ad1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e726110-c103-450c-8c6f-b1bc64e1632d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3a6df90-3bed-4356-a2b3-7ec9a696beb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75fa7704-de4c-4d01-8054-c5ffd3d5aa72",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f96afbfa-6d18-49c9-af00-1122b8880c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "345715a6-8e84-43b1-987c-11eb81835db1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1149628-3acc-4ba5-98de-67e8cb97a6ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "99cf4fc2-5196-4b83-b76d-17d720a71a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7005bd71-40e1-4796-ad9c-9f75c7d81b8c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c74d7389-6e93-4791-8986-76b2cfbfecc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7b75681-34fb-4efa-82b6-7016bc5d6273"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44a242a-2985-431d-9ecf-ceb2ec7239f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "810cac73-c289-4e4d-b766-82adb88576ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437e2535-59cf-4f00-80c2-515453f7bf3b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "995e75e9-0fde-46d8-994a-650e7b2282de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e37f43d-5b75-489d-b83d-5ab2e2415793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ad1333-8a09-4624-a0a6-95323d347ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9bee705-f0c7-46f2-853f-7660c8fdfb8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad53f344-ec3e-4c9f-97c5-52bd4a958fd9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e9f862-fbd3-4263-81da-3a59d4645935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93984bb0-d131-4635-ad89-f88b0788766e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c25ec8ff-ead4-4c8d-b199-8dbc5eb4911f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6f7782e9-937a-49f8-aead-a295516d05d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15fbb7f3-983c-4f1a-9d8a-613b9821e04c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab2b5d7-2010-4477-bb30-9d8e36a83a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04381444-a3e3-4069-a7f0-d7a3aa393073"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3f1f27-6ca0-44c7-9562-ffbcfd82cb7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b6070c9-2ba0-4aed-87e4-77ceb85fbbb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc5e0d6a-4086-457b-93ee-ea8e50556186",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0140b4c8-68d8-4663-9a56-e17dba5d6b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3e100c5-60ce-4827-bbb8-cc1edb7348ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e2bdb9-dbc3-4a31-8d55-554fbbaa6cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d829282-7d45-4ee9-8891-f01a127afcba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f7e92ee-6cc0-46de-8984-7b584f1ef283",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c539ac2-0392-4a42-89f7-fc11f4df7090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5045750e-8cb8-4e25-a80b-c28b3d423980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef975d21-89f1-46ac-8f19-535cada82d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e4fd76f-1f4a-472c-8e4f-43b9238bf838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f1ea7e-8dce-4def-8945-3825cc84b223",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6009bb2b-ff75-4cb2-b306-36bd7159ae52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e29d851-ea95-4769-822a-6ca837a931e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758e5d9e-bd6c-4ff5-bbfe-3b2b9c86a691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "431cfc2b-5784-4d95-a984-b599a8a94524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d417fe-b6e7-4057-bfb7-734826a64d8f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a39258a3-9aae-4460-887f-bbc453534e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0454db56-9d86-436b-add2-f1233f88c2af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc11d511-deab-408d-a856-d64a3a985047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d050cd0f-0563-4061-b642-b38d2633b682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b719ec0f-1047-4db1-b5c9-82a3d629239a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "579df43f-836a-49bb-8b22-42f627002048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bac7f56-8432-4322-806d-f02f4c0e9769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d99f7227-93ae-493c-bd55-91be6ac7a9df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7d55fdcd-0805-497b-935d-1de9c48b39e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39482cef-cb81-436f-bbd1-300370107308",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16aaf7d5-20cf-454c-a56c-ca32f8cc5a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "860e47e9-1d4f-4da3-83de-eb6330ff33ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d503b2e-0ad1-41ed-9382-e20eba06dee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "849c8df6-01b5-42a8-891c-faa22a348d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08fd9daa-fb90-4867-8569-bd2c52608ffd",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09126e34-eb8d-4c39-8608-711d64ba6c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12ea64ab-b224-4a47-956c-cc8e9f2b3cdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88ac53b-c86f-41b4-a391-7ca072d7e9c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae04336a-f5f3-4a5b-aa28-11b5c393ddc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1858fc8-1766-4910-a652-0698817cb2e1",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "869e786f-0e11-438a-83bb-03b7e8a7442a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be1554b5-2103-4fe3-b341-7fe370f7937e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b49f851-0a94-4072-906b-b685dd6bdb0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "042b1331-9061-44dc-9f17-0774bf5cd870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3351abd9-470a-4ceb-aa52-82a30aa089dc",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36fa0a5e-0b0b-4e34-8a85-176adecd86f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30f63ee1-6d38-401c-ad2e-8e69150699fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61b2d51-dc18-4d19-a398-24a03c93fced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "335edac0-37e0-49fb-82a6-756923e22cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14bb87d-f31c-48b1-9023-5a1a5dae1ac7",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a739f278-e6aa-41d2-b946-12c203b4fbb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "429f907a-28d6-4c33-805a-2ea2722578fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9039a34a-4567-4a00-b3a4-ad60a211696e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ccbd6be6-ba5f-4272-86d2-1c3a32a143dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e34f38f-6e26-4e60-bceb-34e8c63d91c6",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce0a812b-deb5-4ae1-907b-7d7a5e3225b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63ce0184-4ae9-4689-a5c8-4e19ade527af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba721825-0724-40ba-a3a7-62047e316857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "676febd1-0b27-4a91-affc-8860d68ba8e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dedd3dc-2466-4a4e-81ce-484de8721371",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f9ca54-a5ac-4550-8920-e0745ffdc4b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "450841e5-983b-49bd-800e-b643648a5515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "333a40a6-3573-42b5-a596-83f704eea7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c6441cd-c02f-4e9e-bf5d-de13ec6e41b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4134574e-c43e-49a2-a461-4f826bf59e2a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4066ba95-9b2c-4905-b898-c934cc0b80c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a24ecd6-fa96-42d6-8922-d1857bc5fafb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de427f40-1337-4fc6-8022-51dc96ffc872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a89419a-1ffb-4d61-9526-975530632b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca71ddc-0fe0-4d53-9dcf-4bebfc65eca6",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1414ff6b-d676-4ea0-b3ec-b4a9fcb23e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06fcddcd-b8ff-4912-ba7b-eaae682fb714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "530d3794-41f7-4a69-8b62-f06b825ae9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "caaa5c5a-3d87-47ed-9aa4-dec10323c8c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899a6ac4-eddd-4f62-8a6a-1431bf98425a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ba028c-44cd-4d50-abb7-139553b7eb60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "177e6462-69b3-4b54-a714-2fafee213c3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef718636-71f8-48fa-a51b-6cd8af2c654f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "810dcb93-f45e-47b5-bf6a-b8da25ca7bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "272d2938-7221-405c-9594-54b7993cdd12",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a64345-17ba-4dbe-b47e-aa0c281c9900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "584026ce-a3a0-4cc0-81d0-8571e2f8afab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfccfdc4-b975-40f6-a09b-3acbe44a21b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1940bd5-087f-4507-bd24-0564729c569e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec0f44c-ed9c-42da-b9c2-695abd0bf213",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3fd2ef3-3b93-4aec-a114-84bd5929554a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d2b21878-7308-4b0f-a0f6-4020803c7647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f288b0c-21ea-448e-a99c-b7880840338c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9bbad637-a227-4bf1-a2cd-a2d4a5bc8c53"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "32a73bd8-2cb6-4753-8227-ffc4d283de3f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a77bc09f-0a6c-4b33-996c-e4f98859d1df",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d691f800-7ebd-4f54-9163-cae7e8dcf95b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd69d8ba-12da-4438-9415-7def99aef4a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efcd224a-dea9-4987-b2dc-40bb5bb8f462",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "261653fd-97f7-4a54-adce-8505d86f9dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2f5f6cf-7d77-420e-bf14-4d98adfcdb6c",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e03839-004c-4eac-af26-d502916378a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91ef457a-f523-46bc-ae71-327c57e5ac11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64681210-3534-4687-8349-548176b7610c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "b66c1c0b-7277-4f88-a430-ae098c069839"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82384a3d-a37a-45bb-9cb2-a1e089a77b21",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2cab1a42-0bb2-4022-80ea-cdc6efd597f0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a67ae0cc-6bab-4b68-9412-e77ea5bf69bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ad46b7b-ad37-42ad-a74e-70efafd819f6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "89b5b186-0369-40cd-abdd-74eecdeb1e86",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9c655ae2-d5b0-4423-8aa3-fd8af40e9042"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e85c2c80-de63-4f7c-98e1-2413ccaec5d8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "479ddf04-2353-40c2-ab2a-dc5f5ae5d8ce"
                }
              }
            ]
          },
          {
            "id": "8636ae60-09cf-419c-a390-776e6198d2ee",
            "name": "Positive Testing",
            "item": [
              {
                "id": "40e28ade-5203-4eda-af64-77a59a2a7882",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d630a8b-b3a8-4e7d-bafd-444c04813329",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "de452453-44e6-48f7-9209-bed15d4aec5c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a12b064-2ff4-40a9-89c8-fd39b97fd353",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8240b2fa-744c-44a0-ad14-7f7d2b50e112"
                    }
                  }
                ]
              },
              {
                "id": "d757f777-5ec8-47d3-a564-39ecef1a2b22",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1807a88-1042-469a-85c6-b3b59ba6157a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d50df94d-5bb8-44ae-9eb4-bd0f83dd3baf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11036307-c4f8-4cb0-a618-963b811cf955",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "35d4f842-4969-452a-b336-9d2960cf9e14"
                    }
                  }
                ]
              },
              {
                "id": "8cfecec5-8257-4bde-9877-d03bb32aef86",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16aa303c-1855-42af-8d87-5eb5096e68a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "faf24016-3289-45b4-8983-e05ba19ef3e2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dd6d42a6-9498-4829-8216-f22a4aafd109",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "88568881-4de9-4316-a507-231b7c8f08a1"
                    }
                  }
                ]
              },
              {
                "id": "0c97754b-8796-427f-a12e-571b8092a586",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f960efa4-47d0-4a9e-87e6-d3d838da5c33",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4ee49088-6092-41db-aca5-7df5e0a901bd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d5149ed1-ce8b-4d98-88bd-499a6244cf55",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "3fa27932-cda5-459a-92b7-5a615d35149b"
                    }
                  }
                ]
              },
              {
                "id": "cb5ec980-9ee6-47f2-a030-d2ce8e59a190",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb2cded7-599d-445c-ac58-3c39580c4665",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "576dab01-94ad-4eb6-bd06-ad1d9864f5f3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f58e6a7-1151-4ee1-84ed-65285a12df33",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0c9e4d01-3565-4d25-8abe-1b87bb233170"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "203725fb-d064-468f-9a8a-8892cf0bed3e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7c7e7c7a-18ce-4ea1-8021-6609bc4eddd9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "590e5d53-ac2f-49ca-8673-f285ab08ee42",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ed096343-b06b-4952-96ad-dfad8428ebb2"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e907399d-d4a9-4f15-9cb3-45fc02db7863",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2c272d66-9c16-4201-9eea-edb7b9ba9cf5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f652b1b6-4260-490c-b8bc-18447f35b948",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7802b0d4-d90c-49f8-84c9-d85db0ff1d07"
            }
          }
        ]
      },
      {
        "id": "038e261d-daf2-4262-8855-4b092f656453",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "cb214911-435a-4de9-b748-2de6337ab205",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aa72f3ad-e829-4570-9cea-4db4160ffda0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0cf3ce44-d415-42ac-bff2-e806d0e032aa",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a08f5f60-1427-41f9-bdf3-bb198c0f7281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c10533d-4afd-440c-a2cb-69152d63b1b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad524d6-9fee-4152-bb9d-ecb5649db48a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba4da31d-058a-4bb4-a5fe-71f217026598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8d4c67-bca3-465b-8900-aeba87037092",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c97aa1cb-92b6-4a7a-a11e-e7e7e713b6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e75838b9-5651-411a-9d8d-67d8bb4d1217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd4ddd7-271a-4d81-9600-645d3389efee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "de52db31-fc16-48cc-991e-23c1cfb44cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2d4bd2-35da-4630-ae07-50350dc8c2f9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c8d74c-6df2-40c4-a10d-71fbd6da726f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "592f8cc9-defb-476a-b682-6272238a10f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b71c08c-a5c8-49a9-b835-f9cd8b632a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85fe39d8-d291-4c0b-8332-32e2089da758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5072964-dc83-402f-a7e9-f20bc917c0c9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d23474-3b0c-4b92-a568-08a758a6c740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae04dd2-ba5d-45cd-a713-614f40222613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "332eb237-1194-4b36-b683-897171cc5a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6f3fe8e-310a-40d4-8b20-67a9220d0827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e20e91-e2a8-4546-bf28-04b1691fba81",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73eda6e-4a0a-4680-b335-57d69d3805be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc3d7ad-7b0d-44f5-83a7-35b5f51e90dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a902620-135a-400c-84c9-7be71a98b247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5ef6eea-c1d1-4c16-8cef-b322ef163895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02349f69-dcd5-4328-aa27-fcdfa2873808",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "206ba76a-747f-455c-9d62-4817eea05a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "749290aa-eb42-4ec7-9c0d-658d63c5854b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352ec246-6328-4af6-b972-30032bf96428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e6886f5-7350-4ec4-ab88-e110c86b2028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e30201f1-1ad7-4187-8a08-a787fa29e468",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f547d31c-6e66-45d9-9dcc-878d5435f55b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e25c7158-8635-47ee-9eb7-b0c042f0247a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b4680b-8efa-40dc-aa82-5cf84faf0036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f90aa378-3cbb-43bd-8bd6-6381e245d7cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345376d5-3f46-4bdd-808c-5bc968b6ed1c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a94447-58bc-4d31-b5ef-e0041e0c2169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47b6ed0a-33c9-440c-a6de-4c5b8b5ef590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49456467-36ba-48f7-892b-3af0e89e0ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d7d662d-c5e8-45fb-b03b-4bb0036a029f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816e861a-1db3-481c-be00-175a556f611f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa50a8c-7992-4d9c-8fe1-f2c970532f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b975a1a-efa6-41da-8b3d-4b6ab2d84eb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ead5168b-6233-420c-8bfb-a2906b9e335d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "db69e3a9-a86c-4fde-bb6e-06b29764a848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f579c3d5-37b9-4bac-9cc0-b6d096e0b8c3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c7a4f7d-686a-4aee-9f64-e99e7300f19e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9368d773-3af2-49ff-a90f-6de4da4015f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9e53b9-d4ec-4512-ba4f-b50dafc8ca30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f067929-ec42-4808-9e25-78acae184cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd375362-65aa-4cbf-ab87-6435cbcc7dc2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5ea604-72ff-472d-9c87-e8322e4809f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0755008-f08e-47e7-8a0f-1efe1744755b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8b1c24-74ee-407e-84ef-6f6c12fcea2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "35d6ed68-2008-4255-8d98-caa0938c6a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd16fce2-8aa5-486c-b104-92566260361c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2107ccb7-e9d4-4e65-a032-043d690c24b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87e1bf61-087c-4d8c-9d89-047062a08c72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9780c709-9f93-4d00-bba8-b6904de96e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ca396208-7186-4176-a182-c32701cdbd5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8d490f-29bf-4e90-ab82-3d692ec9b7cc",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6a22f4-f068-4891-848a-378216fd2699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef68749f-4241-49d9-8c89-35c6a47b2c37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7609e4be-db84-4802-bc76-bfac105a0a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "50df7fc2-a10f-4ca4-8d99-9a78ba9d1d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc13655d-cff1-4b76-a4a8-f2062ba42e5c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fab2277-22ec-4b64-8ea7-3182f8cdc771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5a489b5-48c4-481e-b9b4-1b489b7c4540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2384e7b3-030d-4eb8-a31b-2b1e8106489a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "27333cde-467b-4b0d-ba32-90ee4795d609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa2fe03c-8a1a-48a6-880b-8723f72f392a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09b5c96-6377-44c4-8bfb-2b5e349bed66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b378749a-1d06-4a9a-b031-491c018762e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ab32d92-22cd-4a53-8eed-5f8599a0e1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1e44a2e-1dd1-4b2c-a37a-c34ffe2cd3c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "755a940c-f747-43ad-a854-d6f5c1cc6686",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7fc66d-d2d1-47c0-82bb-b957794cd7bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ccda88e-2de3-420c-94fa-05a67ac07e3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8acfe0-4c66-4221-9277-57a2bf91237b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1daebdd-9df8-42e8-ac73-2b252328617a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9681adfb-e92c-4caf-a2ed-70863ad02e44",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ed4844-806f-42c2-a8e4-d6ba3a5ba4d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d7f63db-6c13-431c-b91c-aa81a5b1a0f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a896aa31-5357-43d9-b045-a3266e6ff911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d815db7-907d-4c7c-86b3-102f26ab2a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8459649c-e286-4a7b-b69b-1c1cb5a7d8af",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a8f2bf-c526-4dac-b46b-3776014372cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "168b86ed-f05d-4cb7-a8ef-020b10fb16bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6266c928-21b0-4766-858c-46efbc9bf526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "be001275-9b0a-401b-b2b5-bf91399f43cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b0fdbb3-99d6-449d-aa8f-3e2b2a61d695",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb05666e-ed8b-4402-96e1-1856518e97b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc428a27-cf80-4a47-9521-3785495b1864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00acff3a-0b47-4b49-8068-9b0c28ac723f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a30a7b4b-2b05-4a6c-b3ed-7aef4e1ed0f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce48590e-bd4b-42af-8009-303381b63cd1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b30780d6-ac84-48ef-b49e-a61dc20a9347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59629ffd-588f-4a4d-ac8b-5b150b624dd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74c7a4c-a287-4e1d-8fe8-3dc5c81be950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8164a24c-d27b-406a-bae0-0cbf0d0429b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461823e6-6b01-4de5-a372-f7df99aea79a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a418fec9-c6e4-46c3-a74f-9a5d8a803a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b00fe77-270a-4934-b8ee-c7e88cc74c80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3448210-0dc0-4d3e-8b2c-f372229aee24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0de6c770-0403-4952-b3c9-09b5977a19df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f79e306-6d26-43e1-b114-4178c17f6157",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "229f0daa-e6d1-4264-951c-17690d6fb5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f541e4e-fdc3-4f3c-87b5-4ba0d70df8df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f1e5dd6-e8fd-44a0-b1b6-24850d4c7ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32d9d95c-6043-42d6-a51f-cb1a924619b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afdb11eb-0eea-4363-9624-c374ad55d855",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32860e6-01d7-4b3c-8c66-1c11db849c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b070117b-d90b-4e71-bc78-ef28ea92362d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65bf724a-bc2a-4523-a303-0c721ed203fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55c7e996-049c-4faf-a02c-314d011c38df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94030a43-a164-4f10-9a77-26f9865265e1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6789c594-dc18-44a4-a34e-f4a8b19ee325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5994f2a2-2ad5-41fe-b2d3-6ac8cf99b1e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1970e65-c8f7-4894-944a-62a56bf04a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6573683e-a542-463b-9a91-cbcbcd3cd425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717c0d8e-9232-480e-8551-6aa2a1a71448",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5736cd38-33db-4d1b-b542-3e2846d917d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d813b223-eabc-4e49-a032-9cbf68ca3b70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab196b3-bad3-43aa-9ded-2ac750d6a0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abbde78b-de74-4ef3-af67-d2f689003866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf38197c-4488-44c0-98a0-260e1546bb91",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "274c7e8e-6617-4c67-92fe-9cbfaf16bb99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94a19cf1-ec6b-4f5d-83c7-5f6146390b56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f7c50cd-9334-4e18-bd24-15f943ff2890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "daa0164b-93ca-41d0-b27a-73347625d949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a36443f-fec5-4e78-849e-2d4225c08da6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fffda8e8-b13e-4bb9-a695-653c58f1ebb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2d95bbe-103e-4db2-995d-505a4a8c0081"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9485a4a9-e492-4ce3-b0a3-b7a9f02aa3bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59875a83-70b1-40f7-ab3e-56e52a2ece02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f0d817-d8d2-4997-b335-dd248abf68ed",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "280623e9-102f-4754-b10e-b72b063a9832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30950821-802a-4fd8-9d13-dec03c64258d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188e09ab-567a-494f-ad11-3bc65d7ea547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1ede7a1-e978-4a74-a9f1-d082fe465c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02702745-f380-4b81-a717-9a7de9ea5d87",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2801de66-a0fe-430e-a9ca-e7d08f1cf6f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b140bd07-0de9-45e3-a185-0aa6089c8c54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd190801-e857-4c07-aa95-8a5f974a030d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a82c161a-db5c-4d0a-8c47-77bb17fbbc5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b6e0c28-4d76-4066-aa32-d50fc31b616c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d52c6e4-2a28-4a52-a153-41e07ab33a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2f52786-dd30-4da1-bf5d-a08dbdbf7e74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08756efc-e9de-4f02-bd0d-21f31d5e8658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ad65108-870a-40c1-b3bd-4bfd14879cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d7d837-1ddc-4f76-8ee4-718bd61a529a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "690d6df6-8358-4966-97f4-e78b242a6e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c0316b8-598e-4637-9d77-138a6dc5e28d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e933e43-716a-4fba-9087-fd4314303179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ba17520-a1eb-43d6-ac79-f36885273755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9111401c-c130-4f73-9072-e68b3b6b8517",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36323a9-5441-4da4-abd7-04e51ed7a0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0624ed1-d75f-452f-a14b-b1b156ef5a88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35812656-2b5a-499a-b4fb-5157781d54e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9a1291c-8ebd-40d2-8672-c66d5cfdb73c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "38c18e95-13b5-44d1-aaa5-ff772fe579d0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "db01f8fc-d205-415c-95ff-172069438749",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7cb90c8-f357-47d8-ab9f-8eb8dc243cf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d7381c2-4fbf-4b85-a470-66ff2c894eab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "724b22a1-ac2c-47f2-8f4a-deaa5e1c5d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "adec6994-70df-49cd-bdca-707905ce2825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439e9568-ad43-4391-b0f0-343c908a78fa",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dec1f0f-0a75-4349-badc-00e0a1d3cc37",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "6e248dea-de26-43a8-a1f2-7278c3975910"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35bc3fc5-1c0f-45d3-96b5-372da7075c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d1e64c5-b828-441c-8727-a514462ced39"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b30b5045-a716-4a89-89b0-4ccf99802587",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c58572c7-2efa-47d0-85d5-3c4a1784d15a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "482e8c57-c58a-4d48-a553-8090480f047c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fef94d86-f61f-4969-9142-4440437e3455"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "405ef18a-60c2-4d8a-ad6b-dcc567bf721a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "36e00ff0-12ed-43a7-a0bf-67bcd29442a3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bed7e157-32a8-49cf-967a-3757483371c8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fa3c4198-ab94-45ab-818b-66d493984a4b"
            }
          }
        ]
      },
      {
        "id": "4c6ce30b-8efc-45bc-b4d0-37af64fd005d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3a604190-eb45-4e36-bdfd-d209f57e95fb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6f3b5fe8-3795-4337-a3bc-4a58bfc564f7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "62c6995e-1796-47d8-af91-368aa55002a8",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fdeaa30-1616-4504-8096-281518029402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e79f861-f377-4d78-a30f-b2e06c846cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe47cf1-fc15-4186-945e-ffca8c252474",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b73b16-03f8-4278-ba21-da18d8f2407a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30337b32-b6d7-4a2c-8aad-7fb52fe5a54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e969e65-5555-4b98-bc92-9e3d359af819",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39011518-92cb-4819-81da-001bbecf66c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fd433bc-bb51-41ab-9f56-9b94e15a173b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de4ff44a-0248-4ca9-8a62-9bc5ccd25509",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92aef86-c476-49aa-9230-a8a41b035b65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2f5b5cf-d76a-43e7-a385-bae611055bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59a37cfb-4594-4d71-b7dd-580049137999",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1405e5-adb4-428f-915d-eb7f2106f1d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5830e3e-1c3a-479e-bf49-8c222d1aa113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e28689-f084-4cb1-988b-06455051977b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41be93eb-6e49-4bbd-843f-c2e13767e166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f5748ed-8f7f-43c8-a5d2-61f4cd145656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cccdaeb3-3d0a-45bb-9b64-c5042b11fe5a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd0ecf27-bd5b-4ced-8aeb-5fbd2a98f4da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3909d752-33e6-4698-8baa-3eeb7a6f2e44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c551892-67a4-4865-9f62-cd596c23b1e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eef07e36-e14f-440a-ae85-1b64d977cbf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9da4fd4-71ec-469c-8456-032030986c57",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd94be7-a522-4f16-ad9e-ddbdf3ee2c2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc7d0174-581d-44f9-a66b-20293672e994"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0fcba9c-fe0d-4ecf-a7ac-6dadc54b31f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82ac92aa-f53e-42a0-9556-1d01daee0b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c30cb7-439f-4161-946e-81fbdee2e4f1",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71385043-d95b-487f-8ab1-81a6ccf4aabb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bc83a30-0bd2-4051-93d0-06394e9b7163"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d004fc3-4d4d-4b37-8511-111ec366d5e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "487eba86-2811-4d24-acab-5bbd2d1ce0b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cec4dd54-1bd2-4ec8-9f58-369c48fd4846",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3ba18d-2c9e-43b8-9d79-74da0eee4ae2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be3cb62a-72bd-4276-8a48-3652aac9ab23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e51a4d8-d34a-48c6-ab3b-d9486790c187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54a9412b-9be4-4443-b95e-bcefe5aaea76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97348e10-331a-4bca-84f6-97da4a548d02",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40288346-9bab-4bd6-88e5-38718f2246c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "806d86d7-27cf-4020-b5fe-2c8da1b57715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8d80ef-c720-425e-9940-c631a3c41912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb0f76b0-daaf-4168-a3d0-88adc7edaace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f943c0-26fc-42d1-b412-a7bc01c741c6",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c883c22-636c-4d96-9dbf-9b44e15f55ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e91b9cf7-e01d-4994-9632-e85804882fc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb5b2e1-cfed-4705-8f22-a40420feb8c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10d8577e-7b52-451d-8625-0985804e0670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100dadde-5a26-4816-bff5-3d7d17c0daff",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff061a84-3393-4d0b-a570-6dc221b51905",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9f61189-3282-44d5-bb7e-9abafc83ef28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1aa808-da87-4333-9a72-9bdbbba3db16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9458c975-2105-452d-afd2-24676bb3d820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7444e271-d967-4114-8cbf-3fa98b2fe305",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "601d7a7b-3f1b-45a7-aa9f-9259e33d7df1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4043df2b-309d-45c1-bddc-e7c9e488761e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5757f04-af3d-49b4-9cd2-a82293750b19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceac16e0-bd08-4794-949d-91db26e98809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c0ecc2-59dd-41f6-b40e-1b7d3c961b24",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2def4d94-f897-4b1c-9841-0295af67bb4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b3105a5-1a06-48bf-be9c-7679c41c5830"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "487787c3-6f59-4d61-b5e3-92376e742a00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43a47c34-01b5-46da-8c80-42150b50f555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c153714e-f971-425f-9d88-32c4650e6ca6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8dc4af0-0aba-4905-98e6-a67980701208",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eb927c4-ad7e-43d1-abfc-34a5c79a0e7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c5efeb-e5ad-468e-8108-11210d4c23cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dc75270-d7b5-43a8-9ede-3b9c484bb4e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c30e25-d637-45eb-95ef-8d8773e45236",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2aaf0ed-c6fd-4f42-8927-8d8c7392a5a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "490b312e-3d90-4863-bd10-8e5e756e8d52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03286d94-61f4-49b9-8dd9-2e5f06aa7363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "758e3a20-0496-4d79-ad4b-f116a5baeeb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600818ef-50cb-42c3-b03a-681e884fc510",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87a6bce6-3316-473c-86d4-f476c6aebbc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e36dfc49-d892-4945-a8ed-1e25cc3412cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9424b2b6-1e69-4879-8876-17d64273ca38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06e1f819-9ac7-482f-82c2-2718eda55a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85aa6513-f285-4532-b79c-d43257e4cc9a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a66dcf3-9937-4df8-beab-3fea95365315",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cae9c01c-c78e-4b5e-9037-4cab5963c63b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c63fbb3-aa90-44e2-b906-e5b2a303ecc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b74ac1ad-65b9-4826-b06f-c02fee3dc2a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214dee4c-e359-456f-97df-3fed1e564c39",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f5fcf6-5629-4a41-b070-63a5bbd13ace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1913bfe-4838-421a-ad93-eb1a8091c9e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be16223b-e74f-4e97-9315-911b1422d6d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1be2435-da54-47a2-b569-768429aa8375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb1bcc7-dbee-415f-8144-f5c15e818e1c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4fcc03-8203-48a3-b810-382d1dff0a2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c94560dc-149b-4067-bff1-46f79303ef95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5d3fb2-9fe3-4c41-85f1-85e5674ed8f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cdaa857-c382-4864-af13-55374ed1d69c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998bc048-8434-4bbd-93fa-8206912e5172",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715ae43a-88cb-4f85-9c1a-689a13c6f563",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cb831ff-3f85-42e6-9da4-58bad87a19d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c4abc3-312b-466f-86cb-fce78dbbbe37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6df7919a-de1f-4c18-b04d-732b05e92a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a48d9b-6d9c-4ef9-a49b-c25f1ce98785",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfae8577-b6f0-4698-a9d3-b3c1bb79e7c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc667dc2-8f0c-4f3e-a434-3669bdf65cc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e28c0992-a261-40b6-ac36-52b192afb362",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c81e2da-3496-44ad-877c-5e946ec42700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101a22b3-7f42-4cc8-b58e-8451d0268e7b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd1c3956-949e-4ca5-9240-f498e9ea6c0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaedda76-0e28-42a2-b58f-e29c0b9d0913"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74cd97e1-33de-46fd-8539-6e6a8a29e83d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d9be449-7d48-4b4f-8e0c-b2997f843a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "373bd708-968b-46b1-bf2c-c29366c508e9",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee7f35b-c5d7-4984-86c7-3bf79c19faa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f0a9bee-9eaf-41d8-a0ef-bbeba24a5527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad1e5cf-366a-44d6-831d-f5474370c2e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eb5111d-0709-4d39-80aa-b8ec3e4217b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9fd2b6f-cdd9-422c-a7b3-b5b65db5cba1",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e9051e-90fc-43a2-b29c-9c530ac6d58a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62a4ebd4-02e0-4da0-abc9-b552ca3cfc83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2fefb41-dcc6-4b89-a070-38c9d096b3ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b48f1819-1a81-4ee0-8f66-8842b126a10c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69168e08-8b39-41bc-897c-518fda097f86",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba04e895-4fc6-4b46-a6a3-9cdb0581cdfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f39d59c2-904d-40e6-a656-332ee1695e30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6064a5dd-00e6-4f0f-817a-3f1295f75ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f4858fc-008a-4044-9605-664d75347216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1e6ba1-c3e8-440d-9b2c-d8d00dcb83c5",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7517662b-7884-4610-a476-0d268005aa71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83862e17-1f25-4f4e-8647-811265c6fff4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baaa6e21-d4c7-40b9-ae39-f07842ffa6ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a4b894c-c0f8-4021-833e-7fdfb2fc8198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc94c8ad-6579-45f8-81f6-42b5bef0a52b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bcbc6cd-b3c2-4894-b7d2-02c21a4ded3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58500e49-2d64-4ecc-bf11-b364ab452a1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daee04e7-ba72-4856-80b5-3aa338018a20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3c5d858-37e1-4f15-96a0-c132af98ed30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea28845-20bf-4dd8-a689-86f5b422cef3",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0c7aec-87bb-463a-95d4-0e1d8b93c7c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7e46e0e-d97d-4ef4-bc54-6c7f657dc8cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00fadf28-e6ab-4af7-a6e2-dbd9a3118cbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27462b29-9856-4694-a548-aa420120f2b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1457ff7-d8e8-4cd4-aeb7-90319424f783",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ee1b4b-7f53-4d4d-82c1-9998ced00f45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6f2a5e8-92a1-47d3-a476-cd53ef3b3a05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3998df09-9749-4aa6-94f7-52c1a730b236",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdd8c9b9-e4da-4c9a-a0b4-8ed09d597629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c53b05-ce1d-4c74-9588-3e0d8a38da42",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd5bd80-1ebb-4e09-8d1d-467ea0d72d16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79ba5fbf-de19-491d-835f-bd9df002abaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4733b4e3-98d7-4e58-a0c6-39989fd969d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a3be35c-a2c6-4ecc-9eb9-dece23bdb459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af3f967-e4b5-429a-8fc5-5a3d916acf2f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf0fc386-f9a6-462c-90c0-fbf6f6ec1e1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1caffaf-32c7-4184-9770-747a08030598"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f33b3d4-5ee5-4582-be2f-6d3293c80639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd813493-088b-410c-b792-fa2362d2e0d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb3764c-ae6e-4cca-ad47-943c82fbbdb1",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f046e0e-2bad-4e65-bb48-9bb23baeaaa3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ab03f0c-c630-4590-a53f-66e15b22b016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8917d577-ca7d-4f68-a8a2-6251b94a3fab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa9c8602-56cd-4fc4-9141-c5eac8089f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5695aff-672f-499b-89ee-16ecb885f606",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "880dfc1b-e791-4c4c-ae7d-ee5bc8714471",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b23e0338-030b-471c-b253-e67292ae7eab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "261bb75f-8260-4895-ae69-9fb890a0c7f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9607380-0491-49b8-be33-b145f0b40ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b719e6-d75b-4afe-b7aa-c9b868256ee8",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c736da75-ba09-4d43-9f6c-4f03918d8675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2b23ea9-3fbf-46df-993e-295b47291a95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1841d415-50c0-4287-8c6a-02553e816783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e376494-3f9f-40ef-9b18-b3fddd3d95c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c605649-c313-41c1-a66f-5af9541a7e53",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6478895a-b077-4322-8c7a-ec499600ab0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15f81d23-48fd-42f9-8695-55a0cba7188c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd88cb0-9721-4394-9fd5-14608cdbc824",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac89fd13-3bf6-40ec-a2b6-50ce76e4e5ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23cbd1bd-eef7-479f-afd1-2e69a1108e0e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c8484f2-cf4a-45c2-a8f9-40b8ba8aa210",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aeec488-64c4-4b2c-94ab-e795806a7116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a769259b-161d-4b35-8347-3180b60fd80d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6916f83b-627f-4c26-9790-794a1ee1c70f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df007f1e-463c-4777-ae88-0135297dcc8e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b732fd-0108-41f9-9aa1-61b81936dcb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92b66891-5cbf-4630-aff3-20f34c8bd9ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "667f5875-ffc4-4dac-b824-9b5698e9d637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fd7a9db-50db-41d4-b6fa-2bcde806d4ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304b798e-8d37-44fc-acfb-7be46854457c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6be55a9-07e8-4a02-839f-a85acd4cd60e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8ca4412-0ad9-42a7-887f-52abf3ccff61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9e52e7-9ec7-486c-9167-7e032e5472c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36db1721-cd98-4c1c-a879-1e5adb53bb4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2eb263-ed84-413b-a53e-96e58e03100c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d47a0997-bdc5-4f07-a830-d5c226404ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b32b906d-6dad-48bb-b66a-be7ce9740a8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9295b39-ffcb-484a-84ba-cae8ca976849",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "604ca7c4-f83d-4954-a5e9-c7edbb82dca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969529b2-77fa-4834-8692-01a207a52a51",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be1dd89-5658-4c18-b64b-8dff475ed323",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78dc2d31-d114-45a9-ac01-f32fe3bbacdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "713d8ce3-54e8-40f6-8c4e-a2af2743625f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11ce5755-083d-45a0-9692-73ec96d6361e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6feafd-75c0-4e15-8212-83a8472189ae",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc9b094a-d76d-4edf-bb8a-1a45b50ba6f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cc26882-0844-4760-aab3-88be2ee1fbee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d38767-ee6d-4d16-b409-d8f61d783c70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9695955d-d779-467d-8580-bf66b03a4d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78264fae-54b2-4325-ab34-54e998f61c5e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "770f3cca-1308-4a15-a5a3-57fc5e468990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2200e7e4-c09e-4090-b9ff-f3d1a26141bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a3201fc-3a82-4b36-95d5-6fbd84d43769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e9680d2-0c30-47b2-951b-6d7826b63b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68f8260-fd56-40cb-a3a1-253c6c45e844",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ecced2-afae-4016-8cf0-186c36152754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27f00081-fbb3-4c68-968c-633605535ad3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff5542b-948e-4f77-9eea-29a8fa9b83cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e404e760-1f38-4579-bb9c-67cbed589967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9ac8b1-65ac-45ce-b338-fe8f10d88f61",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df11fa2-3e77-4548-a009-cb6806dd7c01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d92947-f960-4bc5-91fb-f91d86cbd8c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb77897-0a20-4b7e-b85d-ce33ed9f1370",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5698d98f-0079-4557-9167-9ea657698eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf443502-e261-40ab-a673-f18a64252428",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f7233ab-7569-4c49-91f0-88e6946638ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34e2c219-510f-481e-b6e4-eb50d1803eb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c6440c-e282-4c26-8f67-0486f367bf7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d20a74-4b64-4218-a06c-c254447fc166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "036b38b7-6327-44e8-9e44-236096d6d237",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b430bbf3-e366-4f2a-bf7c-c31e314c85dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "698faa24-9136-4345-a5b0-56dc9914fad4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "749b5c50-4ae4-4d3f-a0f6-82cb8e62ff3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66153b36-f7a9-4301-888b-836cc81633bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62177f6e-6a7e-405c-80cf-141206469a47",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8343ce83-1891-4c7a-83b2-e92eb6a3e7ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26df7a28-6bb9-40c9-9cd0-d718b9f90356"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de66c137-6962-4c34-bbbb-fa63d32f7a69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8048f8c-aa95-4610-81ff-7817f3ba2e0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d1ea725-2f02-4232-b4ea-4a615eb4d4c4",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e20a1721-1328-4bbc-904e-32e646634b67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb1a156d-27fa-451f-9c5b-c1396afcb959"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d1b7d4a-c612-40a9-9907-db0c95f3923a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70e89422-cbfb-4648-a386-0aca7763baff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6af156a-2115-4662-8325-9c97e84cbaca",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d310b7bd-6956-4143-ae64-6483e7003dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b23ec7-5a34-4291-b22c-87adcac220dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b49925d-473a-4408-9e07-33ab8e4d0e41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88a30187-4dc1-4927-9de8-3cfc7292dbe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71964cdf-7ec5-4e7b-81ee-b188b9edaf91",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8563bb-a262-4964-8a4c-f5ab6b70472d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85f6b772-6ce1-44ab-85ac-d61be3fda43a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5066e0b4-152e-4d9a-9cf0-e4fac92fe54f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b6c59a0-c861-4872-bd55-699d74e265d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e49c000b-c299-4987-ad6c-0acc67dbc4c3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "988c82a7-4e2c-4282-b0d6-616fce30df97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f706095-26da-4ad5-bb89-52c997469053"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e282855-b8bc-452c-98e5-d5afacc37cda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e0f0c95-3abd-4e72-851c-5020c4566839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967f89bd-9552-40bf-813a-4de4fee61d86",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf4813f-98da-41fd-bb71-59695d23e63e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f8ff9c4-b010-4cba-9574-84505ce8e919"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d437f367-fdd2-4734-b867-f5c6b5a32965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9cf460b-e70d-4f03-913e-ae8868ceae5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3a0959-c66e-47fe-afea-c1481d40ce97",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119c2f5c-7463-4eb9-a8c7-65f1e3a5b52a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b76bafd-ee88-480a-93cd-88315481893a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b1b779-e180-44ab-b672-87a3623e6d8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80a40591-eaf6-4680-ad8d-b71cc3a2aa6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dea4659-a9b5-49eb-b59f-f362d80b15a0",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e02e7da-c5f3-42c7-86db-3c0d6aaa2dd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e886d7-50ba-4f68-81e3-7f46a60aadf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cbdebeb-5da6-41cd-b6cb-7a665e5b6dfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "093808fe-e4ff-4f7d-a6b0-b6d3ebef0043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa2a922-31d6-4a5a-a3fd-cb26e4e784dd",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e528bb29-6622-4708-a33b-56cc6b7a551d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f980eed1-3048-4ba0-86b9-9bd918c029aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f4ab2be-4cde-4869-8b4f-549aa73ea338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7afe3886-a5c3-4013-a766-4861a3bb1718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd02f36-1090-4e0f-935a-06db74653a15",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97100873-2f4d-4831-b9f6-74bd2958a789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c162d099-dd63-4dc5-8834-9fe14f4e56c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a54bd4-530d-4f6f-9554-a06877378347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94970a1c-9f75-456b-a794-cc49d5841284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f6efff-da66-41fc-8016-d83153bb13c4",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d02e941-3e0f-459b-a280-4a32a49efd9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f78c87f9-80e4-43e4-bb28-bf23c3cb65bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2260027-7fcf-4dd0-9585-e2b5ed7553e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86c9e090-dea1-4150-870e-1a360a929580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5112ef6f-8a5f-4de3-a2ea-1d52ebab8e39",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d65e7e8f-e357-4e45-b280-661c8a214f73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b1b49bf-9be8-45ea-8ed5-11d5ad880d2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "087ef9c9-aae0-46e7-9334-5b6c2eae45f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bf50ba1-307e-4956-bd67-ae1a18d493b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d13534-9922-48b7-bc53-d29a694a6491",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb463f2-debd-40b1-b6cc-4cb610243b8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d50539d7-b589-4dcd-9785-9c38e849cb21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6082d50-cb6c-457b-9c6f-e98d4fef3ccb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58c44d31-b18f-4b36-8827-4a1f3c94ae83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b6c3b73-7cde-4ee6-8ef5-cb49f5116f14",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dea33ff-7088-49c1-9634-d0e10c271382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01bd4ff9-ed8a-41a4-a7af-07797bc7b190"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f027f835-550b-4c57-a949-6831f24274af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc2688e4-166d-4db2-81b8-cc7a82b2892d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ab050f-4db0-4ec7-a44a-bd0059d6edfa",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0531259b-70a2-4c72-93e3-06acf404f5a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02932111-ea17-4cb4-9d95-1f91f4df607d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13a0b93-72a0-4bea-b113-2106a713e773",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2318113e-3724-48d3-a5ef-13128e0655e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4fdf628-c00b-401a-8dab-adc998e1a3ec",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34773dd6-487f-4f73-83dd-54bd1885f576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc88dccd-2885-4f7c-a907-ec2d48a5636c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e6e3e25-d47b-4821-b37f-52cb48b0a126",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c59a7fa5-61c4-4d31-a8a3-8b488059b046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84adddca-a281-4eb5-8c8c-d978d6594622",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7458632-81f9-44b7-9600-1735291cc4da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3df504a8-8313-4f10-8901-1d235feea695"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7540a67-8ff1-465e-bd41-2b666bafba8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b944e4cf-8b7e-473f-88a3-e67959a68470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e4b465-c2d1-4092-b14e-06790385f790",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d58d97-f96d-4a10-9d45-55298b0745c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81457f93-1e06-4893-819e-5897732a6541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "176dd212-2b25-4f7a-9709-a5ac2b163b49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d32802f0-0d16-4651-ab6f-616f7bf6c901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07f142e3-c6b8-4515-a60a-825fad2fbe73",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e733206-d5e6-4674-a0aa-1bda033f1c56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "580615a7-f88c-47ca-b01f-871a495a9ad0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a2cc457-c018-4b65-8ba1-84892e7c9275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2bcb688-1a57-42ec-9c76-60de1050e2fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94fd465-6d8b-4def-a8c3-2aa5a52b4b85",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef97ff2-63b4-44f6-a2f3-66f375cc59b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60c39176-fb46-4608-b7c7-fc82f6d98fa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7fe6a20-7627-4454-b897-1623f1da9963",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8084f61e-8b23-47f1-b2f9-8e1bb2b8f29f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd97dea-1740-4f16-982b-f085a09efaae",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e54535-3c94-4187-b05c-7e735ef21e4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6aac1513-dabb-400d-b9df-4d1b41dcde76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e689732-aa2f-44fb-9cb7-939b456e9dfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e863e082-7385-4a79-b754-2d4f72dffef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f053ef-6894-490e-9cbb-7580511aaed5",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13800087-bc22-4374-a1ef-083e5e4ab5cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d51de219-fd5e-4f3d-b6e4-5d76e2e97e78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "794a7368-9db0-481c-bd9a-01e546909bff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16dc9e0c-0813-42de-a462-fbbc3f58bfb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d187d7e3-c7ad-4cb2-b061-09ab3d5e0b0d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca3f82a-028e-4d1e-a8d3-ff20c4abe67f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70d46f57-5b75-438d-8596-aacd67cda165"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9033ca71-562a-48d0-8c5b-d09ec5fb5530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49ec7571-796b-4469-bfda-be90fefe0a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f4501d-29f7-48de-ab5a-e78eff250b3e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe967cc1-7803-4a47-a3c9-db16b8cda990",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc3ac230-b643-42be-84bd-d24a0046beb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d21d936-03e2-4136-82b9-97b070bc503e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f34330dc-33f5-4e1e-8249-0a8f8a17ed24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "871ab8a4-2968-4fde-8551-6d2b58faa09a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e24b421-4650-4357-9fa2-056e8939af25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a82389b3-957c-4091-9c1c-0a2071832062"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a836258c-96cd-433e-aa64-e49198fc5e4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7173b9d-ce15-421c-90a2-2e1f10541c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f04e84-0969-4c78-ab75-41927667bb81",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b97886-9d49-4ddd-adc6-a05fb59aa1a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7194596-fe48-431a-b82a-09867873a768"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6df5575a-4749-4e3a-8c59-c561c6c07fec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b395578f-742e-4d50-a434-583f738c36fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e2e379-0115-4f00-92e1-683404fc3a35",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d9f8230-806e-46b6-9201-d69d811413b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cdeff05-0f0e-4973-8486-7b7a90421981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37da0e54-de3b-4599-a81a-1d215df5ef5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c22bd61-6a8f-47b9-a4de-a92d7e1e13cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d8de36f-a6e7-4b3f-b08c-e5f09aeb8f0a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f5a02e-5aa8-4cb4-addf-98035fa4a349",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de0ca8a8-91c8-437d-a763-599846585ac9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "879f9f36-b59b-4574-90ac-d3531053f3d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf3459de-a3b3-490e-9731-fd87cad8a757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2149c19a-1b40-4b8c-ad05-7df7ec5e63e7",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2690a913-60c8-46aa-a3a5-00c0e1556766",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0531a02f-81a1-4e1a-9521-6e84025d6152"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60a7dbb-a92c-489c-9609-f9d69cb7a42f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c189d1ed-29ab-47b0-a915-b2b8eeac87b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74661b31-4ca3-417a-98d4-6c892c0cf7ba",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e03b43b-7978-41e0-b6c7-0f039db7b6b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21abb12a-6b93-449c-bcdf-496d419e2eaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd571410-4d2d-4182-90a3-7e707a33ddef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03132a3f-ba03-475b-a8be-2161d7b76cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c38421-a14a-4ef7-8ab8-592f90cd8d58",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a496b6-4c0e-402f-adc8-f0db5351c981",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7292d7e-7f6d-4e3e-accb-9cf52b16ae99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "643bcf8f-b6f9-4f48-b165-7e5161dd7a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33420224-32bf-40c7-b46c-9090e7055403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87181efc-4356-43d7-b5d2-e919c10863bb",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e0b0af7-b981-4dce-8cf4-75c673c0d7d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5733cf76-a46e-40ba-ade6-d7f452fa2bb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7235f270-c54e-4cfe-83d1-b14ae167c155",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5730a7a0-f53f-4bb1-a261-c3766bf8373d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9203eef-1010-487f-bbc6-03b420f9672d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4242e04-7bbf-45a8-a166-8fe214807149",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a183d6c3-5739-462b-97c4-742e87d19e89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "493c79a5-b650-4950-86e3-3f7182a29f11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbb539df-9390-41a0-969b-a0b530afffe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1bf165-0ff2-4d20-b8d0-2e3f002f93a3",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a19987-7a6c-4630-9052-f6158d8a8c66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa4d3c75-c28c-46ee-9488-75d173fcceba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5bcbe21-7e08-4101-90b8-28b5fe461696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66725570-2190-49d0-b335-572ab6ad99f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b945da7f-8335-405a-8a85-95f2ad2aaf76",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64738155-6b46-41ac-a898-d27ea735c440",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3696003a-5053-4806-971b-eb5efcf314e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f830d854-3fb4-40d9-8f20-f153897ccb20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "793d41da-5628-474d-a75e-64e1b55b86cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a51a3558-9e3f-406d-96e1-023d9f427d88",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292b4968-b753-4a43-af86-c2f5d4398b57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d7f12f7-dd53-4ace-9e95-5a43eb2353cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ec81d2-6618-452b-821f-19951bb13937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09d2ecd3-b1f9-406d-8733-8e55a3e7f3c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e69ce05-f26d-4c6b-89eb-025cef4db23a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b01841e-b85e-49f5-a370-8079b548dfc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45848124-3859-4395-94cb-3b523bfb25cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a72bd5a-f680-4e78-825f-2ed24a8025f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f937015f-be34-4853-b46d-0ec30b3a9ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1405733-ea53-439e-8d2a-577b03b43002",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6b5fb0-d5a6-4917-beaf-3a62a1c3ed96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9015da8-0097-4fc4-af96-b9bdcbe45007"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce1ed42-5841-4645-ac25-3616c409b2cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f48f3a14-115f-4f8b-804d-3fd00b969e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a74101-cd98-4fa6-8d09-783eb450a666",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "903db81b-89c8-4f10-b733-6dff9aae9ca5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb9d3a70-7f0d-4c7d-bae1-6f73151cd27f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3659b0f-b90f-49e7-937d-900d91fa4d13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7912225-d949-402b-a679-640a1bd76c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24bba6fd-b692-4116-8bf8-735b8e89fd60",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca36ba1f-08c0-4301-acfa-e7bb4f397772",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "308fdd83-a2fa-4d1a-a93c-c02846f3a8fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "580288be-515b-4663-b2d0-b11d2129c6af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e46ac046-8ec8-4ec5-b3a0-e74220353a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ee2f97-0c05-4574-aab2-ad8947c70a5e",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2643e98c-9be6-429a-86aa-73cf9ff67274",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ca291b2-ddc8-47c0-b6b3-32782a7ce292"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4e59d6-4116-4087-957d-a837ad376599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f58b647-cf4b-431a-8356-04851fce395f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d908b1-b334-4652-a200-11b99531439e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718b305b-e711-4866-8463-674ca0547d7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3a8894f-b6ed-4ac2-b696-2c0548321817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "864a6796-76cd-4086-b5db-d1b39c884e1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fbe1842-b63b-4fb9-a6f0-76c91b1c1f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74277344-fa45-4f0e-8878-fec329907837",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d674e6cb-1cb5-45b0-b821-c9b32e295939",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ad5e2a6-553e-40eb-a87f-b13a47abe72d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df306999-8009-46cf-9880-41d29a999400",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1ee8b2d-cdb7-4734-a4b0-71ee7a5b3a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68d5cc1-aa25-4050-8a79-b0b9faffaedb",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f110b0b0-3236-43ed-8a89-697f2b1413bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fda2b5f8-f3ac-443c-90fd-d04d090e1b7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b3ef0a3-7cd0-4dd0-bfd7-588d1c037e08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb997baa-b546-467e-a0a3-afec981b6e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a42f5a-f1e4-4de8-aef8-22bd31c07085",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc16278-ff82-41fe-8d1c-87d222221042",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7848272f-c49a-4b79-91b0-d671328393fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae8ead84-b155-4b3b-810d-fe5fc6178cf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "972db0b3-e5e1-479a-955c-33938654051c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b5c281-bcb7-4126-aea5-82b975086e79",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480e069b-b084-452a-8688-1d2eed93633b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cec9390b-5c80-447a-9e6f-75ec20b2e71d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c10fa96-6e0f-4e4c-9d0f-bd4d508a5c0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd017da9-24c7-4f15-ad24-b9f29ab4d040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b0bb95-d91c-47d0-ace8-acc6efafc1cd",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4536bab4-d5d2-4a7e-b2a1-38b7f5b5a764",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7136a040-632c-4dba-a93d-93ea194c7630"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a25273-4b85-4308-bfc3-cebbac1fa504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dcb6f72-f2fc-4e74-b356-d180d67375cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eec4050-73b4-4f87-b8c8-85a893809ebe",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94bb2004-7d13-4f53-8849-cb783bbae2a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61e8a766-3182-4a86-b4e3-237dde74fb12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c880b346-162e-4f6e-9b64-dc4ade8b578e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c4dc416-8966-42b6-a992-86a55ac7b496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8047dbe0-f408-4420-a24b-be8736b38edb",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f27691a6-2cf6-4345-9c64-6b722b88b184",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7732fcb-be95-4873-8515-707c892b46ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79c0cbf-2277-497c-bc2c-de1894644d1b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbdf3573-3eb3-4eca-a7e1-a62da5972e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d81b339-cb8d-4931-b7d8-a8e44b29c9ec",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab12d18c-b844-4566-a50a-9a1dec71c9b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad75092e-d172-45e8-aaa2-c11062f1227c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e60be25-a724-4726-ae0a-7b7cc6279d3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d975e4e2-19f9-411e-9f28-bd2c88123bd2"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75eee33d-a92d-481f-aa2f-519cf21c9122",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c984844f-4313-442b-8995-26e3869eec4b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "79578df5-7641-4677-93f0-070bf60f5f07",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "83354b32-e5fa-4f9a-a06f-4b2861f5bf1e"
                    }
                  }
                ]
              },
              {
                "id": "f7b83b66-85ea-4c8c-b8c0-9e5517734745",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1c2ef315-f0ae-47c6-85ea-b57cf63c1907",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8fc81e6-81d7-4117-8c17-98f513fccd0a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "bf7ec3c5-0042-40e2-971a-fb1fa7b67e9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0167d691-0cac-4b19-acd2-b3705552182c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6c5eb81-9810-42b1-ace2-1708852532af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9302f2a-4c9a-450a-a25f-66687cd5d68a",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3adf243f-4eef-4c26-9a58-e65ef69b3baa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e37e8496-859c-4d50-b77e-60dc2d4395be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f860cc9c-ef99-4ec1-b329-30ad1d888030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f180ce82-dfea-4d79-88e1-00696a8f69e1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5058fb25-517f-4dff-b95d-f186427ff1dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3de096d7-6d7d-4995-9fb3-31bb9c1b20c3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f8fb1144-89d0-40a7-88ea-b78974e1973d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92fa96bc-6dd0-4b85-ac6d-13549fee2698"
                    }
                  }
                ]
              },
              {
                "id": "21260c85-6bb5-4063-bb88-d729bccf06d9",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "35e1ae2b-fde4-4a8c-a1e2-996b9c0f251c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dabd6b58-612a-456d-a4b4-d353980d0ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "af6bd02a-c0e4-4e42-8a19-ba74e9b6da77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bfbd074-40e4-467d-97cc-acd92dd60dc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d274b09-a010-46f0-bf7f-cd5ab5dc2c52"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "75b110c6-6130-4c7e-8c44-c80e361bc288",
            "name": "Positive Testing",
            "item": [
              {
                "id": "24adf816-a81c-437f-aa7b-93d34d311622",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "54e54de3-f347-4f75-818c-039111e70d68",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a27731b8-6974-4b14-a260-d06a4335d844"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9fde180-c727-4914-a53c-2fc0313b86e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "192e965b-85d8-4ea5-8b3f-23ad95c27b71"
                    }
                  }
                ]
              },
              {
                "id": "6c6f330d-6ef1-455f-bd9c-25901f37ad23",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "953b2943-e1e7-4021-9f60-be38119f6c18",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ddc92428-b26e-4e41-bcf9-d8401ec37e88"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "143d9020-4f91-475c-8dd7-08f3e3009d88",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12ee7c21-eed9-4781-bd31-0f8121a8ac96"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b157230c-b41f-4e89-963d-52dc004087a3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "77fbe67f-2607-43cc-a6f8-8ac88a4bc807"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ac95f059-2f0f-48eb-bf60-cc4a1d840aad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c227b02f-cd22-4152-b388-e3af912fb6bc"
            }
          }
        ]
      },
      {
        "id": "dfd1eaee-3c70-4626-a282-6787d905b18a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4870acbd-d5c5-485a-8b14-c51509cdf3ae",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2d0afa56-4024-43ad-9a94-1a724ad22b65",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "546e9615-6f0e-400c-a342-571e8f3e2904",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303d7d50-4448-4227-8936-e686a6b02e1b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b60b0804-9d74-4b46-a68d-a3113b78282f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "707d2e65-ae48-4d1e-ab8d-ef87142bcb39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5d50d22-14e4-467e-bce8-085bee282494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00706730-8579-47db-a9c4-305970491c34",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc64d9e-9860-45d5-a90a-ed323bbffff8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4e85c461-08ba-4351-90b4-e5f411b32d2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d36ec1-b045-4c30-a75d-6a596db9e2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d37e4b60-3141-4392-b438-4b9c81d00a92"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c0c37efb-85f9-4dbe-b354-f39d733fb6bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "778c57ee-2031-48e7-9308-4a963762c4fc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fed1a6bb-75db-4b72-8bbb-144f213232ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e95d3ba9-5e76-4172-a7a3-06416ae2936a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "666e6272-5b45-4a46-800a-228b5e9f7842",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "deea61b7-993a-43ae-ab21-562efa2f6bb8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a60bae55-375d-4bda-8301-9c3d0f58939b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c285acdc-ee67-4f3c-b7b2-659daa99408e"
            }
          }
        ]
      },
      {
        "id": "09c3117a-6df1-48a5-ae73-853ea4e1f655",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "abdda54e-5c9f-4718-afd2-d3ae87658bbc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e85b9f62-1d5f-40c9-9a46-2231a84f6bf9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d19c8aec-5839-4716-95a3-cf07b1597f8a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad8eb6b-7445-4a69-9f1b-155067df9dd6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f480edc8-3ef1-49b6-ab00-5cd87900bc1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da5e9e4-ac49-4fc6-8e09-a4d75e16e47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae3e38b7-0c9d-4914-92ea-2f57f2608cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70a3cbc-3683-4c64-aa70-27319a1405d4",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4146eebe-7232-4a37-a8ad-685713b75cd9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "da609864-6a32-4d9d-9467-0151c2e07f22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7f36dc-a35d-4dff-b242-10e52d989307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a9d1413-0a72-468f-b2b1-c3da53b68a3c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9a8b31b-b7b1-4d43-b34f-7f7070106920",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44bf1af0-c47f-47a3-b5e8-8a1a22d9feb9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b29562d-6120-4785-b5b3-a76171984b8f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8749e3fb-5784-48e3-908f-2fe0d15b01e2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bc49e967-3341-49f6-a6f7-766620dea590",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f793c598-6663-497a-b2ae-5af7196c9144"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "39fe8f6a-46d5-4db2-a84b-55f14849eacd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "570111e5-9c5e-4d96-b0e8-e3d3775fe17d"
            }
          }
        ]
      },
      {
        "id": "70d90ae0-38bb-467c-a9bf-075a6375b9d5",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d753def3-68d6-44c3-9112-2937a7f8ff7b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e4d1b46e-a69d-480f-a264-28e7756cbfd6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eb4d01f9-d216-4fb8-b477-f4aaa81830ac",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c99077a-4f45-4e3f-aa8c-972936094872",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "eaed83ba-29fd-4c1d-a048-7821ad452d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa2c30d-576e-4e53-ab6e-9eb5e77cd551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a65fc41-0568-440d-bfe0-9558e8cfcf32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee27ef94-198c-44a9-b290-7bd9dcf05f0d",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5320c56e-9707-4952-905f-a45db05d5139",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "32dcc1a6-7cf5-48cd-9834-de70251ebeb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4afc76b-195b-4d25-8e40-1cb24489a86d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1109cf85-f766-4db5-a646-039ffa236d32"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93462172-b1eb-4909-bb68-f1a3d02997b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20752710-606e-46e5-961e-d5ab79bc6fac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "502a398c-9491-44d6-a97b-f25624b6b6ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a27058a1-b67e-48db-a4ae-4df84c775e70"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "39f81f82-c5c5-4856-adcd-417117e0d1a4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "804b2039-8ead-4439-9341-5ca2a04e11cc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f8393df-d2d6-4f36-8535-bd3c8746b1cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "64966a61-6cd4-4def-bec5-56cbda09c079"
            }
          }
        ]
      },
      {
        "id": "5bec6764-b63d-41d0-a826-c90d2130dea6",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a930fa51-9315-4a77-bf69-06c0d32f51e0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0797a7dc-c2c3-49ff-8cea-30cebdb686b2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4c27de31-95fe-471e-96f4-de35442058f0",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6db4496c-a48d-42c6-a2e8-e62c8de9c92f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "764d625f-8572-4597-ae85-13c4d5f39602",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 500
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 384.0381679389313,
      "responseMin": 8,
      "responseMax": 2988,
      "responseSd": 446.4297027072002,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1672879171846,
      "completed": 1672879286680
    },
    "executions": [
      {
        "id": "8979b54d-694b-440c-8ea0-1f23b5a2e9bf",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "cb35d794-2994-4b67-807e-b33151b37d2b",
          "httpRequestId": "8b8437ab-79a6-4cf6-b9a8-b1d9262ee585"
        },
        "item": {
          "id": "8979b54d-694b-440c-8ea0-1f23b5a2e9bf",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d16ca8a0-7ccc-4876-b2f2-5ddee9ce8a88",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 0
        }
      },
      {
        "id": "2a3e1bba-1b9f-4c4b-aedf-6e10209507d9",
        "cursor": {
          "ref": "7f99ea49-534b-4fc2-9714-d1a01461aea7",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "65a4ab5e-2cce-4bdc-8568-18cbbf143549"
        },
        "item": {
          "id": "2a3e1bba-1b9f-4c4b-aedf-6e10209507d9",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "521f1910-693e-43c3-a597-31966d1b7836",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "7a7beef4-1334-4e6e-aece-76ebe85a5748",
        "cursor": {
          "ref": "4c6b24af-ecdb-4b0c-95b7-a08ebe9267d7",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f8ae8fc8-d861-4836-8a37-10f842f3409e"
        },
        "item": {
          "id": "7a7beef4-1334-4e6e-aece-76ebe85a5748",
          "name": "did_json"
        },
        "response": {
          "id": "eac8928b-f9a8-461c-aafe-af7c27469f78",
          "status": "OK",
          "code": 200,
          "responseTime": 243,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.service[0].type should be array",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.service[0].type should be array\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "ddc5e3a4-4347-4718-b69d-bd838f3333fc",
        "cursor": {
          "ref": "3eb28891-b975-4600-aa83-0d3d6618b700",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "289a205a-a8f7-4e39-9cb9-6e72f4c6d284"
        },
        "item": {
          "id": "ddc5e3a4-4347-4718-b69d-bd838f3333fc",
          "name": "did:invalid"
        },
        "response": {
          "id": "37368b90-2be9-48ec-afdc-fd983b04d93a",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "ddc5e3a4-4347-4718-b69d-bd838f3333fc",
        "cursor": {
          "ref": "3eb28891-b975-4600-aa83-0d3d6618b700",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "289a205a-a8f7-4e39-9cb9-6e72f4c6d284"
        },
        "item": {
          "id": "ddc5e3a4-4347-4718-b69d-bd838f3333fc",
          "name": "did:invalid"
        },
        "response": {
          "id": "37368b90-2be9-48ec-afdc-fd983b04d93a",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "ef083002-1539-4de9-ae99-8ee57cdb506b",
        "cursor": {
          "ref": "fb59fbbc-5824-4287-80ae-2bb587524dac",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "38383c9a-93c2-4206-b7dc-02853f22c711"
        },
        "item": {
          "id": "ef083002-1539-4de9-ae99-8ee57cdb506b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4d89b291-687d-48a1-8adb-2bedae576af0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 139,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "dca07aa6-4053-4709-906b-d85f75ddff32",
        "cursor": {
          "ref": "22a45bbb-2e54-4a9d-8063-bca44857cc5b",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6e45f222-1d67-4004-963a-b56898c7f959"
        },
        "item": {
          "id": "dca07aa6-4053-4709-906b-d85f75ddff32",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "34c60bcb-7fed-4b44-9bbd-74793f99349c",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "53926f99-d383-4618-8db5-e05afa72021e",
        "cursor": {
          "ref": "6a81a1b7-4dc1-4ec1-94b1-18016da0e89e",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "94cea0b5-59c9-4ab1-b2f7-769add07eb24"
        },
        "item": {
          "id": "53926f99-d383-4618-8db5-e05afa72021e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ee945920-7035-4110-87de-da5417d4eb25",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "6b0747e4-94ef-4c8c-8084-ab8bf1c7ecaf",
        "cursor": {
          "ref": "6f09f87b-75c0-4704-9411-1581f64f5295",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cfbe2ade-db4d-4727-a54f-f3658293cf4e"
        },
        "item": {
          "id": "6b0747e4-94ef-4c8c-8084-ab8bf1c7ecaf",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "7f598feb-41f5-416d-9137-9817b228d9a9",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6b0747e4-94ef-4c8c-8084-ab8bf1c7ecaf",
        "cursor": {
          "ref": "6f09f87b-75c0-4704-9411-1581f64f5295",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cfbe2ade-db4d-4727-a54f-f3658293cf4e"
        },
        "item": {
          "id": "6b0747e4-94ef-4c8c-8084-ab8bf1c7ecaf",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "7f598feb-41f5-416d-9137-9817b228d9a9",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6bb35ddb-c14a-4e8c-a17e-56fda93f9440",
        "cursor": {
          "ref": "2b418e28-3b1f-4341-8b7c-e0888cd22be1",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7a96e969-bfd7-42da-a315-6e9901860804"
        },
        "item": {
          "id": "6bb35ddb-c14a-4e8c-a17e-56fda93f9440",
          "name": "identifiers"
        },
        "response": {
          "id": "ffcc3d6a-fce0-4f1c-a496-04cee62a4d7e",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c74328-7f6d-4959-bc33-3e09c034cea0",
        "cursor": {
          "ref": "ead4e07b-3d93-4bd8-9e22-6ee63af121bc",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f728b184-e729-4e8c-ad8d-71b20f7e80ed"
        },
        "item": {
          "id": "01c74328-7f6d-4959-bc33-3e09c034cea0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c230f13a-0ded-45c5-b515-f5acb5a79775",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 286,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "01c74328-7f6d-4959-bc33-3e09c034cea0",
        "cursor": {
          "ref": "ead4e07b-3d93-4bd8-9e22-6ee63af121bc",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f728b184-e729-4e8c-ad8d-71b20f7e80ed"
        },
        "item": {
          "id": "01c74328-7f6d-4959-bc33-3e09c034cea0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c230f13a-0ded-45c5-b515-f5acb5a79775",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 286,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "941eab48-26a7-4c04-b6c3-d154c5e0e5a6",
        "cursor": {
          "ref": "aefc630c-a266-4995-a451-4a832731858d",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a7d704ef-b3db-48c2-8d49-2403425b9f8d"
        },
        "item": {
          "id": "941eab48-26a7-4c04-b6c3-d154c5e0e5a6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e2573c46-74e4-43ab-9ad3-d17271f9d0c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "0676bbda-faf0-4ad9-9194-a888c6eed719",
        "cursor": {
          "ref": "3e23b27a-6cba-4515-92b8-fbc10c6cda5e",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f09ccecd-0674-4707-8299-6018c9fe76b0"
        },
        "item": {
          "id": "0676bbda-faf0-4ad9-9194-a888c6eed719",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "d944bb3d-e224-46ef-aed2-071cc96fa734",
          "status": "Created",
          "code": 201,
          "responseTime": 88,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "cad2d42e-a2fe-4261-8841-2d6d49eb0b8e",
        "cursor": {
          "ref": "5776509a-4b85-4f95-a076-df9022758046",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f9aff68a-6687-4de3-8dd7-affa24856b40"
        },
        "item": {
          "id": "cad2d42e-a2fe-4261-8841-2d6d49eb0b8e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "47bdea7a-b471-40ef-8d51-7e9836ee578f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "796dfc22-5f79-4b12-81bd-df6d8960c477",
        "cursor": {
          "ref": "2cf9df5d-bbab-4a64-a976-b5dcf80650b6",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b0c96db8-c836-4968-967e-f7c781a05645"
        },
        "item": {
          "id": "796dfc22-5f79-4b12-81bd-df6d8960c477",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "6ba7bea3-dd32-4a35-8c30-f1e0fe96e67f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "16c01a15-a70e-4e01-9b11-2ebde10f9f3f",
        "cursor": {
          "ref": "d35dfa5f-fc57-4938-8603-f1faacdf9fc9",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1295e179-5e61-48ca-bb59-9493c2cf8c40"
        },
        "item": {
          "id": "16c01a15-a70e-4e01-9b11-2ebde10f9f3f",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a20a8ffa-0896-4423-8edb-5c449a8d71d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "464be695-f286-42a1-b9cb-b9bea1196fff",
        "cursor": {
          "ref": "adbaf3a7-ebf4-46ee-bcd8-37d214c446b5",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "bba4b938-1a1e-4513-80a2-ace0b5612304"
        },
        "item": {
          "id": "464be695-f286-42a1-b9cb-b9bea1196fff",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "fd5995e2-8b85-42e0-9e66-cd329ad77681",
          "status": "Created",
          "code": 201,
          "responseTime": 80,
          "responseSize": 666
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "40674cb6-d3ff-4057-9c4a-bc278f37c6bd",
        "cursor": {
          "ref": "55994d42-5700-44ad-87aa-190777cb64a7",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9f07eb22-ae20-45b2-915a-ef860881ccc8"
        },
        "item": {
          "id": "40674cb6-d3ff-4057-9c4a-bc278f37c6bd",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "1c37d2c3-825d-42f3-8c76-4d1152bf5850",
          "status": "Created",
          "code": 201,
          "responseTime": 81,
          "responseSize": 655
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "5ef06d3f-4fd5-4ee4-9802-dd7c14006661",
        "cursor": {
          "ref": "cdb598d0-a615-4c02-a10f-cc0a4064a856",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f7279a3a-3e0b-45c5-b02e-89cbf5aa8dd1"
        },
        "item": {
          "id": "5ef06d3f-4fd5-4ee4-9802-dd7c14006661",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "659c40d9-44b9-4643-af0b-2529b09cbde5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 74,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "41411888-4c21-4a7a-8247-c21080923b2b",
        "cursor": {
          "ref": "7a3ae9c8-7447-49cb-a7d5-5f1108b9f86d",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5b2ebfc4-23bb-4f48-98a2-edc55468157c"
        },
        "item": {
          "id": "41411888-4c21-4a7a-8247-c21080923b2b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "86486fd8-41b3-47f5-b2eb-19ffe478ac15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "7ed0ee4a-c1c4-4bfd-bd3d-a6af538968d0",
        "cursor": {
          "ref": "a0ff20eb-511a-4170-a310-023f879ee795",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8e709643-5df8-4855-9d74-9b8779be9ef6"
        },
        "item": {
          "id": "7ed0ee4a-c1c4-4bfd-bd3d-a6af538968d0",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "3c2a0815-934f-44d9-b812-3e53a03f9519",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "96d1be80-caa6-4e8e-813a-840e6c56b1dc",
        "cursor": {
          "ref": "a72a8d80-e093-48cd-8ea9-9db67d67fa95",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "36666403-cf01-4df2-b4df-81a5830a7a49"
        },
        "item": {
          "id": "96d1be80-caa6-4e8e-813a-840e6c56b1dc",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0f875da6-85bc-447e-a569-374ffae162e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 74,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "a1807b69-b4bd-4a36-9d54-fc155cabee8d",
        "cursor": {
          "ref": "b7beeccc-b137-4c90-b014-9c199b84bfb5",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c70d7abe-56fa-466d-b337-9c25d54586ea"
        },
        "item": {
          "id": "a1807b69-b4bd-4a36-9d54-fc155cabee8d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d8892ce5-029e-4df8-b4e2-6e0905113ee6",
          "status": "Created",
          "code": 201,
          "responseTime": 81,
          "responseSize": 703
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "11c17c2f-babf-4da5-9761-2f701f6779de",
        "cursor": {
          "ref": "8e9830d3-3440-49e5-b9ae-4f92b9694ae2",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f0c14a7a-f4d6-4071-a3dc-7d74841fb6d1"
        },
        "item": {
          "id": "11c17c2f-babf-4da5-9761-2f701f6779de",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "61f06acd-c76e-41ba-9115-122695249b36",
          "status": "Created",
          "code": 201,
          "responseTime": 1457,
          "responseSize": 639
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "f4474655-023f-4f82-a2b8-2698cd086657",
        "cursor": {
          "ref": "e47dfefe-00eb-4ff7-8fa2-3639928d38a1",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "13af3927-5db3-43a0-8d92-31f858b2051b"
        },
        "item": {
          "id": "f4474655-023f-4f82-a2b8-2698cd086657",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "466e0a43-341d-454d-a38a-1eac432047e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 300,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "5595524c-e330-422a-9fff-b6894f22e65d",
        "cursor": {
          "ref": "0ce94e93-cdcc-4d8f-8b50-a86760365631",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ed41d05d-8010-4dc1-ab4f-ee897b901999"
        },
        "item": {
          "id": "5595524c-e330-422a-9fff-b6894f22e65d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6d2936db-2b87-47ee-a67b-5c5e4e29a055",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 302,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "a331fff8-0495-44b3-b89e-86d97c718b30",
        "cursor": {
          "ref": "a48998f6-6e00-4abc-9d51-d24f4e7bc958",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "bb9e3bfe-43c2-4b84-b28e-949d1440c0cc"
        },
        "item": {
          "id": "a331fff8-0495-44b3-b89e-86d97c718b30",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6b52bb87-abc1-400f-b697-3d836e83bdd2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 295,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "555bb85a-da3b-4516-b236-47219b597942",
        "cursor": {
          "ref": "f12ec20a-d835-4f82-8fd5-4141ed95135b",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8d4bd7d2-9d1a-4935-b185-9d0f3befa93f"
        },
        "item": {
          "id": "555bb85a-da3b-4516-b236-47219b597942",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "4744b6be-6f20-4af6-bc5d-d4db5a67ea8f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 284,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "bef312ab-df18-4124-bf60-8f716970bca5",
        "cursor": {
          "ref": "7e85eb4a-5550-4b0e-8854-dd67004a1a77",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c244a865-29c2-48a8-b942-15023b7df56b"
        },
        "item": {
          "id": "bef312ab-df18-4124-bf60-8f716970bca5",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e716f235-2e5b-420a-a6be-7f2aa6b4746e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 283,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "aea65a7b-b9aa-400c-beed-f2c5926ec08e",
        "cursor": {
          "ref": "5e3f9fe3-cf59-48dd-8656-0c003a832228",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4c4490ba-d121-4a3b-b11e-1a88024ff522"
        },
        "item": {
          "id": "aea65a7b-b9aa-400c-beed-f2c5926ec08e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c74c330c-a716-4a60-8d37-763491b0dddd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 518,
          "responseSize": 44
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "924da3da-6866-416a-89e0-fe1a9521b78a",
        "cursor": {
          "ref": "e1311036-b162-4b5c-af3e-5663b6a427f8",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c9efee12-c11e-4f01-a03f-fb7520e82f18"
        },
        "item": {
          "id": "924da3da-6866-416a-89e0-fe1a9521b78a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c7937515-8097-4ae7-8c06-fccd46e8295c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 275,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "07db715f-9699-4e87-9e1b-3390efd44592",
        "cursor": {
          "ref": "4f1f9412-553f-4f09-b105-5db98da3d868",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2d78e813-027b-4591-b9e8-36337ccb6138"
        },
        "item": {
          "id": "07db715f-9699-4e87-9e1b-3390efd44592",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "60c9772a-3522-4023-a37a-89eb50c5d7ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 277,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "8a87acd2-686e-4b58-9d84-3fc49fada30b",
        "cursor": {
          "ref": "6cfb514c-07a7-4701-b6ea-7fb20d609eb6",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "05b9a791-9684-4d9a-ad14-7943ea90234e"
        },
        "item": {
          "id": "8a87acd2-686e-4b58-9d84-3fc49fada30b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ddeb2ef6-4d1c-48af-8c26-35e7b0b0c73d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 279,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "c6d6ea67-98fc-47c1-9b3a-cd8383ca515f",
        "cursor": {
          "ref": "0a9e43f4-9f97-4887-8577-6a0d679b532c",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "01e71479-5900-4d33-be62-16b71f42657f"
        },
        "item": {
          "id": "c6d6ea67-98fc-47c1-9b3a-cd8383ca515f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d4d74b9e-a54a-430a-8c32-c66809c5a970",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 289,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "7318b8d2-65dc-4e65-b408-268184ea07b9",
        "cursor": {
          "ref": "a7e4129a-3452-4e50-aab6-d5801c180d0d",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "abc33928-4729-4ea7-b67d-cfc62bf8f263"
        },
        "item": {
          "id": "7318b8d2-65dc-4e65-b408-268184ea07b9",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b86a925c-e38c-4023-acfa-d028155a8010",
          "status": "Created",
          "code": 201,
          "responseTime": 1007,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "16286195-7564-4f28-b013-b588f6626dcf",
        "cursor": {
          "ref": "90ea4555-d13b-4567-be5c-7f864d7974a7",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b84c7433-929c-4837-abc6-e102d76a4538"
        },
        "item": {
          "id": "16286195-7564-4f28-b013-b588f6626dcf",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ad957c13-dfcf-4f03-944c-04e9aed96b7c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 503,
          "responseSize": 59
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "ef2382b8-1d46-4362-bb80-274cc76c365e",
        "cursor": {
          "ref": "a4319345-1903-46ed-b02a-65140188b9a7",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "65ea60b8-28bd-455b-8304-1828c175b7c5"
        },
        "item": {
          "id": "ef2382b8-1d46-4362-bb80-274cc76c365e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "c108d3bd-b144-4c09-a1e8-96c6703e0588",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 298,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "9df4e14e-5db4-4a72-83e6-9fcf497bfcee",
        "cursor": {
          "ref": "8986d739-56c5-40d7-80c4-4e5b9f728f43",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "94f7a6c1-ba7a-4210-8554-fce5f6e56628"
        },
        "item": {
          "id": "9df4e14e-5db4-4a72-83e6-9fcf497bfcee",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "4feb5859-8b97-4522-9003-a54fac4bf3af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 298,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "b6e96a79-df79-463c-8d13-4895fe9457ee",
        "cursor": {
          "ref": "312d9d74-7f61-491e-8557-6d80492a2583",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7f071f81-9e1b-4de2-9a71-077d58a3225a"
        },
        "item": {
          "id": "b6e96a79-df79-463c-8d13-4895fe9457ee",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4f4318ac-35c4-4154-b770-1d9039cb4430",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 337,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "fd13a405-3a0d-448f-ba2b-9152ce385f2a",
        "cursor": {
          "ref": "9c5ba710-6993-4b9f-9a07-4650c66f955c",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ad5a0b59-b86b-4aac-bcbb-7b17d12c0fab"
        },
        "item": {
          "id": "fd13a405-3a0d-448f-ba2b-9152ce385f2a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f2b99e05-8a3f-4f59-a79b-5a4fdd6427fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 288,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "ad5d04cd-e15d-4259-a093-c5565decff08",
        "cursor": {
          "ref": "895d0ce1-75e9-46f3-93f0-9bda8973506a",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6258f5e4-2d67-4905-b57c-eb343ec7a85d"
        },
        "item": {
          "id": "ad5d04cd-e15d-4259-a093-c5565decff08",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "6169f4ae-0c3c-405a-acbc-e321f496ff61",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 273,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "0d6ec4d8-7e0e-4e71-81ca-6255bb4a71c2",
        "cursor": {
          "ref": "f073b1be-7787-4068-aa50-3e24b901a6bc",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8cc70ce0-c2e5-4fb7-921a-3728945e9522"
        },
        "item": {
          "id": "0d6ec4d8-7e0e-4e71-81ca-6255bb4a71c2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "9df586a7-3518-4c9e-a643-194a3422a6e1",
          "status": "Created",
          "code": 201,
          "responseTime": 947,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "488db828-6210-4974-9862-eeaf5eaae97f",
        "cursor": {
          "ref": "c61c10b9-1d92-4063-852a-5d211e0a2ed4",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2baafcf6-9d95-4a5c-b643-9ba24af1cf9b"
        },
        "item": {
          "id": "488db828-6210-4974-9862-eeaf5eaae97f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "55cb17c7-46a7-469d-a3fc-15762ae577d4",
          "status": "Created",
          "code": 201,
          "responseTime": 955,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "5538d640-c10f-456a-98d9-704d10697a41",
        "cursor": {
          "ref": "e6ca6fc5-5215-46c6-9411-e4b9bcc46861",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a375fe81-c5c2-402c-9f65-197fb06b0d80"
        },
        "item": {
          "id": "5538d640-c10f-456a-98d9-704d10697a41",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0949c0d3-73f0-4940-9724-6d3eb2414ec1",
          "status": "Created",
          "code": 201,
          "responseTime": 984,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "a565c69a-e346-44d4-b7a6-32426ca617d5",
        "cursor": {
          "ref": "24d5afba-baa7-41c4-859f-d59fb19ef738",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7b6048ff-6231-46ea-bd18-82099189174c"
        },
        "item": {
          "id": "a565c69a-e346-44d4-b7a6-32426ca617d5",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d29a9040-6e2b-4ae0-83b9-7931763f8006",
          "status": "Created",
          "code": 201,
          "responseTime": 2009,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "d8a55e0e-115e-49f6-8be9-d56ce9f5f271",
        "cursor": {
          "ref": "a07b8ec1-5fd4-4a75-a220-6efcb7b98444",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b5e9748a-a07f-4d94-8997-9a9fc8596db6"
        },
        "item": {
          "id": "d8a55e0e-115e-49f6-8be9-d56ce9f5f271",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d83b4d64-bf9e-40dd-954a-3f339824177d",
          "status": "Created",
          "code": 201,
          "responseTime": 1992,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a223cea6-9791-4bee-8c45-a5b86ce1d3f2",
        "cursor": {
          "ref": "326e1a90-9f7b-4894-843d-22030ea29029",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "86fba21a-3db3-45be-b860-0a716fde30e5"
        },
        "item": {
          "id": "a223cea6-9791-4bee-8c45-a5b86ce1d3f2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4a410f18-9fb4-4b8e-9289-4702160abdfa",
          "status": "Created",
          "code": 201,
          "responseTime": 958,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "6614c1d0-9f63-4eaa-8fa4-09661772db21",
        "cursor": {
          "ref": "7e0806b6-14f1-4136-b253-b4587f55e837",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3392c01c-40d6-4638-89c1-735a35ae139a"
        },
        "item": {
          "id": "6614c1d0-9f63-4eaa-8fa4-09661772db21",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "89ffac5e-027d-4e39-a416-542057793443",
          "status": "Created",
          "code": 201,
          "responseTime": 2988,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b8f39db0-8ee7-4c12-a03f-a92e3609e804",
        "cursor": {
          "ref": "4a5ca518-c344-4a67-bd7d-073bb188ef41",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "af7d7ac1-2d46-4749-8f7e-eab0bc82158f"
        },
        "item": {
          "id": "b8f39db0-8ee7-4c12-a03f-a92e3609e804",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "3a8a3caa-5220-477d-97b1-cfce43adc6f7",
          "status": "Created",
          "code": 201,
          "responseTime": 934,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "4e49c395-be55-4f0b-b0b4-38d2a5f1eca2",
        "cursor": {
          "ref": "4f2219f5-867c-4ccc-93c6-200fe000f254",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e2f9ba27-2929-4f53-bb5a-dd08bcfae6f1"
        },
        "item": {
          "id": "4e49c395-be55-4f0b-b0b4-38d2a5f1eca2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1c8ece2c-5343-4eae-891e-0aa351fd4213",
          "status": "Created",
          "code": 201,
          "responseTime": 977,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "70b99e1d-8273-46f6-9449-27865b746d19",
        "cursor": {
          "ref": "7ee2463d-9bff-490c-a525-5b54bf7869d0",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "57d9a48d-0c43-473b-b985-1a0a5eb9954e"
        },
        "item": {
          "id": "70b99e1d-8273-46f6-9449-27865b746d19",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c1dbc42e-4b12-4dc7-a6ca-e5dab3741515",
          "status": "Created",
          "code": 201,
          "responseTime": 985,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "1be58460-a05d-4f5f-8257-8e880429a7a6",
        "cursor": {
          "ref": "1c4ff9a5-0630-4856-b4d3-b8557c1f9745",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "26d03e05-8692-4965-b53b-cc91b9f6f8cf"
        },
        "item": {
          "id": "1be58460-a05d-4f5f-8257-8e880429a7a6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f8d456b6-977e-48d6-91ee-0d7968e6d02b",
          "status": "Created",
          "code": 201,
          "responseTime": 945,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e6de0eb9-ebcf-4e30-96b0-4b50f1e2117c",
        "cursor": {
          "ref": "b6f12712-0cad-4776-9776-3384ed2ab411",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "27fef6b4-d6e8-476f-8869-9707587a43ee"
        },
        "item": {
          "id": "e6de0eb9-ebcf-4e30-96b0-4b50f1e2117c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "0d5d91eb-121f-4b5c-8d0d-1f74bf1bccf2",
          "status": "Created",
          "code": 201,
          "responseTime": 958,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "1194ceef-5ccd-4061-b8be-eef200ad32be",
        "cursor": {
          "ref": "d3ac66b5-63ec-42b4-a726-742b50031fc8",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c26ed4e1-9386-462f-8d6c-c2781b5f3e7e"
        },
        "item": {
          "id": "1194ceef-5ccd-4061-b8be-eef200ad32be",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d0901581-e425-40f5-ab4b-d8361b40a46b",
          "status": "Created",
          "code": 201,
          "responseTime": 952,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "bae84478-35ef-46c7-ad0a-7eeaf76a46be",
        "cursor": {
          "ref": "52cdbe97-d0e2-4d87-85a3-94431cb38b3a",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "638b8254-5275-4a41-a609-62f7f26f943a"
        },
        "item": {
          "id": "bae84478-35ef-46c7-ad0a-7eeaf76a46be",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "2fb2fda6-ba1d-4f57-a940-16e823a0d0b8",
          "status": "Created",
          "code": 201,
          "responseTime": 953,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "8ba6e29e-e087-4e59-844c-b89e852ffffe",
        "cursor": {
          "ref": "d45fe97c-64b4-4188-bf5e-e2edc66406fa",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "02b0bcd3-7a57-4165-90a1-b1f04d0620ea"
        },
        "item": {
          "id": "8ba6e29e-e087-4e59-844c-b89e852ffffe",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "446f26ab-43ab-4f55-b866-bcb23423e2ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 525,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "b623df85-889d-4dc3-bb44-09673588026e",
        "cursor": {
          "ref": "41353395-7792-41c5-aa30-bbc26b811714",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8ae59f56-a0dd-424b-94a2-62207198203e"
        },
        "item": {
          "id": "b623df85-889d-4dc3-bb44-09673588026e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c421a6fd-d3f2-4dc4-9373-5c87f5db4b53",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 514,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "4d2a4693-c535-4f5b-ad6e-48e0f1d26e87",
        "cursor": {
          "ref": "bbe559e3-c8bb-49be-acbd-5a3b3dd6777b",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4efbd0eb-0e30-4b8e-a86d-aa8f1cbc3c7b"
        },
        "item": {
          "id": "4d2a4693-c535-4f5b-ad6e-48e0f1d26e87",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7773b19c-9d56-469a-ab6f-cb4b72188947",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 531,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "a6360426-6273-47e6-8341-072a73c6dd88",
        "cursor": {
          "ref": "531d9042-eaef-498a-a24f-4bb999ef47a3",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "fb35d9a4-10cb-4cd9-aeb0-e9fa494703be"
        },
        "item": {
          "id": "a6360426-6273-47e6-8341-072a73c6dd88",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ca400eff-582e-4945-a381-207a89aa3502",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 544,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "5073ab9b-39be-4fe1-ab57-78eb8f36ef97",
        "cursor": {
          "ref": "f0498cc2-6d00-471a-b27d-3dc1fa4a314a",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "efd28194-a99f-4de0-b412-0b7d695df0d4"
        },
        "item": {
          "id": "5073ab9b-39be-4fe1-ab57-78eb8f36ef97",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8b42607f-a87a-480e-807d-fdf7f7f1ffe5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 500,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "69340204-db99-4df6-a370-06559cb7441a",
        "cursor": {
          "ref": "c87e7ef9-1535-4b75-a1ea-a4691b08f253",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "df2512cd-b417-45a9-a8df-ba13ff57773f"
        },
        "item": {
          "id": "69340204-db99-4df6-a370-06559cb7441a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c7058b14-c95a-43cf-a717-4f657f1f0357",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 630,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "ffe520aa-ee82-4fe3-8137-7fcdfaf983f5",
        "cursor": {
          "ref": "585054c2-3ffa-4e1c-959e-7724cf28362c",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "71401f30-6936-4845-b0c1-66a450814b3a"
        },
        "item": {
          "id": "ffe520aa-ee82-4fe3-8137-7fcdfaf983f5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b0b56ed2-f2f9-4ae5-893b-816aa1e18a75",
          "status": "Created",
          "code": 201,
          "responseTime": 1031,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "c109c388-98d3-4e81-b5c4-c760f0d1b02c",
        "cursor": {
          "ref": "12bebea8-5e84-41e6-9905-1a832aab8b1a",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "e39f1737-7ca5-440d-9be8-f4e68e394e30"
        },
        "item": {
          "id": "c109c388-98d3-4e81-b5c4-c760f0d1b02c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f7b2dcc5-f379-4777-a485-da4b91f0fa83",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 516,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "cb49d0b2-573d-4261-85a2-ec9bd4791e93",
        "cursor": {
          "ref": "c6baf27e-8c61-4fbd-ae14-88b02e208ae4",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "780dc90a-88a6-49d3-a386-054951dcd0a1"
        },
        "item": {
          "id": "cb49d0b2-573d-4261-85a2-ec9bd4791e93",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "0287daa0-a1c7-4bf5-9ab9-5422741f8762",
          "status": "Created",
          "code": 201,
          "responseTime": 948,
          "responseSize": 709
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "c2edb488-fa89-4f59-9ab2-3b3eb5292fde",
        "cursor": {
          "ref": "f949eb7b-ba65-496e-94f8-e1672de45218",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6a2fd2b8-9e8a-436e-856f-51ff63b7cbbb"
        },
        "item": {
          "id": "c2edb488-fa89-4f59-9ab2-3b3eb5292fde",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8265210a-a3e5-47b0-a379-8f4c8fff421d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 482,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "2e48e4f7-ec2a-4ab8-bddf-f7022dcaa4dc",
        "cursor": {
          "ref": "546521cf-907d-4efd-b445-47ad22615913",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "47d3ad14-6211-4774-af8a-ac2d273a6046"
        },
        "item": {
          "id": "2e48e4f7-ec2a-4ab8-bddf-f7022dcaa4dc",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "09c0361d-0d59-4594-8c3a-3c4f8443afe0",
          "status": "Created",
          "code": 201,
          "responseTime": 954,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "08008230-be6b-4b1d-9e73-416cc741f032",
        "cursor": {
          "ref": "56adece9-3cd9-484a-8879-adf11ea4550e",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "29648844-1392-427e-9d3d-9e74e1caf037"
        },
        "item": {
          "id": "08008230-be6b-4b1d-9e73-416cc741f032",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "2c0eca06-ccc8-44e3-8741-7a3d234583d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 527,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "de683053-b340-4205-a835-a77a9929c5d2",
        "cursor": {
          "ref": "974829fd-0441-4ad1-9e4c-46d52745c14c",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "610fc6e0-bafe-4bab-b807-aa24b68d1315"
        },
        "item": {
          "id": "de683053-b340-4205-a835-a77a9929c5d2",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "0a37797e-3efe-4625-b6af-c14e00ffc450",
          "status": "Created",
          "code": 201,
          "responseTime": 966,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "d8c3f859-37fc-4ff2-8aa5-e95342d1549f",
        "cursor": {
          "ref": "c4b258fe-f9c6-4e9d-8ba2-4d3d885a4e6e",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "164c16c5-1050-4b33-a451-1426cbe447f0"
        },
        "item": {
          "id": "d8c3f859-37fc-4ff2-8aa5-e95342d1549f",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e8569365-ef32-4794-bd25-710a3c8d27f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 302,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "1588e69d-2aeb-405c-8c06-8e520eca3e01",
        "cursor": {
          "ref": "6a586930-a007-4d70-83c2-70f3974f6826",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "8d59aead-c6d9-4900-9f08-0c8053cd65b1"
        },
        "item": {
          "id": "1588e69d-2aeb-405c-8c06-8e520eca3e01",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "24693e5f-2e12-49d3-8967-1730f185dba7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 297,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "a50ec16a-0869-4179-bd94-9d124ca9a9b9",
        "cursor": {
          "ref": "b3995890-2feb-4100-bafd-af0e7df94db3",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f3a3d744-fae0-44e6-a82c-8002a1abe515"
        },
        "item": {
          "id": "a50ec16a-0869-4179-bd94-9d124ca9a9b9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4f10f7a2-c708-4893-8c44-bf71e63af25e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 287,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "b39805ff-6fca-4142-8d3b-bb631e37d305",
        "cursor": {
          "ref": "09ad3691-bb17-4c2c-8690-9f552361d50d",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "41c5621c-9c55-4c5f-9199-5ff33562f468"
        },
        "item": {
          "id": "b39805ff-6fca-4142-8d3b-bb631e37d305",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8aa73ead-a54a-4f24-9573-f59db72c2d68",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 300,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "4109e596-131f-40e1-b4ff-9e8e303fa4b3",
        "cursor": {
          "ref": "f48aed37-fe51-4edc-bfd0-e276be7d2e81",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b05461ee-9b06-4de5-8a8c-5dc5fd227f91"
        },
        "item": {
          "id": "4109e596-131f-40e1-b4ff-9e8e303fa4b3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f93c2f10-fad0-45e2-a79c-85b9a51e3ef4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 275,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "c0aed1a9-a0a9-4298-94f4-5efb0ecf0954",
        "cursor": {
          "ref": "16be60bf-1cdc-4ab5-9807-42e3705055f1",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "98574fbf-10ec-41ed-8ed2-5624ff6920bf"
        },
        "item": {
          "id": "c0aed1a9-a0a9-4298-94f4-5efb0ecf0954",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c258ee49-17b1-488c-ae60-5b7a371d7bfa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "13485b4e-85f3-4ca9-bfe0-6f0a97e12e72",
        "cursor": {
          "ref": "ac496d4d-777b-436a-8d95-0921e202daac",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "78c0eb78-cd99-4611-8b0d-55302423932d"
        },
        "item": {
          "id": "13485b4e-85f3-4ca9-bfe0-6f0a97e12e72",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "542b883d-b325-4c7d-97f6-992345733ea1",
          "status": "Created",
          "code": 201,
          "responseTime": 932,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "e9aabb27-7eb4-4121-b72b-befb3a026c73",
        "cursor": {
          "ref": "88bce841-b401-4f42-839b-b083b2187f7b",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "90cad08e-7660-4e92-8e38-c182b233f823"
        },
        "item": {
          "id": "e9aabb27-7eb4-4121-b72b-befb3a026c73",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f76e6211-354d-4d46-9114-c550733a2599",
          "status": "Created",
          "code": 201,
          "responseTime": 954,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "f2b05112-6641-492b-b0d3-42fff7b80a2b",
        "cursor": {
          "ref": "9bdcf695-8cb0-46d9-ad57-9be550f31405",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "1f2ccc21-ac19-45cf-8d55-4e45dc762b6c"
        },
        "item": {
          "id": "f2b05112-6641-492b-b0d3-42fff7b80a2b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "bce5efe0-137a-45dc-a1ce-c9a1f7c278d0",
          "status": "Created",
          "code": 201,
          "responseTime": 960,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "6de15ac2-6fc8-4665-9f28-3d5929a042f6",
        "cursor": {
          "ref": "155586a8-ffa3-4644-9e5a-b84dfc4b9724",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "013233ef-85cb-4374-9767-1a764fae57a4"
        },
        "item": {
          "id": "6de15ac2-6fc8-4665-9f28-3d5929a042f6",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6419dda2-5d18-4b6f-ba23-b37fdf19beae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "e635411f-2d3b-4c88-8d58-541ea44d82f0",
        "cursor": {
          "ref": "988edf8f-0e19-4874-8fcd-dfeeecf233c1",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "47962de8-4cf5-48ee-8560-2caf9808b3a8"
        },
        "item": {
          "id": "e635411f-2d3b-4c88-8d58-541ea44d82f0",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "10af4d33-fb6a-4ce5-8127-915f16e4eea3",
          "status": "Created",
          "code": 201,
          "responseTime": 1060,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "25cc1e44-5aab-433c-9722-066398adf377",
        "cursor": {
          "ref": "7dce87bf-b638-420d-8971-9f7af9d29acb",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "497ecbff-4631-4acd-9dac-2219478e26bc"
        },
        "item": {
          "id": "25cc1e44-5aab-433c-9722-066398adf377",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6aa37a56-5660-484d-9848-7124465d88aa",
          "status": "Created",
          "code": 201,
          "responseTime": 942,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "aaea0e7a-9e9e-4f38-a726-78ea02f550d6",
        "cursor": {
          "ref": "df8b691a-2ba7-4452-a871-2d081bf33ff7",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8bc36fad-c6a7-49a6-8c3a-28a96f57d454"
        },
        "item": {
          "id": "aaea0e7a-9e9e-4f38-a726-78ea02f550d6",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0cb5b5ac-8d08-464f-b6ad-c4111945b371",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 74,
          "responseSize": 58
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "2a17c041-70db-4471-93b6-06376bed513b",
        "cursor": {
          "ref": "a61bcea0-313c-4d88-96bb-e50503c34e32",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3f58854c-7b2a-402e-abda-b76c39dc31e3"
        },
        "item": {
          "id": "2a17c041-70db-4471-93b6-06376bed513b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "674e7143-ea55-41b0-9f7a-8b47935bc8b5",
          "status": "Created",
          "code": 201,
          "responseTime": 953,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "75fa7704-de4c-4d01-8054-c5ffd3d5aa72",
        "cursor": {
          "ref": "7bf54fb6-a5b5-4e13-8bf1-908afd608eda",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "36de50d2-bf2c-49f8-b40d-98fe7d185a0a"
        },
        "item": {
          "id": "75fa7704-de4c-4d01-8054-c5ffd3d5aa72",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e940061a-ab7e-4673-b13a-89e16cdb38da",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 40
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "7005bd71-40e1-4796-ad9c-9f75c7d81b8c",
        "cursor": {
          "ref": "14eb7266-42cf-49be-827b-4c312954d427",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ac47c99e-d6b5-4c7e-b1e2-f84ae2a9195c"
        },
        "item": {
          "id": "7005bd71-40e1-4796-ad9c-9f75c7d81b8c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b3a4df93-d0ce-4b4c-a2c5-c658bd27b16c",
          "status": "Created",
          "code": 201,
          "responseTime": 996,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "437e2535-59cf-4f00-80c2-515453f7bf3b",
        "cursor": {
          "ref": "039a2666-3cd2-41da-921b-d9699a157cc8",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "62d20f1f-8807-4a52-8b54-b13c2c278676"
        },
        "item": {
          "id": "437e2535-59cf-4f00-80c2-515453f7bf3b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "27d236b5-0887-4967-9f9d-673f7f114668",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "ad53f344-ec3e-4c9f-97c5-52bd4a958fd9",
        "cursor": {
          "ref": "b4912c06-e91a-40d2-888e-241dbb06ccc0",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b975e697-10f4-4238-ad45-51a243b4b6ff"
        },
        "item": {
          "id": "ad53f344-ec3e-4c9f-97c5-52bd4a958fd9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1d002067-4056-490d-a476-6349a3e7258b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "15fbb7f3-983c-4f1a-9d8a-613b9821e04c",
        "cursor": {
          "ref": "69245a75-467d-41f7-89ea-9ede4aa8c10b",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "701299ab-0915-4a7c-9d1e-d57ff2ab5903"
        },
        "item": {
          "id": "15fbb7f3-983c-4f1a-9d8a-613b9821e04c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "7eb58ef6-8364-47f0-9297-cc3b79d3b949",
          "status": "Created",
          "code": 201,
          "responseTime": 970,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "fc5e0d6a-4086-457b-93ee-ea8e50556186",
        "cursor": {
          "ref": "e735e4c3-2c41-4f61-9341-e48712c1e890",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "736becd2-7d6e-4efa-b78f-1c3a1487e86b"
        },
        "item": {
          "id": "fc5e0d6a-4086-457b-93ee-ea8e50556186",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "3f099c14-4dca-4703-a869-b88e7f5e6780",
          "status": "Created",
          "code": 201,
          "responseTime": 1009,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "6f7e92ee-6cc0-46de-8984-7b584f1ef283",
        "cursor": {
          "ref": "ba6b29cb-7a4c-4215-b599-891da689927b",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6f6a655f-b436-4bc0-9e97-6d95082fc285"
        },
        "item": {
          "id": "6f7e92ee-6cc0-46de-8984-7b584f1ef283",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "59d5408c-2a99-4e8c-bb1f-6178d4f74b25",
          "status": "Created",
          "code": 201,
          "responseTime": 994,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "f5f1ea7e-8dce-4def-8945-3825cc84b223",
        "cursor": {
          "ref": "e148cd21-bf37-495b-90e0-0f9cb90c267d",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "48bb9fb2-4645-4631-a5dd-22a09472540c"
        },
        "item": {
          "id": "f5f1ea7e-8dce-4def-8945-3825cc84b223",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b5a31c29-2d87-4afd-ab01-63ca7c6c497a",
          "status": "Created",
          "code": 201,
          "responseTime": 966,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "42d417fe-b6e7-4057-bfb7-734826a64d8f",
        "cursor": {
          "ref": "07144079-d217-4d52-9032-bc074c58e374",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "8f4d2f1d-9337-4ef2-8b61-278316093d86"
        },
        "item": {
          "id": "42d417fe-b6e7-4057-bfb7-734826a64d8f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f88df8d2-d9c6-4e98-8ae7-f7bb78354233",
          "status": "Created",
          "code": 201,
          "responseTime": 964,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "b719ec0f-1047-4db1-b5c9-82a3d629239a",
        "cursor": {
          "ref": "08174660-8d95-4b67-82ea-61ab5a23cd08",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "27311aa8-62e9-4c36-b484-4e3ed55fe0dc"
        },
        "item": {
          "id": "b719ec0f-1047-4db1-b5c9-82a3d629239a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e2c71289-2707-4da0-a957-7a37eb50406c",
          "status": "Created",
          "code": 201,
          "responseTime": 1031,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "39482cef-cb81-436f-bbd1-300370107308",
        "cursor": {
          "ref": "b61d6f69-38a4-4ce5-bfc1-ccba97bddd34",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "412600ed-188f-4ebf-bf38-70a2dfad380f"
        },
        "item": {
          "id": "39482cef-cb81-436f-bbd1-300370107308",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "19801611-f037-45d9-922b-c1aa8ffb9ca3",
          "status": "Created",
          "code": 201,
          "responseTime": 959,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "08fd9daa-fb90-4867-8569-bd2c52608ffd",
        "cursor": {
          "ref": "9ed89a96-1853-4b22-a088-9911f00b7bc9",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0708c774-9762-4907-9da0-7b27ab66a1ae"
        },
        "item": {
          "id": "08fd9daa-fb90-4867-8569-bd2c52608ffd",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "90bfb116-4282-4296-992e-251ff9235778",
          "status": "Created",
          "code": 201,
          "responseTime": 956,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "e1858fc8-1766-4910-a652-0698817cb2e1",
        "cursor": {
          "ref": "eb342390-ea6b-444e-91f0-c2146efc7bd2",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7c4f4ab3-68a9-447d-a9f6-274388d744fa"
        },
        "item": {
          "id": "e1858fc8-1766-4910-a652-0698817cb2e1",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e81f7a24-6de2-4884-978a-17acc131edb7",
          "status": "Created",
          "code": 201,
          "responseTime": 932,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "3351abd9-470a-4ceb-aa52-82a30aa089dc",
        "cursor": {
          "ref": "e0a8d153-d0bf-499c-9b2e-39e31a7b2b21",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "5d314c7e-5cbe-4e24-99a3-dfb52fc06da4"
        },
        "item": {
          "id": "3351abd9-470a-4ceb-aa52-82a30aa089dc",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "fc9e93ef-364f-4d3f-9f3c-dee47f9ffb05",
          "status": "Created",
          "code": 201,
          "responseTime": 953,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "a14bb87d-f31c-48b1-9023-5a1a5dae1ac7",
        "cursor": {
          "ref": "32fbd9bd-bdeb-4395-bc94-91027b94b3a3",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6a1d294d-2fea-45e7-a313-6a291512233d"
        },
        "item": {
          "id": "a14bb87d-f31c-48b1-9023-5a1a5dae1ac7",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "564e3834-f6db-4e3b-b50e-52bef342f641",
          "status": "Created",
          "code": 201,
          "responseTime": 1082,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "0e34f38f-6e26-4e60-bceb-34e8c63d91c6",
        "cursor": {
          "ref": "95c369c0-403a-4f0d-a5ad-4b4f8eee92b2",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "38e68b6b-a7a8-4acd-956a-8f7332897f7e"
        },
        "item": {
          "id": "0e34f38f-6e26-4e60-bceb-34e8c63d91c6",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "50caef73-7649-4787-9567-cb53bf480849",
          "status": "Created",
          "code": 201,
          "responseTime": 1077,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "5dedd3dc-2466-4a4e-81ce-484de8721371",
        "cursor": {
          "ref": "5335c01f-b0d8-428e-bea9-ce7b2ebd897c",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f6530e41-322e-42bf-a9be-8847b0486cfc"
        },
        "item": {
          "id": "5dedd3dc-2466-4a4e-81ce-484de8721371",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8c02414f-9adc-4cd8-b796-a9ae64231037",
          "status": "Created",
          "code": 201,
          "responseTime": 938,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "4134574e-c43e-49a2-a461-4f826bf59e2a",
        "cursor": {
          "ref": "e92bee50-471f-4d0c-a45b-abc7bc9549c4",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "37bbd902-6649-4c3b-bae1-bdd8b2b2245f"
        },
        "item": {
          "id": "4134574e-c43e-49a2-a461-4f826bf59e2a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e6f4ed9d-f49c-41d2-aa5d-eba2d56b0e54",
          "status": "Created",
          "code": 201,
          "responseTime": 1080,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "9ca71ddc-0fe0-4d53-9dcf-4bebfc65eca6",
        "cursor": {
          "ref": "cfaf08e5-e280-4f1a-a74f-c13a00fbe12b",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "ef64d031-67fa-4e64-a813-72ce20275320"
        },
        "item": {
          "id": "9ca71ddc-0fe0-4d53-9dcf-4bebfc65eca6",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "093e47bf-9fba-4aa9-82e7-2fad9b2dcd7f",
          "status": "Created",
          "code": 201,
          "responseTime": 1198,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "899a6ac4-eddd-4f62-8a6a-1431bf98425a",
        "cursor": {
          "ref": "c64bca81-76fb-43d8-9e5a-6c038d8e115a",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5d73bd42-ab49-4aa7-a7d3-e95ed29c80c5"
        },
        "item": {
          "id": "899a6ac4-eddd-4f62-8a6a-1431bf98425a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "771ee5ad-3ab5-450f-9c3e-088acd96b780",
          "status": "Created",
          "code": 201,
          "responseTime": 942,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "272d2938-7221-405c-9594-54b7993cdd12",
        "cursor": {
          "ref": "996ef514-cae7-4541-8fde-7f2ee2c62bfe",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9bdd3e17-af8f-45e5-8de5-e720b87e89e6"
        },
        "item": {
          "id": "272d2938-7221-405c-9594-54b7993cdd12",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "cfb23c3a-f83b-4985-b22e-b6db30f2bd61",
          "status": "Created",
          "code": 201,
          "responseTime": 958,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "6ec0f44c-ed9c-42da-b9c2-695abd0bf213",
        "cursor": {
          "ref": "674d6e42-21c8-4bfe-b05c-be29f7699818",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "6388e61f-534b-490c-b8dd-3fec9b57bbaa"
        },
        "item": {
          "id": "6ec0f44c-ed9c-42da-b9c2-695abd0bf213",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "06696d6e-6e94-4dd2-9764-945827ae8d5b",
          "status": "Created",
          "code": 201,
          "responseTime": 1118,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "a77bc09f-0a6c-4b33-996c-e4f98859d1df",
        "cursor": {
          "ref": "e3f041a7-17d1-4dd4-8d72-1db2c7e0ab60",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "96ed3023-5cd1-42ff-8fe4-6687ff26d6af"
        },
        "item": {
          "id": "a77bc09f-0a6c-4b33-996c-e4f98859d1df",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1c5b6d65-f717-4429-bf6b-7cf4fa6408d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "c2f5f6cf-7d77-420e-bf14-4d98adfcdb6c",
        "cursor": {
          "ref": "94414228-8d4b-47cf-a8e9-4d58f73270ed",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "019e91ef-70a1-458d-b821-8de2f9ef73ef"
        },
        "item": {
          "id": "c2f5f6cf-7d77-420e-bf14-4d98adfcdb6c",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "84cade3b-6ed5-464c-b6d1-837d92206cc3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "40e28ade-5203-4eda-af64-77a59a2a7882",
        "cursor": {
          "ref": "ac9943db-e0f0-49b2-8691-47a99510c54f",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "067e99ff-0375-420a-b62c-ec676470ad85"
        },
        "item": {
          "id": "40e28ade-5203-4eda-af64-77a59a2a7882",
          "name": "credentials_issue"
        },
        "response": {
          "id": "81a3d7a8-c44f-40d4-a1de-f08fc772f56b",
          "status": "Created",
          "code": 201,
          "responseTime": 908,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "d757f777-5ec8-47d3-a564-39ecef1a2b22",
        "cursor": {
          "ref": "2aeb0a69-aa04-472f-8e71-8ca8d65d0c57",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "71f3933d-2173-4bdf-8664-f3003c2fcde5"
        },
        "item": {
          "id": "d757f777-5ec8-47d3-a564-39ecef1a2b22",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2c67fa9b-7742-4264-b683-c3c2a605136e",
          "status": "Created",
          "code": 201,
          "responseTime": 985,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "8cfecec5-8257-4bde-9877-d03bb32aef86",
        "cursor": {
          "ref": "f9188bfc-7c8d-4de2-aadf-ba4f199f0c3c",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "208121b5-20bd-4658-a305-3e124a0a037d"
        },
        "item": {
          "id": "8cfecec5-8257-4bde-9877-d03bb32aef86",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "04e382d6-dafc-4dbb-9a5a-c9b5558e0140",
          "status": "Created",
          "code": 201,
          "responseTime": 936,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "0c97754b-8796-427f-a12e-571b8092a586",
        "cursor": {
          "ref": "11b4ae2a-c1cb-4837-b1f7-6db5b7dc4f70",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a1491b72-fe36-408b-ab73-e4259b331dd9"
        },
        "item": {
          "id": "0c97754b-8796-427f-a12e-571b8092a586",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "01939f2e-2d57-4517-bd5f-ccc70adb18ea",
          "status": "Created",
          "code": 201,
          "responseTime": 963,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "cb5ec980-9ee6-47f2-a030-d2ce8e59a190",
        "cursor": {
          "ref": "c7e77dd6-dca6-4fc7-a8a0-c3d065627bdc",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e53e2380-79df-4b58-8d4c-d219de813fd9"
        },
        "item": {
          "id": "cb5ec980-9ee6-47f2-a030-d2ce8e59a190",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6c47b2ef-23aa-499d-bffd-7e2425a9daee",
          "status": "Created",
          "code": 201,
          "responseTime": 987,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "0cf3ce44-d415-42ac-bff2-e806d0e032aa",
        "cursor": {
          "ref": "43126767-697a-47c5-a7b4-e26c896571a9",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0cb59c7c-30c2-4032-8f3f-ccb814943de5"
        },
        "item": {
          "id": "0cf3ce44-d415-42ac-bff2-e806d0e032aa",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ecbe5bb6-db5d-49f7-b04b-cd68e805fddd",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 66,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "0cf3ce44-d415-42ac-bff2-e806d0e032aa",
        "cursor": {
          "ref": "43126767-697a-47c5-a7b4-e26c896571a9",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0cb59c7c-30c2-4032-8f3f-ccb814943de5"
        },
        "item": {
          "id": "0cf3ce44-d415-42ac-bff2-e806d0e032aa",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ecbe5bb6-db5d-49f7-b04b-cd68e805fddd",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 66,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "0d8d4c67-bca3-465b-8900-aeba87037092",
        "cursor": {
          "ref": "4d02b5bf-fd52-4671-ab5c-1331718d8aaa",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "31408647-a20d-461b-a52c-b856ed002f36"
        },
        "item": {
          "id": "0d8d4c67-bca3-465b-8900-aeba87037092",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d48accac-efa6-4a4f-a92b-31085497b4f3",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 66,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "7e2d4bd2-35da-4630-ae07-50350dc8c2f9",
        "cursor": {
          "ref": "09ab3190-2b1d-4db0-abe0-4444aea4e398",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4bf06e2b-b72d-487f-bfe1-8fce57560ad8"
        },
        "item": {
          "id": "7e2d4bd2-35da-4630-ae07-50350dc8c2f9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a07eb6e3-f058-4b6e-ae2e-3a9c15d8f764",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "e5072964-dc83-402f-a7e9-f20bc917c0c9",
        "cursor": {
          "ref": "a2b43a6d-27b9-493f-bb35-fc86ee65f6bb",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "5bbd73e5-ba6e-40ec-8347-2385cd4e4826"
        },
        "item": {
          "id": "e5072964-dc83-402f-a7e9-f20bc917c0c9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "81771ad9-515c-4156-beb7-e91d80414ae9",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "69e20e91-e2a8-4546-bf28-04b1691fba81",
        "cursor": {
          "ref": "b4521979-250b-4487-8ec8-385b31d8f3a8",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ed1b48c5-51a0-43ab-9a13-f62307cea555"
        },
        "item": {
          "id": "69e20e91-e2a8-4546-bf28-04b1691fba81",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f7412d2b-f055-42ac-a3e3-69e241cc9592",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "02349f69-dcd5-4328-aa27-fcdfa2873808",
        "cursor": {
          "ref": "63320eae-41d6-4824-a253-9adcf0aa271a",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ffb4619c-efc3-4aba-aa93-0749c565ca43"
        },
        "item": {
          "id": "02349f69-dcd5-4328-aa27-fcdfa2873808",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ff523c3a-2f82-422b-ac56-07b9ea9ca001",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "e30201f1-1ad7-4187-8a08-a787fa29e468",
        "cursor": {
          "ref": "982e2bb3-5669-40f9-a5e7-0a22caf7877a",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6760786a-7f8d-4103-9e47-68c7e6edb673"
        },
        "item": {
          "id": "e30201f1-1ad7-4187-8a08-a787fa29e468",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f6fafea7-e7d9-4424-a8c8-325b6b0b1c5b",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 64,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "345376d5-3f46-4bdd-808c-5bc968b6ed1c",
        "cursor": {
          "ref": "328a8f8c-f183-4a40-8f8d-87f1340b61cd",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9048bf45-1d29-4e90-8928-cd1607301ced"
        },
        "item": {
          "id": "345376d5-3f46-4bdd-808c-5bc968b6ed1c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "60a995fb-a6e6-48a4-9f8c-196bc68f5edf",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "816e861a-1db3-481c-be00-175a556f611f",
        "cursor": {
          "ref": "b54cdada-8944-414c-b197-679b9a6bff9a",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0ace2be1-aa4d-4359-9088-844afb836db9"
        },
        "item": {
          "id": "816e861a-1db3-481c-be00-175a556f611f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b41838e9-569c-4b96-b7e7-c0932d1545f3",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 64,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "f579c3d5-37b9-4bac-9cc0-b6d096e0b8c3",
        "cursor": {
          "ref": "3be5d087-f2e6-4cfd-ae8a-2f2a4ea3b032",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "7cfb5e0b-a6dc-453d-90cd-a07dc5afe814"
        },
        "item": {
          "id": "f579c3d5-37b9-4bac-9cc0-b6d096e0b8c3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8096c74b-9a6e-4efa-b822-f529f78ca2df",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "fd375362-65aa-4cbf-ab87-6435cbcc7dc2",
        "cursor": {
          "ref": "4e321c9e-d950-431f-81cc-982edc170c09",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "be0a6f72-e672-4355-b3ad-ea1d27174f46"
        },
        "item": {
          "id": "fd375362-65aa-4cbf-ab87-6435cbcc7dc2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "db689339-098a-4bb0-bf59-b7496b0b7d83",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "fd16fce2-8aa5-486c-b104-92566260361c",
        "cursor": {
          "ref": "ece56db7-aa44-4ed2-8d91-ddbdc73acddd",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d1abc394-4385-4e88-85a2-092caea56f79"
        },
        "item": {
          "id": "fd16fce2-8aa5-486c-b104-92566260361c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b98d5085-d947-490f-a874-aa1da88c1241",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 66,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "9d8d490f-29bf-4e90-ab82-3d692ec9b7cc",
        "cursor": {
          "ref": "13ce1e2e-27b2-4065-bf2e-10cab234b885",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "99c416d7-2b68-43d8-9461-853a420dc57f"
        },
        "item": {
          "id": "9d8d490f-29bf-4e90-ab82-3d692ec9b7cc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4db5c241-99a6-48a8-90e9-8a12c8e76b09",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 66,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "dc13655d-cff1-4b76-a4a8-f2062ba42e5c",
        "cursor": {
          "ref": "aeedee70-0464-4091-ab39-f4aa6dfce534",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6131cca0-c005-482b-9497-e63b55128b5d"
        },
        "item": {
          "id": "dc13655d-cff1-4b76-a4a8-f2062ba42e5c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3038faf1-bdcb-4b28-a1f8-981f329e23db",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "aa2fe03c-8a1a-48a6-880b-8723f72f392a",
        "cursor": {
          "ref": "41338a5c-fdd0-4338-8ddc-bb165244c513",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5e94171b-2446-4885-a4df-1d9cfd4aa9d3"
        },
        "item": {
          "id": "aa2fe03c-8a1a-48a6-880b-8723f72f392a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c5ee749e-fe7d-4b1f-8ea0-4476692b4d22",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "755a940c-f747-43ad-a854-d6f5c1cc6686",
        "cursor": {
          "ref": "10c3bb41-7ebb-4d37-89c0-3639b1b07f3e",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4ca45848-bf75-46ef-bb88-53982b873585"
        },
        "item": {
          "id": "755a940c-f747-43ad-a854-d6f5c1cc6686",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3895c2b2-7700-4580-bc4b-d66fbe99fd48",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 66,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "9681adfb-e92c-4caf-a2ed-70863ad02e44",
        "cursor": {
          "ref": "a488f0f9-fbcf-4e21-a169-058824873b69",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c960f455-f3e8-4845-9b8b-3ee45a6ceac8"
        },
        "item": {
          "id": "9681adfb-e92c-4caf-a2ed-70863ad02e44",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1c17ab3e-da92-4c80-98e3-7148d2edf4a6",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "8459649c-e286-4a7b-b69b-1c1cb5a7d8af",
        "cursor": {
          "ref": "7cbf0935-b3dc-4a8e-9a90-354f7e5a9a0d",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e393796f-b13f-4392-a48b-c4691993797f"
        },
        "item": {
          "id": "8459649c-e286-4a7b-b69b-1c1cb5a7d8af",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7c576e63-a6be-4788-ae29-4a0e2655d7c8",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "2b0fdbb3-99d6-449d-aa8f-3e2b2a61d695",
        "cursor": {
          "ref": "451c671f-8cfa-4f77-8ecf-036d00854424",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "bee3283f-d94d-4ab6-95fd-c3e17e952fc9"
        },
        "item": {
          "id": "2b0fdbb3-99d6-449d-aa8f-3e2b2a61d695",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "98f5c5f3-0b87-4cf5-a548-fef3cf4f784a",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 66,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "ce48590e-bd4b-42af-8009-303381b63cd1",
        "cursor": {
          "ref": "a13c488c-9e99-458a-be03-cc5bc999a11e",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "dcf543d5-c32a-43b5-bbf8-e24690c2e311"
        },
        "item": {
          "id": "ce48590e-bd4b-42af-8009-303381b63cd1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "670cdd4b-c1e5-45c7-b214-ab43060002bc",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 64,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "461823e6-6b01-4de5-a372-f7df99aea79a",
        "cursor": {
          "ref": "c1761e65-a081-448b-b6ae-911d20da8960",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "e65a7b63-6d14-4211-96bb-f328b41efaa0"
        },
        "item": {
          "id": "461823e6-6b01-4de5-a372-f7df99aea79a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ce925397-71e0-4173-9c45-4bb360f7e486",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "4f79e306-6d26-43e1-b114-4178c17f6157",
        "cursor": {
          "ref": "5c3a9575-aecb-4dd0-bc6f-d2f10ee13c7b",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3558e063-e796-42e8-8ed5-78fcf0e52625"
        },
        "item": {
          "id": "4f79e306-6d26-43e1-b114-4178c17f6157",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "39b975d8-7c8c-4d4a-8571-c13626397782",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "afdb11eb-0eea-4363-9624-c374ad55d855",
        "cursor": {
          "ref": "3b89a82a-c715-43e2-8437-385e041b8bfe",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "eb8e2a51-8dec-499d-9c6b-4a6589056cd5"
        },
        "item": {
          "id": "afdb11eb-0eea-4363-9624-c374ad55d855",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3cb8e88f-cf58-4b87-9436-83cf2ef47214",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 66,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "94030a43-a164-4f10-9a77-26f9865265e1",
        "cursor": {
          "ref": "9c6469c9-3e81-4d87-8b1b-2161fea13032",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "59e99a3e-90b2-45bf-abca-f8567fc67530"
        },
        "item": {
          "id": "94030a43-a164-4f10-9a77-26f9865265e1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "785c28d8-e607-42c7-8c81-15450052dc3c",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 66,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "717c0d8e-9232-480e-8551-6aa2a1a71448",
        "cursor": {
          "ref": "9508cf87-efa3-4426-a58a-e997d608767b",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "94911972-a42a-4cd0-90a1-06a7cf0b3ae2"
        },
        "item": {
          "id": "717c0d8e-9232-480e-8551-6aa2a1a71448",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b1ec7d47-cbe6-48a2-9018-2ac7783a248e",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "bf38197c-4488-44c0-98a0-260e1546bb91",
        "cursor": {
          "ref": "ad4b14c5-4312-48ec-9ce7-dad2978eac35",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "cf0ef42d-3272-48ee-9f7e-c9a7af41e028"
        },
        "item": {
          "id": "bf38197c-4488-44c0-98a0-260e1546bb91",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4b4c2aa2-3a90-4557-9162-4bbde17d85a4",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "9a36443f-fec5-4e78-849e-2d4225c08da6",
        "cursor": {
          "ref": "62d0fe0e-8bf3-4755-a809-335dc6cd8967",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8945fd77-cc97-4af3-847c-06c43ceee15f"
        },
        "item": {
          "id": "9a36443f-fec5-4e78-849e-2d4225c08da6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0d729f3f-c769-4db7-a753-547f23e5a9d6",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "e1f0d817-d8d2-4997-b335-dd248abf68ed",
        "cursor": {
          "ref": "c68d9fda-0e7d-4354-b67a-56800839d8b7",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ff6be7a7-5a9b-4dba-9a94-762a32e647f5"
        },
        "item": {
          "id": "e1f0d817-d8d2-4997-b335-dd248abf68ed",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "65aa7cde-0719-4e6a-8c39-cc2c6b97cda9",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 67,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "02702745-f380-4b81-a717-9a7de9ea5d87",
        "cursor": {
          "ref": "e5c3e97e-0df4-4105-9063-8bad59a3991a",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "40b0e820-27e7-416d-8fa9-7d801ff3f7cc"
        },
        "item": {
          "id": "02702745-f380-4b81-a717-9a7de9ea5d87",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8f5f687c-9545-4ffd-9bf4-ba64ed7bb0cb",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 66,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "8b6e0c28-4d76-4066-aa32-d50fc31b616c",
        "cursor": {
          "ref": "f348bae3-332a-4785-9c2f-b6b2fd816594",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "aaea3316-dddb-4532-b8ab-d7bdeb7f373d"
        },
        "item": {
          "id": "8b6e0c28-4d76-4066-aa32-d50fc31b616c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "26293256-04d8-412c-8f29-3767dca29cc9",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "56d7d837-1ddc-4f76-8ee4-718bd61a529a",
        "cursor": {
          "ref": "c7f460d1-3c8f-49ea-8a3b-740e242d4786",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a7e49820-e906-4421-ab8e-ece01f85b568"
        },
        "item": {
          "id": "56d7d837-1ddc-4f76-8ee4-718bd61a529a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "cf1d31df-50f4-402a-a95a-7a955a62db8d",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "9111401c-c130-4f73-9072-e68b3b6b8517",
        "cursor": {
          "ref": "fdc26051-2ba5-45c7-9760-d8d065b86c3c",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "da02e3da-1c72-4f6e-99bb-d0c3ab64d04b"
        },
        "item": {
          "id": "9111401c-c130-4f73-9072-e68b3b6b8517",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4866fc39-d062-477b-96d3-26d6c8fa6510",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 65,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 501",
              "stack": "AssertionError: expected response to have status code 400 but got 501\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "db01f8fc-d205-415c-95ff-172069438749",
        "cursor": {
          "ref": "a72dd9df-fe04-46f0-bcf1-3aeddde82cfd",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6b89d4c3-042d-4c6d-9713-7d232e5c2495"
        },
        "item": {
          "id": "db01f8fc-d205-415c-95ff-172069438749",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6c55868d-d61d-46ad-a4a7-ffa0b1c61cd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "439e9568-ad43-4391-b0f0-343c908a78fa",
        "cursor": {
          "ref": "071bdaac-a3e3-430b-9a73-e58d4108ec70",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a9ec67d1-dbc6-442b-9e24-77f853e3df74"
        },
        "item": {
          "id": "439e9568-ad43-4391-b0f0-343c908a78fa",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "afcd17aa-285a-485d-bce3-2c33b0dc46ce",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 64,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "62c6995e-1796-47d8-af91-368aa55002a8",
        "cursor": {
          "ref": "9c577ed0-14fd-4314-9864-eeb6d59769f9",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8beb7410-fa7e-4a13-b870-35db32eb8f75"
        },
        "item": {
          "id": "62c6995e-1796-47d8-af91-368aa55002a8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5c0d85b2-b080-443b-a4f4-cb592e71b4c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "62c6995e-1796-47d8-af91-368aa55002a8",
        "cursor": {
          "ref": "9c577ed0-14fd-4314-9864-eeb6d59769f9",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8beb7410-fa7e-4a13-b870-35db32eb8f75"
        },
        "item": {
          "id": "62c6995e-1796-47d8-af91-368aa55002a8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5c0d85b2-b080-443b-a4f4-cb592e71b4c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "cbe47cf1-fc15-4186-945e-ffca8c252474",
        "cursor": {
          "ref": "5115acd4-02e2-41fd-811f-90b0c5588cec",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "012f4167-28ac-413b-8b70-e071db396332"
        },
        "item": {
          "id": "cbe47cf1-fc15-4186-945e-ffca8c252474",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "96078652-9583-4fe3-8f73-54ef7557e36b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 56
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "4e969e65-5555-4b98-bc92-9e3d359af819",
        "cursor": {
          "ref": "d4413ff1-1826-435d-8f45-990849a60082",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1318c067-f4e7-404c-ad5a-c1686a140b5b"
        },
        "item": {
          "id": "4e969e65-5555-4b98-bc92-9e3d359af819",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8710a504-e162-4029-b22c-4398458b3781",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 65
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "de4ff44a-0248-4ca9-8a62-9bc5ccd25509",
        "cursor": {
          "ref": "471d7374-5d63-4e42-b5ca-c3665a96d12c",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "ae36e130-9968-4084-a849-44dd862bd569"
        },
        "item": {
          "id": "de4ff44a-0248-4ca9-8a62-9bc5ccd25509",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6d114675-7396-4cd0-91ee-d5f79c796ff6",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "59a37cfb-4594-4d71-b7dd-580049137999",
        "cursor": {
          "ref": "52b4feb1-9826-4b60-837b-75a1ca836f52",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "206168d0-e1ba-44a0-b202-3f2380825501"
        },
        "item": {
          "id": "59a37cfb-4594-4d71-b7dd-580049137999",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a568a008-aa22-4bc3-b6d0-6544c7eaac1d",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "f0e28689-f084-4cb1-988b-06455051977b",
        "cursor": {
          "ref": "3d069860-452c-45a8-8c83-d499749f928b",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "35c1b6f2-5fa1-4e76-be96-cd4c90f03097"
        },
        "item": {
          "id": "f0e28689-f084-4cb1-988b-06455051977b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0c0f9251-d6ee-4d62-8336-96c10d812a01",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "cccdaeb3-3d0a-45bb-9b64-c5042b11fe5a",
        "cursor": {
          "ref": "46c95df5-4329-4921-a2e0-0face28fb50a",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8c7436d9-0d09-433e-82f0-f55133df3f18"
        },
        "item": {
          "id": "cccdaeb3-3d0a-45bb-9b64-c5042b11fe5a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "204860fb-704b-406f-8ce0-2ceef96eaece",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "d9da4fd4-71ec-469c-8456-032030986c57",
        "cursor": {
          "ref": "d34a20ad-0ffc-497d-87d3-c75b7e5a5b73",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "24238028-6477-4d43-a7e9-40b027883b91"
        },
        "item": {
          "id": "d9da4fd4-71ec-469c-8456-032030986c57",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e3a61c56-5734-4ba2-ae98-bbf0a2e3c8fb",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "08c30cb7-439f-4161-946e-81fbdee2e4f1",
        "cursor": {
          "ref": "415b5ce8-3af8-438b-bca1-3af7e394c30f",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5ada972e-9906-475c-a494-09c080314724"
        },
        "item": {
          "id": "08c30cb7-439f-4161-946e-81fbdee2e4f1",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "23471d8d-a5b1-4158-ab6b-390dcf537c83",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "cec4dd54-1bd2-4ec8-9f58-369c48fd4846",
        "cursor": {
          "ref": "461f64de-4e17-4ffd-bdee-c88b4ef100e9",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b28831f1-8e02-4d19-b1e1-5144154fdbda"
        },
        "item": {
          "id": "cec4dd54-1bd2-4ec8-9f58-369c48fd4846",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a249ae55-9895-43ad-90ec-94e16237c109",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "97348e10-331a-4bca-84f6-97da4a548d02",
        "cursor": {
          "ref": "7f61b636-fe63-43ff-8104-34366439af43",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ef59bc21-2ffc-4689-887b-6c3597ba1e96"
        },
        "item": {
          "id": "97348e10-331a-4bca-84f6-97da4a548d02",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "227cc752-ac9b-45a3-8a1d-606706b962a5",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "82f943c0-26fc-42d1-b412-a7bc01c741c6",
        "cursor": {
          "ref": "55b2dd3c-492f-4057-ba49-db5b60717705",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0a33f656-6cea-4977-a58a-e975e09ca8d7"
        },
        "item": {
          "id": "82f943c0-26fc-42d1-b412-a7bc01c741c6",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "29a30120-6957-474e-a20c-85c583ef3910",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "100dadde-5a26-4816-bff5-3d7d17c0daff",
        "cursor": {
          "ref": "8a4f1751-fb7d-4701-8b17-0e12f7c297c5",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c87fda77-5c43-48d5-9e4c-95ba4627f378"
        },
        "item": {
          "id": "100dadde-5a26-4816-bff5-3d7d17c0daff",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "cc94dc97-72c7-4bf9-97c2-9553b35e8f69",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "7444e271-d967-4114-8cbf-3fa98b2fe305",
        "cursor": {
          "ref": "d6019256-b167-49e9-a98c-370581ac2aaf",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "7965af40-93a9-4343-b819-17a4e2f4a5e2"
        },
        "item": {
          "id": "7444e271-d967-4114-8cbf-3fa98b2fe305",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "90c7f4a9-32f0-4d9e-9d2a-b9af8b5b1259",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "d4c0ecc2-59dd-41f6-b40e-1b7d3c961b24",
        "cursor": {
          "ref": "6f2bd224-8866-4dcb-b1e1-0c0e07146ce3",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a280c239-0511-4580-9f4b-31df8ab59570"
        },
        "item": {
          "id": "d4c0ecc2-59dd-41f6-b40e-1b7d3c961b24",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2940d6f9-ab3f-4173-917c-dbb838298da8",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "c153714e-f971-425f-9d88-32c4650e6ca6",
        "cursor": {
          "ref": "ccbd2ac2-b8e4-4519-b228-cd65bca33c1b",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c52e88a3-013a-41c9-8185-9296a5cde2f5"
        },
        "item": {
          "id": "c153714e-f971-425f-9d88-32c4650e6ca6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "dc0c78d2-4341-4264-9f29-faeccb3da50d",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "68c30e25-d637-45eb-95ef-8d8773e45236",
        "cursor": {
          "ref": "c090bcbe-a7cb-4711-b0d6-3be5ef9f0d9b",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "01038a7e-5131-422f-95ce-ea55ad4b4278"
        },
        "item": {
          "id": "68c30e25-d637-45eb-95ef-8d8773e45236",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "4ef4fef3-0231-4968-abeb-efd585aa3795",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "600818ef-50cb-42c3-b03a-681e884fc510",
        "cursor": {
          "ref": "fab6708e-f7ef-4935-a603-ab4ef7c8e392",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "52630b89-9466-494b-ae75-95071ca059a5"
        },
        "item": {
          "id": "600818ef-50cb-42c3-b03a-681e884fc510",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "cd3b016a-a545-4244-b783-8426aaa0fd5e",
          "status": "OK",
          "code": 200,
          "responseTime": 995,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "85aa6513-f285-4532-b79c-d43257e4cc9a",
        "cursor": {
          "ref": "562153a0-b674-4329-9516-9451023db380",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5ad6c76a-3e97-4a5c-86c2-e1a2a332a02c"
        },
        "item": {
          "id": "85aa6513-f285-4532-b79c-d43257e4cc9a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c1732ff6-b86a-42a9-83f6-1ccb7b4ece28",
          "status": "OK",
          "code": 200,
          "responseTime": 273,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "214dee4c-e359-456f-97df-3fed1e564c39",
        "cursor": {
          "ref": "52891be9-b965-4773-9c44-6a85486d2f1b",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ee16e660-b1b4-4ce5-8606-06d0aab5de55"
        },
        "item": {
          "id": "214dee4c-e359-456f-97df-3fed1e564c39",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "954125d1-8b6a-4d17-9ed8-11bd0ad33f94",
          "status": "OK",
          "code": 200,
          "responseTime": 262,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "bbb1bcc7-dbee-415f-8144-f5c15e818e1c",
        "cursor": {
          "ref": "8371fa3e-e5f7-45c7-9d37-99332adef7ea",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "47548b0b-f648-4e21-ae78-0d13c154170c"
        },
        "item": {
          "id": "bbb1bcc7-dbee-415f-8144-f5c15e818e1c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "221f6683-8b95-42c3-b0aa-e4f33373a935",
          "status": "OK",
          "code": 200,
          "responseTime": 280,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "998bc048-8434-4bbd-93fa-8206912e5172",
        "cursor": {
          "ref": "8c6aaee4-4111-4517-80a0-13ebb4f9fa10",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "22071b22-c3ec-4f0f-8ab0-de5fd5e745db"
        },
        "item": {
          "id": "998bc048-8434-4bbd-93fa-8206912e5172",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b97fbdfd-6457-4241-82c8-6187af82ef0a",
          "status": "OK",
          "code": 200,
          "responseTime": 289,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "e9a48d9b-6d9c-4ef9-a49b-c25f1ce98785",
        "cursor": {
          "ref": "190e3680-0bb7-4ae7-9045-8363c6bd1eea",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "083288c8-2170-4ec8-9981-87c2a896b1a7"
        },
        "item": {
          "id": "e9a48d9b-6d9c-4ef9-a49b-c25f1ce98785",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a9042dcf-52f5-4cba-9ac7-53789ead2b68",
          "status": "OK",
          "code": 200,
          "responseTime": 267,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "101a22b3-7f42-4cc8-b58e-8451d0268e7b",
        "cursor": {
          "ref": "1bc1f9ee-bf80-4cdb-8522-46526dbccad0",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8fa7c702-6ea6-4a06-a4d8-41585a9b6aab"
        },
        "item": {
          "id": "101a22b3-7f42-4cc8-b58e-8451d0268e7b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4cf882b0-d625-4575-8328-6c85a10cd1ba",
          "status": "OK",
          "code": 200,
          "responseTime": 507,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "373bd708-968b-46b1-bf2c-c29366c508e9",
        "cursor": {
          "ref": "37ecee3b-f72f-4dfb-a82f-1450dcf4c113",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d2193702-47fe-4115-893d-ada698b077b1"
        },
        "item": {
          "id": "373bd708-968b-46b1-bf2c-c29366c508e9",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d55ce49d-1db3-42e5-ade1-e517145f8383",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "a9fd2b6f-cdd9-422c-a7b3-b5b65db5cba1",
        "cursor": {
          "ref": "b6bdc3f5-45a2-4d4a-9332-59e5edd81eff",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "34df8dc3-ba15-4999-b181-30d41cc5ba75"
        },
        "item": {
          "id": "a9fd2b6f-cdd9-422c-a7b3-b5b65db5cba1",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "67e1c39f-84cb-4597-8006-cae5871bb6f0",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "69168e08-8b39-41bc-897c-518fda097f86",
        "cursor": {
          "ref": "d4d4e7ba-ebf2-4a07-870c-ab0bbc1b972b",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b8723327-ff5e-47dc-b57f-6b6546e052ce"
        },
        "item": {
          "id": "69168e08-8b39-41bc-897c-518fda097f86",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c899c93d-b2e8-4410-9aaf-50b3cc547ab7",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "0b1e6ba1-c3e8-440d-9b2c-d8d00dcb83c5",
        "cursor": {
          "ref": "86bc25e0-5e75-4a11-9fba-9c37d298ce0a",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a8cfff1d-51c6-4fb5-ae38-7d572b0b58eb"
        },
        "item": {
          "id": "0b1e6ba1-c3e8-440d-9b2c-d8d00dcb83c5",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "75136a77-05da-4eac-afbf-cc3c14594f0e",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "dc94c8ad-6579-45f8-81f6-42b5bef0a52b",
        "cursor": {
          "ref": "60e9c03f-6446-4f52-8a3b-395225568dce",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "90c633e0-d9bf-4aa5-95e6-48e3aebcb661"
        },
        "item": {
          "id": "dc94c8ad-6579-45f8-81f6-42b5bef0a52b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a560aa49-1e5d-4168-a03e-9e696b0cafed",
          "status": "OK",
          "code": 200,
          "responseTime": 946,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "eea28845-20bf-4dd8-a689-86f5b422cef3",
        "cursor": {
          "ref": "41e558b1-95a2-43ac-8188-8b6ac8497008",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4f68bb19-5a00-41db-ba9f-c15105bcc008"
        },
        "item": {
          "id": "eea28845-20bf-4dd8-a689-86f5b422cef3",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "54e527f4-60ea-4fe1-b95f-7dd408e375fe",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "e1457ff7-d8e8-4cd4-aeb7-90319424f783",
        "cursor": {
          "ref": "3bc76e3a-a9de-49cc-93e8-16f10640c278",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "21ff4004-e95b-4785-a76e-a8310ea34972"
        },
        "item": {
          "id": "e1457ff7-d8e8-4cd4-aeb7-90319424f783",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b913e038-43f5-450e-9f6e-dc6391f7bf8f",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "85c53b05-ce1d-4c74-9588-3e0d8a38da42",
        "cursor": {
          "ref": "13a6cbef-fbd3-41da-954e-19775a10e139",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a3df65f0-22f4-4a70-9209-d19a01c973c7"
        },
        "item": {
          "id": "85c53b05-ce1d-4c74-9588-3e0d8a38da42",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "0c5623f6-44d1-402e-aa13-0cf125829389",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "5af3f967-e4b5-429a-8fc5-5a3d916acf2f",
        "cursor": {
          "ref": "aa207406-3be1-4b5f-be09-b066a1f3f0f4",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5dec2580-fcb1-4f1a-9b50-3ec6052bcbf9"
        },
        "item": {
          "id": "5af3f967-e4b5-429a-8fc5-5a3d916acf2f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d3e5641e-1d48-42a7-97da-070cf13594c7",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "2fb3764c-ae6e-4cca-ad47-943c82fbbdb1",
        "cursor": {
          "ref": "7f3caf1e-e03b-4548-871e-16ffb7e12b6f",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "1d5439cc-2b44-4740-9fd6-47a0453b2750"
        },
        "item": {
          "id": "2fb3764c-ae6e-4cca-ad47-943c82fbbdb1",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "97e0935c-42e4-4426-b514-dc7340e9dea8",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "e5695aff-672f-499b-89ee-16ecb885f606",
        "cursor": {
          "ref": "0b2dced8-eb2a-4153-899d-78812d191888",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "1163ec1c-6913-44d4-ad76-de2d6052e01a"
        },
        "item": {
          "id": "e5695aff-672f-499b-89ee-16ecb885f606",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d61a9438-bcd1-466c-ae23-3b3bf9c7a61c",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "f9b719e6-d75b-4afe-b7aa-c9b868256ee8",
        "cursor": {
          "ref": "1cc58c8d-c399-48a1-bd64-60783eb5b296",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "bb759236-9a37-4d06-8ca0-e821f2f3a2dd"
        },
        "item": {
          "id": "f9b719e6-d75b-4afe-b7aa-c9b868256ee8",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "875055e3-d38d-422d-9563-768b69688413",
          "status": "OK",
          "code": 200,
          "responseTime": 543,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "1c605649-c313-41c1-a66f-5af9541a7e53",
        "cursor": {
          "ref": "de25a254-ff68-4d7f-aa76-c03fccd33519",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "0bc3b391-d6cb-46c4-9f0e-28b62699106d"
        },
        "item": {
          "id": "1c605649-c313-41c1-a66f-5af9541a7e53",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1cbdf1d7-bcb8-4817-b841-00c40f6af5d8",
          "status": "OK",
          "code": 200,
          "responseTime": 516,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "23cbd1bd-eef7-479f-afd1-2e69a1108e0e",
        "cursor": {
          "ref": "2c6ffa67-c8a7-4312-a0a4-0d7e800bde26",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e6d5d5c4-b2b6-4657-8556-7830fe64de9e"
        },
        "item": {
          "id": "23cbd1bd-eef7-479f-afd1-2e69a1108e0e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "cc5ccaea-8cd2-4f0b-9a22-1f51794dd9ec",
          "status": "OK",
          "code": 200,
          "responseTime": 523,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "df007f1e-463c-4777-ae88-0135297dcc8e",
        "cursor": {
          "ref": "183f9170-34dc-4679-beee-c688317925d7",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "1186a940-f6dd-48fc-8c40-2c040a88e8cd"
        },
        "item": {
          "id": "df007f1e-463c-4777-ae88-0135297dcc8e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7e2a85c3-f26b-4e36-a551-82c94c537fc2",
          "status": "OK",
          "code": 200,
          "responseTime": 505,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "304b798e-8d37-44fc-acfb-7be46854457c",
        "cursor": {
          "ref": "4d8c22e8-8b90-41a9-87ae-298213da5eef",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e997cd1a-d218-4110-ba7b-3efb99f36dfe"
        },
        "item": {
          "id": "304b798e-8d37-44fc-acfb-7be46854457c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4d1e6f40-76f8-434a-9eda-0cb1b88ead05",
          "status": "OK",
          "code": 200,
          "responseTime": 531,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "1f2eb263-ed84-413b-a53e-96e58e03100c",
        "cursor": {
          "ref": "e1ca105a-c138-481a-8770-7c047ac4f74a",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ac763d77-09b5-4cb4-99a3-0a9ddff9735d"
        },
        "item": {
          "id": "1f2eb263-ed84-413b-a53e-96e58e03100c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "dd7c7aa2-eb75-49bc-9feb-436b7bc8aa4a",
          "status": "OK",
          "code": 200,
          "responseTime": 553,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "969529b2-77fa-4834-8692-01a207a52a51",
        "cursor": {
          "ref": "f3b17bc1-13e8-4371-be68-5d4d10ee9f98",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9408ea5c-591c-439b-95bd-2275d81e7f41"
        },
        "item": {
          "id": "969529b2-77fa-4834-8692-01a207a52a51",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4c585c75-9ed0-424d-802d-c7ca0c9dd0e8",
          "status": "OK",
          "code": 200,
          "responseTime": 268,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "aa6feafd-75c0-4e15-8212-83a8472189ae",
        "cursor": {
          "ref": "2793bac6-41d9-43a7-83dc-d993e6f0bae7",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "d65d6cc7-91c2-4ecf-8f87-bca960909c4c"
        },
        "item": {
          "id": "aa6feafd-75c0-4e15-8212-83a8472189ae",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "3c98a023-574c-4f45-8443-229e6ffe491a",
          "status": "OK",
          "code": 200,
          "responseTime": 274,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "78264fae-54b2-4325-ab34-54e998f61c5e",
        "cursor": {
          "ref": "4eaedbdb-905f-4db5-8403-bbe0f24d794f",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "6153f071-fdda-4f87-8b02-2aadce6860a3"
        },
        "item": {
          "id": "78264fae-54b2-4325-ab34-54e998f61c5e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f1f192d6-b02c-4102-a876-6a85f02e8df5",
          "status": "OK",
          "code": 200,
          "responseTime": 295,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "a68f8260-fd56-40cb-a3a1-253c6c45e844",
        "cursor": {
          "ref": "0e9161c4-29e5-4589-beba-14cdb15412cc",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c62bf66a-e5ac-43ec-a4c4-c9533d80a399"
        },
        "item": {
          "id": "a68f8260-fd56-40cb-a3a1-253c6c45e844",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1d7d475e-b88e-472d-a5a9-084d79cc99ab",
          "status": "OK",
          "code": 200,
          "responseTime": 285,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "bd9ac8b1-65ac-45ce-b338-fe8f10d88f61",
        "cursor": {
          "ref": "7419e563-d433-4a55-b549-a8d8e64dd976",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e640bb40-c8e0-401d-a23f-d04081f12314"
        },
        "item": {
          "id": "bd9ac8b1-65ac-45ce-b338-fe8f10d88f61",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f164445e-4f64-49f1-ab76-423220aacde2",
          "status": "OK",
          "code": 200,
          "responseTime": 295,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "bf443502-e261-40ab-a673-f18a64252428",
        "cursor": {
          "ref": "70d93eb3-f24a-4934-b92d-751ab350790e",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a26500f4-d201-417a-9ff3-be4194b9f960"
        },
        "item": {
          "id": "bf443502-e261-40ab-a673-f18a64252428",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8cb77f2f-37a2-46bc-8c48-00d8ca9f7616",
          "status": "OK",
          "code": 200,
          "responseTime": 553,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "036b38b7-6327-44e8-9e44-236096d6d237",
        "cursor": {
          "ref": "d18afdb0-0f86-47df-b04c-9ddaef86220f",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9343f9e6-55e9-4deb-b053-cb45d460935c"
        },
        "item": {
          "id": "036b38b7-6327-44e8-9e44-236096d6d237",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "87cd9fa2-29bc-4b71-882c-89efd7387afc",
          "status": "OK",
          "code": 200,
          "responseTime": 996,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "62177f6e-6a7e-405c-80cf-141206469a47",
        "cursor": {
          "ref": "5854f83f-40fd-4ef6-b2de-8477066a6bbf",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2d729006-eb26-4a2c-bb11-66769ecc6f3b"
        },
        "item": {
          "id": "62177f6e-6a7e-405c-80cf-141206469a47",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "6dc3e119-0c0f-4033-8f56-cbd552d5470a",
          "status": "OK",
          "code": 200,
          "responseTime": 519,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "9d1ea725-2f02-4232-b4ea-4a615eb4d4c4",
        "cursor": {
          "ref": "7fb004ba-88de-4dc0-9df4-71c54660ec6b",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "147215da-786f-4a90-9d55-7e32e7f451c7"
        },
        "item": {
          "id": "9d1ea725-2f02-4232-b4ea-4a615eb4d4c4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d067cde7-d805-465c-a57c-e1761016b7be",
          "status": "OK",
          "code": 200,
          "responseTime": 1140,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "f6af156a-2115-4662-8325-9c97e84cbaca",
        "cursor": {
          "ref": "0f3ee186-4339-4a68-adb4-025d0f41b150",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "88836c0f-c8ef-486c-aff9-95cf97cdecfd"
        },
        "item": {
          "id": "f6af156a-2115-4662-8325-9c97e84cbaca",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d33be4b3-ca2c-4777-9330-c3a11d72a457",
          "status": "OK",
          "code": 200,
          "responseTime": 608,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "71964cdf-7ec5-4e7b-81ee-b188b9edaf91",
        "cursor": {
          "ref": "4ddb1788-1aeb-482f-906d-c6831642cec1",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "455f2e79-c392-4fc5-b2b6-00cfe5e5b2df"
        },
        "item": {
          "id": "71964cdf-7ec5-4e7b-81ee-b188b9edaf91",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "89610358-5bb7-4ad0-907a-983f1ffbc00b",
          "status": "OK",
          "code": 200,
          "responseTime": 1100,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "e49c000b-c299-4987-ad6c-0acc67dbc4c3",
        "cursor": {
          "ref": "5aa412a3-7757-400e-9bdb-9c4f017da96f",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2a48563a-490d-48ba-bcda-23eb37bab2d0"
        },
        "item": {
          "id": "e49c000b-c299-4987-ad6c-0acc67dbc4c3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8ad153b0-1676-4815-933f-02d61833ae69",
          "status": "OK",
          "code": 200,
          "responseTime": 1017,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "967f89bd-9552-40bf-813a-4de4fee61d86",
        "cursor": {
          "ref": "c602c382-4d77-4f5c-be83-d7aa0dbabf3e",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7037cee7-4e79-44d1-9cb2-e95c7f5d5ab3"
        },
        "item": {
          "id": "967f89bd-9552-40bf-813a-4de4fee61d86",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b323ef5b-36dc-438a-95fd-2b1621f629d5",
          "status": "OK",
          "code": 200,
          "responseTime": 532,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "ba3a0959-c66e-47fe-afea-c1481d40ce97",
        "cursor": {
          "ref": "956ae5ec-c54d-4d52-987f-aa178aa1dca9",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "6e257d79-1d11-4514-a625-1c2c20391da2"
        },
        "item": {
          "id": "ba3a0959-c66e-47fe-afea-c1481d40ce97",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0f033b6f-ac48-414c-b20e-c64d88c10fee",
          "status": "OK",
          "code": 200,
          "responseTime": 1008,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "9dea4659-a9b5-49eb-b59f-f362d80b15a0",
        "cursor": {
          "ref": "57675353-25d6-4399-b836-8cbe8a1b7978",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b7f378f4-eb2c-4ea3-9db3-b4b0d690239c"
        },
        "item": {
          "id": "9dea4659-a9b5-49eb-b59f-f362d80b15a0",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "272e1ae1-7d9d-4b7a-bf74-be55b6e17fba",
          "status": "OK",
          "code": 200,
          "responseTime": 513,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "baa2a922-31d6-4a5a-a3fd-cb26e4e784dd",
        "cursor": {
          "ref": "b71bf45e-0b81-47fb-adc5-1bf685680310",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e3d5bb01-429f-4bc2-8c1b-fbccca09aa4c"
        },
        "item": {
          "id": "baa2a922-31d6-4a5a-a3fd-cb26e4e784dd",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4054808c-5642-43d3-bbc9-a32653c7a63d",
          "status": "OK",
          "code": 200,
          "responseTime": 982,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "bcd02f36-1090-4e0f-935a-06db74653a15",
        "cursor": {
          "ref": "4dc28675-987a-422d-8ed4-a390258cebed",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "02388acb-6b81-4f97-93c2-6d11ae2f16c7"
        },
        "item": {
          "id": "bcd02f36-1090-4e0f-935a-06db74653a15",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "7490ba02-2e5c-48e6-b2e0-75fedf6c2090",
          "status": "OK",
          "code": 200,
          "responseTime": 539,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "98f6efff-da66-41fc-8016-d83153bb13c4",
        "cursor": {
          "ref": "a80ef33e-e382-4509-b7e6-17a6f7d6e229",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d2068000-18fc-43d3-96dd-940fb3557f33"
        },
        "item": {
          "id": "98f6efff-da66-41fc-8016-d83153bb13c4",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1792b4a3-0476-455f-ac33-0b9e16c39fbd",
          "status": "OK",
          "code": 200,
          "responseTime": 1136,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "5112ef6f-8a5f-4de3-a2ea-1d52ebab8e39",
        "cursor": {
          "ref": "8684dd75-aa2b-4512-a311-4311bbf5b5ec",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "54d954d1-61f2-44dc-86c4-d61afa901064"
        },
        "item": {
          "id": "5112ef6f-8a5f-4de3-a2ea-1d52ebab8e39",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2f3587a1-48eb-4a98-9fc9-7f75934237e0",
          "status": "OK",
          "code": 200,
          "responseTime": 296,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "45d13534-9922-48b7-bc53-d29a694a6491",
        "cursor": {
          "ref": "e14a3b4d-37df-40de-912c-37d299913c9c",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2d9c1412-5dd7-4c25-833a-b81d924d5b30"
        },
        "item": {
          "id": "45d13534-9922-48b7-bc53-d29a694a6491",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c61d3f4f-c04b-4d18-9246-8cad18f048d3",
          "status": "OK",
          "code": 200,
          "responseTime": 2276,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "5b6c3b73-7cde-4ee6-8ef5-cb49f5116f14",
        "cursor": {
          "ref": "46bab39e-5279-44d8-8b25-dce4e0238a13",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9913f254-a0da-4ef2-b4ec-7524d64d3fb7"
        },
        "item": {
          "id": "5b6c3b73-7cde-4ee6-8ef5-cb49f5116f14",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8a64452a-472e-4c5e-8700-ef9ab5d23228",
          "status": "OK",
          "code": 200,
          "responseTime": 283,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "43ab050f-4db0-4ec7-a44a-bd0059d6edfa",
        "cursor": {
          "ref": "338cbe33-bc00-4395-b052-65feee479e95",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "82799065-d2b8-4249-8264-f5f0ee998822"
        },
        "item": {
          "id": "43ab050f-4db0-4ec7-a44a-bd0059d6edfa",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "dab74a7d-924f-463b-b029-8633589c352a",
          "status": "OK",
          "code": 200,
          "responseTime": 292,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "c4fdf628-c00b-401a-8dab-adc998e1a3ec",
        "cursor": {
          "ref": "6b95995e-8e33-4751-8b57-26970b27f064",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3f4237aa-d330-4925-928d-bf514ee48218"
        },
        "item": {
          "id": "c4fdf628-c00b-401a-8dab-adc998e1a3ec",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6d064624-1356-48e3-b084-192484e859be",
          "status": "OK",
          "code": 200,
          "responseTime": 273,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "84adddca-a281-4eb5-8c8c-d978d6594622",
        "cursor": {
          "ref": "6f363865-7215-4f02-a3fc-5403cca11dfe",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "70be3eac-6716-4d93-84fa-c63cca749b7e"
        },
        "item": {
          "id": "84adddca-a281-4eb5-8c8c-d978d6594622",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a17299e8-35c6-49a5-bc1c-73446d35564f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "f6e4b465-c2d1-4092-b14e-06790385f790",
        "cursor": {
          "ref": "40ac0210-e038-4849-b25c-296d7e5b9bf3",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0d3cbf7d-b4b8-40b5-8943-c9b48f3b0cb7"
        },
        "item": {
          "id": "f6e4b465-c2d1-4092-b14e-06790385f790",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a68f1496-8f8e-4e77-84a9-3722da6cbc54",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "07f142e3-c6b8-4515-a60a-825fad2fbe73",
        "cursor": {
          "ref": "ef37fbd1-dbef-479c-873d-b47bd671b782",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9940968a-b49f-4cdc-b649-2f845b367369"
        },
        "item": {
          "id": "07f142e3-c6b8-4515-a60a-825fad2fbe73",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "3a6a5053-de13-4419-9c2f-509795f40c75",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "a94fd465-6d8b-4def-a8c3-2aa5a52b4b85",
        "cursor": {
          "ref": "93aaa4c0-fa2c-48c8-a4d9-70dddb3d9fc9",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "28281946-2e43-4720-8014-910e366360ca"
        },
        "item": {
          "id": "a94fd465-6d8b-4def-a8c3-2aa5a52b4b85",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e33dd919-86ac-4699-87b2-ad9b76943f43",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "cfd97dea-1740-4f16-982b-f085a09efaae",
        "cursor": {
          "ref": "330df372-650d-42f8-8356-118d06955f8a",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c0e0af06-dc51-4a8e-94db-02d36d7e2a47"
        },
        "item": {
          "id": "cfd97dea-1740-4f16-982b-f085a09efaae",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "608075f2-e5cb-4c2b-bb62-511f8e620a25",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "58f053ef-6894-490e-9cbb-7580511aaed5",
        "cursor": {
          "ref": "11c88d9a-abee-40b5-b390-372759ceabcb",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "2f7ccb6f-2783-40bb-b323-64cdb367000d"
        },
        "item": {
          "id": "58f053ef-6894-490e-9cbb-7580511aaed5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2339ffba-5331-424e-8814-e177fdecb58f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "d187d7e3-c7ad-4cb2-b061-09ab3d5e0b0d",
        "cursor": {
          "ref": "5310e2c1-8e85-4f53-9786-9aaebc45c887",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "396f4408-7d88-4995-9969-eb9a33157f2a"
        },
        "item": {
          "id": "d187d7e3-c7ad-4cb2-b061-09ab3d5e0b0d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "cc721e53-40bd-43c5-b187-f634980a34f6",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "a3f4501d-29f7-48de-ab5a-e78eff250b3e",
        "cursor": {
          "ref": "47265139-5f6e-4af9-8bb8-d2e6a09feec7",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "5c3a4ee4-d70b-4aef-9c31-2efeecc1a806"
        },
        "item": {
          "id": "a3f4501d-29f7-48de-ab5a-e78eff250b3e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "637f5703-905c-4b36-9efc-bc500a804922",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "871ab8a4-2968-4fde-8551-6d2b58faa09a",
        "cursor": {
          "ref": "f40c6895-fea8-4533-95d3-2d28bec26597",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5ae396e5-323a-473f-966b-49e76b6b038a"
        },
        "item": {
          "id": "871ab8a4-2968-4fde-8551-6d2b58faa09a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "751efafa-d59b-4347-a297-576bc50346a0",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "58f04e84-0969-4c78-ab75-41927667bb81",
        "cursor": {
          "ref": "97c9ec76-122d-4ffd-a55a-22c37ee85ea1",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "328906ac-18a8-41ed-a29e-7ceb2f430fe2"
        },
        "item": {
          "id": "58f04e84-0969-4c78-ab75-41927667bb81",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b2f7a6df-d1e6-4b3f-a458-c88a75c1352c",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "a1e2e379-0115-4f00-92e1-683404fc3a35",
        "cursor": {
          "ref": "26a95491-a228-47ac-8f4e-712cba41e7ff",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5e86ec6c-c42e-4130-8a4a-854a40b7dc83"
        },
        "item": {
          "id": "a1e2e379-0115-4f00-92e1-683404fc3a35",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "756e3319-eefb-4fe8-9207-ea8658c0dac4",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "7d8de36f-a6e7-4b3f-b08c-e5f09aeb8f0a",
        "cursor": {
          "ref": "06ec1d51-1a30-4d41-a6cc-86a8fdad4ef8",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2fc34475-af67-46b2-8b59-b07e8084a5b9"
        },
        "item": {
          "id": "7d8de36f-a6e7-4b3f-b08c-e5f09aeb8f0a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "666fd2b7-72cb-47a4-a2b9-1183b1d58e6f",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "2149c19a-1b40-4b8c-ad05-7df7ec5e63e7",
        "cursor": {
          "ref": "07e2d61e-8038-40b2-b21f-d8c3239395b4",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3a26a163-1ccb-487f-9a81-00a101d59110"
        },
        "item": {
          "id": "2149c19a-1b40-4b8c-ad05-7df7ec5e63e7",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "7b231459-8169-4526-92af-4c561a8ba4de",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "74661b31-4ca3-417a-98d4-6c892c0cf7ba",
        "cursor": {
          "ref": "15fba56b-9fb1-4db6-9102-3c7b90e395b2",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "5c62f2d8-260f-4e74-b3f3-f3076063bb9c"
        },
        "item": {
          "id": "74661b31-4ca3-417a-98d4-6c892c0cf7ba",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c39f3c31-27c5-4c55-aaaa-394d3fd4741c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "15c38421-a14a-4ef7-8ab8-592f90cd8d58",
        "cursor": {
          "ref": "3cfbcce8-b20d-43eb-93a2-bfd2e2da731f",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f0e9d06b-2f4d-4c6e-9d3f-251881099f5b"
        },
        "item": {
          "id": "15c38421-a14a-4ef7-8ab8-592f90cd8d58",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "2f07362a-b03d-4d2b-a99e-71976758c61d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "87181efc-4356-43d7-b5d2-e919c10863bb",
        "cursor": {
          "ref": "9e33db70-caf6-4ac9-8a51-e66f60e1171b",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f78c0be5-9b02-4c35-8800-6a35201f5457"
        },
        "item": {
          "id": "87181efc-4356-43d7-b5d2-e919c10863bb",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "2a81e061-fc94-45f2-bc2b-d1cb5e44bef5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "a9203eef-1010-487f-bbc6-03b420f9672d",
        "cursor": {
          "ref": "525f1463-2b58-4e63-b108-cf440b6d82cd",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "195fb50e-f864-4b1b-a4db-d16f3e205da4"
        },
        "item": {
          "id": "a9203eef-1010-487f-bbc6-03b420f9672d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9fffe0cd-c41e-40c5-afe8-3fa5e4259e69",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "3b1bf165-0ff2-4d20-b8d0-2e3f002f93a3",
        "cursor": {
          "ref": "59f189e7-97f5-447d-96b8-8fe684a90fb6",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3fe5770e-03b5-4c05-82fe-ee937f13b390"
        },
        "item": {
          "id": "3b1bf165-0ff2-4d20-b8d0-2e3f002f93a3",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "14fc747d-f375-4f86-9e2a-af21a99d787a",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "b945da7f-8335-405a-8a85-95f2ad2aaf76",
        "cursor": {
          "ref": "85e7e7c2-90d8-4c64-910c-f653c5bd9f89",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "237574e2-8d68-4e41-8a1b-5fce171ed90e"
        },
        "item": {
          "id": "b945da7f-8335-405a-8a85-95f2ad2aaf76",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "7a2cb031-367e-4099-a0ed-395bee30a472",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "a51a3558-9e3f-406d-96e1-023d9f427d88",
        "cursor": {
          "ref": "9149b394-493d-4f6a-b8ca-76bd345ad2e0",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8deee665-2663-4c0c-b2b1-8d1cd6e67710"
        },
        "item": {
          "id": "a51a3558-9e3f-406d-96e1-023d9f427d88",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4d1cf206-531c-46b3-be71-dc1304c1c618",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "8e69ce05-f26d-4c6b-89eb-025cef4db23a",
        "cursor": {
          "ref": "5fe5b2b4-3f3a-4383-ab20-06cbcc800495",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6ace269b-a17b-4462-9408-d9b890fcb071"
        },
        "item": {
          "id": "8e69ce05-f26d-4c6b-89eb-025cef4db23a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "836467dc-6eec-4187-b8e1-3fca577421e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "b1405733-ea53-439e-8d2a-577b03b43002",
        "cursor": {
          "ref": "9e10d10f-8791-4516-8267-10182072b512",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "66ae7e27-3191-4c69-affc-dba4d4708fe4"
        },
        "item": {
          "id": "b1405733-ea53-439e-8d2a-577b03b43002",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f9ba784a-23f3-4ae2-932c-fc847b82146d",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "e8a74101-cd98-4fa6-8d09-783eb450a666",
        "cursor": {
          "ref": "31557c33-3517-4067-ad9c-0ad19377eb79",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1a894a07-9b00-4f4b-9b32-edef8c78fea9"
        },
        "item": {
          "id": "e8a74101-cd98-4fa6-8d09-783eb450a666",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0258a8e3-ae6d-489d-b955-9d093c017320",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "24bba6fd-b692-4116-8bf8-735b8e89fd60",
        "cursor": {
          "ref": "a3f41345-fbfa-4ee5-bbd5-4de8941f1f05",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "c4501f36-1d51-4d4f-889f-1c3c7fe78ed5"
        },
        "item": {
          "id": "24bba6fd-b692-4116-8bf8-735b8e89fd60",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "df26ef49-231b-41e9-9c69-33f4622da707",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "e2ee2f97-0c05-4574-aab2-ad8947c70a5e",
        "cursor": {
          "ref": "57e9bea5-6d6e-4379-a9a9-2258980e4354",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "99870291-9c52-4f3d-b406-b07b528a3e8a"
        },
        "item": {
          "id": "e2ee2f97-0c05-4574-aab2-ad8947c70a5e",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c221551e-87c4-428f-9be5-57430f0dfef9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "88d908b1-b334-4652-a200-11b99531439e",
        "cursor": {
          "ref": "1cfb0c72-b010-43ca-9896-4bf3f3a91a47",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "bce562e8-2979-4dd1-8e63-926a9f9ebb96"
        },
        "item": {
          "id": "88d908b1-b334-4652-a200-11b99531439e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "75dda0f5-14b6-4eac-ad95-50cb4f2b3535",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "74277344-fa45-4f0e-8878-fec329907837",
        "cursor": {
          "ref": "5b503020-ca9d-4fba-b2f0-87e309345b22",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7ec47a2e-f11a-4155-8db9-3a1b5fe76d1c"
        },
        "item": {
          "id": "74277344-fa45-4f0e-8878-fec329907837",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "52d0c517-15b8-4e6e-b949-0225d4158211",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "d68d5cc1-aa25-4050-8a79-b0b9faffaedb",
        "cursor": {
          "ref": "56b054c9-ad43-4f36-82e6-a8695d3f6e60",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b9615bc5-875a-4a1f-a7b5-d1f1e45f3725"
        },
        "item": {
          "id": "d68d5cc1-aa25-4050-8a79-b0b9faffaedb",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e69c9907-f152-41c8-9506-0c667492ef78",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "72a42f5a-f1e4-4de8-aef8-22bd31c07085",
        "cursor": {
          "ref": "1bdd2577-5dcd-4f81-93f4-fd668601d7ce",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a1a66542-3e97-4188-b4d0-1b25f9e3dc2a"
        },
        "item": {
          "id": "72a42f5a-f1e4-4de8-aef8-22bd31c07085",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8e21caac-2764-49fe-973b-60dea75cf1f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "58b5c281-bcb7-4126-aea5-82b975086e79",
        "cursor": {
          "ref": "4b214616-b6f8-4f36-8229-ea1e21b63532",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "04276bbe-d215-4cab-9a29-72c018faa990"
        },
        "item": {
          "id": "58b5c281-bcb7-4126-aea5-82b975086e79",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "fcbab70c-1692-45b2-bb01-df4345ce1729",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "b2b0bb95-d91c-47d0-ace8-acc6efafc1cd",
        "cursor": {
          "ref": "9e233fac-2d63-4029-9253-987d2734d8d1",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "df5f662c-d6a4-426c-94e7-e82f966078b1"
        },
        "item": {
          "id": "b2b0bb95-d91c-47d0-ace8-acc6efafc1cd",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "2161daed-c3d2-4b30-97ab-6a67d5080997",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "0eec4050-73b4-4f87-b8c8-85a893809ebe",
        "cursor": {
          "ref": "162cf448-87f3-479e-9eb2-962a789ecaea",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4ecd48f3-bfa8-42f3-9bb2-9d4b2e4c2b8e"
        },
        "item": {
          "id": "0eec4050-73b4-4f87-b8c8-85a893809ebe",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "0455ce2d-e9b8-4fb7-b580-f5c787d1fdcd",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "8047dbe0-f408-4420-a24b-be8736b38edb",
        "cursor": {
          "ref": "972c5180-99fb-4aab-a3fb-cfe4c88e75a0",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "14684693-87ca-46e6-9f97-31c5c82fcb19"
        },
        "item": {
          "id": "8047dbe0-f408-4420-a24b-be8736b38edb",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a7490e7c-d069-4970-ac2f-6e34ccb62564",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "1d81b339-cb8d-4931-b7d8-a8e44b29c9ec",
        "cursor": {
          "ref": "08dfb155-4358-4658-b9fb-afd03af133fc",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7f6754a0-8971-4047-bcc9-614134b837c8"
        },
        "item": {
          "id": "1d81b339-cb8d-4931-b7d8-a8e44b29c9ec",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2e0ceac1-4866-4b5a-ab03-e6f4010e6336",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 68,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "1c2ef315-f0ae-47c6-85ea-b57cf63c1907",
        "cursor": {
          "ref": "7833245e-14a1-4a97-bfb9-950d86f2e6d5",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "73a115af-e737-483f-b092-b176c2106d8d"
        },
        "item": {
          "id": "1c2ef315-f0ae-47c6-85ea-b57cf63c1907",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "5d67585b-9690-44a7-a9c2-5b12aac11c40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "c9302f2a-4c9a-450a-a25f-66687cd5d68a",
        "cursor": {
          "ref": "3e60b1e8-94cb-4a91-bdf7-074f6d69204e",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "10c66342-9bc7-4456-90b1-328cb4c8760b"
        },
        "item": {
          "id": "c9302f2a-4c9a-450a-a25f-66687cd5d68a",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "6b6ac109-5705-4348-9787-55262ca8150b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "35e1ae2b-fde4-4a8c-a1e2-996b9c0f251c",
        "cursor": {
          "ref": "02034676-591b-4c4d-bfea-e02020611611",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "0ee96917-3667-44aa-a1c1-18a8c84bd2bd"
        },
        "item": {
          "id": "35e1ae2b-fde4-4a8c-a1e2-996b9c0f251c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e842e431-6bd6-44af-8bbd-10586e0893ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "24adf816-a81c-437f-aa7b-93d34d311622",
        "cursor": {
          "ref": "a1621556-7020-4900-a070-c33277aaea3b",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "05363962-db71-442c-afc7-4ed58c00ebab"
        },
        "item": {
          "id": "24adf816-a81c-437f-aa7b-93d34d311622",
          "name": "credentials_verify"
        },
        "response": {
          "id": "2ade9c5e-0e23-4fef-accf-08810f0de0df",
          "status": "OK",
          "code": 200,
          "responseTime": 941,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6f330d-6ef1-455f-bd9c-25901f37ad23",
        "cursor": {
          "ref": "a917963c-5ce1-4c43-aae8-3ca7ccc4458f",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "76fd0c24-45da-4c81-88a8-ac300bbf049c"
        },
        "item": {
          "id": "6c6f330d-6ef1-455f-bd9c-25901f37ad23",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "544257d1-4018-4ac5-8d72-9c01e0033faf",
          "status": "OK",
          "code": 200,
          "responseTime": 984,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "546e9615-6f0e-400c-a342-571e8f3e2904",
        "cursor": {
          "ref": "7aadacea-d7d8-4647-8298-2bd825033026",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b2cee02c-e76f-4bee-a1d6-7eb8b93cab26"
        },
        "item": {
          "id": "546e9615-6f0e-400c-a342-571e8f3e2904",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0251b24c-b24e-46d0-ac95-71c9987a493b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "546e9615-6f0e-400c-a342-571e8f3e2904",
        "cursor": {
          "ref": "7aadacea-d7d8-4647-8298-2bd825033026",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b2cee02c-e76f-4bee-a1d6-7eb8b93cab26"
        },
        "item": {
          "id": "546e9615-6f0e-400c-a342-571e8f3e2904",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0251b24c-b24e-46d0-ac95-71c9987a493b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "546e9615-6f0e-400c-a342-571e8f3e2904",
        "cursor": {
          "ref": "7aadacea-d7d8-4647-8298-2bd825033026",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b2cee02c-e76f-4bee-a1d6-7eb8b93cab26"
        },
        "item": {
          "id": "546e9615-6f0e-400c-a342-571e8f3e2904",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0251b24c-b24e-46d0-ac95-71c9987a493b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "00706730-8579-47db-a9c4-305970491c34",
        "cursor": {
          "ref": "d871cd56-8a9b-4fa6-91e5-5921fa27f39c",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ec7d9193-dfa1-432c-af42-7ae101fe93ea"
        },
        "item": {
          "id": "00706730-8579-47db-a9c4-305970491c34",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "31700eab-f643-4ae0-a377-d97848bd72ac",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "d19c8aec-5839-4716-95a3-cf07b1597f8a",
        "cursor": {
          "ref": "1af2dda9-8dea-4fc4-8415-0fb61176912d",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "19121248-2f4e-4b39-8ac1-65a81bffdfb1"
        },
        "item": {
          "id": "d19c8aec-5839-4716-95a3-cf07b1597f8a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5e668b20-f2a1-4e6f-8aad-790120f0a057",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "d19c8aec-5839-4716-95a3-cf07b1597f8a",
        "cursor": {
          "ref": "1af2dda9-8dea-4fc4-8415-0fb61176912d",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "19121248-2f4e-4b39-8ac1-65a81bffdfb1"
        },
        "item": {
          "id": "d19c8aec-5839-4716-95a3-cf07b1597f8a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5e668b20-f2a1-4e6f-8aad-790120f0a057",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "b70a3cbc-3683-4c64-aa70-27319a1405d4",
        "cursor": {
          "ref": "e1565d26-326c-419a-b0d7-62c8f9c9ca0b",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a12144d3-f9eb-4ba4-8263-545de8a5876f"
        },
        "item": {
          "id": "b70a3cbc-3683-4c64-aa70-27319a1405d4",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "269a4fd2-8331-45ca-879d-74699a5debea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "eb4d01f9-d216-4fb8-b477-f4aaa81830ac",
        "cursor": {
          "ref": "ba3f8d8a-fcfb-46ee-b81f-4a3cf99cfd72",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "4388281e-7711-45bc-b0bb-55dcf66df248"
        },
        "item": {
          "id": "eb4d01f9-d216-4fb8-b477-f4aaa81830ac",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6a0011f1-fed9-43e6-a737-28bed75f554e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "eb4d01f9-d216-4fb8-b477-f4aaa81830ac",
        "cursor": {
          "ref": "ba3f8d8a-fcfb-46ee-b81f-4a3cf99cfd72",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "4388281e-7711-45bc-b0bb-55dcf66df248"
        },
        "item": {
          "id": "eb4d01f9-d216-4fb8-b477-f4aaa81830ac",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6a0011f1-fed9-43e6-a737-28bed75f554e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "ee27ef94-198c-44a9-b290-7bd9dcf05f0d",
        "cursor": {
          "ref": "d1cfe61b-93a2-49bf-ac90-e7bdc9493095",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "4b7b36f3-2b8d-4643-b684-4b5e1a2e52f0"
        },
        "item": {
          "id": "ee27ef94-198c-44a9-b290-7bd9dcf05f0d",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "c5c2ff31-bd9c-402f-96a2-e9f38630f2f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}