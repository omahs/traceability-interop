{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "37397207-2b47-4771-90d2-7e5b59376cb5",
        "name": "Clear Cache",
        "item": [
          {
            "id": "487b1841-ec0c-4594-b64d-e1be30ea8855",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8e8d2c49-eefa-4f30-8285-684c7c60c497",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "23c341a5-b517-4d01-be63-a7ab38f52b7c"
                }
              }
            ]
          },
          {
            "id": "ec213771-ff79-4ac9-b4aa-8fc08b9acc6c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2bcf2e9e-4b3a-48ce-964f-567d8224a146",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "57745043-c8d5-44f9-b19f-879e872e7d1c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a01e6a1e-6216-4ac6-9e80-261b67d5d2dd",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "469d9f38-ff01-4b8d-93d4-15696b4a1efd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8d090f5d-4d6b-4a26-99eb-4ff2f00d6aa9",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9efa11d-d644-46f3-80c3-885177fa6c7f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ee91dfe0-032e-462f-b2a5-c86ad6b28849"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9ec72c42-0951-46c4-a374-e1e511b55192",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "58abd3d0-c5bc-4a12-96b0-fd114ee1446d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8a9d637d-90ec-4b07-a000-667f6a474ecf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "470e0cdb-7dc9-43ca-be22-b7832db220d8"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "602ed3e1-112b-4b32-a2b9-28976e9baa67",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "09207493-d7b3-4a21-91dc-c7b80880fe08"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b53a071a-8e14-46e1-9086-ccfdb854a800",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9558f373-8548-4752-bc2a-b0149fb5648d"
            }
          }
        ]
      },
      {
        "id": "fdeaa25e-a83b-4009-b6f3-7b305fb13c53",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "86b6de24-82d1-403c-b2fc-a0b454f6ad99",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6269dedd-49de-41ac-9ecc-8d4a1483ee90",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1648f965-6260-43db-a3f3-09b90e2a4226",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b868d57-5ce8-4033-82cc-c34d8d2d30c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f0c1d8d-c887-4c02-8a99-a9a2f3faf25f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea62f12-13f1-4d55-9afd-08826099ec5b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb53a5e-ff38-454a-a91a-2b2ce2b62e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2708a62d-b223-4bbb-8446-11dc8d7cd7af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07b21f7-f44b-4528-87a9-e96701023cd9",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "775eea31-206f-4585-a998-fb9d8f0014a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fae9df42-8aa6-4bad-a52c-c3d03f8ee72a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6b4c64be-b717-4344-a6a8-b645fe7b65e9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7cc4497f-fb92-454a-a80a-a07e80664c03",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a0a030b-e902-4f7e-9e7f-115b49a56d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4238c9b3-6adf-45e0-8e5a-4c269de96bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3f56a8-7ca5-44a7-9287-82683ba46082",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f619f68-ad76-49be-ad2a-f867307aa94e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7abbf2d3-e205-4f96-9fb3-396d52c1dedf",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1fdb18e-d8f7-4f5c-b5a8-1eaddb876193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7bb676f0-5182-4578-a06b-ec5e59f41979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30dab9ca-e8f8-4107-9366-6be507b3c5dc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "b12428d6-79d5-4077-9e88-81bbc01910c2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "65985a7f-6413-4217-ac5a-a7936953ed82",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6886d014-4399-4516-9989-5cd60260159c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "98a4bbac-14f0-4109-8566-1561b8719d18",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6426e677-5ff1-4715-af04-2c5787ac60cc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0cc5c8f2-5c28-470b-a578-943927c41dfd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "5dd0665d-a26b-485d-a03f-3d4c63ef9da7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7a56ea05-a7dc-47c6-94a7-b7a3e1ee7334",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4229868a-54bf-4e88-beac-0b9933acb5fe"
            }
          }
        ]
      },
      {
        "id": "f4e7f8ca-da6c-4534-8d0d-c1bc1f87cd52",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "8692f387-703f-42de-8036-0a5c57aa2996",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5afa1e85-7a55-436a-aef2-9de22828e3ba",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "25f224d6-599e-48d7-8410-787972ff6056",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fcef1db-bd65-4adb-a9d8-aeefbeb71dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d50cfb46-bc09-4e01-903c-24e11e2764e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca4ff5a0-f188-4d11-a4f5-bcebaa163202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "386c7905-c184-4e67-a347-36596e0de749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8d448c-a4f3-428c-b3d2-aad3b9887834",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea785b55-f07d-4b95-8932-fede5132bf56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82016e87-c73d-44b3-a1dd-ddf106d27b96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec8d7f78-8902-489b-ac80-73952af3421d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d22fd126-8c08-470e-9c24-e6f66adcf3fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0bf347-48ca-4684-9aa6-a6b53d52ef1e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f3f042e-4273-4886-ad04-0c1843052dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4873ee3-ca33-4026-b6b3-f26ad7d77773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6669f61-231d-468f-83cc-b039d9e6f1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1312e26c-c624-497c-93ea-2c8573418b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f904f200-ffbe-4fb1-b945-04bcde4d41a3",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f75b4f9-a7d3-4bb0-9e7d-a6219cfd52a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfdc33ba-daf3-48b9-ae60-1fa58db3c1ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3aae10-b61e-4ad9-ac6f-b3bf48424c0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa6d7de1-4dc9-45f2-9421-3e1444a59e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed680f9-99b7-4cea-bcc9-b3d794d3267b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "340b2095-4aa6-45a1-a767-1aeb016b4d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4b79ff5-3fbf-4411-9794-f519b071ef1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36684355-875b-4d55-aa5c-cfde64f355c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6687bcbe-d0b6-424e-939d-0f07a65c1bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda4799b-c533-4b38-b6f7-90e190486624",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f37672-e487-4a46-886e-c62de06eedae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6da785ec-43ec-47d6-93dd-3280547f27cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b436cb1-b1da-4a6d-bf84-008d7e9c7b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a0837b8-75ab-4fd0-9d3e-38d9b7200d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9fab236-31e5-4b6c-8c85-48e7c66bbf28",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4de77f-de0a-48b3-a585-5c571a622e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0f8517b-a833-4965-920b-83d14c79c7ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c85ba7-5c77-44f1-85f5-2cd03b08283c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7dbff429-d5c9-4fc4-9a4d-dfc356263554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0398ec-6c00-4286-83b8-bc7907c6162b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71dc95b5-1561-4962-be49-44ea27805692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f196ecb-a6b0-4a95-97c8-62d4d0233d72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33bd562a-3f29-4b20-b227-5f095ddf7081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3654525a-46a5-40f4-8881-8f822104d223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65fe3fa9-5a7b-4744-b003-215c04a72cd5",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9795b2-8ca4-4850-a06e-29c4a96de5f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a1f6e42-aa7b-4968-9533-c0481423ca71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50533103-1bec-4b05-bea5-6ffff3be79da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2138073-fe06-41d7-a3e7-cb4d597253fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a31e7c-9886-46c8-92e5-9c9f1a42ec8d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "403b89a8-8f7a-4af3-88a0-b274931d584d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8fa46e1-ac21-4d24-9ea1-d0a469ac9382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df93e4d-6a67-4e98-b59d-d0df2b09c7e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bea77f67-84aa-4ea5-a603-8b5fe273cc63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1836325-aa1b-4455-b630-5f83854bfe72",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d44f3fe-4861-4cee-bbaf-be634201a8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85a9c926-bd98-4154-8b36-d834ec93214c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5403a6d3-4f29-4376-a499-405cc6146221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a400ae3f-7006-492d-a572-ed69bc8f5476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a29aeecf-c807-49b1-94ab-5a7db13f5846",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c19a251-28bf-431a-a34a-fd57755654df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a4f524c-4345-45bd-98ff-79537b4cbc17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce2c95f8-807c-4699-90e7-80338595af41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a791cb48-423d-403e-b9b6-cc27e9acf1c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5b2876-f0e4-49e4-b90d-9067d14b8d1a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0ce9db-f219-47ee-8c16-d9ae31d3baa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3de105e6-8df3-4aee-be2f-96a8173304f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d414a20-f535-4c49-9dba-042113ded3c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca6de289-1601-4deb-bc16-9f3bd03d9f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b0f27c-d6df-4d37-9352-976631f9494f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bbb90ed-aefc-44e8-9ef7-1fb4e1f01db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "362dcaa7-8f1b-4262-964b-2419ec0dbf8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71fd358c-da89-453e-8799-0ff522acbedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19638f40-9984-409d-8b66-e684c921e704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "552fc260-42fb-45b5-b953-71d7bcac0e49",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "256cc796-b71c-452e-b031-a1dfa640f36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ca0f209-8ec8-479c-9aa9-b579cce10642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64239353-c9c4-461e-ad6b-1400e29e9ffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "710ae036-1707-436a-954a-8053bc21d792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a7d02a-0473-45f5-b553-fc06ad978cf4",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a736a6c8-04e2-4789-ba46-1e69f4436454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6794d87d-ff69-427a-af8e-4d90640b7b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718bc1c5-91ae-4218-b8d8-9c7ce39a26b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00b9fa78-feed-4585-b026-63f7722faede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c071bf3d-d63d-4168-9af0-4615a5d09697",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c717b920-3161-4a6e-a657-32b92de206da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d6723c1-6ba5-490e-9e86-48cf354623d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc0b3cc-d233-424b-a59d-bf62a0b8576a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "170f5759-3339-42de-a855-d871c6e1b3ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762f142d-bbed-4bff-89dc-7f5a5c047e8c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dea5492-ed48-4dde-b482-a0fd857781ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fb8a2dd-cbd7-4b4e-9553-66f69f6ad86e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b83862f8-0cc6-40b3-b133-9cf373df7ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc4e5396-f828-4211-b655-58a4fbef0294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0464fd3-0ede-4a9c-b8b3-a47b3d287468",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7196cc6-a30a-4470-a8fa-9a7d7d45ec18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c28a8fa-0726-49e8-b2e5-88126517d79b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd496184-fccf-4dc0-bcbe-eb072a12a4f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "06caf8c8-2fc4-4bb2-8a40-04f2e56ce6d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c161459-7204-4dab-b0be-37ba1f913b8c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "147499e5-6352-446b-bfb1-8685f6a5163e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "107cc596-ea49-4066-bf92-889db12a730e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d13fc7c-6611-432f-91e9-63be176eddae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e402b98a-c2ad-42dd-a7b3-3bd36adcb046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbaeed43-b542-46b3-a70f-a71134a4b98f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc923c5f-a51a-4b59-a493-34c967cc74a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbe9f8a2-b93a-4d24-ac2b-e4b1204301d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12158ab0-8a2b-4d43-a77d-38e991d80940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "21dac79f-a7df-4d36-a01f-3330331e397f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c26520-8bd1-4efa-b6e8-986ce3a76e8a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bee655b-58c5-43a5-a7b6-625e5df0931b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6445fada-b1c6-499e-9a64-323d9e28871c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10541af8-8dcd-4cf5-b2d9-e04ab98ec2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a721c83a-a174-4148-881e-c5573e16cd6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cda752a-2fe5-455b-af66-e40f63e2688f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b04b303-2985-4e46-9f85-231ce5d61e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3a4eaf8-6777-4549-869e-c29d2da3eeca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae9e428e-d29d-4e51-a840-c0ea4de0cd0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3096bf9f-4024-40a4-a545-183e2b8ed81f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42938270-8360-4f5c-b440-290827e12839",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe7cf9d-e9fd-424a-9d68-549ff1cac17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15157497-3c24-4fca-b7c0-0c964e206750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0566ebbd-cfe3-4488-9b15-40d3aecf1f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fdcc55c-a2be-4d27-935b-3d54a7f282f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14e5752-fe49-4e19-a0a3-b9319bf4783f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "329e26e7-e8a5-4285-a194-ee402a5fb217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa27d2be-83f0-451c-b61f-4ffa9e193715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f416de1-1140-4420-8e29-c65a278b0c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdb338c5-bd22-4ced-a6af-3ad320860f8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67bd64b7-00b6-4348-ad52-74dde83717cf",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d48a506-61d1-4198-b785-423c2c8a3fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fd3bc54-87e1-42f9-92d2-5fb6012a0565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f775afeb-2954-4573-9714-884e1b13743c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1aade9c7-d3c0-4357-8ff8-cf1ff7ddfb1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f01ee3f-32dc-4f76-bdc6-fb1469e512b1",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c4f708-b579-472e-8fb1-fbc7e3faba56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b56485a8-17e7-405b-b3a4-2372270874ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b74f146d-1427-4036-8353-60bcfd4b4719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "526d85d2-77dd-4d03-b931-b0c5476cc1dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6394379-9c47-4c2d-9294-5fd15f8b9fe9",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e41aeec7-1dc4-4d57-b8e1-95e117a878a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bba10202-ac2b-4fab-af6a-bc28304aae4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12318e72-6e4f-4b41-916f-27595d75a418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f37e05-b245-4a20-9ba1-6fc2bedcf1be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb10f58-e79c-4c01-9daa-18b0dc77dacd",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9563bb97-6d4c-40d8-a782-39838473be19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67c50a5c-60b9-4853-854c-03bd92ede3f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49843926-f531-4a1c-bbb1-982f75a7adfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdb5fde5-74be-470c-bd0e-c378df5b3b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a481f6-afad-4ff0-a7ba-7b7bc478af70",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09cb1f42-70e8-4731-9539-02f649f5fe15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04331f1d-d742-434c-8267-0a1dda84a78a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c7d69de-75fe-4414-8612-f2c0e051a0db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3f6b7e6-ba3c-4cfd-b553-a3fc1164d63f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d772266c-6fb8-4a59-91b6-63f733bcbeea",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b980f27-c0b6-4c92-be5e-c51e3582e171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd66262-c3c0-4318-b0d6-8a3ad2309f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f89dd423-11bc-4f9c-816d-0602b61e981c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "96e1358f-9785-41ed-a8d2-03598683ef4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c1cddc7-e8a8-4f7a-b401-7d00e88c6b93",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3986ab3f-b2c0-4c76-9a96-3328bd2e799e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c891606-a91e-4a16-8f50-11a6015a5ed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e7eb8c-79bc-4063-92e5-8ef9b1df8cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f88a9c34-4c7b-41c4-b633-6d05a3258efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d6fd93-980c-4f07-a5b7-485426036009",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a62f87b-3b08-4c72-9d51-90e4cc67173e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be4f9103-5ede-42d4-be18-5f0cc83d3de3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d6d55f4-361c-4dd7-aa75-b9ec2aae2ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f69b964e-3d75-497f-9e9a-5a4a75a7abae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e7d6ef-b912-49f8-b8c6-836d5e0a903b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e71cac-be1c-46b3-9e17-c4959e0a1786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfdbad6b-1eaa-4505-80c8-928e2ba1efea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850d8181-ccef-4517-980a-7bba90b36dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbf73a68-7975-4b57-82a8-7ad25391f9ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9e883f-5ef5-41e3-864c-33ec6f7e7a80",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b35a2b-f98a-4ab7-ada5-ba7df55c7a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f20bdbe-a129-4c9c-9172-f939bdc37ae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8551b65-efac-4b80-8c50-1c09147eda63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c639feed-5349-4b38-a603-271c93358e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b9a413-326f-4c87-92b5-ee3bf2ca3ef0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "449e0f1c-e5b8-43cb-a258-a193058f3f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2c251f4-0c0d-4552-83d5-595175e32bab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199fd751-94e8-4222-8d28-051e91433a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "605564be-3e3c-4c65-8fce-ea09b55b521d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a832df11-79be-42b3-a3ed-de98e92ff230",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e5faef-e233-4b6f-8c21-848b5bb0209e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6ed522a-95c6-4e46-9c15-7e566837f7c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af86c672-c7b2-4933-b6ca-054e68221174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0808301a-c9ac-4fdf-8ad6-e4bb2cac4026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aebd2153-3e81-440d-b28a-f77039c87f8b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7d0751-6d17-4cca-ac76-01e500a7f477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a084c909-d0bf-4b84-b84a-4914cf68451a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db585fba-32e7-48fe-8007-3e9eb0e02907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e55ecba-0f66-441c-b172-031e2d60e254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47214adb-5953-42f6-9330-7477c1095adf",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b853fbe-3d62-47fe-8964-e6bd4f13fad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4456a932-48da-49fa-b8fa-37c1f73d4d64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc4f4b08-2c42-48e4-a701-b6584b782c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fb5fcbe-507f-47d7-8f5e-9d40c501a2b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a801580e-1a54-4f9b-aef1-f1fd826a8a61",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "892d833c-b4b0-4f77-bed5-33ae6a8c6169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c1f3172-b4ef-4f83-b9a2-8f72f402ba23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf9e7b8-0295-4810-b669-caea11060485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c678e42-b0cc-4635-92c6-f3a02e8ce7a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f347ba16-a93c-493e-a260-fb5a9e3eda65",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6bab55-cc78-4f9a-bee1-351756fdd178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeaab85c-629b-48f3-a8bc-6580361e4705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1968f00-4335-4bf8-b3d0-dca173fdf091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5221ef64-3863-4a04-ad03-9e7d4cb375d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f20b2c-323a-4ad8-a032-e1451a33586e",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "231374bd-013e-41db-b140-4b4d428d0829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "977400bf-0cec-4f9e-b335-6ff2be9b67e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d54596-f021-44cf-a072-30a759d11d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "07a1b7b8-0356-4dd3-a3d1-e838c322c840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "229a16e9-02b5-4bb0-9a8f-06cf7bb710a6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df446b7-b11c-4f7f-9216-6fa71b7b4760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53738337-6c99-4514-baa5-30c3201d57f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66bb5c2-dcbd-4ab7-94dc-238339110cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4bc10fb9-24e4-47a5-9579-27c968e58503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dfc5895-6dec-4ffd-8421-f45236d0b286",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d26bc5a-97c1-4b4b-85ea-dcbb36bd95e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed8ac3e5-2c54-4502-b0dc-1333dbe7cac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "345e4b5d-7e01-4619-adb4-d593086fa176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e735f44-6f01-4c1d-aa6f-d146cc5abc14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a63eaf5f-c9bf-4928-a15a-b883cfb9bf41",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c27c9baf-7943-4bb2-9296-7f2d0f5f110c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcb373fb-5014-41ee-a234-31fe00c96ccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b2a19c6-b882-497f-a0f8-5a3fe1d218c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b73fda28-4824-4aa9-898d-4df0d5825f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88fecc0c-5cae-496b-8788-1de7f3d236f3",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08e8990-2956-46ed-930b-00d23771f375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef32e205-bf19-4fd1-9404-b46b2cc72b8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f039159c-1208-4009-9e5e-66ff459e79e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "42d9ae9d-5975-4511-9b5f-fc97eedfcf7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb82afe-7e6b-4f95-853a-dc1c424a5187",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2960784-6f69-47f8-b913-e55227e8604e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78d85138-4289-4fda-9987-c7dc2772d739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532e50a3-55eb-467e-9c00-cc542104c875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ced33c4-05e7-43dc-97ea-a1bdf0508563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a70e9d-8000-44b2-a518-caffd88658f0",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc552c3a-e35b-4903-82da-1caddc75a811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa3567b1-0cf5-4a89-aaac-8aadf528285f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd582bc-247a-4d00-82a2-651407c8ffa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c95efd3b-1b45-4eb2-8879-9d303a0a4db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f316d8-292b-40b3-9f8e-247658a80858",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07cc9615-8d23-441e-9cd2-e4e652fb30d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3185e641-4b66-4594-85e4-67f99b811d2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e7b573-b924-4c44-89cb-bb2e0a89d81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "442e28f5-e64a-44c3-ac51-25ce9b31940a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b51a9d-60a4-49ba-9a53-c94ab0d0937e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a989df8-8079-4f58-b5dd-e066659a1fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0c64a93-800b-49d5-bdf6-4a0d50569217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba87f480-bbf0-4239-859d-ec51d03e1ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c338cd36-ca76-4fbf-a823-9c293644c1c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76db8d41-1bf8-48bc-9ce9-32233b5891d0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a8b800-191e-4a2c-810c-1df58ff1c428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ae8a168-d372-4b1a-a048-53bb7fd3ece0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25dd5bec-69c9-48b8-b57a-f318b2243848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a308d065-89e0-44e8-9239-5836f8348f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bab9395-6f6d-4a0a-804c-97fc5fbf3843",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "945394ae-d18c-4c8d-b0f4-7e21d369817c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d06c978c-5e9e-4748-9233-298793bfec45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b58065ff-14e6-459a-a4c5-2edb2b15fc8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3444531c-dacd-4c1d-9d83-ca25bae5604b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b000e82b-ff8b-4762-9a68-bdab20504c41",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4d6571-d2db-4b34-b19c-bac5983b5a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4839667-af5e-4d56-9044-5a898f0aea27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f7808a-4703-4589-852f-bfbcb981f18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "133ce030-bb09-426a-afc0-ebbc86770dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "514a7a6c-fe49-4128-a173-42fd508637f6",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0971de79-6de3-44fb-bae2-cbcfdccbd729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2b21a62-88e3-460b-a1ab-16d22cf87a56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b63936f-be3e-4ee7-a80d-2c0b7b616d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "460b1dd1-c8cd-418e-9495-1795a62e99ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843d3c3d-50f4-4010-ba44-2b618fb30579",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce45f75-3788-4dbd-9951-dfd446596bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8bf9484-d590-4896-9c9b-f211f4c8b365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd43fe4c-a6ef-45ac-89ec-b39f7b967a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "30106c87-1cd7-4ca6-b683-1bb3eb059fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7833db-1a41-4d01-bcea-7d715c46e66d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7dec7f-8c99-47a5-ac0a-b9e99e17e608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0d4236e-b044-485e-b470-edee1a75b0b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a688958-f600-4d4e-b4e3-05f44524c0ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8e567f05-4aef-40e2-9b0e-134ca4ef54d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b3d090b-16b1-41b7-93ac-557c622ef293",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ebef55c-dcc0-41c2-b92d-ba0b62aa9b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "653cffc7-95f0-4e9f-a9d5-7c0bca5f50e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e253ec59-3eab-494b-9b46-2f8de4c9a290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fb6ce07-adc3-414d-a1d3-e04031f16386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c1bec5-dfe7-478b-b22a-563b3175e832",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a82ae23e-fdeb-43e3-8929-096fdc3b204b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de8f3cd4-b6aa-4870-9fae-ea8796de11b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2201fb3b-e0e0-4bcd-8f61-4e2be221b58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c26b50fb-a04e-49da-ae72-00ee30df023b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3682197c-a3ef-4569-8726-fc273e1934d5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa2356c-e6b5-4008-8562-44eb3aa62527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9cbcc36-6d87-49a5-9d2c-f31edd547d37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b009ae7-2fa5-4d8b-9a24-7d4829ccc785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f6063fe-3034-4cf5-9716-35894c05934a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39fd886-b8c7-4a0b-a939-4aa17c539441",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "540882f8-0ab9-4e30-a126-d6db4ac42bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09587a82-3db5-4908-b61e-7be47ab908de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95243188-03da-4ac3-b30a-921af56a51a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1814fd90-abd5-41ba-a341-59ac930186e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b31f021-0e50-474d-8ff5-04827c4a1400",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "237f931f-2556-4720-be73-39929cb42597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96776ad7-24e4-4916-b82b-4ae2281efa38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a8ed583-0d31-41ba-8e65-6a8e701ac39d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "787e9fff-8f25-4e32-953e-176cb1cc0b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f7fa8f-798e-4b9c-8de3-f1f8311fe1d6",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "437f1bf9-4a07-424d-aedf-f5cc273ef947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d19a3a3d-deaf-4aad-a10d-53ef00eb0d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea3f2d9-183f-45f3-ab8f-bb1d76f9d5d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a2ad6f5-9e5e-4276-9d0a-9ef7c738bd42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "197c3461-98fa-4e36-ba03-02b20c9e2c32",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6483b9e3-0cbb-4a41-9723-e649d2164a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "423dce6c-2bd5-4e31-b8fb-40d602abc5b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7230e0c2-1499-42df-bf8f-9cbcf83f9dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "654e6b5c-c6dc-48f5-9a9c-b6b3fb8bd2d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8568f7a2-f29a-4cc6-8879-def4bdd5f0c8",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ad268f-6ecd-4781-82ec-ba430c44bb79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90c46fc2-c289-44d7-af38-11f73577293f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f10658ac-40f3-4b58-a485-6a0f46ab1105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "54b55b6f-4f0d-4a8a-8507-69b50fea9c28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec83d5c-337c-423d-b730-71d6bbf5b5fe",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ee9bcc-659c-4424-bf9e-76d9d7bae53f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8367aaf0-d1ed-446b-b538-fe98421d7688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ee3ae1-6979-499d-bccf-c571b45288bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92909801-6243-4b90-bda3-70b0b70897af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7454cd81-c611-4584-b88c-fde5284eb190",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a598e2-0126-4683-a223-dfedbf04cdda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dbc1065-d6d5-4030-8111-d06ca9c51519"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "507e37b6-e87a-472d-8652-300ca7715804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bc5af52-1e93-46a1-963b-b59d2e91735f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "015b6dc1-8278-431e-b255-bad60cdd24dc",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "909ce697-e952-4c70-9587-00560c1e0adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "817a700e-68c5-4f25-a97c-a7b385ceab73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9770b2f2-6d21-4160-a27b-34145fae0352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a023e928-fe5f-4822-a4e4-21226e77698b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3327e243-0033-4eb4-9c37-512dc9cde233",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f190b945-7bdc-4023-a109-d4395abf4825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "909c51e4-ee9e-44d4-8bea-c3ac8f66fbbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f62caf2f-3af2-4882-9bc5-67dcb6d48096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "31d1a09b-f073-43d6-ab86-5b387c9a88e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f63d304e-e12e-4da7-bb93-3eaf1f33ac9f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be01fa15-722e-4187-9e84-0ebdc5dc5f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ff8f31-bae8-4a42-8caa-6c287152c3c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d06ee92e-992d-47f3-81ab-49e8163a38ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "16bd2a73-54d3-41ec-ae1c-4e7e79a285cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ed4c420-1e72-42a1-8e5f-aef82df9da91",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea8588f-d9fd-41a3-9ad8-fe96f63b4811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77cc6d12-46ec-417c-b411-2b70348bfc2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c8c22d9-0592-4928-b734-8d4499423535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9d5ef31-22db-4541-bef9-66bc6c9fc1a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c95f6ed2-4df6-4aab-b0ff-a49e9c123382",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa36a1f0-d170-4460-bed4-906811a57055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29c22aaf-df92-483f-b400-9c4643a25d4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f86dd7-7bd9-4f23-9dc0-451a703d8131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "83e59144-85f7-4792-b694-61c49586a6ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd5ee603-d9dd-4178-994e-9a0906596425",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e3e106-c5a4-4410-9065-67c4a2437781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99ea901a-8212-4aae-90f1-ee06b9aa5e29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0990d7b8-7036-46ab-9e47-f5d70f7f371b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0998a9f-b87c-4b6d-a4af-b7608069cc83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbd316be-bf7a-4b31-9814-fb1156cbad30",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c75643-ab13-4734-923a-c7c317e61325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc441333-d533-4cd7-a0c8-99975e9235c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b881c32-de6b-4ed8-aa65-732ffa2b1ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6637c76e-8806-4e25-bf41-2100fbedf3da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f82b03-9818-4d29-ae9b-283d3ee72837",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d8beca-1902-49a4-a193-1d046fa41c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb8f2529-e610-4c29-ac92-fc677c75e043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627b9d41-88c8-4b9e-82b0-eaa4e14b7459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4811749e-6871-4c21-81f0-7ec3efe8955a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dceff57d-ce1c-4386-abed-82ab8d8d9b78",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb0c341-fd20-4fb2-9de1-3c6f524dad93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa9bdcd4-5aae-4fef-ba3c-afa0412995d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ef7cfb-d5b4-4376-9c8d-e5681e186230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa82b2b1-cac2-4e53-b6fc-4e0777c02e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49acf855-b90c-49aa-bacc-6ab92e27fe76",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a606fad-a7c8-4a1f-96d2-7f128c6c3873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d8f7024-628d-4f13-a42a-b8bafdd29b6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00eacf98-85f8-4a17-a10f-e0a0e1a9db48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc26642a-2d78-42c5-b8fe-e0f4239e8689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9906bbb6-6ae5-4a33-967f-e0be78d7873c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "759dc05a-0da9-4fde-bd0c-971994fa5732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21bbf15f-7853-44c3-ac90-025f165b93aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d7cf9a-a716-4eff-8aa5-68dc65ad3284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "612988cb-4935-49db-8455-4831df98dbc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912658dc-5240-4891-88dc-7c95db19c966",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ec7f5b-896c-42cc-aeaf-2f00fc80d6de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff50bbaf-64cc-4a2a-bcfd-3c4be7a453b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c5bf06-3e3b-4d57-b3ab-b86c9f51cfb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ef02d39-d172-4132-a413-f608d244d8d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b7621e-79db-4d1f-bb70-bd72dcffaf4c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "293fa7ae-0b44-48ee-b8e8-49da3cd3bb40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d59a502-5bb0-4954-8378-c07bba0e2caa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b5a409-5aab-40c8-a1f8-0909b3fc6ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ee1fb5b-ac20-4a42-8f5c-48b44c657f6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "417759e8-c063-4f43-9f63-57851b56e36e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc316bf0-6ed9-4dd6-9c80-bfeb924fd943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c11a209a-424e-4b9a-a985-ee1e09f64910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10acbcd3-837b-4be3-b947-4f616e1b01b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cda54f23-c11c-4021-b615-7342cdd1d21b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b00c1572-61cc-452b-a21b-5a19998cae8c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae56d245-901a-4fb4-a915-6331c03a43e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca75f621-6882-4039-93cc-571e40b66850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d494ec07-a860-42f4-9bc7-66ae3e6b7b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "51ecbee1-86ec-4a9e-85aa-8acd50f10aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db3163f4-1a3f-4491-a710-08c454e12475",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ee1e5f-e209-4941-813d-f4a7af53cacc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3a88b2a-5db2-4260-9bfe-fcde1d667ea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee666dc-1a28-4e47-b57b-b36efeed7cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f9948dd-9b45-48bd-9c47-8a765480a952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff8ef9a-540c-4a86-9052-18689cbe729d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f4d645-a771-4685-a1ba-ec21fabbbf8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86ff033e-054c-48fe-a81f-cdb374be0c9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa111d5b-bef0-4b32-9c55-e17c9e8a5cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d986ec8-24cd-4945-abed-24b458937ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e79534-5347-4ee0-8548-13430a7e6beb",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "674e249d-56cf-48a8-8124-80138ed87b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b55fb12-5b80-4cb0-b266-e9b6ca4c66c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e0d48f-dc6e-47be-a010-4fc5fccd6b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "be7624e4-beae-4a47-84aa-c881e52e2f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c07e1f31-e0dc-4675-aa45-992bd91b0745",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a79b54e-2112-4068-8ae3-7233c09378d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c143c4b-df79-4072-8d07-4ffb5e20fbd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c786a9e-1fd9-4ae7-b145-7189f3957659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d3d019e6-cd9b-40f6-97fe-377f77bc4f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3e27be-0c11-400e-9895-29e3c127650a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f381396d-db95-4449-a84a-04f41f42d232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf477b52-aacd-41a2-a340-e31d337a41bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d365b38b-0a45-405a-9dd5-3d36ec00795f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "35aa7ca7-c2d7-49bd-b1a6-7a80771effe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6e1f4e1-6fcd-4496-86e8-10fd1efc44c5",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b701c8b-8592-471c-bd17-e5cb0316035a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f75bdcd-5745-4f6d-ac9d-e0dd532bfd9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95a72b7-4283-499e-99bc-66d19e00d900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca0879bd-37e9-406b-8603-d644477df486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "496b2ab4-5c3b-4aa4-b120-b059ecbfd867",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c883bc78-2c0e-4323-8012-67eb53726300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5877ede6-8869-4b25-a835-cf4f6904cce9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2acdf95-7139-4844-b34d-a5951840bd9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "168e55d9-06ed-43f1-b17a-561e8a78fd66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e032a101-7b6a-4ae5-a9c0-5d5474b9b3da",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eeb6e99-f035-401b-aef3-f223cd0a2f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce4e82ca-b9ff-42ff-abcc-6eb2d0b1d2b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf8b207-6edb-4bd8-bcee-5be9a74779fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6329c00a-64cb-457e-9072-2fb8daacb73c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899382a0-de9c-4924-be50-82196b04794f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a4361c1-bdb6-4801-a987-067a0dfd3018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c2c138a-094b-4605-9321-4999f80ac92a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821549dc-236f-4df6-b1a2-b6e9fa9d409f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f97602a2-e8ef-4497-b834-8fb8ef47ae7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34247b85-8296-4f0f-b2a8-929eb1b6cba6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8daa1ed8-1836-49ae-8413-f8f36d3e5fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33419df8-e8f3-40b7-adbb-d2bc09dec479"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee585ab9-2eaf-42b0-b6bb-ea16f67d3fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfef57a0-aecc-4153-a82f-67dfb1d5816f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a85b8307-8ed5-458b-83f3-3102fce0adbf",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6a8092-54d3-4459-839d-a3b72a63eb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "afb09014-a762-4091-a2fe-787b686b6f05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae739734-5863-4793-aec5-50c23935c317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc49d467-2106-4029-9d56-4730cc1fbf04"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2a007227-bc5e-4e02-ab61-c4861f9c0973",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2c1edc1a-3aa5-4e29-abf1-daf3b5963eb5",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d8511f-b408-4b19-946f-330acd5f716d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "278bc0e4-8448-4c0c-a8f8-abf9a63b0fd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbe9c0d2-66d7-42f5-810f-f158a7b385ff",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "ac30f8fd-6ca2-4909-b6c9-038b589e9dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed1abaf5-9789-41e0-9185-71ce8d91bfaf",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "069a7a99-f7f7-4739-960d-8cd48d268df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c910ea08-53f3-4b29-bf3f-d3744af200f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1985410a-4af8-40ad-a3b7-f00bc84de8d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "c896a266-56c1-4f38-b57c-a728b745b184"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8189f14-01f5-4200-a14f-88183cd86218",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "760613bd-34b0-4e81-a92a-824d50565ff0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "71b69cf2-959d-4605-a3a9-b1e2b2ed4dbf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abd8db5a-9863-4355-9338-8ed9b8a749e2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "caa78837-64f9-408e-96ce-cf860694d706",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "427c00e8-ba61-48d1-8ade-398c674b8a67"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3fdb2b53-b0df-4c21-a7fa-e80c95c0f324",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "70e2963b-a9f5-4627-a8bd-50701c51484b"
                }
              }
            ]
          },
          {
            "id": "3ff451d4-9cb7-4d6f-8942-161db0e826d1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2c466843-6831-4b97-853f-95de85a031be",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "baa11b87-4456-45ba-bf4d-912a37846797",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8dfd53c2-0113-4dfe-be81-65dbce770483"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90a6092f-3330-46b2-8688-acee581e1c26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e323cee0-6a2a-4d7d-a7ea-830db2dfd7bb"
                    }
                  }
                ]
              },
              {
                "id": "f89a64d0-a7e9-4d27-a1d5-f3abe4a30305",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4952a258-315e-4722-b39c-483af0188b7a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3b4ab608-a708-40f7-9433-d43335fefd58"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d523a068-196b-41f9-85f3-ce2b4e753b37",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "991ca30f-1275-40cd-bde7-806868f3bd5b"
                    }
                  }
                ]
              },
              {
                "id": "ab5f73e6-d8ea-41d8-84f5-25ec109bae5a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8f8d9cf-4a70-4d5f-bdc7-f42f8e5b196b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cd9b00f6-b079-4747-8db3-a49e1f89ec5d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "747a6c3d-8738-480c-bae1-1f01364f91b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a77db6e3-a275-44be-880a-a7f614124669"
                    }
                  }
                ]
              },
              {
                "id": "96454355-9f61-43a3-86ac-c8800785a777",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a26c642-63ae-4187-852e-44fbdea1285c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "454d939d-3ea9-4ec7-bfe1-91270847b5fb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27b15d89-50de-4ba4-86ec-629c2bd62c7d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4c12f31a-c4ac-4065-9018-82317be61564"
                    }
                  }
                ]
              },
              {
                "id": "1e33a122-6337-49c1-b6da-6adb7475abc7",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6641e25b-857c-4fca-a453-7b8bd42ffdf7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "19c73720-9d99-4cc0-a19d-da0e733de56e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec17872f-0e26-4921-9cb3-bad585b07787",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "06c9aeea-c6ab-4f61-9d90-abd5f9057cb5"
                    }
                  }
                ]
              },
              {
                "id": "ee390ed3-4016-4ecd-8c1f-243937eaeb05",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2e4aa64-80a2-4576-854b-b2683d89d149",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "02d96a5f-0f5b-47ce-951f-91cf4443d618"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e77d2274-e2f6-4f73-834f-4c31227f9497",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8873dfc4-b078-41ca-91eb-9a2f6df921e6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8fa9bdb3-07a7-4324-9783-addc281960e6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e218475f-171e-49df-b35d-866264c22897"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "69786317-545a-46e8-b594-8e28b748e46e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a7f4d2ba-0206-40a7-bece-30620187f69b"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0d761e6-c999-4d4c-9517-c269088dd982",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b076cc81-5741-4465-88e0-f4fa4dfcb1c8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ece0d63-29b0-4861-b9be-b45433efbc50",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "63a9b5f6-c7ca-4e4d-9938-90252c2865e7"
            }
          }
        ]
      },
      {
        "id": "26bca42f-c8fd-454a-ba9e-556a84cbcd61",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2431c5c5-5885-4f6c-9847-23bee80a0443",
            "name": "Negative Testing",
            "item": [
              {
                "id": "533d9c20-58be-4a3c-966f-eb08d7046f63",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9e9d9b67-df8a-43c6-9161-3eaa28dc6e50",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f29b509-577b-4e42-9ac7-191e026d6da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd7655d2-5a9a-4103-8dde-28e0fb6d5854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbdba613-9341-476b-b51a-18f6bddaf98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "87041054-ddb2-4e92-8ab0-7ff98917b9cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f63c6671-5a7d-4406-9879-f9b44f0a6461",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "314b674b-813e-44ad-b83e-667c27b1ad8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89dfefc7-6a0c-4674-aa91-17d0c86d8e87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0349e5f4-e194-4f39-bb3a-5899eb90eccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3135162-4fcd-4214-b204-cc73b50d5645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545adcfe-0210-4cdd-97a6-9bf0d3a2df95",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c50398-e77b-43da-8ae0-24c74b102c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5a31060-212e-46d5-a6e2-d016e1892e93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6717be56-8145-4b79-b068-65f9cf9a8e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "752b4b29-b86f-4eb5-96da-0fb21197f0a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b27d1d9-282b-40c1-be2d-ff83ef43472a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7a3758-c6f1-428e-92d9-28ea0422717a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30e9940b-5289-4169-b950-0d847709187b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dcd00f5-f071-4c74-9a22-34fe11eff1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "11d44cf3-9421-403a-b3da-addea61ce67f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5d8118-bbe7-411a-8461-776bc939812a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3b7c8f-12e3-4966-ad86-c4d399f60fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e78b4eff-1c98-4753-b689-588caebb2b12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ef382e-a6d8-4fa1-9d77-4a0614f9391d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "05099a35-e78b-4a04-be25-70f4f919cd85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b03b2ae-8e9e-48fb-89bf-e1040c003b13",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3bae93a-8139-47c9-8051-94f473418cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d94808dc-c5fc-4066-bf69-96598d9ab017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d606d399-bc02-427e-af2c-5192fb8ca2d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd109125-aad4-467a-ae39-174065f8ec3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3014280-00bd-4ca2-930d-d0c1704c9e49",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7970e453-939a-476a-9fda-9886eeab3ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "242ff56b-3f48-40f4-9e52-f67fdcf9af59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b0ceef-eb24-45ed-9e20-3033a38de057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca65b49d-8fd0-4dc7-8bb8-7fea3667f494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0b28d3-8d02-4733-8a51-f1b836974614",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db1e9e1f-1166-4561-aa31-71724cacfdde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ea8fa94-3639-4a26-b54c-87a17de83413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c76534-37f3-446c-b453-e0356393f872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ae14f71-f6f1-4110-a833-2f81544d00f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3396e8fc-47f8-40a9-9f57-2a4c399bb9d4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d5d487-0704-4fcf-aafb-3a52956e06b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df91aa26-6bc9-4bca-ad50-19015b0d588e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d23e199b-1d0b-44af-bd93-24e85f4148c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e39c8977-cd62-4ed3-8ea6-2e1daded3d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ccf093-dc24-47be-b913-3572a5c788cb",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aeabeaf-c7af-45b3-9ae3-c67ca9a4878e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19319841-00cd-49d6-85c5-bb849c73611d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6173bfb9-0723-4643-90c0-b4091a4fff24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0a50614-545a-4f53-9f31-997d53908d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c864fb59-971c-4fc7-9ffd-e5ad111edd41",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef76d8f-8d54-415c-ae0a-639844e91af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4e719bf-b5b1-4104-9d3b-73133ea2547a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "061f92b1-c5d2-46c1-a080-e9675aceb960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "437a5f9f-99f8-4b8b-a5bd-34c89daef750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e3311f5-90da-4ac8-97cd-5fab4b89793f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d72486-2d3a-48e5-b2aa-8cd1c326fdcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c45fab51-8164-4983-8a59-fd8dafbe9940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292f96d2-292e-40b4-94a2-4a61ef533c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a8e1fe7f-d08b-47e1-9d17-d2497295bc0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db78609-d667-464a-8882-59b49920fb84",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d3de0b1-909b-4c43-b824-d8ef150087fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3949e2c-0c7f-4094-9b75-01d269c5f44e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7e3439-7a26-4f37-8207-d4bd65678637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccef68a5-b792-4611-ace1-84d1475f5d80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a0ac056-f60e-4320-94ba-8034991a7d1b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a40e6165-896a-4751-9d93-03677d29e767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3201f44f-bfa4-4a68-8ca5-fbaf144802ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff6eb70-0605-4982-8f84-b2e8d5c59624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a786b3b-b57a-4ebc-a291-a06f74e39f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b0faca-6e08-44b0-a9ab-4bc91e97672c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca20960-dcb6-415b-8231-612d73cb258f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2faf1461-7546-43ef-a9fd-dc10b9acc039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa15f695-f50a-45d2-ba9a-489a4cacb0ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe95bae5-cc66-4cd7-8635-99d19490f4bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f21d3430-c4f9-45ec-89a5-a0956726cc63",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f9a27b-8468-4546-a763-d7d75b701d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5b97f4d-187e-400b-b429-cbe50c1affa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ec4cbc-3029-493c-8355-9c331c46e7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f41d68d-7208-450c-9069-acb909fe5822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "353f8815-63a1-40bf-9c83-df476bce563d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f7fd9f-cbe8-48e1-987e-7b92df22693b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d203374-2a45-4605-a65b-fd7d93a356d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0329d582-9af0-4a16-92a1-cb9bcc9f608b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8137a009-5e8f-4c88-9994-0d8207e2feba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0940f34e-5181-4790-8506-c4cef3e8a11c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb74a3a3-92fd-4445-a63a-3901d9725ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd62fb89-bb19-4131-a6d7-d806a795abbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eafa9ee-2a79-4aa6-960e-b7873d0906e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f3eb66b-5241-40a8-b542-8d33e6b8ae90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4535f035-b30c-4ff5-9a76-999392997c71",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e764b4-b821-4951-9016-cd5007dff8e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11e27bbd-5d98-4265-b02e-96880c82b0c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d69828-eb4c-48f9-a180-b1a14c19ccce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43f7c2d4-833e-4a33-92af-bba267629a0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "447ef946-25ac-4ba4-b902-0a6a9a256137",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "249ed534-8641-4897-b36f-08b4300d3926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3a384f1-eaf3-4d3c-97de-2e198412b1f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434dca1f-d60d-42cf-83a6-671c4dfc5c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dc1e9f9-2d63-44b2-86e4-5683bc622fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fabf6b70-0e7e-4312-8398-fad84d03b825",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa76d7f-4449-457c-b12c-1dcdc4fd4abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0493aa45-910e-43ac-a423-f3ddc18b6825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6bfa73-8634-447d-8f59-1dffb75a20f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f369f1c4-9399-41b7-95f2-b7b17f78c2ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e9fb87-83f2-4ace-9541-111e5a065334",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccedfd3f-ea12-4a5b-83ba-cad7ea3b6d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c789e5-3103-4c2f-b9e7-4f86b038b590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690efdb5-ab02-4d2b-8590-94858efea39d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5045f76-5d6f-44fe-8a1a-cb6fdbdf5fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80ed1f8-91cc-4ab4-833d-732832de8c95",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45938d86-1d39-462c-b4f9-88c0306f0720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b9696a2-6d0e-4ca5-b6dc-dff895c63ad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92ffdaca-b14b-4611-bc25-0ab349e00209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c22212c3-807f-4bc8-8ddf-fcdc7a3fd610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2867abff-78e9-4941-abc8-72a9845bd190",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c5b7bc-f11e-4587-8caf-a762fc806597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67ef4e58-1c03-4aee-852a-2e7da1607374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6c9a222-f06f-43a3-b8f6-dff69f7645ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "117f3297-7aa7-471a-b972-e38424d0393b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f445f0-18b7-4ab4-8cdb-a1e5363224df",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15480a8-735d-4485-84a0-33d78165ef53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39a6d311-0936-46e6-b225-09919d06bb89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b86cf0b-d6df-417c-8edb-28471372fca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf6c9692-7dcf-47e6-91dd-074aa35cc6fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5340dc-d767-4873-be40-6e83c13448a3",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c0636e-c891-4216-a0e3-9e12197b704f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc47ed67-2e44-422e-80ad-3efc86a7eb03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0381858b-a7a0-4631-8d5b-df577e6fdf96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1f3af47-9abf-4315-ba5a-3166241016f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca90c36d-8333-446f-92d0-b6cd6137efcd",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d656c065-a7f9-42cf-b4ad-a566df87db3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "162e3dde-6925-49c8-9af6-59b9e51edcb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882e70d9-8224-42d1-bc6b-456dc6e1870d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f94dfd-1b5d-42f4-a188-c7e81004ff8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcb5c65-646a-44c1-be8e-e271375d5efd",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "269a1137-9d20-4044-9a57-c180f060841c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2351a20-206b-46e0-bd58-0776ceeafdc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0759c0ce-e451-4d3e-8cb2-5a5cd6bc1a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "462d4222-9ec3-4e3d-aff3-a4dc2eb751bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddef0fb8-c1ed-43dc-a52d-578295f108c7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3238b078-b45f-4b29-b6ea-3d0bf16bd33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "302447d6-7170-48d2-a067-724ef4fa73d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39797b35-3e85-443c-9b3f-b771ddb672ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "721b4378-4b0d-49cb-b469-193b73530533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9867aaf3-085e-4e8a-a0ef-2da21d2fbb9d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94fb75c3-f33a-4842-88dd-9d669c508dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72564d48-df2c-4e02-9883-f9fd534e9c3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5ce6f1-2ee8-40cf-a392-eeb3259d56c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f424d59-1242-4309-b200-5af672c3c6a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0cea8c-779b-4c33-999e-334432fd0b6c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9526d9e8-2b27-4a13-9c2d-b238a77af4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56b35411-c351-4061-b255-a586f6b8e10d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "630e2b22-749a-492c-aab8-18f30abfdbb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60b610c4-4f9d-44c2-98b5-c7c6fa794302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e201cf-2557-470a-9df5-67c508a9f988",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91407771-5935-4464-a2a0-97124b5e0c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49a9f341-337c-46d9-929b-d45c39a9f64d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb2797ef-bee2-4a7b-9ed8-6403d9d83d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62194b91-ebfb-493c-ab14-bdfaae549826"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cacd2593-3cc5-4a83-a5f3-5c2eee370b2c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5efa393d-7355-4a6f-8e86-3b9ed44db922",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f0b0d7-d674-4262-be82-e6ef2809ce56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b79a4733-a01b-431a-b60b-b7c1e9e8968b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24072cc3-487d-4f76-bf16-592324a395b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "849f2b67-73e9-4e1f-8314-68024ddf6f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0d4b2f-8c54-48cb-bcf9-f9eeb2096ae5",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "890e42b7-2e18-4612-9123-48ec2fe0d43d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "da353b50-0dbb-4fd7-b71c-a167655025f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f248671f-164a-4538-a36d-da4cc61eada3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2456ade-2689-422f-90f2-b3220c2bd497"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f25300db-602c-4e64-80b0-fd586d8a3f15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8c43eb5-e3e7-4b7e-a290-687c59495afd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4333acd-7baf-4cbe-970e-4fc3ab2a3313",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "165faf4c-b613-421e-94d0-ac5c80844626"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b786cea4-e5c0-49fa-be90-5a12d573323b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6e674be7-de80-4c1e-9f14-6810dbf756e8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77b5ebc1-fd21-492d-bd6f-3aee990264de",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "00846871-7ece-4f1b-bcda-a391010e3627"
            }
          }
        ]
      },
      {
        "id": "447c7318-f1f2-43eb-9c39-88ed4f4ee9b5",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "51a0c607-9585-460b-bfa2-b6399a06a48e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e50132f4-08aa-4ad3-b882-1c383f27ce9f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8486ac3b-335b-4725-b180-c5aa98758296",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beeee489-91ef-4527-a5f3-f52bd68d75bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "450390e0-bd95-4d86-b3a2-607630dcf0d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e3dff7-5346-4fb5-9adc-8576f44b58b6",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa45cf78-7e83-47a7-b7cf-ff25f1c40042",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96fa6e7c-aad9-4bb2-a6ce-74ea4f5ae3d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998614b8-d695-4557-85db-ce10bce6b75b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f75ffbc-23c0-45af-80d8-ee79861babcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c355ba55-7414-4625-a6ae-f79b6657fcce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd7a60e-37c2-4200-a32d-7bc4e27aa263",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65130257-098a-48fe-9722-67b60a62deec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe9b63f9-1d49-434c-ad46-5427b1e5b323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92758ff9-5fd8-41d3-8be2-c60eeab8456c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e091e766-fb32-491c-87e1-43ed8ad5b05a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "898fda90-355c-4f5c-a650-078404075fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ea2941-6751-449b-8e0f-2b9ec692aea8",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e44f71c0-bb08-486d-9fb7-5038fdb631ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e0c6faa-56a8-4f4e-adb2-5d7cbd23c3c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0168a78-06d4-48fb-9801-6962e939adab",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70aec21-a87c-4f25-9191-3f39cbbbadba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68267ebd-dacf-4fad-8b99-33681df00a66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ac2172-32c6-4048-b047-159fcd464ebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "636eb5aa-5659-4a55-9d74-4430c5389af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f99b03-02da-4d47-8754-ec774bae2c61",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f29eea88-2089-4ab1-860c-4b8f47f30724",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cda07a1-e4ba-4b91-9d3e-ddacba5e96ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e6931e-a12b-4059-8293-fdc7758aaedd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2181624c-d6dd-472e-90cd-6eb166359368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a30e09d2-e3a7-45fe-9560-5402256886d9",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5049a943-291e-4667-8ccb-c111fc925c67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d573454-1f72-4492-9269-c16101c07192"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "028e9d91-3d25-48be-b188-1e606a70bf5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e068b41-31cc-4578-9439-bb4bb35e0426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a2b766-1ba8-4c4c-8f01-c51b3a308abf",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343bb6e7-f80b-4720-8261-fca2b66cfef7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecd386e7-05a9-460e-884c-13da81b92b9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6354ef-f3bb-4962-a5ee-3bb94eb0bd4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "765f9f63-4bac-4660-ad1f-00d85aa0768f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4f0940-47f8-4dfd-b463-43a19a09a251",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddeac0a1-86cb-47b5-b1b7-64d31e4f91af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9516ac45-4e4e-4fd1-b239-d75b15ca28d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e48ed3e-1644-4382-999a-898a94144964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "897f4da1-d383-4a88-9d70-4cea5735fa93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67aefed6-ce52-49b3-b337-d291bec85d40",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b300f77a-73ff-4aa6-b62c-26d6a13920cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85d5d08e-29a4-4792-b430-529b1045b52d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82dc7ce1-6564-4021-b394-842fe86c6d4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1fd84c1-a44f-4557-8d4d-6fe07dd7b73b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034c0dca-6adf-4f13-a33a-2044c4955d92",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d70a06-6db7-4efd-bec4-3bd1b3819329",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50ff0128-120e-4890-9b9d-871b463852d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb8b5a36-ea4a-4d37-bb9b-12e3f586746d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08156008-4411-4b1c-b2e6-f370f34d8f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c5df12b-2e96-4e75-a7e9-dc56350f7a3d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61903ce6-ff09-4aa9-86bd-25945d226935",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af254b2a-2a96-4dae-8d69-cdfa14abb34d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89850353-48b0-433a-826b-b2f499dca15e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ad0ffa7-f901-4b7c-8250-e145617edd4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18a82ec-82ef-4f62-9825-f026b4109e9b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a5afc6-69d2-4240-a753-9123fedc2f07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb46753a-742f-4246-8c6c-48506bdf0dd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9a74c24-7f4f-4941-84a6-31917237d9c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d84fb3aa-83cb-4288-9637-e6cd8e4bd0d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "956d0b68-3d6a-4673-88d1-ff588b6cd104",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f3be2a-9cd4-4f97-bbca-58ae6d6b1610",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0097e69b-0df2-4975-96f6-95fe1cf3e298"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eceec690-084b-489b-b74a-f13570488851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed28a2e7-d91a-44a0-805f-3a1be00a7f04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8aadca4-bf07-4045-a850-7a02c397154b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd44ff3-87c2-42ef-8346-ead6d86f6c2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e182e49-7701-4442-8ac1-21ff1e2dfe65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f488f4a-0505-4603-b697-3e04cc2d75a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bd45992-f3cf-4b5f-9d3d-0452fbf7a878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "591c3ddf-1e2c-4219-a8dd-94559c8fcfff",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9e65df-8a42-4eb8-a2fb-bcdd27939047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e5c6df3-85a1-487e-b83b-f9f550fbc5e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56667986-9ed2-4264-996d-878fdb07b6c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3422b9fe-8c0e-4d8f-a26e-3db5166eaca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6028b10c-2ee8-499b-8a8d-157bd598d4c0",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aacc3586-fe13-4837-9aad-23a6b74d28d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ddb3e1d-e564-406b-acff-98e0088c863c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e19670-6883-426c-82ee-171829bdc0cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45fe0b21-bc6b-4f9d-94e6-941acfb8ef57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b33f3fe6-3123-4df6-96fd-95bc07e7d3c6",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362b21e7-4065-44bd-a736-a1a9bc646041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a671be2-a289-42bd-b082-945710e341ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0f4239-6a32-4291-a75d-4d03136fb055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d66ee4a2-d58c-4ca4-9e8a-afeac52017a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb5931d2-f411-4de6-8f9e-fd55f3eda128",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de35ade-61bf-49d0-a87f-d677cd1b6e97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d998d58-94d9-43f1-98bc-7e61f0a4779d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "280f38b5-3050-42a0-99cf-be9fc7e299fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa1b38c2-8697-43db-834b-c66be7114800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23b9323a-f399-4f7d-996b-eb486d3f4598",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144fc9d9-955e-405f-9eb9-9e02e9cb5c14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1009bf1-6312-43e8-8ee2-00d3eed00e08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a28a1c06-46a0-4ed2-be9b-361b2057e737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec5b3b0c-fbe8-41d3-9892-36d499913428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d828e9-7cdb-454a-baf8-a31362f6c0fd",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a379f80-67cb-46c0-840f-d22b1a32d312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a54a75e-4311-4986-8a1f-aa65d4449e65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78fe372b-d593-4c36-b2b0-e235f21b3e86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ece72789-b208-45b1-bbc2-98e3173c6bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfee756a-8d55-4910-b2c4-34a91d5c5a75",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce03450-629a-4bcb-8d44-4d4a13b7e946",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4709c3f7-7a56-4327-a025-25a7033861ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a36c3fc-2cf1-4213-af1e-04502c315721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b33444dd-dccc-4b86-ad22-02432e89492a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "425b4c8f-3e05-491b-bdc3-f63a93fb0580",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bbfed62-00f2-47e8-856f-810622f5dc2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eecc277e-ec55-4882-9bfe-d9306cc70833"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f7f179c-7ce2-416c-aafa-a44a9f1b6ef7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc5a9612-fd90-486f-8f58-d1c37f792b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4465f65c-2354-4124-9a8b-8dfc165fcd15",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a14cef4-c717-481c-a7dd-77fbe02ef449",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67575a6d-d46d-437f-a23a-39646565f9f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd2d652-965a-4991-843c-22afb106ca3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a58d6ee5-c317-4afd-8c4c-6192ace67d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f65033-b943-468e-8cef-f9b023662fe0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "599927c0-ca95-487b-8663-e601fc10f184",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90fc7977-a0e5-49ee-a0aa-332fca2c5b0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a82ef7b2-ec20-4349-baa6-f539bbbae9f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91d20bdf-0d6f-401b-9615-1b30beb08ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cad5797-e943-4df5-b880-118f032f0267",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c439a845-2d53-4a5e-900c-93567a12d852",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc407250-83d4-4d73-92c0-0820ee236543"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f31e7b5-1e56-45d5-a312-296e01d85fc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc801477-fb0d-4c52-87b4-cb610354cfa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0b3050b-bb0e-4a70-8ca0-4b8922bf41f9",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d2864bb-7334-4b88-9d8d-55fc14466312",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa6f9200-34ac-4cd0-9504-6cbd5de80a0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eafe42a-7edf-4591-8736-c6b49f170247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62ed8911-698e-4c40-9a63-1f95bb4d6d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234eb670-0eb0-421c-8745-95028e098d66",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330e63ce-5b17-4b61-bdd9-a368f6b16d25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "247645a8-a523-420b-a691-d54d82024be1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6742021-efd5-47c7-8bc1-718cb6cc8d90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5233f9a0-a00e-4d99-9943-67f2f869cb59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58fd9f74-dc3f-461a-b35d-e7e6b49a9bb7",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4487a4e4-3134-492a-a5fa-bc38e87d9689",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65e1c4fb-2791-42b0-af8e-fc94fdfd1c92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5fb0b46-a964-4002-9284-24370d3f4d59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4718387c-b66a-4be3-b0c7-ac099ca9a1ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "718178fa-0434-4d23-b567-05803650e54d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c7e43a6-301b-42b8-8b36-076d49f07f38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "205c5fa0-0b77-4d0c-b8f2-25f78624b2d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f102c6-5c79-48b3-8257-dbe7e5beeaa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b30b978-ae86-4cd9-bff0-2ba29360a420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a2b9bd-52a5-4534-9504-1babaed447d5",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db07464-e049-4f5f-9267-c6a64d2329f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58c6bc92-0cb2-4498-8275-f84a9b48e6b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a67c99df-9b68-4e09-9beb-503978d246d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b035bce8-ec7e-42f2-a877-d4eef10a918f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d510cac-769b-4eb9-a1ad-fc97a0e7391d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5adf33a4-18fc-4dbe-b260-3bf3120eb7cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9cc1a34-a581-4c95-8dca-094bc8f9b181"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c8a2493-cd3a-4644-80a1-39887f6ea0d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a51b017-2cc7-4bdc-9f33-2a2dfdf50235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770a5373-36e7-45b9-be01-c68a6da362c9",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1780c855-18a1-405d-949c-974194c7c270",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f27442ff-e5aa-448e-9a83-697985e0c249"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfffcc4b-59bb-41f8-93df-7c762b51a2e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57b9b762-21e7-48fe-ba3c-eb3b3459be8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896528d9-15bf-40eb-ac2a-4db8d58e671a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45335332-d7b9-4291-95d3-1565efc51661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49d70a40-8e25-4f69-93c6-9d49bfcf6568"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb0cbd4a-12be-4496-ab2a-6d25100c851b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a939e23-74e7-4559-924e-6c163dbabcc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ecde99c-b104-4492-bcf0-b467758c58c3",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993f32c1-b647-426f-a7c6-c5c9f87bc638",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "303b5382-ce2c-4a79-8e3f-6b69776751e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ebf036d-eee3-406e-aecd-57dd606afd22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f292cde8-35bf-4bdd-beb0-79187fb5f344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d698773e-501d-4c1d-a61e-3df93631184e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7c089f-b180-4dbe-aba4-56e7b248fc37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83718258-38fb-40a3-8f72-8e03daa7c851"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3c1b7b-d0aa-40a3-aa0d-d47a08f421ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1830037-9783-479c-afbd-b25e15832225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2eab3c6-244e-4e29-baa6-b82a63dc13dc",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c486801-c9ae-4157-aecb-e1a151913571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c700ec52-0024-49b4-bca0-d9c96d4f170e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b27a4072-4b8a-4476-aba1-a07443d29605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af50db12-d135-4200-9ad5-e81445bbadbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e766dfa6-c67b-4385-a542-2f02d6939901",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb81bf2e-eea9-4730-81aa-591690edf570",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c5a29b4-fc01-4059-a53b-3588bd5d2783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4321615d-7c58-4e6a-af72-a2d30c8be621",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07811b94-273b-42b2-b27f-d2fcc62e13ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c50a33b5-7e45-421f-93dc-ce824354a7a3",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9efa5f7c-ddd0-404e-a10e-46d98e9a66be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4948b324-8ecc-4dc3-b627-0baa1e5637e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09310e02-8c6e-441a-9c17-64cfef4f2544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "747410ff-3e2d-42b5-a6d8-db2a22d80609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0274db-2a7b-40e2-ab9a-702788942bea",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62404c77-2520-47a1-94ed-fd4381800ade",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb77bef5-038a-4dfb-a7c1-b4d91d97646c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00726d0f-abad-4abb-90e6-74679d047f6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bea6a2dc-a5b1-4b22-8b4d-1ceec6720d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9095b0b2-0eed-4351-9d79-1104e4b85c02",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3044206f-fa91-4094-97d9-8ba0fad5e8e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aab5fcf3-84f5-455b-99da-c6dc87f005ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a768c859-c7e1-46a5-a1de-e16731cba08e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f4c31b3-4d6f-47f4-ab2e-07cf4ec0f645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71610c80-70ca-426c-bfbf-b3c04fbbabaa",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc73ddd-c485-460a-b9a7-bded5e2ab3d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3369d0a7-053d-485f-8300-6469cb7c19ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "115fe1c1-38db-438d-bae5-043e6b19fa5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "482e7f4c-02a2-4ac1-bd23-c1ac34e895b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18fb09c2-4c40-4c3f-9df5-6f7476c33ad2",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b25e6ff6-f542-4eee-bb24-97e3c8502ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c028348-1a18-44af-a827-146d5dbd8639"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de83f9ba-bc68-4596-8644-284de09b13fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe2fa658-1884-4c78-9a9b-920ec4468e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8431e93-53b4-4577-9850-638001f97e05",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7042860-7d0a-4791-9d7b-d1ab059146a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d794d3cc-1980-40d7-91a0-eaddc85b2aa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90cdc245-3efb-4f71-960b-d9c4e1ce1146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e04b377-3b83-4d78-be57-8622057301af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b75643-b1bd-440e-9749-59989dcb9639",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e881ed29-e1e1-4cf5-bd72-82d21528f0c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ba92b5c-3c22-4808-94df-e7e796501165"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f55958aa-095b-4ce8-a4c1-e67f85a96cd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f4d609b-c7cf-4de1-bcbf-fd608a14859a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d2651f-542a-47ec-9fbd-1e4e05b89d32",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6870c330-e904-43ab-8b89-d494dd2d8939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74e4e8cd-4034-4b03-be2b-50d3a835f4c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "428cf0fe-551c-46b0-9e71-e8be09170c7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74b947ea-8d42-4e97-8f0d-e87891387bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cebaa431-51bb-457a-8955-59797afab3b0",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9a5231-4e46-47d0-a53b-ade376d8b258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "530c06b3-bac1-4534-9c08-1bc1a77a6d4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b68069fd-81e2-45e2-9fb4-9c4a804084d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "785bdcd2-047f-4bf0-88d3-730813f3d76d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b25a5f-30ea-4ff8-93a4-3fe70414a19d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27989753-7e0d-4a27-a48e-5b3a02217828",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bc46e9e-eae6-48c5-96aa-a5e2301f402a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65964e17-78c8-4602-8d24-17997ec85b21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c70f5f28-97ed-4713-a209-55ffae93a2b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34bfb368-a132-4c00-b977-c9c1d8d44ddb",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec47090-0c73-49b8-8a7d-5bd6f0c65312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0033d0a-a93b-4a4c-9b2c-28bbdc1b2f02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c464a4ab-5407-49ac-988a-2cbd210f3f0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02667805-7c19-491b-ad89-d7ce273e19c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8698cbe9-dadb-4255-a02e-827dea579167",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a353420f-d21d-41ad-a04a-68df73c55a42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa0d2a5f-3113-4bc5-92e8-6dad890a98c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5bb84a0-48ab-4ff1-a00e-b4cb0830eb4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb7279a9-4847-4174-9d9f-00a3502e2e70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0516fc63-d934-430a-8ae2-8d8c4721b096",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23bf44d-3e1d-4fef-b420-c3cb37f43fb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "995f28ec-0bfd-4a9f-9f4a-afd2acd7ebe1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38c5f3e-dc77-49e3-a2e7-12fcfb97caf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea605984-0192-4890-9a9e-d2e7963fab8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac31bad-1e71-481a-9734-d7780cfb6085",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f448d66-34f7-4f02-8056-3e917157b821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd800870-f4e7-4e91-923c-91655a9a9e2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5534c9d1-7f0d-47fe-b7dd-3c4573cef580",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c601bdd-39a6-4b2c-86f0-91f2bf9f0283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c60ebcd-315e-4582-b68d-16abf615fe4b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de77448-78b7-4381-a93f-a899b9685784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0003b9ac-90e9-499b-81a4-b75860b519da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1ab1866-0c2e-4179-87bd-5301a64f949b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e781e663-ab65-45de-aaa1-d1990677c507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a8b87c5-b45b-422f-a4e1-25b80936bca7",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d53eef41-7fcc-46b1-9ab6-7ac758cfb881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20df0ab3-c398-4c5e-934b-bd6a66600ebe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90c9d76-c99c-4007-8fba-6ec646cc31fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baa92671-8e98-467d-8254-5b7ef594fdcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cdb8033-7f97-49ef-9d2e-7faaf2351f3b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3688567a-850a-4c87-87b3-e49aad9e8c05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c0d9384-2b58-4c28-bfc3-6cfe93c04aee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07255254-6d02-4f0c-8e19-9228d7983f3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8ea8644-6a2b-4b0e-8f38-b1a9a8fa73c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be62577-86c8-4900-b8ab-de7e9e14a23b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c82dc2ee-23e8-40cf-87fc-bcbf7d61f8d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1eb8e56-fc01-443f-9791-d1d3df4b8324"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5958fc5f-3ab1-47e4-826c-0d7ad3f59c93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d8ee094-0e08-42f6-8c5e-e42b44d67260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e004651-2286-4734-a84f-4109c64580af",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cdc8804-e38d-4b9b-818f-6824ddc1b16e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4294e2e9-8c18-4b79-a7a5-731847577b44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30e0b7a-82bf-40d2-926a-e333847bc4b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee45e1d4-6ada-468f-91cc-3ab9f2b8d311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f217c43-a2a7-4f33-8505-55b95a6026c7",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f074db4f-f881-4473-be9d-77c5f05dfbe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa3e82f0-6df3-433b-82c6-661c2e2959c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24da095e-332c-4e16-8dec-55bad26dcaa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51f76b26-03ed-4bc9-884e-04c1a39ca979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f629d79-17b5-487b-8352-f7a3aa52d3a4",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f917fc-de6c-43ae-820c-55d61539d731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc12eaf7-ee74-49f3-ba95-5226736ad1b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "600d0b25-8e73-4af7-b82e-4ad696e696b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11b7a950-c8ca-4c0b-9e21-32a6fa454c9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf2122b-9f40-460e-adf9-814c35de5a2d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd44f806-14cd-4e3c-9308-f672f7a90380",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fd791bf-a678-41fe-980c-007ecb656522"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e503f4e-bdb7-48dd-9d2e-3b5ed2198e50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1965ec9-7096-4d13-a0bd-c4aba24fd184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a881ba-23f8-45a3-906e-956ff9d7c458",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b1bd48-4afe-4bc4-acda-93b21d3da9b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74e51907-7d9e-46ec-aa9b-15bab05beb12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb30668d-8f34-4c52-9c35-47ecd7e697ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38b0cd09-8e18-499f-89a2-a6dc8b0d31c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c65bf6-8938-4088-87a8-28e0be60e6f7",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfaca8c3-afe7-44ff-addb-498b40f40072",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d9c2da9-a4d4-4a58-b233-2fa2a2ffde96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cea5f3e-94a6-4ba1-ab9c-0389f7a5d36c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbd4851b-b9df-4c50-b6ff-a30fd5c583d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76fe8836-7b04-4fd6-8840-bf3058ce992e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba75cf3a-659c-47d0-9fef-13d7b7a86837",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3372fa5-a976-4d59-a351-9a94c34dd581"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e88bfc-631d-44df-91a5-e9e5295c7b04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5dc99bb-a7ae-4474-a7cd-d2812a8a982e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93078d6c-fd62-494f-a53d-a0df489e1de3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e74eac6f-44d5-4da4-b080-1247760b6a19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "382fe1bd-ded8-408e-8f78-316c75a13afa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e9dfe63-57b1-45f0-b764-675828843ad3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d21e777-7a2a-4062-9b1f-d4644f389cd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1dfacf9-9ca2-4c0d-b704-7451219d8fec",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a111b42d-1d67-44d6-8320-942a59b71dfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13be5b04-1ec8-4594-bb89-eddd5fd901a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c1db99-f2c3-4cf8-9539-a007bcca0cc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d95b50da-a2a9-48c3-adb9-2d1ce569323c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75232839-e869-4c24-ad14-951d6268ca3c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a3afbd-e7c4-4c3e-acbb-8df3eef2ea0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd32cc7a-04f6-4912-ab3c-6639e2f36e7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ddd236-b350-4898-84be-81d30b091357",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e54f1b28-273f-4268-ae21-665f06b668f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "701d29be-f0e5-469a-9596-27291ce0498d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85876f97-42a6-4456-9d30-c265c1bf37c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02a6f1f9-1f71-4be4-9281-44bec8f98156"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d99016-0d1f-4bf4-81a2-2a230ae048fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d81b1c29-a9f4-4b0d-82c8-93d291071884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb85bfa5-bced-48ec-abfb-f4c76a956cf3",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c4fe7b-ecef-49a9-ba1e-d1d953f8eda6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dfb8757-09c6-4760-a04b-d189cd9f054a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24202c00-48b3-4596-80df-5eda1d935244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4be6e51f-3770-4fff-aaaa-58a706f91b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3092ad2-fe7d-4921-87d8-6105e7ef3862",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31853820-f152-43e0-b015-8b9dca383a6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a5f8ed9-e3f3-4b98-8944-83733cb6b119"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb69d1f-26e0-4a62-af40-7afdb5a581b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c9b141a-0e4e-4c4f-b552-f7b4cf39e4f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dcb7def-1383-43a2-bb13-45c865295380",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4babfbd5-5781-4f17-88f9-65aa44e252f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18a3f825-3dc2-4ec6-a596-9f103fe5814a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e35038-c1de-40b1-ba8c-b4578f822d2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85dbf86c-8a7a-4372-96f2-022a512e30b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e4e7519-c7e1-4752-94f2-9f30772c46ab",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a081a5bd-4882-4839-aa2d-6ac41594e802",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3009e067-5237-42df-baf6-b52b2f190c8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0054d4-3a97-4aaa-b0c4-3a3b3370e912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4105470a-955e-4b26-b5d4-9149a15953ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d46a583-a8b9-4483-b1fa-47eb5374bb7f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c1b2c38-59e9-45bf-b007-c317b1090bed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5205a7f-2208-44e7-97a3-46bc808091c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c107012-1672-43e3-8fe7-a5b4694369ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9231ba0-d567-46c0-9f7f-3198eb88252e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b15d211-9e9f-45b9-a659-a5984d17dc96",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa38198-79eb-46b1-bd0e-de0ccddcdb3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fe1a584-b273-4ee6-a39a-60f1164c03e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1ea774-67b2-4f9e-881a-8beec0b98df7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "301771b8-2540-4c70-86ab-cf0ea4f974c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b36fa64f-5cfb-48da-867b-f408ed3d5178",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45dad3a2-7695-44b0-ac26-b78e76ea2df0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7999740-e18f-40ad-bb12-6da846232bc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e2d308-5317-4113-8dbf-d2d899b81514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27c9d0af-3175-4c13-9ad3-00d07896a29d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ddeb08-6c12-4c2b-8d0f-223d2360632b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e009e651-c7ae-460f-acd0-de6a76e18da6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b47316a5-f502-4712-b53b-adc5f6558344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89837e7b-c6eb-49f9-a7fa-317d19e35cb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e64e52ca-73f6-47ce-8d29-194934d9e033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e019ac4e-9a06-492d-9d3c-fe5b5b736d15",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f89072-6355-4895-9d51-22d62005f371",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b51ed4a4-302a-4b69-ada6-e8b89e065e1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8361ca4b-9863-439c-8d43-2247a820b7f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a3f1865-8bcf-4f97-866f-bddb3fddac01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61c1cba-4f73-4082-9752-8a1dab525fbc",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6591c97e-d50b-4ff1-bc8e-7d22ccc33898",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48ad9027-a6f9-4780-bd17-73a7e0af43a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d23bd05a-f151-4897-ae9d-3ed401beb948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e48142b5-5a9c-4a04-803f-167e22effa9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d9f15d-0423-4762-b3c9-b5d75058bce0",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec49145-20f4-48f3-8b09-529ac35e174e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "decdc796-3d92-4415-909b-2d280e56cda5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a7c979-5a46-4741-8c88-4162d98acd29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9b2d795-9d6e-4b9e-966d-93e7b5c2b1c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8f6e598-f4e9-4c7a-8e84-2d51fed72d33",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed840bbb-19cc-49da-9017-08b2eacd16a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "380b56fa-cbd6-4b5a-8af6-804cfd217d03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c7f65b-e3f5-4be1-bcb6-3454f53da97b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c5d93f-617a-45b2-8282-e777396e612a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4cccf42-0d06-487d-b2f9-a39e6af18f10",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3dc670d-6235-460a-985e-4651d21eb346",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d008f62-fb49-4465-8c36-afa24416dacb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6634d452-17a4-4cd8-a46a-461d20f75539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5313982-4241-43b6-ba71-acaa85a73937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fea939b-a3d5-4dc2-b014-1813d3f0f584",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6602136b-5a1d-41d4-888a-da4a5e8b3206",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2986701-18c3-4d89-9639-7e91d1fa2ebe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f80097-3fcd-4a75-be19-556ab4058a7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea2afad4-7499-4397-ad38-bbd15732b3f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe8fd28c-ad46-49d8-b778-f0f46f599ede",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11dd10c2-804d-459a-b6a1-5083b410ac36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f546205e-75a2-4907-b826-ea2bb451c014"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "195f7682-52b6-43d8-a140-f6ce0449b3e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc0b82bf-b0b4-406b-bab0-fea0ffbdf2d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae1e68b-1c62-4967-8857-99673032b8c5",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169c7937-dbda-4fed-8340-5df8af6f250a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "438bb372-c18a-47da-8d51-1e68b630b64a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6853dee4-97a8-48a9-8514-efb3c477dd13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd911065-9917-4c06-a46a-c0aa891654d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27f1f21-80b6-45f1-b928-d7149a52df5e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb24086-1ff2-44a2-989e-5fc938557a5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4abe1290-ce84-495e-adb6-1a7d1c430bba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e1137af-aa8e-442e-ab59-ddbeeb58ae45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2989a434-9f11-48c8-b749-5b73b530f71d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0160d622-c242-409e-9b66-a37420e282d0",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6922d5a6-4351-40a8-b342-dd903ad5fa92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0f11386-b51a-4676-bbe2-077d4d670f3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "529254ca-ac12-4551-a818-60329bfab7df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6682c44-8a35-4526-9289-23454168de21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc417964-1f77-4fb5-ba5e-602e492321cb",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef63c4e-683c-4311-917c-e04f8d65af8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f35016d-bce2-4058-a964-7eb7d4c6740f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffaabffc-a10c-45d1-b043-6556ec90b92f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d410161c-0ce4-4c55-b80d-f3f950d82e5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed35df00-1a2e-4206-b3ea-4d8987aec00f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb389ee-d75e-46d4-96fd-8a74e392281b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e1b3e82-d929-4f1b-9096-b5a8ba4bdd31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ab8922-aaf8-4d95-a657-e76270bc266e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fae1e02-8779-4795-a27a-84520962bf0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009dadc6-8e7a-44ee-a99c-e861200397e2",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cade6a1e-5977-4f33-9176-5187ec70ccc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d96c39a-6830-48d5-a76a-a43f694aebd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "804230b0-c694-4e63-9fbc-5be2a53bc424",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f30500dd-a928-47b8-8f75-ac9124d7b626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d19c139-6de5-4d9c-8fde-7ebb4865a825",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58f0b6e-3524-4800-a11b-fbd792271b3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "713f2f26-473b-4280-aff4-3018489eeeb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb6649a-daae-4b80-a1db-30867de593c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "becbb4c7-8b1e-41b1-a462-711212fdcaae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7d1609-99fe-4721-9040-8ed65ac2df31",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1509277-df2a-42e0-ac35-7ec4fbb579db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00bf6c42-a57e-4e36-84a2-3ead3659bd8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab70979-33ec-47a0-95bc-99c5c57f86f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03d8a60d-194d-4916-9588-5373cfa75b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4559568-6b4d-425b-84e2-46ff10c2f9ff",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c589ad-9153-4f2c-bf3d-15b9185d0352",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9761e9f-9ebd-4e3e-9e63-1cfe8328b9e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6a357b-fc26-4057-97a6-a46c2893974c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb229372-4091-4da1-88b1-6d0e3ea4dc2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff0359c-83ae-4d08-8772-c25068145a90",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd7ec0aa-eb70-4841-8391-2cf790379fb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38eb12c2-bbc6-458b-a118-fc67ad6cfb46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "228ea1ed-63df-4dd3-87cf-a1f3a5f29557",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e52c0a41-cc5d-4a73-99e8-d10471b15033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b88e74bd-5588-48f3-8bc5-100fdc85b995",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4407e4b-1be0-4128-b514-d84d51fc60ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ccb951e-5af9-446b-97d0-20b986b088a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49730de-bd4a-4b9d-92af-37d6ac6c0c85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a514ab1d-9516-450a-b1f8-2b2e2f210696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "243e6249-7770-4860-b3c7-89a80afd4bb2",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18134f54-82a5-4a77-ac6d-e4140d77c5a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "743de9b8-1f61-4a7e-ad3e-7947068c8415"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7f734a-c2c4-4763-85f2-7b4b0bb22184",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3404c5e3-be63-45fd-9edd-a80660312404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8316e3-db34-44a9-a41d-8d002ab6d826",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6f95a97-8bbb-443a-8f99-34541d222850",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d1787ae-e5d5-4991-b855-db317ba99e9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d493eba-b601-4fd6-8e77-b81b5f0dbd93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1214321-2997-4787-bb16-7f8752d5da4c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "122fd8cc-8218-43fc-bf63-160d59d65b76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8c18097-dba3-4bf5-a14a-a1a4b61d3459"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7fa849f-497c-41ea-b579-7335f14c7962",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7724d0f6-1061-4fe0-a7d0-24ece5654319"
                    }
                  }
                ]
              },
              {
                "id": "8e6a2eb2-5549-49e5-a1bd-84400dda9849",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9167449b-f8ae-4e3c-8d87-d64c8d65a385",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8c941b-d37e-49a3-80fb-ec45201527dc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "83b194a6-d263-4e89-9446-8aaae841458e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "633e357c-462e-4969-9915-2ec3e2bdee51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e82c121-8027-4f83-a471-fbb88f4dea80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbfcc2f4-bb41-47bd-b0db-93223bc581b1",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d17b5e3f-d156-43e8-9b8f-7601cfcfd7d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "519b6a4c-f183-4591-8826-783590136230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "223cd14d-e2d0-4a13-891f-e02c39be5179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "468a9c66-2a36-4a86-82c7-3548431f3943"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae6a3b6f-8a29-4b7b-9a5e-a70d3a1b312f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8574953a-51e1-4723-8d12-5931d3381354"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee7a320e-d6c1-41a1-a186-2d8cca677300",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41d49aba-3a51-4175-ae05-e12c3237f227"
                    }
                  }
                ]
              },
              {
                "id": "9f86bf59-a08c-4f3f-9f48-9d1450aa3c40",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "058a388e-c914-4874-bacc-444fa24100e0",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d43152-1a09-4ed3-a78c-af81ce42b17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "f5fcf087-1b8d-4e61-98cb-48ab768032aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afd663e-ac89-4571-8daa-d95f5c58c061",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7668e2d-c79e-47d7-ae50-2024eb04b6af"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0af68bd8-7b32-4af9-9ead-8a1f4eb3227c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2e86d1c6-b647-4cfb-b8df-db428effa413",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "751263d7-081e-4384-8834-f06fc08cb4f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c10200a3-1ba0-476c-997c-ff55bc604042"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1f84279-c65a-42f1-9b78-8696b58248cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e50781bb-928b-43f1-85f1-43224728fd9c"
                    }
                  }
                ]
              },
              {
                "id": "194b72a2-6746-497f-aa92-baa3bda0a675",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cca1c8cc-9632-4d70-b79c-2bfa4ba81786",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "de980366-80a3-4bc9-a174-ea97e11a0252"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3750323-591d-4391-91a2-f8f8c7b0b814",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4524341e-749b-4185-8e36-7203c5f12389"
                    }
                  }
                ]
              },
              {
                "id": "3550a846-2679-4a5a-9b28-67249df46483",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7eece68c-85e2-400d-914f-cc77d4204030",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7377e798-2308-40ac-93a1-9ab9a23e861c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aacf31a2-4d49-4be7-8f14-827a1df190bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "042bd481-01c6-47bb-b3b9-8a569455439b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1e5ad4b9-332d-43e0-aae2-b95189f67932",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "51bd4a73-3fac-46d9-b0f4-493b681f6d2d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "59e5b752-6df3-4cb9-84a2-04a7e737a063",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f39e4bce-6b54-4586-b187-60634b9641a7"
            }
          }
        ]
      },
      {
        "id": "e08e4e0b-1d23-4d92-9c79-c437a99d9eb1",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f4648167-10cd-435c-8cc5-7b95beb5f402",
            "name": "Negative Testing",
            "item": [
              {
                "id": "df7b3501-452a-464b-bc06-a22cc491fd2c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d9b09c59-3fa3-48d3-bd5a-329876cdf29a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690832ad-654a-4b42-ada7-dbc4f84981fb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f12d00cd-ad1f-4a77-b85c-34140fb87e38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c72c47f-1989-4e66-a9d0-a1a09e04cea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6ff98de-5e54-474d-90f6-f5d2e2283960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab18aff-ebd8-4b20-ad7c-a16be687e334",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd3245d-a7ff-4406-b85e-d1d814bf5d60",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a10f9f41-53c1-4ef6-9bb1-e6987ec550a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae5a0d8-71d7-4ded-9d17-a345b70dde3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "71bf8e03-06c8-4ee7-a744-cddf00fa71d4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f21ff46-0534-4831-a27f-f51a0ab388c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9ae45d2-d71a-4c02-a3bb-4c0f937e94b5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "75e2535a-1ddb-43e5-8151-1a1dea097b94",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26fd51b1-843e-4e66-b4ec-6536b7f2ac9f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da9fedf3-2003-4bbd-bdbb-36a362324644",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1abcdd44-a7f3-4ad5-93cb-53316788917f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "40e7f2f8-ff04-4440-a91b-00442ea09531",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f063522c-7583-481f-a339-d6accaa7368c"
            }
          }
        ]
      },
      {
        "id": "a788e7d2-690e-4071-9d40-f2075a9bfed9",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8d557606-223d-4088-9609-ab1e06867a49",
            "name": "Negative Testing",
            "item": [
              {
                "id": "96cb294a-5a0f-47c0-b9aa-afecd39ae994",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5ddd2181-a37f-4710-8608-aa887e57573e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a8090e-3f4e-4968-8e04-3c42b7375d25",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8f37e3de-37ca-4045-974f-cbfa66335c02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e0f4bc-2efa-4bd2-96bb-6d7a9e72c189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2e93bcb-3b0c-4ee3-b668-377f40828294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ee92a1-5a0a-4b95-8a01-d4609f1368cc",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77182a43-84cf-4499-b511-137767986c53",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bbdb2c3d-dbe3-441e-888c-ae56287201a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb139725-100d-4c31-8ab4-6e720e778749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f936ea84-1bbf-4bc7-84b0-a4b98130d166"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d93db6c-ee6c-4ce5-bfcf-ba94742dc3a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd4659cc-0c9b-443b-9276-9a0e09fa5189"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d43441a-3d7f-4b2e-a4ef-11d46f918569",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f022ab5d-63e5-49a8-a7bb-1981486cfb24"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc4df0c6-ae01-4571-9ec2-e64719d25063",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e7a2d72d-6ce5-4c6b-a517-75e142038fc7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ff5cc53d-5a91-4082-a901-9b7c03f5d81d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f9b8f6b6-ca8c-4f55-9d97-f41a1b729dc7"
            }
          }
        ]
      },
      {
        "id": "a2ee9c84-6ab2-4f5c-b476-75607c2bd526",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9aff9a0c-067e-42b9-843b-3527a6795b30",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c5b67dbe-dc15-49d8-b098-d4adf45466b9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d799ba8b-1a78-4b57-96ff-f17f21497861",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f361f0-a371-49f4-9596-b413fa1bec9b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "24977d32-687b-428c-9986-8a39809c3010"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62620d7a-8017-41d5-85f1-c2109395038a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0e9d74a-27dd-40f9-acaa-062cd088da44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3670a829-91a5-4dac-9450-1ebdea807121",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea53d5ad-8328-4828-a73f-09a1e87fa207",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3b02df47-0d89-4900-a7db-23cc68744156"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c929994-2a3e-46c6-b446-f83ccf9695d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "73b4f75e-a495-435a-a2d4-0d3aa41afcc5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5edd2f9-43d7-4269-828c-e6fc6e93a117",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d929063-034b-4225-b10e-10c1223b9b21"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "febfc8e9-7e34-4373-ae74-d2c63bf58602",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37c3bed4-d8c0-443e-a845-6560bb0c8fdc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7a7a3e80-5d27-4982-b802-9e58af9125bf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a754b64f-0fd2-4f93-bc13-c337a861ed31"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3fe66280-6fcf-420c-8441-e2a21535eef4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "678cc9ba-0d31-40c8-b575-035a6f1c7697"
            }
          }
        ]
      },
      {
        "id": "50ca1aaf-30d8-415c-b7e8-5f9a2865535e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "12c6d688-e4a8-4ad7-b05d-2b1c60f1e8df",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "992bd149-ac60-4927-adcc-95f5585736ae",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c12a2043-7120-401a-8a2b-b4e2b5e1cbea",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e6acf075-53d0-4bad-ac4e-112d6e1016bc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d4ad4a08-f92b-4425-bee6-a8d6a67318cf",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 67.04980842911874,
      "responseMin": 4,
      "responseMax": 767,
      "responseSd": 121.41913652518983,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1669423039592,
      "completed": 1669423067920
    },
    "executions": [
      {
        "id": "487b1841-ec0c-4594-b64d-e1be30ea8855",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e2ebdde9-71ef-4269-ba77-44336c104053",
          "httpRequestId": "73f91597-8c2e-422d-adcd-c3e8028846c7"
        },
        "item": {
          "id": "487b1841-ec0c-4594-b64d-e1be30ea8855",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "81c514a6-f727-439d-83cb-10de07856ac5",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 0
        }
      },
      {
        "id": "ec213771-ff79-4ac9-b4aa-8fc08b9acc6c",
        "cursor": {
          "ref": "a4cae392-2a1e-407e-9446-437d51a33695",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3fffa5c9-4419-4af1-b07e-7633d21fa367"
        },
        "item": {
          "id": "ec213771-ff79-4ac9-b4aa-8fc08b9acc6c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d64de410-784d-4d1b-909d-91698525190c",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 0
        }
      },
      {
        "id": "8d090f5d-4d6b-4a26-99eb-4ff2f00d6aa9",
        "cursor": {
          "ref": "aeb8eda6-fa81-4444-a7f7-8bed95dc5ed1",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "88686acb-9fda-4a37-a021-db6176b78feb"
        },
        "item": {
          "id": "8d090f5d-4d6b-4a26-99eb-4ff2f00d6aa9",
          "name": "did_json"
        },
        "response": {
          "id": "2f9a30c2-77ad-4be9-b4bd-b40052612f55",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1648f965-6260-43db-a3f3-09b90e2a4226",
        "cursor": {
          "ref": "7d0ee8ce-0d0f-4806-8d72-e130d2bfb294",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "150f1c97-b9ea-42b7-8a47-18e24856ccb5"
        },
        "item": {
          "id": "1648f965-6260-43db-a3f3-09b90e2a4226",
          "name": "did:invalid"
        },
        "response": {
          "id": "eecb2b84-7a1c-4ea8-8600-6792c2f219e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1648f965-6260-43db-a3f3-09b90e2a4226",
        "cursor": {
          "ref": "7d0ee8ce-0d0f-4806-8d72-e130d2bfb294",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "150f1c97-b9ea-42b7-8a47-18e24856ccb5"
        },
        "item": {
          "id": "1648f965-6260-43db-a3f3-09b90e2a4226",
          "name": "did:invalid"
        },
        "response": {
          "id": "eecb2b84-7a1c-4ea8-8600-6792c2f219e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea62f12-13f1-4d55-9afd-08826099ec5b",
        "cursor": {
          "ref": "780ca88a-44c7-4d62-ab41-77af6c1c7008",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "438304ed-15fb-4439-8286-182bd7978f47"
        },
        "item": {
          "id": "8ea62f12-13f1-4d55-9afd-08826099ec5b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ad629745-ce77-4690-a71e-4009bbd80ed8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 297,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d07b21f7-f44b-4528-87a9-e96701023cd9",
        "cursor": {
          "ref": "794af2ab-a89d-480e-875a-77e51cde7137",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "fb4b3c73-c20f-495f-9889-acdf655e8cfe"
        },
        "item": {
          "id": "d07b21f7-f44b-4528-87a9-e96701023cd9",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "7cbee980-3d67-4757-9f18-29c9a5dbeb60",
          "status": "Not Found",
          "code": 404,
          "responseTime": 15,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cc4497f-fb92-454a-a80a-a07e80664c03",
        "cursor": {
          "ref": "dff6f352-a332-4737-9072-f36063a7c7f6",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b8fd6df4-c7d0-48c2-8ea4-fbbd61d50fa8"
        },
        "item": {
          "id": "7cc4497f-fb92-454a-a80a-a07e80664c03",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "89ef8b63-db57-4524-b560-02a2e739ad4a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7abbf2d3-e205-4f96-9fb3-396d52c1dedf",
        "cursor": {
          "ref": "cec598d1-0abe-4efc-a035-b841fad023ab",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5499aec9-cf53-4c4a-86f4-f82a4b8a7f96"
        },
        "item": {
          "id": "7abbf2d3-e205-4f96-9fb3-396d52c1dedf",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "85b15db5-45cb-42ed-80dc-f0c2379e7b86",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7abbf2d3-e205-4f96-9fb3-396d52c1dedf",
        "cursor": {
          "ref": "cec598d1-0abe-4efc-a035-b841fad023ab",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5499aec9-cf53-4c4a-86f4-f82a4b8a7f96"
        },
        "item": {
          "id": "7abbf2d3-e205-4f96-9fb3-396d52c1dedf",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "85b15db5-45cb-42ed-80dc-f0c2379e7b86",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6886d014-4399-4516-9989-5cd60260159c",
        "cursor": {
          "ref": "a052ce12-d919-47f7-aa10-28b10b881f0d",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "aa2a63f0-2f5a-406b-8acf-828c3861e0bc"
        },
        "item": {
          "id": "6886d014-4399-4516-9989-5cd60260159c",
          "name": "identifiers"
        },
        "response": {
          "id": "c1cadd2f-8eb4-4d3d-b569-00cb6114ed3d",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25f224d6-599e-48d7-8410-787972ff6056",
        "cursor": {
          "ref": "ca9c3f97-c433-4323-96cd-863391d78087",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "77fd6ba5-feb6-4ffc-8752-be99064fe86a"
        },
        "item": {
          "id": "25f224d6-599e-48d7-8410-787972ff6056",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "242943d6-fd6d-45d2-b1e2-e6f613250c03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25f224d6-599e-48d7-8410-787972ff6056",
        "cursor": {
          "ref": "ca9c3f97-c433-4323-96cd-863391d78087",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "77fd6ba5-feb6-4ffc-8752-be99064fe86a"
        },
        "item": {
          "id": "25f224d6-599e-48d7-8410-787972ff6056",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "242943d6-fd6d-45d2-b1e2-e6f613250c03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8d448c-a4f3-428c-b3d2-aad3b9887834",
        "cursor": {
          "ref": "7ff46186-cf4a-41e7-925c-72d219b1fafc",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c281adbf-3369-49ab-a9fd-b72e6247d584"
        },
        "item": {
          "id": "fa8d448c-a4f3-428c-b3d2-aad3b9887834",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3bdc174e-3fee-4349-b23c-e94a499510e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca0bf347-48ca-4684-9aa6-a6b53d52ef1e",
        "cursor": {
          "ref": "e902c7b3-c334-4206-a9c7-e3afffc6cb52",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "45d96565-18ec-4ee0-8bae-3e45f8d8296c"
        },
        "item": {
          "id": "ca0bf347-48ca-4684-9aa6-a6b53d52ef1e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f62cf0d2-a924-418c-93e6-1cdf05dc2e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f904f200-ffbe-4fb1-b945-04bcde4d41a3",
        "cursor": {
          "ref": "7e8fd6bc-a5b1-4745-be01-42c02592cbb2",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8f7b738a-44b7-49c4-8df3-74cce757e4b8"
        },
        "item": {
          "id": "f904f200-ffbe-4fb1-b945-04bcde4d41a3",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "bc94e782-e02f-49be-a877-f6010cf275de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aed680f9-99b7-4cea-bcc9-b3d794d3267b",
        "cursor": {
          "ref": "fcaa7ada-ec5d-4646-a413-1cbe02d9aa4d",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8794397b-ddf3-4f51-a812-ce04c941ed0e"
        },
        "item": {
          "id": "aed680f9-99b7-4cea-bcc9-b3d794d3267b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a41b86ce-55fb-496f-9dd6-9c9ddbfb0c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda4799b-c533-4b38-b6f7-90e190486624",
        "cursor": {
          "ref": "979d176d-538a-4eaf-97a1-aff3249a9e98",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ee120dc4-b7d3-437a-8057-3a8dffb00d80"
        },
        "item": {
          "id": "bda4799b-c533-4b38-b6f7-90e190486624",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "843ce8cf-08e9-4185-9555-9175522c489d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9fab236-31e5-4b6c-8c85-48e7c66bbf28",
        "cursor": {
          "ref": "6f948a11-3b1d-4b27-ba1a-c5ee875ccee4",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "bfdaa5e2-ffc2-4c37-8a2c-19a566f5440c"
        },
        "item": {
          "id": "a9fab236-31e5-4b6c-8c85-48e7c66bbf28",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f210dbb7-c340-4610-874d-de218e0d731c",
          "status": "Created",
          "code": 201,
          "responseTime": 767,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "cb0398ec-6c00-4286-83b8-bc7907c6162b",
        "cursor": {
          "ref": "93ef395b-3842-4576-b101-f1b1f115f309",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "54df42b5-d6d3-4a84-8022-d6cbd9560067"
        },
        "item": {
          "id": "cb0398ec-6c00-4286-83b8-bc7907c6162b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a4f0012f-c9b9-45ba-bff0-658c97eaa162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65fe3fa9-5a7b-4744-b003-215c04a72cd5",
        "cursor": {
          "ref": "c5f1649f-42f6-467e-a86b-a100557770ae",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "dd9c8773-a81f-4a85-830b-82a0228da02a"
        },
        "item": {
          "id": "65fe3fa9-5a7b-4744-b003-215c04a72cd5",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "274dc062-968d-4794-878b-85b2b3f2080d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a31e7c-9886-46c8-92e5-9c9f1a42ec8d",
        "cursor": {
          "ref": "afb3d7c0-123e-48a3-bc74-69be17aeb6ae",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ad3e6eff-84b5-420c-ad96-ce1af078bb43"
        },
        "item": {
          "id": "29a31e7c-9886-46c8-92e5-9c9f1a42ec8d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0c07fd43-a5e9-496b-98d4-2becf7fdd49b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1836325-aa1b-4455-b630-5f83854bfe72",
        "cursor": {
          "ref": "3dd2e13a-2871-4034-8f3e-93fabc259a54",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "13d682ed-e846-49bf-8810-34c05c4d3b14"
        },
        "item": {
          "id": "b1836325-aa1b-4455-b630-5f83854bfe72",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4f4babfd-b921-47ef-892b-ce23e22b9449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a29aeecf-c807-49b1-94ab-5a7db13f5846",
        "cursor": {
          "ref": "b9f8ffd9-6c0b-4a09-b297-efa6105bd578",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "58be580a-bbbd-421e-b026-955d9de9f2b4"
        },
        "item": {
          "id": "a29aeecf-c807-49b1-94ab-5a7db13f5846",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e48c6e22-648c-475c-84bb-340a4fab288d",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "3d5b2876-f0e4-49e4-b90d-9067d14b8d1a",
        "cursor": {
          "ref": "a96d7320-6509-434a-854c-4de57e1fc6ff",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "43a5c0a5-aeaa-4c65-8b73-4b51d69d8522"
        },
        "item": {
          "id": "3d5b2876-f0e4-49e4-b90d-9067d14b8d1a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c2355c0d-c059-4db4-89bd-c6adfdb80599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b0f27c-d6df-4d37-9352-976631f9494f",
        "cursor": {
          "ref": "1565e187-16d3-4e4f-9121-fbd8ef5121b4",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6c9bed35-8aeb-44cc-a7cc-a55b3a1fd752"
        },
        "item": {
          "id": "08b0f27c-d6df-4d37-9352-976631f9494f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "907d9609-1336-41b9-b992-c83666aa8da8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "552fc260-42fb-45b5-b953-71d7bcac0e49",
        "cursor": {
          "ref": "4755644a-e658-45e9-b312-a2484fc5f764",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "368437dc-51f1-4efc-b7b4-6fc1c54e736f"
        },
        "item": {
          "id": "552fc260-42fb-45b5-b953-71d7bcac0e49",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "26ac6854-79fd-4733-9b1c-23d351673372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a7d02a-0473-45f5-b553-fc06ad978cf4",
        "cursor": {
          "ref": "3ae38a70-833e-4ed9-bd30-75e264c703cb",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3963a7bc-0bd9-43c1-bb3e-1f9d32a958e9"
        },
        "item": {
          "id": "06a7d02a-0473-45f5-b553-fc06ad978cf4",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "559eec4e-b167-4918-89da-ac481d692dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c071bf3d-d63d-4168-9af0-4615a5d09697",
        "cursor": {
          "ref": "95a816ed-3a95-49b7-aec8-8744d7c2b20f",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "cecf2742-1906-4b42-b85b-819dd0191ea5"
        },
        "item": {
          "id": "c071bf3d-d63d-4168-9af0-4615a5d09697",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "880cab8b-5b59-47b6-8352-a80299951b0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762f142d-bbed-4bff-89dc-7f5a5c047e8c",
        "cursor": {
          "ref": "dd7d8539-76eb-4e51-85f6-d3653048de7b",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "125cb993-1381-47b7-a8ca-faa280f79262"
        },
        "item": {
          "id": "762f142d-bbed-4bff-89dc-7f5a5c047e8c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6b84406b-817a-4a8b-b384-ada9cf949a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0464fd3-0ede-4a9c-b8b3-a47b3d287468",
        "cursor": {
          "ref": "c9f4a33d-dffa-48b7-8a4f-089d262f1795",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a50b689e-e0bb-4321-ac94-3ba7945cb2df"
        },
        "item": {
          "id": "c0464fd3-0ede-4a9c-b8b3-a47b3d287468",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "887a8320-5d87-41af-9d7a-528c9f95f67f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c161459-7204-4dab-b0be-37ba1f913b8c",
        "cursor": {
          "ref": "905502c2-8fcb-43a6-be3d-b33936b5afa6",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3c245052-1716-4293-857d-c8749d648b4f"
        },
        "item": {
          "id": "9c161459-7204-4dab-b0be-37ba1f913b8c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "464cbb2a-5d82-4459-b7ee-92da7a819359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbaeed43-b542-46b3-a70f-a71134a4b98f",
        "cursor": {
          "ref": "ef4b56dc-1945-43b0-9500-7a933cadd964",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f875f55b-12bf-43be-a1a3-38233cca3fc2"
        },
        "item": {
          "id": "dbaeed43-b542-46b3-a70f-a71134a4b98f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8461fa93-bd8a-45da-bb50-472be8228cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c26520-8bd1-4efa-b6e8-986ce3a76e8a",
        "cursor": {
          "ref": "9dfc7aef-705c-4eec-becf-1c7a52dd13e2",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c664c3a8-5f72-47b1-951c-2399e01b3aa5"
        },
        "item": {
          "id": "f8c26520-8bd1-4efa-b6e8-986ce3a76e8a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "5b8daaea-37d3-496b-8556-dd8bc8784d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cda752a-2fe5-455b-af66-e40f63e2688f",
        "cursor": {
          "ref": "c2873c80-a7ff-4c0e-8cbc-a3ed3ece7c18",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "593f2d0c-3209-4bf6-b882-b0e4fc62445b"
        },
        "item": {
          "id": "5cda752a-2fe5-455b-af66-e40f63e2688f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d36bf47d-9692-4d17-9502-c9c27d897595",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "42938270-8360-4f5c-b440-290827e12839",
        "cursor": {
          "ref": "1ae0fd43-b6a8-4264-b4b3-9bfd44394af5",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "18a3d9c4-db72-4118-8e25-cb20db57d9dd"
        },
        "item": {
          "id": "42938270-8360-4f5c-b440-290827e12839",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f6d72629-fbbf-407b-8177-e9ec25e5a322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14e5752-fe49-4e19-a0a3-b9319bf4783f",
        "cursor": {
          "ref": "74ace681-fb67-487f-bc7f-5c464778ec04",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "bddeb6e8-7a10-45ed-aab0-712bfcc66833"
        },
        "item": {
          "id": "f14e5752-fe49-4e19-a0a3-b9319bf4783f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "2d744414-751c-47a4-bb9b-207ab37a9136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67bd64b7-00b6-4348-ad52-74dde83717cf",
        "cursor": {
          "ref": "b3253996-7804-489e-95f4-78e025dc3755",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c17a73f4-737a-4470-989e-6cde516cb46f"
        },
        "item": {
          "id": "67bd64b7-00b6-4348-ad52-74dde83717cf",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "078119f3-4c15-45bd-9266-e8032d261c1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f01ee3f-32dc-4f76-bdc6-fb1469e512b1",
        "cursor": {
          "ref": "65cc008a-4802-4ce8-9006-aade85034fa2",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d6bb9c39-a20b-4c00-98ab-af14d2fa37c3"
        },
        "item": {
          "id": "5f01ee3f-32dc-4f76-bdc6-fb1469e512b1",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0d7015d7-707b-45d3-a3d2-ceb6e315d668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6394379-9c47-4c2d-9294-5fd15f8b9fe9",
        "cursor": {
          "ref": "69381142-1f4a-4991-8379-3e8d97dfdc98",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "689e034f-0641-4605-a247-4923cb2c607a"
        },
        "item": {
          "id": "b6394379-9c47-4c2d-9294-5fd15f8b9fe9",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a6417fcb-4a10-40b1-8080-9d8a9f216b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb10f58-e79c-4c01-9daa-18b0dc77dacd",
        "cursor": {
          "ref": "d192cf63-8811-4fa8-bf43-a58bd24a8f6c",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "dfe56c66-2809-49ab-8707-afd7895d7afb"
        },
        "item": {
          "id": "3fb10f58-e79c-4c01-9daa-18b0dc77dacd",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4c518e37-71e5-4122-847d-c923c6cc8786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0a481f6-afad-4ff0-a7ba-7b7bc478af70",
        "cursor": {
          "ref": "762a076b-c890-4601-8e63-c62d65d112b9",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d0076ece-eedb-41c2-8070-08c7862190e4"
        },
        "item": {
          "id": "f0a481f6-afad-4ff0-a7ba-7b7bc478af70",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "482d0f87-dcc0-4bb2-a2f4-165f420139e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d772266c-6fb8-4a59-91b6-63f733bcbeea",
        "cursor": {
          "ref": "81d19f10-2572-4110-a0f5-4e0ac35717d2",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "79e14d18-cc77-43c5-9191-58e9ed06a239"
        },
        "item": {
          "id": "d772266c-6fb8-4a59-91b6-63f733bcbeea",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d29f6fd2-6076-4979-ae20-1ccd9b7103af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1cddc7-e8a8-4f7a-b401-7d00e88c6b93",
        "cursor": {
          "ref": "48f7e476-6587-4989-9c68-1dd651629410",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a1982972-54f5-4977-9b95-320130aeee67"
        },
        "item": {
          "id": "7c1cddc7-e8a8-4f7a-b401-7d00e88c6b93",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "6a8dda52-52eb-41ff-b561-3f0a37d17460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d6fd93-980c-4f07-a5b7-485426036009",
        "cursor": {
          "ref": "d21eb5bf-2856-4852-8b55-d23a21b38af6",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "fb0e452d-93b6-49a2-92a8-87e73338370c"
        },
        "item": {
          "id": "19d6fd93-980c-4f07-a5b7-485426036009",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "498493c5-bfa3-4743-9afd-cdadaf472ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61e7d6ef-b912-49f8-b8c6-836d5e0a903b",
        "cursor": {
          "ref": "d01670cc-4ca9-4245-9514-3e773cd12816",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "73a0b267-3cb8-4940-bc7b-176183858b00"
        },
        "item": {
          "id": "61e7d6ef-b912-49f8-b8c6-836d5e0a903b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ab4ae261-b67f-411b-9807-9620e67b0feb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9e883f-5ef5-41e3-864c-33ec6f7e7a80",
        "cursor": {
          "ref": "693cf879-bdef-405e-951d-3ee0aedad5bc",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "46e686ce-1f5e-45a9-9123-cba8ed91b5d5"
        },
        "item": {
          "id": "cb9e883f-5ef5-41e3-864c-33ec6f7e7a80",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "5c118a87-5903-404f-87e3-3c46f662e110",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b9a413-326f-4c87-92b5-ee3bf2ca3ef0",
        "cursor": {
          "ref": "b410ded0-dedf-4aac-a11d-0f55ccaa4d48",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b086ef96-b915-4e29-a9af-37a6cd663aef"
        },
        "item": {
          "id": "36b9a413-326f-4c87-92b5-ee3bf2ca3ef0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2b1e7dd0-c5a4-4b78-b359-d96b0bc5d59a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a832df11-79be-42b3-a3ed-de98e92ff230",
        "cursor": {
          "ref": "e41def81-dadf-4fdd-a13b-747b10131466",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "dd3d7c2c-9e0a-4880-9ac7-3bad757aaf45"
        },
        "item": {
          "id": "a832df11-79be-42b3-a3ed-de98e92ff230",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2166d710-2777-42d6-ae8b-928a652ec022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aebd2153-3e81-440d-b28a-f77039c87f8b",
        "cursor": {
          "ref": "e9b238f7-ce61-4b73-b29a-d0e367e4ac74",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5def2c0a-6a25-412a-86d9-6579038b6959"
        },
        "item": {
          "id": "aebd2153-3e81-440d-b28a-f77039c87f8b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a5a28f2d-e4ea-4c30-931d-7bdfccd53757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47214adb-5953-42f6-9330-7477c1095adf",
        "cursor": {
          "ref": "279cbcbb-c3cb-4336-a08f-b27577fb87f6",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9a459503-90df-4ab9-920f-8a605764d55b"
        },
        "item": {
          "id": "47214adb-5953-42f6-9330-7477c1095adf",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "144860da-f7b6-4264-819f-548b20b5bf78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a801580e-1a54-4f9b-aef1-f1fd826a8a61",
        "cursor": {
          "ref": "c64335ac-dba5-4332-8eaf-c73ca77bfdaf",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c48cca8c-ccea-4a3b-b181-aa4cd935198b"
        },
        "item": {
          "id": "a801580e-1a54-4f9b-aef1-f1fd826a8a61",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3cd7ad22-fc61-4abe-bc06-ab7d9094f19b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f347ba16-a93c-493e-a260-fb5a9e3eda65",
        "cursor": {
          "ref": "2c71bfaf-4413-4042-a23a-a21db473c6d4",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "15e7aa6e-18a4-4dd5-a485-74653d3a454d"
        },
        "item": {
          "id": "f347ba16-a93c-493e-a260-fb5a9e3eda65",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "993a9e7c-211c-4cb8-a925-66c082cd9b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34f20b2c-323a-4ad8-a032-e1451a33586e",
        "cursor": {
          "ref": "b45cb30c-02df-4156-adeb-965c634cc115",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "dde45666-5543-4f67-954f-015d50b1ea6b"
        },
        "item": {
          "id": "34f20b2c-323a-4ad8-a032-e1451a33586e",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e84841f4-189a-4c6c-965d-8621ab508ee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "229a16e9-02b5-4bb0-9a8f-06cf7bb710a6",
        "cursor": {
          "ref": "bb1b1110-782d-40c2-9c47-8777b3495256",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3721dc5d-5672-4636-a411-45b9b58b6028"
        },
        "item": {
          "id": "229a16e9-02b5-4bb0-9a8f-06cf7bb710a6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "067417a6-1ac2-4e6c-9283-90aeb9f5dd4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "8dfc5895-6dec-4ffd-8421-f45236d0b286",
        "cursor": {
          "ref": "7dc1e6e2-cb55-4115-81b2-01142f6f07b6",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "800be40d-3d7e-43f4-bd8a-fe603fa1f8b6"
        },
        "item": {
          "id": "8dfc5895-6dec-4ffd-8421-f45236d0b286",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "daf4f6bd-ff71-4eb7-8ffc-600515f275e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a63eaf5f-c9bf-4928-a15a-b883cfb9bf41",
        "cursor": {
          "ref": "c467e51f-147f-4057-820f-66a9f2264c7d",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "08e9818d-a3fe-4949-a5c2-7eea64c0bc72"
        },
        "item": {
          "id": "a63eaf5f-c9bf-4928-a15a-b883cfb9bf41",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "882c6179-791a-4edb-af27-40f878d19932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88fecc0c-5cae-496b-8788-1de7f3d236f3",
        "cursor": {
          "ref": "600c094d-9429-49a5-9a89-a737ad342459",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "0abc7f31-9b48-494e-81c9-f47f70380ebc"
        },
        "item": {
          "id": "88fecc0c-5cae-496b-8788-1de7f3d236f3",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "deb08755-32c3-4cd3-95b5-1c5f2d3ba497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bb82afe-7e6b-4f95-853a-dc1c424a5187",
        "cursor": {
          "ref": "b186baf8-04c4-4b52-9736-cf6bcca2b2ab",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6505d01f-cd15-4b8c-8ed5-c9ccac7fd5e4"
        },
        "item": {
          "id": "6bb82afe-7e6b-4f95-853a-dc1c424a5187",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1f3bb221-8bc1-4e73-9c92-7974a037a669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00a70e9d-8000-44b2-a518-caffd88658f0",
        "cursor": {
          "ref": "749acc8b-6dee-4545-8c9f-6f70b194fb17",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e5f82515-7718-4c08-97bb-4d4ad90a186e"
        },
        "item": {
          "id": "00a70e9d-8000-44b2-a518-caffd88658f0",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "56afddb8-19a7-427a-bbd1-41d4f5636970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f316d8-292b-40b3-9f8e-247658a80858",
        "cursor": {
          "ref": "aa254641-11c3-45a7-9cd7-68ae274780b7",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e477c7cf-9b66-43fc-b840-6bf6a434a686"
        },
        "item": {
          "id": "74f316d8-292b-40b3-9f8e-247658a80858",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "0bcf00da-e924-47a7-8474-72ea2b1596ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49b51a9d-60a4-49ba-9a53-c94ab0d0937e",
        "cursor": {
          "ref": "522c2273-4022-479d-b4f3-44859b98a13c",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b0885211-2f1a-46d4-9bba-acbb9e8b5023"
        },
        "item": {
          "id": "49b51a9d-60a4-49ba-9a53-c94ab0d0937e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6af7ca1e-94cc-4a69-bee3-ccf6d58d2e03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76db8d41-1bf8-48bc-9ce9-32233b5891d0",
        "cursor": {
          "ref": "614a47b1-75f3-4f88-b739-67a3df809a29",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "39fd2c9b-4fcf-4655-8dbb-547b966a12fa"
        },
        "item": {
          "id": "76db8d41-1bf8-48bc-9ce9-32233b5891d0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9ac1e1b8-a94c-4572-82b2-b06ba2529130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bab9395-6f6d-4a0a-804c-97fc5fbf3843",
        "cursor": {
          "ref": "c7a7d680-5268-4de7-b450-f5b68855bf6e",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4a78f407-725f-4f39-be55-2dec9f8ed826"
        },
        "item": {
          "id": "2bab9395-6f6d-4a0a-804c-97fc5fbf3843",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a2b6de32-3507-419f-bec2-2d6b53f83684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b000e82b-ff8b-4762-9a68-bdab20504c41",
        "cursor": {
          "ref": "2e9bab6d-023f-41ad-830a-315cc1281a2d",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "65afa4a0-a7c7-4664-adce-4f353bdd5fd8"
        },
        "item": {
          "id": "b000e82b-ff8b-4762-9a68-bdab20504c41",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "fc28c5f1-ecbf-46d7-988a-ea73f4ce640d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "514a7a6c-fe49-4128-a173-42fd508637f6",
        "cursor": {
          "ref": "3e04d264-34e7-46a3-a1e0-4fe3242d62b0",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "0e5abd52-3eea-479c-b6ba-158b2bfaae31"
        },
        "item": {
          "id": "514a7a6c-fe49-4128-a173-42fd508637f6",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "29063bea-88d9-4af8-ba36-0184c96c00b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "843d3c3d-50f4-4010-ba44-2b618fb30579",
        "cursor": {
          "ref": "acee9543-a9e5-4ee1-96c0-8da97ac80c6c",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "3af52489-9120-46da-b078-c7f86b303947"
        },
        "item": {
          "id": "843d3c3d-50f4-4010-ba44-2b618fb30579",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d487923d-acd9-437a-8df9-a85b47fc570a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7833db-1a41-4d01-bcea-7d715c46e66d",
        "cursor": {
          "ref": "1a669cac-5381-4a52-8bd7-98578e22a95a",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "52d0ea7e-d215-4747-99fc-cb75731cff62"
        },
        "item": {
          "id": "3c7833db-1a41-4d01-bcea-7d715c46e66d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3c05c9ad-109b-48eb-afaa-b657ec729c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b3d090b-16b1-41b7-93ac-557c622ef293",
        "cursor": {
          "ref": "2cd2cd03-b45e-4c7b-9fdf-365d5949e55d",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "1829706e-f54d-4628-9749-6a50a53ed404"
        },
        "item": {
          "id": "7b3d090b-16b1-41b7-93ac-557c622ef293",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "99d51845-da75-4478-ad94-ef71c7e1ea83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c1bec5-dfe7-478b-b22a-563b3175e832",
        "cursor": {
          "ref": "e274b449-42d2-4394-92ca-2c49f664d12a",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "bab077d2-06b6-49a1-be46-5300c5982836"
        },
        "item": {
          "id": "74c1bec5-dfe7-478b-b22a-563b3175e832",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "487b47b4-34cd-4b22-9a7e-ca6a0d85dced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3682197c-a3ef-4569-8726-fc273e1934d5",
        "cursor": {
          "ref": "ea2dc5df-0522-40ce-805c-58207677df0d",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "30cacf99-b77b-46c1-94ea-df8423d9ee64"
        },
        "item": {
          "id": "3682197c-a3ef-4569-8726-fc273e1934d5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "c2fe2f1a-c554-4f7c-a5d2-877d8495a14b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e39fd886-b8c7-4a0b-a939-4aa17c539441",
        "cursor": {
          "ref": "f24bcbfb-aa0b-4989-b266-8deb83de32d5",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2098d7dd-5a74-4617-9e63-cce70bc20d53"
        },
        "item": {
          "id": "e39fd886-b8c7-4a0b-a939-4aa17c539441",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0a23cf1d-f7b5-42b5-a70d-e6f1596248c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 477,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b31f021-0e50-474d-8ff5-04827c4a1400",
        "cursor": {
          "ref": "fe4eb869-4b65-40b5-9b03-80954f9e8111",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e1ca0ccc-e500-431a-941a-f701c52d4ed3"
        },
        "item": {
          "id": "3b31f021-0e50-474d-8ff5-04827c4a1400",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2a17227c-e4ec-4b65-8dc5-839b6274219d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58f7fa8f-798e-4b9c-8de3-f1f8311fe1d6",
        "cursor": {
          "ref": "b0e48fa4-9594-428b-bfa7-a808211168af",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "5c71a5b0-2010-4c56-a781-6b956731c04b"
        },
        "item": {
          "id": "58f7fa8f-798e-4b9c-8de3-f1f8311fe1d6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "485fd24b-c6b1-4825-9eef-f58ccfef0c47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "197c3461-98fa-4e36-ba03-02b20c9e2c32",
        "cursor": {
          "ref": "874da239-390d-4a6c-b5d8-30f0150a9529",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1a728fc6-6017-4cba-a1ef-b9e5a84eb47e"
        },
        "item": {
          "id": "197c3461-98fa-4e36-ba03-02b20c9e2c32",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "da7825a8-56f8-40e6-a5da-55e5d3bd6ab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8568f7a2-f29a-4cc6-8879-def4bdd5f0c8",
        "cursor": {
          "ref": "83c428f1-b1c5-4d02-a43a-dadeb3661bdb",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "bf39fb8d-d52c-4fb4-9a7e-d6f42800bed7"
        },
        "item": {
          "id": "8568f7a2-f29a-4cc6-8879-def4bdd5f0c8",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "db197ffa-2dbb-4617-af5c-049c2eb0ae8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec83d5c-337c-423d-b730-71d6bbf5b5fe",
        "cursor": {
          "ref": "7a5e5352-2575-4428-b848-97187ba034d1",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "dc58f35f-fac9-4f5a-8c55-e05411d0c679"
        },
        "item": {
          "id": "7ec83d5c-337c-423d-b730-71d6bbf5b5fe",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5b8688d5-6815-43e2-b32f-b05387f72766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7454cd81-c611-4584-b88c-fde5284eb190",
        "cursor": {
          "ref": "75159795-5671-4046-b65b-2c8d563817ca",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "640a7cde-900a-40fa-8659-12bd10bedfb0"
        },
        "item": {
          "id": "7454cd81-c611-4584-b88c-fde5284eb190",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6c3acef5-1c52-4eb3-82d8-101c4f16c875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "015b6dc1-8278-431e-b255-bad60cdd24dc",
        "cursor": {
          "ref": "7becdb7b-ba79-49f4-a427-817a15ff6cb4",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "72fb42f5-11f7-4828-8d96-2c260643f87a"
        },
        "item": {
          "id": "015b6dc1-8278-431e-b255-bad60cdd24dc",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4ed44f65-0d74-4eaf-9bf7-bd8aefa1f940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3327e243-0033-4eb4-9c37-512dc9cde233",
        "cursor": {
          "ref": "d247d43d-602c-4d63-a3d3-c40095196143",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e44adc3b-dbdc-40f7-9c46-ccadc60f84b5"
        },
        "item": {
          "id": "3327e243-0033-4eb4-9c37-512dc9cde233",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bbe31367-20c0-46a2-9877-06530ec330f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f63d304e-e12e-4da7-bb93-3eaf1f33ac9f",
        "cursor": {
          "ref": "9101f9bd-b534-44e8-b888-31822e93e274",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "24bd8c10-f607-4a75-89a9-c63fd8b771e9"
        },
        "item": {
          "id": "f63d304e-e12e-4da7-bb93-3eaf1f33ac9f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "944db8b6-ce34-4c95-9f35-39afb39d77d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ed4c420-1e72-42a1-8e5f-aef82df9da91",
        "cursor": {
          "ref": "b4f8416f-f1e6-4866-9b0f-16ba89b75e3f",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "0e1f83c8-2e3f-485b-8b92-7c20443e6942"
        },
        "item": {
          "id": "4ed4c420-1e72-42a1-8e5f-aef82df9da91",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "28ad8511-beae-4f93-a147-4038bdcf2776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c95f6ed2-4df6-4aab-b0ff-a49e9c123382",
        "cursor": {
          "ref": "7f614a7c-277c-4e01-9eb5-3fafddd3b667",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "3b9b0a79-8375-4da8-bbf4-3e563173da55"
        },
        "item": {
          "id": "c95f6ed2-4df6-4aab-b0ff-a49e9c123382",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "4fca7a1a-b06c-4d37-9ecd-7f51ec954c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd5ee603-d9dd-4178-994e-9a0906596425",
        "cursor": {
          "ref": "a40a0a64-6204-4f9d-a281-762131aa4722",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "02a5fc5e-5c97-4050-b0e7-f86d4ece19ee"
        },
        "item": {
          "id": "cd5ee603-d9dd-4178-994e-9a0906596425",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "49792588-d9d5-4311-a892-46fa74e94e4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbd316be-bf7a-4b31-9814-fb1156cbad30",
        "cursor": {
          "ref": "1972eae2-aad3-4dfb-b7a1-5eda92702679",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f9841ac5-d385-42d2-bae5-20d40a9d9d36"
        },
        "item": {
          "id": "cbd316be-bf7a-4b31-9814-fb1156cbad30",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "3c35248a-3ce0-467e-9ef5-97076e9cb620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6f82b03-9818-4d29-ae9b-283d3ee72837",
        "cursor": {
          "ref": "539e9276-f16c-4969-af76-252ef72472b1",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c9877513-dbea-4950-b89c-8e5e59c0fb44"
        },
        "item": {
          "id": "d6f82b03-9818-4d29-ae9b-283d3ee72837",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8559ac69-649b-42f2-a7f0-4735a37f9d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dceff57d-ce1c-4386-abed-82ab8d8d9b78",
        "cursor": {
          "ref": "95dbdb51-b6eb-4fcd-ba7b-5f74a7c790d7",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d98f7b54-a614-4663-985a-a0f1f788970f"
        },
        "item": {
          "id": "dceff57d-ce1c-4386-abed-82ab8d8d9b78",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f29b796d-9624-419b-b3ea-0b3f8e15f671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49acf855-b90c-49aa-bacc-6ab92e27fe76",
        "cursor": {
          "ref": "dd3cb516-73ad-47b0-ab87-acc58ef3760c",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d8d1d8e0-df45-47b6-97cc-1289b28d1fdc"
        },
        "item": {
          "id": "49acf855-b90c-49aa-bacc-6ab92e27fe76",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2e40cffd-fe4c-4e6b-a23b-1510734ceb03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9906bbb6-6ae5-4a33-967f-e0be78d7873c",
        "cursor": {
          "ref": "44f6c75e-3908-4c77-b970-01ebc371b3b2",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d34e6795-f2d7-4015-8c15-b217886f296a"
        },
        "item": {
          "id": "9906bbb6-6ae5-4a33-967f-e0be78d7873c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c36d2ee2-8ad9-46a3-b5c0-7c128a84c704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912658dc-5240-4891-88dc-7c95db19c966",
        "cursor": {
          "ref": "1127e7e7-6855-445d-bc65-3f5c1593e177",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "2279d4d0-2528-4621-a167-0758439c8bbc"
        },
        "item": {
          "id": "912658dc-5240-4891-88dc-7c95db19c966",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "39519ca9-29c1-4074-bfb3-ae17ea5ecadd",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "60b7621e-79db-4d1f-bb70-bd72dcffaf4c",
        "cursor": {
          "ref": "e982ecb1-6dce-4863-8dc3-83360fe48978",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "95fe52a7-a82d-4c86-90d4-d617a2d15df4"
        },
        "item": {
          "id": "60b7621e-79db-4d1f-bb70-bd72dcffaf4c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e33a2c05-11a9-48c9-9824-8594dc02caff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "417759e8-c063-4f43-9f63-57851b56e36e",
        "cursor": {
          "ref": "6fa575a8-3059-4376-ae6c-38f7fa9665f0",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "921878c8-d0fc-443d-a6eb-c6e2f9a3735e"
        },
        "item": {
          "id": "417759e8-c063-4f43-9f63-57851b56e36e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0c9946e6-3a0a-470d-85f0-1480abec23d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b00c1572-61cc-452b-a21b-5a19998cae8c",
        "cursor": {
          "ref": "a63a615b-7a4c-40f4-a011-ed491d2cbdc3",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "604aebfe-cdf1-4ba0-afdf-54cb5e7459e5"
        },
        "item": {
          "id": "b00c1572-61cc-452b-a21b-5a19998cae8c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c632ed41-73bf-4741-a354-83e767cc8e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db3163f4-1a3f-4491-a710-08c454e12475",
        "cursor": {
          "ref": "15ecc57f-8124-4441-b772-37a8593178e2",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6026690d-e4f6-4099-bad3-0b9a4a56b65e"
        },
        "item": {
          "id": "db3163f4-1a3f-4491-a710-08c454e12475",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "26d43854-610f-4ab4-a8f7-112d29ffc5e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff8ef9a-540c-4a86-9052-18689cbe729d",
        "cursor": {
          "ref": "aed33c9f-fb7a-472c-a775-3d4cf7e08816",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "05d856fc-bc80-4bb9-ba94-d29cc6fc7259"
        },
        "item": {
          "id": "9ff8ef9a-540c-4a86-9052-18689cbe729d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "3abf041a-16b7-4b6a-9e8f-22b4047fe2dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42e79534-5347-4ee0-8548-13430a7e6beb",
        "cursor": {
          "ref": "c104975f-6638-4c2a-9705-61fbfe34159f",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "8f093799-ac11-4d59-b39a-2bc988b5aed4"
        },
        "item": {
          "id": "42e79534-5347-4ee0-8548-13430a7e6beb",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0f1b5bd4-8a6c-4b8e-9639-ac29003175cc",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "c07e1f31-e0dc-4675-aa45-992bd91b0745",
        "cursor": {
          "ref": "049f2ab1-56aa-44af-ac17-79717bf628c4",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e6556789-3340-48d0-b1a1-dc68b0ef920f"
        },
        "item": {
          "id": "c07e1f31-e0dc-4675-aa45-992bd91b0745",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9067aacb-2e92-4dac-960d-ffd9204656d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3e27be-0c11-400e-9895-29e3c127650a",
        "cursor": {
          "ref": "f96919de-134e-4f57-8d9d-504b5438300c",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "946004d7-74a3-41d3-84df-667de7203cb6"
        },
        "item": {
          "id": "ed3e27be-0c11-400e-9895-29e3c127650a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6b02cd2d-87ba-4693-a834-6381a855b7b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6e1f4e1-6fcd-4496-86e8-10fd1efc44c5",
        "cursor": {
          "ref": "00bc19e8-b336-4648-927a-cf80b1ef1b54",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ae60ca3e-f7e2-451b-b8e8-c8abb75e2eca"
        },
        "item": {
          "id": "a6e1f4e1-6fcd-4496-86e8-10fd1efc44c5",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "38c3ffe6-b033-4190-83d3-b1283592023d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "496b2ab4-5c3b-4aa4-b120-b059ecbfd867",
        "cursor": {
          "ref": "5bc4b667-babe-4c87-acd1-bfe46f5880a7",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "396f8eda-47bc-453c-af6a-e475564ad76a"
        },
        "item": {
          "id": "496b2ab4-5c3b-4aa4-b120-b059ecbfd867",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ab6f53c5-9a03-4a41-a55d-6b69acbcc58f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e032a101-7b6a-4ae5-a9c0-5d5474b9b3da",
        "cursor": {
          "ref": "a1114f31-bd15-43fc-a737-08cdb0856ea7",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4e59634e-e39c-450f-8a10-927ef55a8b1c"
        },
        "item": {
          "id": "e032a101-7b6a-4ae5-a9c0-5d5474b9b3da",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "57b9500f-9d95-4cf7-88c9-8b3462d7f83f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "899382a0-de9c-4924-be50-82196b04794f",
        "cursor": {
          "ref": "14a4f474-b438-4a7c-b6be-9dc53d135478",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "99fd5861-471d-456d-9589-66f56763d686"
        },
        "item": {
          "id": "899382a0-de9c-4924-be50-82196b04794f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c6a72d45-4786-4bd8-b846-df131786cdce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34247b85-8296-4f0f-b2a8-929eb1b6cba6",
        "cursor": {
          "ref": "cf2b1d9b-7ded-4f5b-b132-f3791164226b",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c544afaa-3707-4115-88df-9904a2cec175"
        },
        "item": {
          "id": "34247b85-8296-4f0f-b2a8-929eb1b6cba6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "fa21fec4-f9b8-4faa-8945-50d46363340b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a85b8307-8ed5-458b-83f3-3102fce0adbf",
        "cursor": {
          "ref": "460617bc-06a6-4ccb-bfb4-ddeff96082d0",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "2fe1c2e1-fe33-445a-b8e9-7520558ddf4d"
        },
        "item": {
          "id": "a85b8307-8ed5-458b-83f3-3102fce0adbf",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "87320292-0946-4c99-8027-6ac6bb0f02b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c1edc1a-3aa5-4e29-abf1-daf3b5963eb5",
        "cursor": {
          "ref": "f9d3ea82-bffe-4ba6-b43b-465dc781e36c",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "57571c23-ab1e-4f65-9252-c20dbf83ef69"
        },
        "item": {
          "id": "2c1edc1a-3aa5-4e29-abf1-daf3b5963eb5",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "7de41a79-c7dc-4fa8-8442-be8284624a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "ed1abaf5-9789-41e0-9185-71ce8d91bfaf",
        "cursor": {
          "ref": "c0753a28-18d4-45e4-bd40-0032da1d721c",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4a899cea-5aab-40cc-a2e0-999ff5a20705"
        },
        "item": {
          "id": "ed1abaf5-9789-41e0-9185-71ce8d91bfaf",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "fe26f2ff-7998-43f4-8077-0247f2143091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "2c466843-6831-4b97-853f-95de85a031be",
        "cursor": {
          "ref": "c50b6f06-1223-45fb-97a9-18a4fa6d94fe",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c7bebf3b-6c71-4686-a200-ad94a1a78284"
        },
        "item": {
          "id": "2c466843-6831-4b97-853f-95de85a031be",
          "name": "credentials_issue"
        },
        "response": {
          "id": "5037259b-4c47-41f1-bb05-eea091d1141a",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f89a64d0-a7e9-4d27-a1d5-f3abe4a30305",
        "cursor": {
          "ref": "9e02cdc0-a640-4395-a5be-8b70dded7b8f",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7ec0525f-bc92-4739-b2a1-26689d74513c"
        },
        "item": {
          "id": "f89a64d0-a7e9-4d27-a1d5-f3abe4a30305",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "5d81f0ec-1293-4d97-af50-5c4715fe7a40",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5f73e6-d8ea-41d8-84f5-25ec109bae5a",
        "cursor": {
          "ref": "51547090-ee79-46c4-b0c5-2d5d9ac901c3",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5a3f75dd-be38-41a2-82aa-d884be5b42e1"
        },
        "item": {
          "id": "ab5f73e6-d8ea-41d8-84f5-25ec109bae5a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f1e26dbb-21b8-4f85-b5cf-c2f3539afb7f",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "96454355-9f61-43a3-86ac-c8800785a777",
        "cursor": {
          "ref": "737cfdb6-9b4b-403d-ba17-21ede4aa0f30",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "fb9dce3c-92fe-4d23-a732-0eea0de7e098"
        },
        "item": {
          "id": "96454355-9f61-43a3-86ac-c8800785a777",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "3d8aba4d-0e6d-4904-b9d4-070ae50250c5",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e33a122-6337-49c1-b6da-6adb7475abc7",
        "cursor": {
          "ref": "fbf8567d-80e7-4048-ad45-d80c8cb7764d",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "82730da9-8740-4db8-a476-ad7e4c425f57"
        },
        "item": {
          "id": "1e33a122-6337-49c1-b6da-6adb7475abc7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ffc236cd-7858-4edf-b7f4-dbb43f5798de",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee390ed3-4016-4ecd-8c1f-243937eaeb05",
        "cursor": {
          "ref": "b45a8c77-bd93-4b8f-9162-44a871420920",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f50670ee-1141-4e27-a81c-6545b19afdc0"
        },
        "item": {
          "id": "ee390ed3-4016-4ecd-8c1f-243937eaeb05",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "37ed7d4b-88c7-48b6-93aa-52ae71cd0e76",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9d9b67-df8a-43c6-9161-3eaa28dc6e50",
        "cursor": {
          "ref": "2af8a3c6-5573-491a-b260-e28d5da4a65f",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "96d2e4e4-234f-4098-85cc-69187e4d9990"
        },
        "item": {
          "id": "9e9d9b67-df8a-43c6-9161-3eaa28dc6e50",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "30513b74-a1c0-48bd-bb98-cba73df3a9dd",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "9e9d9b67-df8a-43c6-9161-3eaa28dc6e50",
        "cursor": {
          "ref": "2af8a3c6-5573-491a-b260-e28d5da4a65f",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "96d2e4e4-234f-4098-85cc-69187e4d9990"
        },
        "item": {
          "id": "9e9d9b67-df8a-43c6-9161-3eaa28dc6e50",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "30513b74-a1c0-48bd-bb98-cba73df3a9dd",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "f63c6671-5a7d-4406-9879-f9b44f0a6461",
        "cursor": {
          "ref": "2b997537-cfad-40bf-bc35-db28c028e66e",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "81f82068-e595-43f5-baab-56e2dbf6f2f3"
        },
        "item": {
          "id": "f63c6671-5a7d-4406-9879-f9b44f0a6461",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c7278368-d2ca-4c61-b02d-50fc9535edcd",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "545adcfe-0210-4cdd-97a6-9bf0d3a2df95",
        "cursor": {
          "ref": "ee658043-3750-4da8-bba5-622248da2177",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c9e6e6d6-6791-4fa7-8a71-318a3140bf14"
        },
        "item": {
          "id": "545adcfe-0210-4cdd-97a6-9bf0d3a2df95",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "0e3de5fe-6f7a-4e20-999b-31a66a2497fb",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "4b27d1d9-282b-40c1-be2d-ff83ef43472a",
        "cursor": {
          "ref": "392392da-ac36-42d4-af06-bdb5c70e61f8",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "27790acc-dcb0-47f1-9a3f-79f3d161b16f"
        },
        "item": {
          "id": "4b27d1d9-282b-40c1-be2d-ff83ef43472a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5ac6e696-bace-48d3-b476-78719d6bd78e",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "5b5d8118-bbe7-411a-8461-776bc939812a",
        "cursor": {
          "ref": "0e5aceb5-90ca-477a-ae26-e64e57d22304",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "ffde3861-93d6-43c0-843f-cbc04f7fdc84"
        },
        "item": {
          "id": "5b5d8118-bbe7-411a-8461-776bc939812a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "eac486e9-dcf7-4db2-861e-eb38f3342325",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "5b03b2ae-8e9e-48fb-89bf-e1040c003b13",
        "cursor": {
          "ref": "3c011fd1-cfa7-45b8-bfe0-9673959c3209",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6b3c419e-3e18-4356-afdc-506630b6173f"
        },
        "item": {
          "id": "5b03b2ae-8e9e-48fb-89bf-e1040c003b13",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "54c4835b-f1f3-48bd-8a5c-063d6da5d34f",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "b3014280-00bd-4ca2-930d-d0c1704c9e49",
        "cursor": {
          "ref": "080ab653-cfd7-4e57-8ae2-538ecc663e85",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "63cbe031-699c-4178-b1c6-01d4568059c3"
        },
        "item": {
          "id": "b3014280-00bd-4ca2-930d-d0c1704c9e49",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d78b4928-9448-49d6-b858-4f57d177ecaf",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "8a0b28d3-8d02-4733-8a51-f1b836974614",
        "cursor": {
          "ref": "be34da78-790a-48bf-8bfb-2398f9060444",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "572925aa-f2a2-465e-b805-19042412f07f"
        },
        "item": {
          "id": "8a0b28d3-8d02-4733-8a51-f1b836974614",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "14ac7fe0-d0ce-4033-91af-3de756bf5b1c",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "3396e8fc-47f8-40a9-9f57-2a4c399bb9d4",
        "cursor": {
          "ref": "27319a7d-e42c-4a06-95c8-a9cb7833ad4b",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "45621ac3-ba65-4fde-8557-9fd201b22161"
        },
        "item": {
          "id": "3396e8fc-47f8-40a9-9f57-2a4c399bb9d4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a5ed6333-4b7b-4e97-b30e-79e3ff722621",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "26ccf093-dc24-47be-b913-3572a5c788cb",
        "cursor": {
          "ref": "970df6a2-5c3e-4966-af30-3c9b0c9d2ded",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "86a58acb-4ee1-4abb-945c-c226e188d7b6"
        },
        "item": {
          "id": "26ccf093-dc24-47be-b913-3572a5c788cb",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ca93b977-1c22-4893-bed3-297bb3c278a3",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "c864fb59-971c-4fc7-9ffd-e5ad111edd41",
        "cursor": {
          "ref": "c3a1886f-46ff-42bf-b886-576ad2e85d15",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "5baee8c5-5945-4032-b18e-e99f4adb14a5"
        },
        "item": {
          "id": "c864fb59-971c-4fc7-9ffd-e5ad111edd41",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b1bc4ba6-0bd4-4429-96f3-c7455dab420e",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "7e3311f5-90da-4ac8-97cd-5fab4b89793f",
        "cursor": {
          "ref": "492a6349-20eb-450a-97d4-ce4208ae9f95",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8efd7eed-10dd-474a-b046-f348dfd9f1d2"
        },
        "item": {
          "id": "7e3311f5-90da-4ac8-97cd-5fab4b89793f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4a8d6642-fae5-48bd-a525-b14e8492002a",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "9db78609-d667-464a-8882-59b49920fb84",
        "cursor": {
          "ref": "7d3cefb0-59df-4325-856b-005357e1704c",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "224c4a3d-0e24-474a-8a0d-676565728d57"
        },
        "item": {
          "id": "9db78609-d667-464a-8882-59b49920fb84",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "51cacdfc-c77a-4ab9-9aa9-b4521aaa2e91",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "6a0ac056-f60e-4320-94ba-8034991a7d1b",
        "cursor": {
          "ref": "3dd03182-f8a1-4e43-86f0-af01d6816439",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6d2122ac-a1ca-4f5c-8d3c-e5b02ada5356"
        },
        "item": {
          "id": "6a0ac056-f60e-4320-94ba-8034991a7d1b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "aaa884e1-77da-418c-be7d-07a4d3f7ecc2",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "76b0faca-6e08-44b0-a9ab-4bc91e97672c",
        "cursor": {
          "ref": "578cd435-eace-4f16-badf-dd9d1112db6c",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5c331fb2-ad5b-4016-80ba-b7ccfa843016"
        },
        "item": {
          "id": "76b0faca-6e08-44b0-a9ab-4bc91e97672c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "fddf626e-7476-4c56-8018-30a7664c7bae",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "f21d3430-c4f9-45ec-89a5-a0956726cc63",
        "cursor": {
          "ref": "a64ce40a-11e7-47c5-93d0-c6d6cb201340",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a024bbad-d5ee-4a91-a35e-270da93a750a"
        },
        "item": {
          "id": "f21d3430-c4f9-45ec-89a5-a0956726cc63",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4589fcf4-5746-4953-8d97-b7c92cdbcb53",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "353f8815-63a1-40bf-9c83-df476bce563d",
        "cursor": {
          "ref": "ab48f55c-7b81-4fd8-8e17-e5c18ff9e21e",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "18f83a6c-3a52-4d2b-9a22-bb04961003a8"
        },
        "item": {
          "id": "353f8815-63a1-40bf-9c83-df476bce563d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "9fb69d3f-70e4-4894-b0d2-118547942b78",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "0940f34e-5181-4790-8506-c4cef3e8a11c",
        "cursor": {
          "ref": "ce8fcfd5-03d6-4d0e-859f-2ae12412e227",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "27113ad4-19b0-482b-961a-bf1318f941a1"
        },
        "item": {
          "id": "0940f34e-5181-4790-8506-c4cef3e8a11c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e49c11c0-160b-4a40-8662-d094f5e36d89",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "4535f035-b30c-4ff5-9a76-999392997c71",
        "cursor": {
          "ref": "66f19fea-8016-4859-9a41-8b6dd1109cd2",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0e3a8523-dace-4dc8-833b-d5fcdb1d370b"
        },
        "item": {
          "id": "4535f035-b30c-4ff5-9a76-999392997c71",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7e040025-150c-46d4-8dd2-b47d82b9235b",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "447ef946-25ac-4ba4-b902-0a6a9a256137",
        "cursor": {
          "ref": "4480b0fd-5069-45de-9c38-2e14835f49fb",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a1185ff2-5904-454f-80a9-e0ac606e413a"
        },
        "item": {
          "id": "447ef946-25ac-4ba4-b902-0a6a9a256137",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c6e82d27-4cf5-491f-93c4-c688814ca5ce",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "fabf6b70-0e7e-4312-8398-fad84d03b825",
        "cursor": {
          "ref": "7e5cc854-bbf4-4f51-8c82-5b306c5f7522",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c4658521-e334-41c6-a20d-4da623bcb3ae"
        },
        "item": {
          "id": "fabf6b70-0e7e-4312-8398-fad84d03b825",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8e1ee1f7-15cb-4715-b678-7b5cfd6696c5",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "b1e9fb87-83f2-4ace-9541-111e5a065334",
        "cursor": {
          "ref": "9c030400-6f43-4434-a086-add0c8702d09",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "db697e96-cf20-4468-b2ef-df19c737f74c"
        },
        "item": {
          "id": "b1e9fb87-83f2-4ace-9541-111e5a065334",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "aeef6457-e148-4b88-b430-a7fbed10062a",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "d80ed1f8-91cc-4ab4-833d-732832de8c95",
        "cursor": {
          "ref": "e6ad9c76-40d3-4a06-b46b-61f1a43976da",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5c0aef84-85ee-4d41-bb01-65288e3e9076"
        },
        "item": {
          "id": "d80ed1f8-91cc-4ab4-833d-732832de8c95",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1eb975f0-3040-43ba-8fd6-01edeb49d14d",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "2867abff-78e9-4941-abc8-72a9845bd190",
        "cursor": {
          "ref": "02e7cb4e-eb85-403a-8a0d-58864bcac987",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "66979fbf-4182-4a6f-901e-9114c566bfa5"
        },
        "item": {
          "id": "2867abff-78e9-4941-abc8-72a9845bd190",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "76413302-e68f-42cb-99d5-324b7c57a346",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "09f445f0-18b7-4ab4-8cdb-a1e5363224df",
        "cursor": {
          "ref": "2bf7a617-2dda-445f-aedc-1a3768fe1fce",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "95687694-d364-4d05-a6a8-79549719d282"
        },
        "item": {
          "id": "09f445f0-18b7-4ab4-8cdb-a1e5363224df",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "88e3777d-91f8-494d-9739-ffb48e2e472f",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "0e5340dc-d767-4873-be40-6e83c13448a3",
        "cursor": {
          "ref": "89774e44-7095-4ead-a25b-530431c614ea",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "341e9e0d-8cf0-474e-a42c-1c55cf2808fc"
        },
        "item": {
          "id": "0e5340dc-d767-4873-be40-6e83c13448a3",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "24c89e2a-eed8-4c87-8ac4-f7fec37f0ebb",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "ca90c36d-8333-446f-92d0-b6cd6137efcd",
        "cursor": {
          "ref": "e72f6822-4aeb-4f30-b20c-7ca48af640b9",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "83cb857e-d838-472d-af73-dd78c3bb24b4"
        },
        "item": {
          "id": "ca90c36d-8333-446f-92d0-b6cd6137efcd",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "dbf011a2-410f-442d-923e-0c07f0dd5bf0",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "dbcb5c65-646a-44c1-be8e-e271375d5efd",
        "cursor": {
          "ref": "c923a5fa-ed5f-4a3c-995d-6f303523e4a3",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ddccc5ae-cec8-45ae-9ca7-06591068b76f"
        },
        "item": {
          "id": "dbcb5c65-646a-44c1-be8e-e271375d5efd",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "81e90ac3-c8e4-407f-bc1c-13f44ef375f5",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "ddef0fb8-c1ed-43dc-a52d-578295f108c7",
        "cursor": {
          "ref": "3e6c76fd-d694-434a-ac45-c8be1ea6cf56",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "763d4098-99ff-404b-8680-4d75e8256b23"
        },
        "item": {
          "id": "ddef0fb8-c1ed-43dc-a52d-578295f108c7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "860bb3a9-40ed-455e-a07e-1cef61a50dba",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "9867aaf3-085e-4e8a-a0ef-2da21d2fbb9d",
        "cursor": {
          "ref": "259d7f2a-617c-4a44-a45d-9d00dbba0a96",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "bb3bf7d4-161d-47fc-bee9-1fcda6122cdf"
        },
        "item": {
          "id": "9867aaf3-085e-4e8a-a0ef-2da21d2fbb9d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f848aa85-2346-4d66-b4b8-9c6a9d11439a",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "9d0cea8c-779b-4c33-999e-334432fd0b6c",
        "cursor": {
          "ref": "5de55b51-6c74-4a2d-8916-7e575dd08118",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b5cd1e53-488e-4855-b7aa-ea48843743d5"
        },
        "item": {
          "id": "9d0cea8c-779b-4c33-999e-334432fd0b6c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d9d60799-5bb5-49d9-84d8-64fcd1358b38",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "c3e201cf-2557-470a-9df5-67c508a9f988",
        "cursor": {
          "ref": "4d2c92d4-4109-49a6-99fe-a7df03818b99",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6f57661d-dcd4-4e8e-82af-9cdc6d60aedc"
        },
        "item": {
          "id": "c3e201cf-2557-470a-9df5-67c508a9f988",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "fe1e004f-4f20-45ee-87df-fd755a144d09",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "5efa393d-7355-4a6f-8e86-3b9ed44db922",
        "cursor": {
          "ref": "650d59d3-91e5-4aa4-b542-beaba4bb630c",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b603a7e1-c8af-485e-9ed3-60697e980201"
        },
        "item": {
          "id": "5efa393d-7355-4a6f-8e86-3b9ed44db922",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "19c71713-03a7-499e-a927-42c35f836ad0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0d4b2f-8c54-48cb-bcf9-f9eeb2096ae5",
        "cursor": {
          "ref": "51f071a9-ff75-4550-b024-cafe385cc84e",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "811d4885-9267-4da9-8a77-bd0aa513702e"
        },
        "item": {
          "id": "9e0d4b2f-8c54-48cb-bcf9-f9eeb2096ae5",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "cbc076f3-d8d7-496e-9b09-de0a0208ccc3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8486ac3b-335b-4725-b180-c5aa98758296",
        "cursor": {
          "ref": "69f02dd0-fc76-4a82-b9be-99dc27f4c39e",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c36d1922-b56f-43ca-a797-7dad7999fca0"
        },
        "item": {
          "id": "8486ac3b-335b-4725-b180-c5aa98758296",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5800af29-b203-42f5-ae61-0ed5f0a2a54c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8486ac3b-335b-4725-b180-c5aa98758296",
        "cursor": {
          "ref": "69f02dd0-fc76-4a82-b9be-99dc27f4c39e",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c36d1922-b56f-43ca-a797-7dad7999fca0"
        },
        "item": {
          "id": "8486ac3b-335b-4725-b180-c5aa98758296",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5800af29-b203-42f5-ae61-0ed5f0a2a54c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e3dff7-5346-4fb5-9adc-8576f44b58b6",
        "cursor": {
          "ref": "4df7d3c3-a5ee-45b7-9e0c-8a084d3724a9",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1d453af5-a342-4c8b-94fc-e842222bf8f8"
        },
        "item": {
          "id": "48e3dff7-5346-4fb5-9adc-8576f44b58b6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "942cd56b-4125-4126-b106-e47fec04f375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "998614b8-d695-4557-85db-ce10bce6b75b",
        "cursor": {
          "ref": "8ec36883-488e-4d45-83c4-cb9fa89d2705",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6d723e2d-4b43-420c-ac67-ba1fd5b35a66"
        },
        "item": {
          "id": "998614b8-d695-4557-85db-ce10bce6b75b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b0f38a8a-956a-4a70-b767-2caa8bb3fc31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afd7a60e-37c2-4200-a32d-7bc4e27aa263",
        "cursor": {
          "ref": "f7925c33-bbd9-44d7-b31c-0f566c1d5e71",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "78d5295c-17c1-4044-9007-914b2e9d41f8"
        },
        "item": {
          "id": "afd7a60e-37c2-4200-a32d-7bc4e27aa263",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "290649b7-47ad-4231-a162-346be51ff42c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92758ff9-5fd8-41d3-8be2-c60eeab8456c",
        "cursor": {
          "ref": "8194fabf-12b0-44b4-a3f6-903832c73d7b",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "7ad26828-a467-421a-a997-7c0f11e04056"
        },
        "item": {
          "id": "92758ff9-5fd8-41d3-8be2-c60eeab8456c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ab79e6ea-99fa-4d50-b2ab-8f3d51a28a52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9ea2941-6751-449b-8e0f-2b9ec692aea8",
        "cursor": {
          "ref": "026f1e7e-58e7-47b7-9fe6-b7d3cbe6cda0",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "55f1f2a2-b733-43ad-9b2b-dfef58e84ba0"
        },
        "item": {
          "id": "d9ea2941-6751-449b-8e0f-2b9ec692aea8",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "2317d260-94d5-4cf5-b729-f7f6b7fe38c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0168a78-06d4-48fb-9801-6962e939adab",
        "cursor": {
          "ref": "e543d2cc-493e-4a99-8700-d86e9de1d9ca",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d386afba-5503-4ffd-8158-f3131ec55299"
        },
        "item": {
          "id": "a0168a78-06d4-48fb-9801-6962e939adab",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5258df43-a871-469e-bc5a-69c1785b0a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 627,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f99b03-02da-4d47-8754-ec774bae2c61",
        "cursor": {
          "ref": "1256a6cf-949d-4909-8c1e-8ef8f00b89cc",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "eff5b085-c99b-46dc-8334-cf44fc8ff80a"
        },
        "item": {
          "id": "28f99b03-02da-4d47-8754-ec774bae2c61",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f1e35507-2ec1-4faf-95d4-612c8cc0414f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a30e09d2-e3a7-45fe-9560-5402256886d9",
        "cursor": {
          "ref": "2fb7ea7d-92bd-48ec-8e5d-42c79c0b17a2",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "3e285fcf-0ec1-4b57-a696-e544be82c5c4"
        },
        "item": {
          "id": "a30e09d2-e3a7-45fe-9560-5402256886d9",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "fea3ecd2-035c-43d9-98a5-271c3534e341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a2b766-1ba8-4c4c-8f01-c51b3a308abf",
        "cursor": {
          "ref": "16d00d4e-d1a7-49d0-8d3e-36c4769a2303",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6329d595-72cf-4ae2-95e1-02c6dde07cb0"
        },
        "item": {
          "id": "33a2b766-1ba8-4c4c-8f01-c51b3a308abf",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "60dcb7b1-c5d1-47ec-b774-a5a2625af12a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4f0940-47f8-4dfd-b463-43a19a09a251",
        "cursor": {
          "ref": "53c53bd8-661d-436e-b863-c20639bdac4a",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "3b80bc88-17e6-4efd-befc-eda222132b24"
        },
        "item": {
          "id": "fb4f0940-47f8-4dfd-b463-43a19a09a251",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "26359e01-9743-4a66-a3de-9f07c0433c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67aefed6-ce52-49b3-b337-d291bec85d40",
        "cursor": {
          "ref": "a725be38-9df3-416a-995f-ef5c0cd56d82",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "dbf7ce80-f36e-4cfe-9998-727063910cdb"
        },
        "item": {
          "id": "67aefed6-ce52-49b3-b337-d291bec85d40",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c0241b5d-bcff-4f46-b4e7-c450397f1c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "034c0dca-6adf-4f13-a33a-2044c4955d92",
        "cursor": {
          "ref": "306fc996-4269-4fd9-9681-30fe6ad492e0",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "716ac0ba-52e9-4665-96ad-076e01abb3f4"
        },
        "item": {
          "id": "034c0dca-6adf-4f13-a33a-2044c4955d92",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "bbe1539d-d117-4b82-b489-711a1634f633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c5df12b-2e96-4e75-a7e9-dc56350f7a3d",
        "cursor": {
          "ref": "2785245a-ed11-4394-8be0-5bb26a9d9dd6",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c9cc09ca-de77-4b53-87d3-0cdc425ecbc9"
        },
        "item": {
          "id": "0c5df12b-2e96-4e75-a7e9-dc56350f7a3d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e5767ecf-b51e-4737-9e72-5d8adac8c323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18a82ec-82ef-4f62-9825-f026b4109e9b",
        "cursor": {
          "ref": "21b0f872-9399-48d0-a6eb-0290272ee3f5",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "671b316c-1640-4957-b721-281df0d5bb2c"
        },
        "item": {
          "id": "d18a82ec-82ef-4f62-9825-f026b4109e9b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "21ce5472-1b72-4146-a1a6-bc5eaf29288e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "956d0b68-3d6a-4673-88d1-ff588b6cd104",
        "cursor": {
          "ref": "0c397291-db53-488c-b742-185ee9200ea6",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "45a6ae9f-ab00-4489-8f47-5ae92f078965"
        },
        "item": {
          "id": "956d0b68-3d6a-4673-88d1-ff588b6cd104",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "38f4c161-7533-4b60-8511-dd70f35764d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8aadca4-bf07-4045-a850-7a02c397154b",
        "cursor": {
          "ref": "ed945192-3018-4ce4-a190-a41e0cbfc1a2",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "30185378-aaab-4229-af7d-9a8644cbd720"
        },
        "item": {
          "id": "e8aadca4-bf07-4045-a850-7a02c397154b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "bd07c543-be85-45ff-ad17-3634469fd5da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "591c3ddf-1e2c-4219-a8dd-94559c8fcfff",
        "cursor": {
          "ref": "0d9bf93f-0d54-4e87-b670-c076231260da",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d78431c4-cc51-4034-9a57-33d4535bdfb2"
        },
        "item": {
          "id": "591c3ddf-1e2c-4219-a8dd-94559c8fcfff",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "faa438b4-2e65-46a8-9a74-54f9e92bc9bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 283,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6028b10c-2ee8-499b-8a8d-157bd598d4c0",
        "cursor": {
          "ref": "18430ae2-6bb2-4943-8181-6aa53d4ab9de",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f34f94a3-2882-4195-9767-4df5ab46916e"
        },
        "item": {
          "id": "6028b10c-2ee8-499b-8a8d-157bd598d4c0",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "64ffb06a-2310-492a-815a-f8d036849cab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 416,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b33f3fe6-3123-4df6-96fd-95bc07e7d3c6",
        "cursor": {
          "ref": "7aa3e293-4c99-412e-8576-0af0e3d82f4b",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "75b1c680-90d7-4f50-a62b-9284c5c7ed99"
        },
        "item": {
          "id": "b33f3fe6-3123-4df6-96fd-95bc07e7d3c6",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d1ff9576-d9fe-4024-b44c-43e7e6cf255e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb5931d2-f411-4de6-8f9e-fd55f3eda128",
        "cursor": {
          "ref": "f6664dba-6d72-4187-88d6-14b46a4cb4b0",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "435ac18e-393a-4266-879a-32e271ce7a4c"
        },
        "item": {
          "id": "cb5931d2-f411-4de6-8f9e-fd55f3eda128",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "43a92f90-affd-46cf-b62e-0edb0b215c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23b9323a-f399-4f7d-996b-eb486d3f4598",
        "cursor": {
          "ref": "0ed9a8cf-7169-4601-98ee-0c4310d61cb7",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "16f1d5b0-a1a5-4b70-84e2-bd9e72f89c0e"
        },
        "item": {
          "id": "23b9323a-f399-4f7d-996b-eb486d3f4598",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8d8dc268-f1d7-435c-887b-f6fa6fa6b8fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d828e9-7cdb-454a-baf8-a31362f6c0fd",
        "cursor": {
          "ref": "99e9a907-2c86-41a5-8a1a-e1028cba5d59",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3c5cc42d-55fc-45c8-a2a6-1273c7c6d209"
        },
        "item": {
          "id": "75d828e9-7cdb-454a-baf8-a31362f6c0fd",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "85f43f9d-21dc-4845-bf78-906991cb986c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfee756a-8d55-4910-b2c4-34a91d5c5a75",
        "cursor": {
          "ref": "952a7add-15f6-40da-b352-dd65c584ee64",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a5d9560e-f83f-4c90-ad89-bfb005f7f695"
        },
        "item": {
          "id": "cfee756a-8d55-4910-b2c4-34a91d5c5a75",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d4a454b1-ef84-4144-8bbd-1a5c7b1e4127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "425b4c8f-3e05-491b-bdc3-f63a93fb0580",
        "cursor": {
          "ref": "b1408ce1-6df5-49b2-b6a0-c537e8fa0ff2",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "506e25fc-30e9-4021-b3c1-52a7f114e98e"
        },
        "item": {
          "id": "425b4c8f-3e05-491b-bdc3-f63a93fb0580",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "5649b698-12e5-4cb3-9547-6917482b2850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4465f65c-2354-4124-9a8b-8dfc165fcd15",
        "cursor": {
          "ref": "5ff8abf6-0c8c-452e-9ea5-8d854bee87ab",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "0ea0b57b-0c0f-4034-883a-f20882a115d7"
        },
        "item": {
          "id": "4465f65c-2354-4124-9a8b-8dfc165fcd15",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7b63fc93-375b-4886-b203-e3f953d91bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 179,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f65033-b943-468e-8cef-f9b023662fe0",
        "cursor": {
          "ref": "a75db14f-04e5-487e-aea5-90b8ef81f150",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "9f4537a6-8518-4568-97ed-acf493cbd0dd"
        },
        "item": {
          "id": "22f65033-b943-468e-8cef-f9b023662fe0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "76557b2b-5f1a-453f-8890-dd6160e40fe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cad5797-e943-4df5-b880-118f032f0267",
        "cursor": {
          "ref": "a11dfb24-9fc4-41f3-9516-ed35846e6aa3",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d3e6d401-72eb-439e-8974-91ef0d5ab170"
        },
        "item": {
          "id": "9cad5797-e943-4df5-b880-118f032f0267",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "d69b867c-c77d-4703-818e-6166139ef27b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0b3050b-bb0e-4a70-8ca0-4b8922bf41f9",
        "cursor": {
          "ref": "c472b85a-cd78-4ab2-b2ed-79f9602f535b",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e297b396-82d6-4eb2-b2bd-0e83d1ed439d"
        },
        "item": {
          "id": "a0b3050b-bb0e-4a70-8ca0-4b8922bf41f9",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "6032e6f1-7034-4372-b88c-b0f4cecc8457",
          "status": "OK",
          "code": 200,
          "responseTime": 169,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "234eb670-0eb0-421c-8745-95028e098d66",
        "cursor": {
          "ref": "c3319182-4373-4feb-91dd-5ff07d30525c",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "de9a1a9e-8863-4b2a-b848-08e9e1020dbf"
        },
        "item": {
          "id": "234eb670-0eb0-421c-8745-95028e098d66",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "77ee2505-b578-40aa-a625-bcb086174583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58fd9f74-dc3f-461a-b35d-e7e6b49a9bb7",
        "cursor": {
          "ref": "368466b3-7ff1-45f1-b7ec-7d01efa9a935",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4b0e4553-bb84-480e-b235-e2b59859917b"
        },
        "item": {
          "id": "58fd9f74-dc3f-461a-b35d-e7e6b49a9bb7",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "99e6ceb3-13cd-48d9-bce8-2dc25fa1f5cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "718178fa-0434-4d23-b567-05803650e54d",
        "cursor": {
          "ref": "2bf3464c-ce9f-493f-9fcd-38dea12b1311",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f543f00c-2e5c-4584-9456-0bb43afaf097"
        },
        "item": {
          "id": "718178fa-0434-4d23-b567-05803650e54d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6e2628b8-2406-4c4e-82a0-1b3b8609ac9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31a2b9bd-52a5-4534-9504-1babaed447d5",
        "cursor": {
          "ref": "6a7926a4-5638-4d69-8718-d46714baad64",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8c841906-18da-4aca-b047-d70793f3c577"
        },
        "item": {
          "id": "31a2b9bd-52a5-4534-9504-1babaed447d5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8401e431-fd81-4c58-b0b2-6b3005df4c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 167,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d510cac-769b-4eb9-a1ad-fc97a0e7391d",
        "cursor": {
          "ref": "37dad5fe-5060-4986-a861-872121acec5f",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "fdd791d1-0707-4a97-a8ec-393675403bdf"
        },
        "item": {
          "id": "0d510cac-769b-4eb9-a1ad-fc97a0e7391d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f1af9c83-c6dd-4b2f-82b0-8c10d5482fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "770a5373-36e7-45b9-be01-c68a6da362c9",
        "cursor": {
          "ref": "d1f65ed7-4799-458f-a31e-c82815765f69",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "0e18dea1-5036-471b-a1d2-da8138ca59f1"
        },
        "item": {
          "id": "770a5373-36e7-45b9-be01-c68a6da362c9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "ec81b2a5-7dea-4d51-b79a-6ef45adcbbde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 170,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "896528d9-15bf-40eb-ac2a-4db8d58e671a",
        "cursor": {
          "ref": "73f3add1-609d-4ff8-a9ba-b2a400de293b",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "8789773e-44f5-4243-9cdd-ad41db7d6330"
        },
        "item": {
          "id": "896528d9-15bf-40eb-ac2a-4db8d58e671a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b08a6a9c-5fa8-4fa2-b5a8-d27ab89140c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ecde99c-b104-4492-bcf0-b467758c58c3",
        "cursor": {
          "ref": "14557250-6fe9-4d40-81fe-21861810e657",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a22f6737-4c5b-4ee0-a693-cde6d62ab996"
        },
        "item": {
          "id": "9ecde99c-b104-4492-bcf0-b467758c58c3",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "f4fa5e38-1f20-4194-94ec-2ebf3f07cc66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d698773e-501d-4c1d-a61e-3df93631184e",
        "cursor": {
          "ref": "6962fe88-710f-4c27-81cd-c3e1e0f6003b",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "bc209420-8f32-4123-bb31-a148309c05a4"
        },
        "item": {
          "id": "d698773e-501d-4c1d-a61e-3df93631184e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "386a50f6-59be-41ed-b7a9-83ca35101fac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2eab3c6-244e-4e29-baa6-b82a63dc13dc",
        "cursor": {
          "ref": "a78f4dad-cfea-41a4-967b-59208387dc96",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "05348c6d-d5f5-47ec-b06a-8eb0dfabe2ca"
        },
        "item": {
          "id": "a2eab3c6-244e-4e29-baa6-b82a63dc13dc",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a6ce7cd8-cf9b-4b14-a4dc-670afe4a4501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e766dfa6-c67b-4385-a542-2f02d6939901",
        "cursor": {
          "ref": "965e7940-f6c4-4cbe-b066-1c0a2ad887ee",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d50d213f-ad38-42e8-8c68-bc853fa23331"
        },
        "item": {
          "id": "e766dfa6-c67b-4385-a542-2f02d6939901",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "628e39bf-2313-47e7-b66d-12573ceafb31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c50a33b5-7e45-421f-93dc-ce824354a7a3",
        "cursor": {
          "ref": "40d5b8fd-e884-4a7c-ac6f-a9bce469775c",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ebb60405-00f7-4a34-a611-e50ba8a29120"
        },
        "item": {
          "id": "c50a33b5-7e45-421f-93dc-ce824354a7a3",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "dfcbefbd-4aa8-4714-bf81-10b5725910bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a0274db-2a7b-40e2-ab9a-702788942bea",
        "cursor": {
          "ref": "80e3d359-eee7-4d79-b3f7-9deaef177941",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e6e41479-3482-4c4e-ba16-f8909dc1fc1a"
        },
        "item": {
          "id": "5a0274db-2a7b-40e2-ab9a-702788942bea",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d11d2695-99b2-4f3a-851e-1082aabddd81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9095b0b2-0eed-4351-9d79-1104e4b85c02",
        "cursor": {
          "ref": "53d5ef6c-8c67-4d9d-ad7b-49c4e36089e9",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "02b668ce-b0a3-4143-886f-db8a6697e287"
        },
        "item": {
          "id": "9095b0b2-0eed-4351-9d79-1104e4b85c02",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "df902a1e-5db0-4f0f-a6b2-0a8899f58451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71610c80-70ca-426c-bfbf-b3c04fbbabaa",
        "cursor": {
          "ref": "7ada510e-68ad-4e66-b2aa-da456bcf7a2b",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "158565bf-fb30-493b-b036-4fac53c7698b"
        },
        "item": {
          "id": "71610c80-70ca-426c-bfbf-b3c04fbbabaa",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "65eb6bd5-653a-490c-a744-c1019f4ce4de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18fb09c2-4c40-4c3f-9df5-6f7476c33ad2",
        "cursor": {
          "ref": "786610e8-11bd-4092-9ac7-0ef84d8e60a3",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5790756e-c0ed-41a7-953b-ff3b7c8ca204"
        },
        "item": {
          "id": "18fb09c2-4c40-4c3f-9df5-6f7476c33ad2",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "32d34582-0671-47e0-ba4d-abd7fe2c39a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8431e93-53b4-4577-9850-638001f97e05",
        "cursor": {
          "ref": "47098c56-9c40-41ee-b1d1-b30e92d31c8a",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "303d2d7d-2ebc-454a-9e70-bf2a49e5c28d"
        },
        "item": {
          "id": "d8431e93-53b4-4577-9850-638001f97e05",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "187233f6-3346-4eba-99af-3bc6a0f258a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b75643-b1bd-440e-9749-59989dcb9639",
        "cursor": {
          "ref": "1e69d84f-aa27-4824-8f9c-01444bac2936",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2d6a5059-147f-40b1-b200-52e88e0d493f"
        },
        "item": {
          "id": "28b75643-b1bd-440e-9749-59989dcb9639",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1fc750dd-bf80-4564-95e8-17146dab8793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 180,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d2651f-542a-47ec-9fbd-1e4e05b89d32",
        "cursor": {
          "ref": "30036a66-924c-4a2f-91c9-48f54a565ff5",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f1726875-0366-42cc-9e71-a9f02480168a"
        },
        "item": {
          "id": "85d2651f-542a-47ec-9fbd-1e4e05b89d32",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "dc444190-b241-49bf-a25c-005e2318a108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cebaa431-51bb-457a-8955-59797afab3b0",
        "cursor": {
          "ref": "618e7bf0-52d5-4812-ba97-9ee0fae431de",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e2ec48a2-5ff6-4e44-b8f7-dbdeedf20957"
        },
        "item": {
          "id": "cebaa431-51bb-457a-8955-59797afab3b0",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "642d8945-42ed-47c4-b247-2465df470d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b25a5f-30ea-4ff8-93a4-3fe70414a19d",
        "cursor": {
          "ref": "52df7611-2758-432c-8138-1a228a009873",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e244605a-4367-479e-a4e6-1ca5060621a9"
        },
        "item": {
          "id": "63b25a5f-30ea-4ff8-93a4-3fe70414a19d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6f15227b-01fd-4f77-9c37-c67287f395c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34bfb368-a132-4c00-b977-c9c1d8d44ddb",
        "cursor": {
          "ref": "68206c4f-a359-46d1-b2d6-b18f9be8d120",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "ea8b752a-0e5a-46b7-ac4e-87293e501e5c"
        },
        "item": {
          "id": "34bfb368-a132-4c00-b977-c9c1d8d44ddb",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f5ccd6ce-5d88-49e3-9e6c-738ababd1098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 174,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8698cbe9-dadb-4255-a02e-827dea579167",
        "cursor": {
          "ref": "7eef8124-4134-4983-acfe-f3afbec3a79e",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b633c923-89d8-4cfc-a84a-8e5ebdc70b8c"
        },
        "item": {
          "id": "8698cbe9-dadb-4255-a02e-827dea579167",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "bf9afe92-6c22-40b8-a395-8779fb984881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0516fc63-d934-430a-8ae2-8d8c4721b096",
        "cursor": {
          "ref": "5c8e2943-f87e-4c93-9382-0cf7b8e3a21b",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "0088267d-ab3d-418d-8b12-174cc4906b07"
        },
        "item": {
          "id": "0516fc63-d934-430a-8ae2-8d8c4721b096",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "40f945d8-46f0-4ed5-8714-d67404e4e1cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 174,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aac31bad-1e71-481a-9734-d7780cfb6085",
        "cursor": {
          "ref": "6ab0c9c2-1127-45ad-8ca6-97118e78b21c",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "df9c0ebc-f669-482c-a32e-c85fd530242d"
        },
        "item": {
          "id": "aac31bad-1e71-481a-9734-d7780cfb6085",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d277300e-520a-4b3b-b75c-fd21331061d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c60ebcd-315e-4582-b68d-16abf615fe4b",
        "cursor": {
          "ref": "4c72aacd-e31d-4d8c-b1c4-e26ca7f027df",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8ea9bdd1-0f13-476d-b61c-0de4de6bc28e"
        },
        "item": {
          "id": "5c60ebcd-315e-4582-b68d-16abf615fe4b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1788d615-5ac2-45f8-bd86-6e677f147018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a8b87c5-b45b-422f-a4e1-25b80936bca7",
        "cursor": {
          "ref": "1fe015f1-8003-4690-8dcc-4f7bdbc0646e",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "294f8d67-49c1-4fd8-b167-dbf0a1f7a746"
        },
        "item": {
          "id": "9a8b87c5-b45b-422f-a4e1-25b80936bca7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d1d489dc-f8d2-4682-baca-1ce190ae4eee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cdb8033-7f97-49ef-9d2e-7faaf2351f3b",
        "cursor": {
          "ref": "1a5a24b0-2276-4b8d-9609-a3adf5d54fc0",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "237f20b4-4ad4-4391-9dd9-f3d1b4fc6930"
        },
        "item": {
          "id": "6cdb8033-7f97-49ef-9d2e-7faaf2351f3b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "18153ad0-83be-4d7a-ae70-9b822891b7d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be62577-86c8-4900-b8ab-de7e9e14a23b",
        "cursor": {
          "ref": "36b8388e-eb06-45ed-92ca-f5de959a9b6b",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "0c641e8c-117a-488e-bdac-0d0d14b35d61"
        },
        "item": {
          "id": "8be62577-86c8-4900-b8ab-de7e9e14a23b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0f41850f-3799-4c6c-a0a9-0c5a36e3bb2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e004651-2286-4734-a84f-4109c64580af",
        "cursor": {
          "ref": "0a4c2627-4120-4cbf-adda-aef357c919db",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "0694a427-e896-4e07-bf45-ed4a859ff6e3"
        },
        "item": {
          "id": "9e004651-2286-4734-a84f-4109c64580af",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ba7abcf0-5765-479d-8fb5-0609686b269f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f217c43-a2a7-4f33-8505-55b95a6026c7",
        "cursor": {
          "ref": "ee565690-8830-44cb-bcc8-9e42d14eaa72",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "98735598-639d-4368-af66-b9f13b0cc0b5"
        },
        "item": {
          "id": "6f217c43-a2a7-4f33-8505-55b95a6026c7",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "27640fdd-0fee-4257-954e-0afbccf4b4a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f629d79-17b5-487b-8352-f7a3aa52d3a4",
        "cursor": {
          "ref": "d9f82e43-e7bb-42e5-9c8a-0cdadbe5de6a",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d339f294-3107-4697-a9c7-d9a02bac1c14"
        },
        "item": {
          "id": "4f629d79-17b5-487b-8352-f7a3aa52d3a4",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4a3bb84e-8268-4709-92df-e6e1d048b1f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf2122b-9f40-460e-adf9-814c35de5a2d",
        "cursor": {
          "ref": "ff500020-daac-40cf-9e9c-96f71e49925e",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a9c11f6e-9ad0-4af2-be63-4d42c75ee3eb"
        },
        "item": {
          "id": "4cf2122b-9f40-460e-adf9-814c35de5a2d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "485fd92f-f963-4701-bb5f-51d805a0cfe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a881ba-23f8-45a3-906e-956ff9d7c458",
        "cursor": {
          "ref": "45f40c10-8d5e-479a-89b2-18567371d71c",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "53494510-1028-492c-b5db-c3aa1528e9ab"
        },
        "item": {
          "id": "77a881ba-23f8-45a3-906e-956ff9d7c458",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b6c972bc-ef43-41be-bb7c-0e67ffa3a7e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c65bf6-8938-4088-87a8-28e0be60e6f7",
        "cursor": {
          "ref": "46efe354-c728-4728-b736-bd315f52c4ea",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b1b49d8e-892e-48ca-80d7-55fe7e9c2ac7"
        },
        "item": {
          "id": "f0c65bf6-8938-4088-87a8-28e0be60e6f7",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "1c6c6b8c-00da-4b3f-a939-a2ef50bdbbeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76fe8836-7b04-4fd6-8840-bf3058ce992e",
        "cursor": {
          "ref": "f3f577da-0047-4e73-9a8c-8edf87a941c3",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0486c635-5414-4a07-b1cf-3955e6ad634a"
        },
        "item": {
          "id": "76fe8836-7b04-4fd6-8840-bf3058ce992e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "94809535-781d-4b84-8ba2-6c7dd1f9f73b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93078d6c-fd62-494f-a53d-a0df489e1de3",
        "cursor": {
          "ref": "8747f421-085e-4078-b385-60b8cf2bb800",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "760edbc4-8647-4049-91e5-fdd8654557f0"
        },
        "item": {
          "id": "93078d6c-fd62-494f-a53d-a0df489e1de3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5613dc47-7b56-4085-8cb7-8a7521ff1a9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1dfacf9-9ca2-4c0d-b704-7451219d8fec",
        "cursor": {
          "ref": "9dabf710-173b-40fd-b68a-389293258ded",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "37452313-fc2c-407a-919c-841d2d1d7d95"
        },
        "item": {
          "id": "a1dfacf9-9ca2-4c0d-b704-7451219d8fec",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "1062b8fa-0129-4e36-b627-d0061588df4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75232839-e869-4c24-ad14-951d6268ca3c",
        "cursor": {
          "ref": "3d65e127-1254-400d-8b46-8c100644a362",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "c2fe4372-ceda-44d9-9725-49828718cb0b"
        },
        "item": {
          "id": "75232839-e869-4c24-ad14-951d6268ca3c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b1531930-9a18-4651-96e1-8b4040868fe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "701d29be-f0e5-469a-9596-27291ce0498d",
        "cursor": {
          "ref": "c828fc22-9f9b-4d97-904a-35067322b270",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e5fb1a0b-5a0d-441b-9fc7-33d95fabcaf4"
        },
        "item": {
          "id": "701d29be-f0e5-469a-9596-27291ce0498d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "aadf2143-31b8-4147-9d79-7fbd47028068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb85bfa5-bced-48ec-abfb-f4c76a956cf3",
        "cursor": {
          "ref": "65f465fb-7862-45f8-9bf2-7320cb534904",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "bff9383e-1797-420a-a36b-464512c55e66"
        },
        "item": {
          "id": "bb85bfa5-bced-48ec-abfb-f4c76a956cf3",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "170fd28c-f187-4ffe-b81d-832dfd29c47c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3092ad2-fe7d-4921-87d8-6105e7ef3862",
        "cursor": {
          "ref": "c7c5fcfe-956d-42b4-9f8d-15d5e00f27f2",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b00b9192-62e3-4e35-a71d-41d3971a1cae"
        },
        "item": {
          "id": "d3092ad2-fe7d-4921-87d8-6105e7ef3862",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8cc0ad32-98fc-43e6-a2e2-9b7ff73519fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dcb7def-1383-43a2-bb13-45c865295380",
        "cursor": {
          "ref": "d61293e6-87bd-42cf-bf2c-c97c0c0ac382",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4081da47-bdf5-4ad6-aec6-46dd9944d49f"
        },
        "item": {
          "id": "9dcb7def-1383-43a2-bb13-45c865295380",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0014010a-1767-4812-974b-8c05bec89d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4e7519-c7e1-4752-94f2-9f30772c46ab",
        "cursor": {
          "ref": "c968ede0-8414-4af1-9ad2-d6b4288e690d",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f9dc198b-cf6b-41d6-b4e9-1c9c5f0fdb31"
        },
        "item": {
          "id": "3e4e7519-c7e1-4752-94f2-9f30772c46ab",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "587f848d-8d2c-4ede-a222-7ec7d3fc2ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d46a583-a8b9-4483-b1fa-47eb5374bb7f",
        "cursor": {
          "ref": "d48f9f41-9268-445b-93de-a427f5d21460",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "1acd405e-880b-4e01-abed-ef7b18715dcd"
        },
        "item": {
          "id": "2d46a583-a8b9-4483-b1fa-47eb5374bb7f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3600c22e-0e52-42b4-bbd4-cc3d4d150f06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b15d211-9e9f-45b9-a659-a5984d17dc96",
        "cursor": {
          "ref": "6b93cd92-9bb1-4149-84a0-5d642fcb7273",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "e06566bd-5f3c-4697-a21c-c510b1a84eaf"
        },
        "item": {
          "id": "2b15d211-9e9f-45b9-a659-a5984d17dc96",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "354e5b16-66e4-4f76-aff1-6f038346c004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b36fa64f-5cfb-48da-867b-f408ed3d5178",
        "cursor": {
          "ref": "f56ca1e5-acc4-42ce-92c9-6931811d48cf",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0ccef90c-96e5-4ca2-a5b7-a60a98899217"
        },
        "item": {
          "id": "b36fa64f-5cfb-48da-867b-f408ed3d5178",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a3e18175-9eac-4455-8d4c-4c57237031dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ddeb08-6c12-4c2b-8d0f-223d2360632b",
        "cursor": {
          "ref": "c3570d27-c849-4504-b085-043785c11390",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "7f1f503d-a84a-427c-87c4-456d2f6310a7"
        },
        "item": {
          "id": "b4ddeb08-6c12-4c2b-8d0f-223d2360632b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "8d1d7ab2-18f5-40cb-808e-3cd5d7f3e3d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e019ac4e-9a06-492d-9d3c-fe5b5b736d15",
        "cursor": {
          "ref": "483e97df-e099-45b6-be5a-2a6cc788b89c",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7851ad3f-b211-4add-814d-e567a4504f2c"
        },
        "item": {
          "id": "e019ac4e-9a06-492d-9d3c-fe5b5b736d15",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0e3d5c8c-9451-473e-952f-7346f40a1758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c61c1cba-4f73-4082-9752-8a1dab525fbc",
        "cursor": {
          "ref": "6e30638c-a9bc-492f-b8ec-f31930443a38",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2e77d0b3-457d-4577-b8cc-145994f22f30"
        },
        "item": {
          "id": "c61c1cba-4f73-4082-9752-8a1dab525fbc",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c21adff6-036e-4662-ae81-eb42a7fe708e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d9f15d-0423-4762-b3c9-b5d75058bce0",
        "cursor": {
          "ref": "1ffc4f03-56eb-4443-9631-8d7cc562b348",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "de686ee4-49d2-43d6-a366-10065e78cb30"
        },
        "item": {
          "id": "44d9f15d-0423-4762-b3c9-b5d75058bce0",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "017eed65-5dc2-498e-bcc5-4d0c09c55e7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8f6e598-f4e9-4c7a-8e84-2d51fed72d33",
        "cursor": {
          "ref": "b6250c1a-8486-4a3c-9d78-ca814a8aacda",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b6cae032-5065-451e-b811-00622f6ae054"
        },
        "item": {
          "id": "c8f6e598-f4e9-4c7a-8e84-2d51fed72d33",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ec5c2546-cbd4-4b9c-8175-540e0b9a0585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4cccf42-0d06-487d-b2f9-a39e6af18f10",
        "cursor": {
          "ref": "6f6383f5-89f3-4878-a23a-580b78fcbacd",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3d5fc96b-78f1-4777-9c62-220d8cc0ffbe"
        },
        "item": {
          "id": "f4cccf42-0d06-487d-b2f9-a39e6af18f10",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "71e382e2-81b5-4f8f-8816-1a99fdd2516a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fea939b-a3d5-4dc2-b014-1813d3f0f584",
        "cursor": {
          "ref": "42493aed-73ce-40cc-b726-15c1b5e89350",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "da8b44f0-6ff5-4a07-8aa5-71b2e4221d16"
        },
        "item": {
          "id": "7fea939b-a3d5-4dc2-b014-1813d3f0f584",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "54bd65b9-de7e-4f6e-94e7-2bfa381e0c17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe8fd28c-ad46-49d8-b778-f0f46f599ede",
        "cursor": {
          "ref": "cd10fa92-e079-49f5-ab18-d0d474ba7c2d",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ab6fd32d-8a09-43bc-aad3-9eb5a326d20c"
        },
        "item": {
          "id": "fe8fd28c-ad46-49d8-b778-f0f46f599ede",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ad61970b-4515-42a1-b614-432be3e0a9de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae1e68b-1c62-4967-8857-99673032b8c5",
        "cursor": {
          "ref": "98aa0b02-c112-4c40-9ab0-0c8fd0f01a43",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "83f51289-a5cc-4a21-8348-97c6ae4088fc"
        },
        "item": {
          "id": "cae1e68b-1c62-4967-8857-99673032b8c5",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "75be7bce-17c2-42c8-bd4f-e7ed79791d2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d27f1f21-80b6-45f1-b928-d7149a52df5e",
        "cursor": {
          "ref": "364fad7f-5aa6-4fdb-b29a-7659008a06b2",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9c16ea71-820d-4e12-8c86-2219d469ff8d"
        },
        "item": {
          "id": "d27f1f21-80b6-45f1-b928-d7149a52df5e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "88bd8552-c202-4423-98ba-337342585f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0160d622-c242-409e-9b66-a37420e282d0",
        "cursor": {
          "ref": "fb431132-2c70-4afc-b669-bb0c6ae78371",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "04dd01bb-2c9d-48ad-bc11-2fbd10748ae6"
        },
        "item": {
          "id": "0160d622-c242-409e-9b66-a37420e282d0",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b4ac4ffe-7478-439d-89ac-4dafbc14356e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc417964-1f77-4fb5-ba5e-602e492321cb",
        "cursor": {
          "ref": "963715be-3852-4f56-a648-0270af870b6b",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d6ce8468-8048-4e1c-8696-89294dcb71f9"
        },
        "item": {
          "id": "bc417964-1f77-4fb5-ba5e-602e492321cb",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "517e3ff4-efea-4b34-9fa4-fcdfc88ddf4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed35df00-1a2e-4206-b3ea-4d8987aec00f",
        "cursor": {
          "ref": "759ffcc1-43b4-4901-9b30-7a885f4ee0b5",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a98bb4b0-ea89-4b2c-a7a0-832b029c3a9c"
        },
        "item": {
          "id": "ed35df00-1a2e-4206-b3ea-4d8987aec00f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "77654d9b-b3ab-493f-a8ea-35a659d5ce31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "009dadc6-8e7a-44ee-a99c-e861200397e2",
        "cursor": {
          "ref": "c8d4aa8f-74a0-4365-9688-cb45b56b5581",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4c20c593-d2b6-4e64-943c-01429888b5a7"
        },
        "item": {
          "id": "009dadc6-8e7a-44ee-a99c-e861200397e2",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a8040a25-d15a-4c74-8555-f21cbb334117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d19c139-6de5-4d9c-8fde-7ebb4865a825",
        "cursor": {
          "ref": "7e1a6651-3f4d-4253-b240-2932466755f4",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4af2a59f-3ad0-42d4-9ee5-4f164ae392a0"
        },
        "item": {
          "id": "2d19c139-6de5-4d9c-8fde-7ebb4865a825",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b2efd4e0-682a-4e4a-a2cb-b1e9a1f389b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7d1609-99fe-4721-9040-8ed65ac2df31",
        "cursor": {
          "ref": "0a2071c9-8965-41ce-a4ed-d971d57f50e0",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "9bafb0af-3085-461e-8866-6cbd55449600"
        },
        "item": {
          "id": "9f7d1609-99fe-4721-9040-8ed65ac2df31",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8b50ddcc-e596-4d39-a307-852a244f6c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4559568-6b4d-425b-84e2-46ff10c2f9ff",
        "cursor": {
          "ref": "4193a572-e7b6-4583-92bf-a8d1c1b8a821",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a6b4efd3-f848-432a-a1fe-69c07dc69d71"
        },
        "item": {
          "id": "b4559568-6b4d-425b-84e2-46ff10c2f9ff",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a96aa5aa-723b-4312-a693-b417648f3e2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff0359c-83ae-4d08-8772-c25068145a90",
        "cursor": {
          "ref": "a2c523ca-03ee-42eb-927b-5c789186304f",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0ab692f3-99c7-4095-91b8-407d38b4d15e"
        },
        "item": {
          "id": "8ff0359c-83ae-4d08-8772-c25068145a90",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3b810aaf-9ba5-465f-be78-a0f5a87c93dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b88e74bd-5588-48f3-8bc5-100fdc85b995",
        "cursor": {
          "ref": "c8cea439-905a-4bdc-9477-be3b6ae3dc31",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "83f64bb0-23d5-4065-b4c6-dd4ac9253a7f"
        },
        "item": {
          "id": "b88e74bd-5588-48f3-8bc5-100fdc85b995",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "bcb792f4-5d29-44ec-8af2-5e7e5ce47385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "243e6249-7770-4860-b3c7-89a80afd4bb2",
        "cursor": {
          "ref": "cde3db44-6687-4ea3-8f17-446928989dfd",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b1036232-45ab-4d78-8ddc-766ff7238986"
        },
        "item": {
          "id": "243e6249-7770-4860-b3c7-89a80afd4bb2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ef7a487b-c826-4688-82b4-3cb0f1de01d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e8316e3-db34-44a9-a41d-8d002ab6d826",
        "cursor": {
          "ref": "d38796c2-3189-4960-9524-b6d4b76e904c",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a97df745-6775-48d8-ba8d-c757e6668b8f"
        },
        "item": {
          "id": "0e8316e3-db34-44a9-a41d-8d002ab6d826",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a8964460-b910-4c9b-99f2-01cb03e7b474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9167449b-f8ae-4e3c-8d87-d64c8d65a385",
        "cursor": {
          "ref": "83635108-e124-44c7-b4af-ae3583920960",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f7c4c30e-cc2e-4be2-a9c4-4e3fbf9feb84"
        },
        "item": {
          "id": "9167449b-f8ae-4e3c-8d87-d64c8d65a385",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "40fb51cd-6dd2-4363-8ff7-9f77fd5990de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbfcc2f4-bb41-47bd-b0db-93223bc581b1",
        "cursor": {
          "ref": "b2dc207c-86f6-45d2-abde-ba4e47cf327e",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "3ce99ded-925e-4a9f-ab04-74464b7e5da0"
        },
        "item": {
          "id": "fbfcc2f4-bb41-47bd-b0db-93223bc581b1",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "2b1657e5-c045-4303-bb0b-08ee25cbccda",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "058a388e-c914-4874-bacc-444fa24100e0",
        "cursor": {
          "ref": "b9863ecd-e849-44c9-a68c-42f24f860e63",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "78899959-a9f8-458b-b639-f050e6552823"
        },
        "item": {
          "id": "058a388e-c914-4874-bacc-444fa24100e0",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3b25c598-7634-4294-bbbe-1774691d0a9c",
          "status": "OK",
          "code": 200,
          "responseTime": 582,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e86d1c6-b647-4cfb-b8df-db428effa413",
        "cursor": {
          "ref": "0a94792b-5b06-43ba-b07c-66ed57f55861",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c5c08c1e-fff4-45ef-bcf5-1c49d1cb21b0"
        },
        "item": {
          "id": "2e86d1c6-b647-4cfb-b8df-db428effa413",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a9660699-f4e6-43e4-9d37-3da9b2d262d1",
          "status": "OK",
          "code": 200,
          "responseTime": 301,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "194b72a2-6746-497f-aa92-baa3bda0a675",
        "cursor": {
          "ref": "1ba4a8ff-2a34-4a54-a095-1f1fdaaf95d6",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "91907ba3-8446-4fe6-92ca-722efc05c175"
        },
        "item": {
          "id": "194b72a2-6746-497f-aa92-baa3bda0a675",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "55be501b-0ac2-4ac8-b5c7-9762119c725b",
          "status": "OK",
          "code": 200,
          "responseTime": 760,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3550a846-2679-4a5a-9b28-67249df46483",
        "cursor": {
          "ref": "45d4b32d-2b0b-408a-8ef7-f80bc49f2abd",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e5bd59b0-5c2e-432a-a90a-350fe73f7c26"
        },
        "item": {
          "id": "3550a846-2679-4a5a-9b28-67249df46483",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9f314dfd-56e3-4aa7-b63b-3364dc127dd4",
          "status": "OK",
          "code": 200,
          "responseTime": 528,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b09c59-3fa3-48d3-bd5a-329876cdf29a",
        "cursor": {
          "ref": "0699ea8b-b656-42f6-b592-c3be7c221c75",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1a37d4be-283d-4041-915a-765d15b54179"
        },
        "item": {
          "id": "d9b09c59-3fa3-48d3-bd5a-329876cdf29a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fd102b71-efad-4c5a-a4e6-2163fa5643ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b09c59-3fa3-48d3-bd5a-329876cdf29a",
        "cursor": {
          "ref": "0699ea8b-b656-42f6-b592-c3be7c221c75",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1a37d4be-283d-4041-915a-765d15b54179"
        },
        "item": {
          "id": "d9b09c59-3fa3-48d3-bd5a-329876cdf29a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fd102b71-efad-4c5a-a4e6-2163fa5643ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b09c59-3fa3-48d3-bd5a-329876cdf29a",
        "cursor": {
          "ref": "0699ea8b-b656-42f6-b592-c3be7c221c75",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1a37d4be-283d-4041-915a-765d15b54179"
        },
        "item": {
          "id": "d9b09c59-3fa3-48d3-bd5a-329876cdf29a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fd102b71-efad-4c5a-a4e6-2163fa5643ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ab18aff-ebd8-4b20-ad7c-a16be687e334",
        "cursor": {
          "ref": "ae2f0c7a-0f8b-4950-b4d3-00e9ac050509",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "75b9577d-42d9-4e6f-917c-632ce5697458"
        },
        "item": {
          "id": "1ab18aff-ebd8-4b20-ad7c-a16be687e334",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "7f98cd05-8079-42d5-b625-5b2485f6b6ec",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ddd2181-a37f-4710-8608-aa887e57573e",
        "cursor": {
          "ref": "70b24c93-d179-4f06-b952-ded61eaff23b",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8dc85101-050a-4058-8535-a3de9206fb68"
        },
        "item": {
          "id": "5ddd2181-a37f-4710-8608-aa887e57573e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "19c9d6ca-a57a-496a-a86a-f23c1e93b25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "5ddd2181-a37f-4710-8608-aa887e57573e",
        "cursor": {
          "ref": "70b24c93-d179-4f06-b952-ded61eaff23b",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8dc85101-050a-4058-8535-a3de9206fb68"
        },
        "item": {
          "id": "5ddd2181-a37f-4710-8608-aa887e57573e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "19c9d6ca-a57a-496a-a86a-f23c1e93b25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "16ee92a1-5a0a-4b95-8a01-d4609f1368cc",
        "cursor": {
          "ref": "c79a44c1-28ed-4f3f-93d3-b7e8a759db7e",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1d74b526-e287-4ba1-abb1-2292e3f67d68"
        },
        "item": {
          "id": "16ee92a1-5a0a-4b95-8a01-d4609f1368cc",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "14f66f9d-28c9-49a9-a891-780b6481587d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "d799ba8b-1a78-4b57-96ff-f17f21497861",
        "cursor": {
          "ref": "8f317f6c-766c-4fac-b030-0ad7f42696ed",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c806317b-d13c-4ddc-a63f-81316072a8b2"
        },
        "item": {
          "id": "d799ba8b-1a78-4b57-96ff-f17f21497861",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f9230c2c-48b1-47ae-bf0e-131e6e49f973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "d799ba8b-1a78-4b57-96ff-f17f21497861",
        "cursor": {
          "ref": "8f317f6c-766c-4fac-b030-0ad7f42696ed",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c806317b-d13c-4ddc-a63f-81316072a8b2"
        },
        "item": {
          "id": "d799ba8b-1a78-4b57-96ff-f17f21497861",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f9230c2c-48b1-47ae-bf0e-131e6e49f973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "3670a829-91a5-4dac-9450-1ebdea807121",
        "cursor": {
          "ref": "5984d2a8-ceee-480d-a16e-fd07fb788693",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "f13d5f4f-3ece-4160-978e-222ca3da70dc"
        },
        "item": {
          "id": "3670a829-91a5-4dac-9450-1ebdea807121",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "2ef85760-4bf4-4e82-88a1-08e69aa41b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}