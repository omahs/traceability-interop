{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3bf28ee2-011e-49b2-8793-5936a0f6e338",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7bd88a96-d829-4cfc-92fa-e572865dbf9a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b195071b-b4d5-4230-bd3c-eac590b5b844",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "402cca84-bbba-42ae-a5a3-ee8854040cd6"
                }
              }
            ]
          },
          {
            "id": "1e5c4b51-7b46-433c-bd8d-bbbfaf585609",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b45bd306-1aad-491a-ae09-8a03e4a02c8b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a8431456-e00c-42c4-99f4-c525be6c29d6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a1c12c3a-b041-460c-97bc-405a9c53e3c4",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ab14372f-bd30-45b2-a0ec-1416023f3adc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "076b2a8b-f60e-4dee-a0af-6202ebb5ddfd",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "89abe03a-4fcd-4f27-813d-1c5bfd38136b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fc1736de-bd65-45f4-8c66-79993ec524c8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "81fb2eda-6a13-4c19-a3be-1385a9552404",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dcd2908f-3b28-4b52-b665-259c2a0edf04"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "02a0c9b5-e145-4ab3-b5d6-e1158c452396",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e4355d14-efbd-4b54-a7b2-2341ace27c3c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80cbc573-1ef9-4617-9f7f-eb3a7fc9792f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f70e2bdb-2b59-44a9-8218-83740a9b90f3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dce060b0-bd3b-4d5c-9ca4-9430d83c7e8d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9e549259-34cb-4569-bde5-aab5237e3da4"
            }
          }
        ]
      },
      {
        "id": "d90a38f2-8269-4ef9-8f17-bb8aab90f223",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d8b6420a-fd49-4f91-a26e-e0405f954c01",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c5e7b4bd-66c8-4876-b9d4-5cb7e6f6cdfb",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b1b6a262-23de-40a2-9446-df3c75ec5abc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aae75c8-d49a-415d-8e97-d91c64717679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7afebc91-e7ee-48a8-a95d-73d0e6322c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d471af9-3248-456b-b50a-314587e2ec9e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac0fb37-7c38-4dab-b70c-2b953debb207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0fc1cd9-2432-4cef-a614-acab35827ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f98ba15-f1e8-41fe-a533-a3bc3bbb70d4",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "383480c6-1ac8-443f-bc4b-6934ccb23079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f123c25-b492-448c-b69f-94bf7a87a368"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3cbf1e28-8fb7-41ea-8965-941de0cd6b39",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "abc39573-2629-4ea2-a4e9-23b92a2e9f47",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d55323-50fb-4552-8291-96040ecaf863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "07b168bd-e992-4833-ac95-01f4fa7d59d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5177ad-828b-47e9-920a-2ef3ecc3abb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dff8c605-0a7a-4be9-9909-b21a87fd1d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13811b05-3291-4a38-b4bd-c94a89899419",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5108552d-6b5c-40aa-a18a-f377ef2711ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1445897d-7e0d-465b-856b-b2899cbfb24c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e86bb8-15f2-47ef-a6d2-f9489efa9072",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "00d1c732-e609-4836-addd-4821da6b6d4f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9900311e-9691-48a6-8182-c8ca977208e9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e1909c0b-2aa3-40e6-9806-272365794639",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae3db43f-dddd-474c-96cf-65b884bbc01f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ec6a822e-131d-44c9-97ec-ec52847f1ac1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4838699-97e1-4f77-b891-0f1b5cfe6b18",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "02a71aee-fd87-4f94-a9a8-e69a8bae82af"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "123c0258-8c13-4ac0-9db6-d202d9dbd7de",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "16d7f3aa-b82d-4dbc-923f-5fb185539736"
            }
          }
        ]
      },
      {
        "id": "8d5224cc-60bb-4b81-add1-dd01d321fd0a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0a5ece5a-3169-4303-92b1-b38086f8c9ea",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7f73bebf-2ee0-411b-829f-c8b095c04550",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9c03e052-8e59-4314-a2d6-b97e9926c55e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eabe9bac-2f7f-4db8-abd1-9ed3a48f0d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41ad4c38-e71e-42bf-b957-f6a7f8f7f84f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e09f348-1fe6-4f2e-8466-778485112574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab7080df-2f35-48c3-a798-0028612dea50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ba6758-4cab-46d8-9c52-3ea04c0e5453",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8361c83f-edcb-4fde-ae26-319375aec6cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8591251e-6ce3-46ca-b3c7-e24766789967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2c4698-8a77-4bd9-b3c7-1d727f68a941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "492c64bf-bc5b-428c-8561-a05bbb647dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed2f1f8-a37d-403e-9817-5d66d0062058",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c93ce9-d900-41f9-af81-2a793d91466f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d897a9b9-a3d1-4108-a0be-0fa03b6e81a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ccffeb-79eb-4072-bac0-ca05a1669cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "719d3f61-6399-40dc-8863-3a5e7ddcab30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d02e92-3314-4871-a0ae-b0c046fad9a4",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "217b002c-f4e1-40d1-b1f7-87f9d5332644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "345db59a-2287-4dcc-bc71-a0dc729c15fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa503e8-dd77-459f-95ec-fe8815718b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44e21d37-dbf6-4e6f-b5f7-c7b404cad1be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80eab2c5-42c8-4d95-866f-ec5cea96f7fe",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf63b883-7e1e-44c7-ab50-6bd0476015ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7c17af3-61bd-4aeb-8d39-7105258f900f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf1a6702-5484-4ccb-ade9-a98017d6ef60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03827944-6388-4c46-8bed-9d51b5aeaf20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ea69be-0ed5-4fb6-bb1c-116b4c82ce1b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b7f563-9ca0-4341-aa06-38fb60efd3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0f0fd16-4d52-41ef-9b68-051fd2cfcc88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef141aa6-2895-42ed-9661-43a061e7689b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa95a0e0-0bb2-41cd-8b47-dbf5b7236cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "202c0b5e-753c-4baf-99c2-76f44e3d2ecd",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64651fd6-5382-4834-a052-67d842eee5ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6734d66-4fcf-478b-85da-be3fc5964cf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e009bc-56e8-4afd-8dad-b11f1a3598a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e45c5f89-2fc1-4c11-a219-b652ad4726e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24acb519-2503-490c-9f44-603493f962fb",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b24829-ee50-4c31-99c6-0690d44f737d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f9ecd24-90a5-4316-9a1d-d28ac75dfbff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56634ab-6161-4bac-bcf4-cbd2a830d4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd8e9a0f-3dea-44c3-aac7-a264ec2eb27b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd65e9fe-3dc9-4b16-a566-a29f045ab823",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a02bfe-fbbc-410b-a11c-53d580dfa1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03366851-11bd-4a7f-944b-fd93d0cbcb70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b67d677-e21e-4437-8b0b-400c9e7034a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "879b71b1-acff-4c0d-ac1e-b63bebdf6a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c773cf90-b3de-48d7-ab28-7db263f86551",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b23397c-7e99-41bd-81f0-3676ba1ad620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a693443a-b89d-4db5-b59c-2aeb42a3f365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d03ea78-1bb0-49f2-9ed6-ddba9fa6b241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "236eb21a-b914-493c-8279-d3694f39e89a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a0fedb-34f3-475a-928f-922aaba1186e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a12b57b6-d4ee-4bef-944a-6416bcedc032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92640bc6-2f94-4019-a277-cb73d1235f0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb0f71c-64e4-40f5-9b88-08661a58865f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d96b660-bc65-47ed-ab78-b383b80f6745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c72123-8e55-485c-8595-15868d9f9f6c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "369cc5f8-0c68-40b5-b832-8d7757fc4a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f878cc82-9f60-4722-9cbb-b523c8c37f80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcabffea-4e84-49d9-9fd7-7c608e3f2081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09276336-fc00-41d5-a7bf-925c613d2740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196b35f0-ebe2-4a8b-9d0b-3507f8ea9673",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6629804-d763-4d08-8156-f60257f9ee24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d66de136-35ad-4901-b028-dc645a365a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a48a10-7a73-4557-8c28-997e0845612b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e7157583-20b4-430f-b1a6-059c7b2146df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e092c2-1fae-4d3d-b8f9-fba61129a8d0",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a19651e-2742-474d-b0f7-6e97b191fc7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5f2fb9c-fdab-471b-91c6-94549e7b0f51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fad4bf5-1171-4df0-b478-cf2f69597e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "b09f93ed-c26c-462c-b364-ad6f55a99a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c5a282-65bd-4d65-9a03-5aabdc2f2cc9",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68f26da-ba10-42c7-979a-a4063344c58d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f66aed6-c382-4839-8526-68185f81d1c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c0ab59-5f65-4164-9598-c37e009800a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "56d0c5df-f48e-4b4c-a0bd-e15769c1bd44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c963fc3-e450-4952-bb7d-8f7f4b76603a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d7b95e-3e76-4e77-aad6-955961e1b084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faeccb10-9dbe-4895-8289-9c1344c5d32c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "404fd650-c0a8-426e-85ef-f3f791c6c7c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "478cf30f-d8be-439e-9e00-af7ab88885ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b232c7e1-9098-40b3-9e2c-d7c59e74f26b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c42d3d1e-5aeb-4ef8-9a47-78b437f1678f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb3ac15-4dd6-423f-bbfc-74f1772f2ea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d474b7f3-7764-434f-a868-2450d66dfaaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac85bee3-d9a9-47c5-87be-a846c99cf690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d79a19a-eedd-4295-b011-8ed84fa388d6",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26acd659-9137-468a-a5d9-b114a243dcd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "893d1e99-36a4-4d0c-9a1a-17dae19e0b93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a065dd-fad5-4bd7-9117-60e4284b4f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "613bfd19-8333-483a-b5dc-67c4a9bc3a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb38c909-c3a6-4767-8101-3b68bfc3c3b7",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6507b838-fcbf-4c72-814e-3f30798ba7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44aba4ee-f07f-464f-8eb4-801a81496f14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977ac7ea-038f-4d2c-895d-470d65f5b566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d5be451-34cc-4993-907e-39835eb9736f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d70a3675-f2fa-4d2b-bcaa-21e2d9facc37",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b152b8-acf5-4d73-bd5c-212878eb0122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb0c18f-c599-4b05-a627-ba8d278a4a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53fb0776-7693-406a-bcd9-d26bc838ed9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "072e0103-4df7-476e-a0ad-9d455cffe17e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d72f5ab-91a6-494d-bc03-1bc7d900878c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8195c8b0-aa56-430f-8908-2f12d3318ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3a13dfe-85cb-4c9f-af5c-9253f95b0dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4671e2d-27a9-47ec-ad7e-f1331037835c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc7cf05d-fd5f-4bef-b84c-fbb34d612b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d79e344e-4911-47ec-8d65-e5204ac92605",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c7bd96a-d715-498f-b043-3a3f4f5c33f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aea01fb2-4dc6-4a26-b821-c870652085f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e93d2e-04e2-42c4-8c71-4259bc221b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0d4ac8f-18d3-4ce4-9ad3-0dd0b7ed1d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ba8cc8-ba27-491f-8d53-697bd6ec5bd8",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb26d50a-dcc5-4d91-a8fe-537da393aadd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8ed0f73-e072-4698-8206-c1474d18ef7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "700899bc-3e0d-41e2-b4a2-bb5afeaa16c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c4191b4-9fc9-4c4f-95be-242fb698942f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4921ef65-affc-4d7c-9c7c-0973bc93451a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b59c3a-714b-4d0a-89da-50d2c918fd5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2127c983-39a3-4e5c-9823-03e989c3aa90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e8d898-f06b-4540-9f8c-0c356fad6929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9870b6f9-2927-4575-b636-19d6191de87f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2151400-663c-4297-8c9c-304dc4b3330f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7310d3-a9fe-478f-9230-44836244d7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1adcfe8f-789b-4792-b5c7-edd1353c5962"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e006c93-ecce-49cb-b4e7-8a005bf736a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9fbd4fb7-8919-42f6-84df-5a57aefa5ec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61672a6f-175c-4909-8979-e6bf97eddd88",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dba02c2-eaa2-4df4-a452-8dcf6dc4c858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d9e7d9e-a000-4cd1-af6f-f80c53b0baeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52b3c76-91dc-4317-a01a-88b01514efa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "20878637-1457-4c00-8400-9cb51e166ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ca5298-11cc-46e5-ba53-af0060035f7f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19127f65-85c5-4593-b4cb-734999fc643b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b40f969-2ef7-4ea7-9c1e-17885cfcf63b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227eea08-0721-4a8a-a47e-df65c49984f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ebc6489-dcdf-43f7-a27f-1761f5564e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0560c3a7-1bc7-4d5e-a247-707784560017",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc92dadb-e26c-4350-bec9-17e40279a158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e2926ce-a375-4ca5-9ffb-81a024b443da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba8c492-4e32-406e-9720-68667f05bf96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ea72936-c71d-4aa4-be0c-8cc742d80aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ad7e26-367c-4315-844d-e79e4c638590",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7334211b-2c15-4076-9f45-d0adb0af378f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e228e8af-86f2-41f8-8c24-3c221fbc13e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88c2789-7db1-4597-b9f7-a5584d6e1dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c96c5a55-dd0a-447e-b576-38179ed1c414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "febfae19-10ae-4fd8-a733-9be77447196f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd12240-4d30-4c2d-9f10-60e16568c7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6424721-4659-4e30-9204-f63c31b23e89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905d61b5-3bc2-48f4-90be-598e45befeb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f119fe9-ab22-4792-8b68-ef3521279504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9484d5d-e680-4cdc-9168-5684a7b1ca0d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fab4625-50e1-4915-b63b-314224b5054f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "930b74b2-57bf-45be-a458-e9d4cdf8eac2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10578c79-215e-45a2-b790-e66e71acbbcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cd3cd96-d131-4db6-8722-e6be0cb600d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9887ce83-d9b7-4249-861c-6c6bad23f09e",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de1118d-6bd3-46c0-9055-a53169cc8f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc13bfe3-9e89-4f94-9dbb-a07c3e357c43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c95d611e-604e-4e20-abe8-78163820248b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "53af9700-6926-4ed6-9d2d-e92a8b4681f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80084ec1-e6d7-4a17-8a95-550777e2f431",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00914ac-d0ce-4689-94a2-ec4cca1ba276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef4aac9e-c985-48ae-a355-1ffbcd22d3ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b0a8aa-0b86-4008-a869-cc67848df3af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb0380a0-53be-403e-9af4-79d71c472750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a233963-e433-49c1-8254-78cdac0dcbdb",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8792644d-f1d8-494b-864b-a468095e5c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59a20a1c-3224-4ce0-82ff-af0efe44fa34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2646a9c4-8c3c-4324-b58f-599f60752654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3663d38c-9041-4740-8149-20f449497329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f539d791-4c26-42f0-8dff-05eb334571bf",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61cce23c-b71f-4c15-8790-aa34a6846f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0440190-26f3-4205-a279-b25d39448008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de15f90-b341-4663-9031-8789b8a905f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e13c4b3f-7528-4578-9fce-171e3db26724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe186cb-e8d5-4402-a6b2-da242e34ee49",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "972fa2f9-2f70-478b-a6b6-611da569bef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b32a3e29-05d2-4f09-95cd-28224a2b1790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb1a93b-7c31-437e-87b2-8a2df4193db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0acd96e-6e9c-4d36-a264-f972bc9551fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1153783c-e125-44e1-9b68-b346fc5bb9f6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f6f10eb-c254-4584-a9ed-1dc81d0ee1c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e85dd64-29d5-4f95-a199-8d81cff5bbaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93af4725-d72a-43e0-ad04-5810e09c39e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3ff105fb-efd6-4ce4-a12f-62d9f6dfbf52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32b3b9d-c454-4115-956d-9528b1adb8fb",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df9022f-0968-4e6b-9141-115b24b21852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18fd8013-c21d-4562-84a6-f9f1d58f98f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06b6f4b-6cdc-42df-b4af-eda817805fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "26edb17b-e2fa-4bef-93e0-caebd97bfcc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc0637f3-2256-461d-a20e-245b906aef7f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49df872c-441d-4819-9088-fa4d6c21946f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "464ae634-d6d9-4dc7-b3d5-f788507cd456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54eac0fa-98fa-4808-bb0f-34cc36559d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "24516ae0-c587-4167-8885-2d62022c0b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ce3bab-a5d3-4e35-9cea-055aff431821",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a77158bc-944b-4077-856e-8b0fb0c09037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "091085ab-8bc0-404f-8a49-90369951d6e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c58ef2a-5522-41f8-a147-795e625c7b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff0cc8e0-0f07-46aa-aadd-8121eb2db043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b8595d9-0aa8-432e-af02-104d794b0987",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "131c5d62-6ca9-4b07-ad9e-dcd1fd419546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3637800b-e557-44aa-b9fa-fb41ee10feba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60bf8fa-f083-4a16-b2e0-b455335b273a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "67ca68c9-519a-4e26-b8c7-084afb95abb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8478be46-d78e-4e84-a685-11613ae71e92",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51ce242-ecec-4b93-a69a-16e56c50bda3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2fad3ba-8230-436d-afd7-fab2a5284e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea96e536-1733-444a-8366-2eabc29cc8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "23c5dfdd-5777-4517-9671-3412303850c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5984c184-cdcc-4cae-b08a-b74334a3a748",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee7ba97-d0ad-4158-a4d0-b39d928d4fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99a188ad-5592-46d7-806b-fde879be1783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486db161-d2be-4dfe-a1b0-84782e6b1a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6a92de0-6f04-4c47-9b12-cbbfe51999f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36566475-1183-4de6-abc0-3c376c4d2dde",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7faec4bb-ef52-40b9-88af-80d03d3eaf96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc8b39fd-fc3f-4f48-b110-4d9805cdd720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d761298d-3b93-4fbb-8318-8917b79fcc1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2918376b-f979-485e-8bda-502591ad0608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd89b4f-10f7-4a37-af7f-c632aaa7d206",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b90b103-d35b-44d7-8059-2aad6651624f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b0afdd-b280-4f7c-ae3c-ec5c115176c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4b4754-19ee-4fdc-94e2-a3734d949c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "515cb9dd-79a2-4069-b1bf-8cc23f2bf808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fd189ce-6f5b-4aa7-8401-b54780db0dd9",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e404faf6-4160-4adf-8ca1-55442f600e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef5f48ac-36be-42b8-a28d-a36b5b9797b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9cbd14-6bcf-455e-84e9-72e31b99c1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb4453fb-430a-434e-9535-b2f9f74bd334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75860367-a7ad-42cd-91e8-0247c02dac7d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26abaf63-8369-442f-9413-e077120ffd96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ede3a872-4e1b-4751-b3c4-ea790a08d575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62f2915-391c-4aca-beec-cd9c100ce7e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "391e648d-a721-4653-a255-29774fe45b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0df6a36-6f20-48d9-927f-4cadbc19580d",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "363ffd7e-08cd-48e2-8ed5-43a81d965fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce1b92c9-6020-4f24-8ca5-eef3e359efa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf206ce-3b4e-43b7-ac0e-6c9d1b3ca883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c52b523-9496-4623-b980-25e8c7db81d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e249e5b-99b6-4af4-bbda-b08e2525da7f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "461df921-2c9b-4677-a727-3de79835619c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c6953bf-9991-40e5-9f28-4e308d1fa0e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3e37e5-5260-48dc-892c-24bc59b0db18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1593733c-52aa-417a-b260-dad54c1fff09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df9d8e37-6c90-42f5-80be-960153537d73",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6867ea3b-49ef-4de5-8dd9-424f1fc566cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e24c56c9-0799-4075-8050-9bb400ca8308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "285cce7b-c3d7-4097-bef0-6cff0a06a2b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bb6cfaa-ca11-4b30-b394-4d5970936883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "022db41b-3421-45e9-a0c2-5afc02086799",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c20029c-030c-45c3-8696-94262f925a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "205972d2-6ea8-4bc2-b30a-2fd9462b5f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb01794-488f-4154-ab8e-aa209ba94924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1a85268-7455-4f99-bd29-c5902e5fb324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "553ed20e-1d52-46a1-9f67-aff4630f7399",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3475f45a-02c2-4b96-9d32-ca4e523d5865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f712941-481f-463f-950f-1ebf337761f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee4ea21e-d369-4e07-9a8c-3c7e3f209bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7f7b7b30-334f-4aac-a18a-2ed48bc6cd7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5037bb7b-86a0-4eca-867e-ec6549e36ef0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db8d4623-32e2-405d-8575-6a7f8cff3d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a2182dd-1615-4e49-8ad6-18f9159a97fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c6d53c1-c1cc-4ccd-b65b-4ea76c20ba00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4a3602b-fd82-412a-bcd7-47010a9480d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cd9b976-ad4a-464f-bef2-5c9ee852490b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8dead8b-3814-459d-ad5c-f28f63223339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "570cc65c-f4ae-4b13-8764-3d7e6e578fed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c4c1110-b020-449c-83b7-cda574031d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "78de3a45-eb7c-48a8-8814-e7457c38fe1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa2e7b4-da35-4a3f-87eb-a5755aff8ba0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cac0c4ce-2b5a-4c43-b260-f9d839ee5f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a6054b7-d522-41ee-b887-af76deb2b199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "130d0d48-a76d-4e39-8127-cdf8dbd6df93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "641c6ef5-e343-4f32-baee-f68dcf292e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0372ac-413a-41b8-8bee-15b9bac350fd",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f2de425-d5fc-4353-be5c-c631a33dfb6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d92c2166-7f4b-48e4-8608-1507b8136566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56d5c0bc-baad-425f-9aa3-98e2f8c0f6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "584d69db-f4a3-40fa-9784-449ffe9167d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b7ce07c-87cb-4d8d-9cb4-a865963b4adf",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ef0bc8-a380-495e-9571-4daa68fcb21a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b672f3f-41a4-4101-876b-f306592eb78e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e60083cf-7421-4d22-a905-66e4dfb53579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a79b1e4c-9ac1-412e-92c4-995b247759b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1882c0e-c61b-49d5-b4ff-09fdaf266b8a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b2ff3e-c44d-4288-ae65-5c4667e6680d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9ce2e01-e175-405c-af87-63a46cd4caa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94f0d5e5-bac4-4669-8043-a7fcb30e36c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d4a26cde-70f2-425e-a6db-4e27de892563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce0a4f0-ec6e-473f-9a2e-b37cda36bde4",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90fc396-13fc-4fda-adf9-b04c9b8f4af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5198cd6b-0ebb-4669-b047-bb1c76048090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb39ad40-9fb3-4fc8-943f-c74c9f513f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0b2b6c3-8d6a-47dd-a91b-fc99a8d60f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ab631f-2f5c-43d6-9a6c-666edad284ee",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c422da30-1142-455d-8197-40663e86eb85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f658ec0-5778-4bb5-9b46-7c89510c0e7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a40ecf-80c2-412a-bc45-b09ace460236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3572b617-5248-40b7-92f5-dfd6d5a00335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e72f077-6112-409e-9e62-8344a3ff1672",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c7fdea-da9e-4943-bdef-b70b26cedecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65ef9091-edd7-4d53-b587-c9b63c2e408d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8416c891-bb9d-434e-a51e-de846ea7f115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac8b800a-b58d-4a3a-ba54-1eb8bfbaf452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e81f7978-1a6d-430f-868a-bdb4f506cf90",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42fdb23-fb8d-479d-b927-ec10a5ca85c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54a599d4-4a66-47c0-b650-0947cb5b2968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd5cb66-9ac2-413b-8038-d73af893dc6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfccb3a4-696f-4d2c-a0c9-82defeea69b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7066da5-8d04-44ea-8f42-df7c1ae9ab3b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "237766cd-b022-4b4c-a44d-873bf6365dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6e70dfe-50a5-4b93-ab43-f20839951612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7332782-5af9-4699-9071-42ed2348eaa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f7fd8f9-f2f7-4ccf-904d-92d70d76d0f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ff481d-cfed-4138-9e1a-a254865acca1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd138d8-5031-4d7f-a726-b6e95a893c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24af90f0-43b8-4757-8d9b-9b3438b2d5c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403ec704-7771-46f3-97ba-cd2619c6f3d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e6006b6-92db-4b48-8ee4-2a6bb8695de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28830c22-f0f6-4152-9a74-fde4b417e51e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15fe307-fa88-4c53-a22a-f84e0579a94e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cbe7987-e940-4da3-88f8-b2a0e52ae03c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69c5427e-e350-4526-808e-f0447b58a4f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e92b0af6-4955-47e6-8074-3e5b8ab348dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba7c3d00-3e1b-40b2-9b45-1cfbaa5a1da1",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf13a91-c7b1-4686-bb29-5541c5b1b1df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4856e711-4360-4b11-8b67-672239590687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b53fb3d-9db3-4048-b0dc-46fd4c729877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce06b4d4-2ad2-4b1b-a029-7363ebf1d222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8bef70b-efac-4ecb-b65c-994c4636b60e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b8f7f1-26db-460b-a8d9-366d602505cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cac2629-f3c4-455b-97d6-05935be90df2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae10c643-1666-4fff-aabd-f5ed343feddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "922b13d2-546d-449f-9505-058d8b1eff30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "debf3ae7-d8d4-45de-86ba-395c41bc8d34",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd213cd-086d-4112-a829-824914578d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1a69e6f-3a1d-4cc9-a762-21212108633a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f061d911-7121-4802-86fd-82c231858f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bef2423-e7b0-46bf-96a2-7266908c8ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f854231-e2d8-4e75-ba82-06b2d83800dc",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e463454d-331e-42a1-9dfe-9541b27644c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "842eb3a0-defb-43a9-8eaf-a101c5a923ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c2a818-789d-4c96-94ba-1a80601c6e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3da9f7e9-aaf6-4bf2-a022-4ba4d92145d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383ef7a0-59c1-4c1a-a335-4d43ec8a39cd",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a3a6760-d1a9-41aa-81e7-8566f7dbec7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16951c6e-ff37-4ab7-86a5-7cb324c0bfed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd774f1e-d093-443d-a6de-b9e13589598a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "27a5f8f8-0768-4e76-b27d-8d0c1a9fe71d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4977e1a-4a87-4433-8969-51cbd8b9e345",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a1254f-3491-4fac-8e46-0c5b9ff07a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "485922f5-ebe9-4cb6-a6bc-409dd9094cca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412e8905-fadf-4652-a292-c28f548665b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7a049c9-6749-4072-8148-c8e041e2a965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c64c9f0-87d5-4a64-8bca-6d3d070250cb",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1203e0-60a9-4a28-9ee1-33f0996e33ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e60d0bf-0244-4edb-94da-e0a21f7b31b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca883cec-230a-42db-976b-687db36d1832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbf4161a-4bc0-433f-9bca-a062c6bc2b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a407a749-c217-44a7-99f3-96301ba89e88",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a018913-ecc4-4df4-9b2c-1b937f4cbea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e04f19dc-e5b7-4205-a7af-3f0b9dc0c6c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e504c1a-2eef-4584-8b19-419beefec0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b14b6111-6d70-447c-97ec-c550e5bb94e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb4029c-5b7f-4f69-8ccd-e28d800eb078",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a773e4-3a3f-4e54-b496-df0616fdac2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09c36ecf-ee6c-429e-8282-0106b06b1d87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c2b7101-8c54-4126-8a2b-1e7d9b4ed5af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9f1a1e1-25f9-4389-a75e-e9471314b4f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c773668f-ec6f-4bd0-bda9-36a943a6b4d2",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f770583-60c3-45d2-8508-8d6cd21248f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0400d88a-bd6a-4bf7-8353-9678b4aa92d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c306bf0-df7b-49d6-9cc4-2b1baf0e19c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "533e8981-7872-450a-bfd6-30e1a1492ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac82eb6-cb5c-4f68-9dbd-f633ae6051a3",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71737274-0186-44a8-8ddb-5cf98eeda36c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ccf9076-872c-4237-ba1a-fa6fefa7bf57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e40ad07-9358-43be-b67f-ac05fbf81ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0c60246c-92ce-4a88-9a67-89e80f044d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25516413-8958-4983-96d1-6a2c6167d7e0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a738b9-9085-4dac-a314-50390e6f5547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd48ab7-ef97-49bb-9c2c-08025d3aafe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f17563-57c9-4050-ac70-5b519e22e76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "48e73d27-3deb-4fff-a486-e59f92fd4f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f6f09a-fd00-4cfe-9797-2a09ea08b85c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "135dc8dd-ee4e-43fb-8659-674bfeb85312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe4193bd-8808-46be-8300-e9cccff1a10a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5665b2c-cb2a-4553-a5b1-39b7a45d00e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "13a1eadd-e154-461d-a783-58cd85521722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3783173a-7b20-4fac-b459-d741da1eba3c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86313082-480e-491b-9185-9f76c66f4ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed332c06-9e0f-480c-afb4-659293729879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8640ef-5f49-4de0-9764-fe3726ab27bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3a3ce5f-5baf-4d30-9a74-c94fadee9032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de7d3c9-9ba7-40aa-a83e-0f140a176341",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e6f6b1-f658-4ff3-a81c-a043668b5bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bc61f68-bc8a-4fa2-b273-d703c78ef976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04af0a83-bc33-49c2-8de2-2a2ed30315be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "84ba4357-f935-4e48-acb5-f9e4cbd059f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb4e454-eca3-44da-bfa8-098e342fd4e3",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9065f2-827e-4dc2-ae6a-f1308ef1c132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27d06cec-0d4d-425b-b37f-2a5df1457a28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba7a3647-d380-4fa6-9e6f-9bc619ccfaf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a625ebb-1be7-4b7e-ba7b-f0f63fec82cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "107fb881-8806-4e2c-a0f7-3a2fea873600",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de50ac5-c66b-4bb2-ad08-6eead51fb672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b2a3651-e1cf-44e4-94d3-12b4e61ad2ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c715b16a-eb97-4f1c-bee0-94d88a2dde6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c97bd95c-53c4-4004-a3d0-b7022c6e3bc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "286cdd29-6131-4b99-a5eb-77069c55f38d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e6f2f0-87a3-469c-8ee7-4882dfe8e3e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e8beedd-ac37-4a8f-9baf-441fc77c3e4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45af8f19-4674-4481-8e25-3e2b1c81b507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3041db9-1cb5-485b-b9cd-6bb6238d50bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a83f49-90f5-4fb6-b88b-0eddc615522e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27dfc05c-751d-4452-be85-a83c3b92d5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cc6bf0a-623f-4c60-bd82-26f706e43dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2afdabe4-d490-4784-9646-6c6c67e1e10b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "143f008f-b8ae-41b3-8187-3f58191993d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1fef686-2886-445e-9a46-835c4148bda7",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f457c6e4-1cba-4b44-a943-5287ab3cebc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc2bcbf0-3c0f-41de-a468-97149ddc63e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d92ccdd0-6e77-4355-bbc3-4c99201a9259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "887f37fb-050e-4492-9e7e-bf81da877fcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040d876c-851f-42df-ae7c-3c7d72e2d58c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c90867-3735-4c46-b227-afb02d2ecd86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4e06b3a-77be-49ac-9598-99b8d75d5adc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9200c5d4-f0b5-4602-bab9-144ec4500895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "95af2711-de54-480a-9228-9f3947d19e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c308bda7-363e-41fa-8307-e3be79ec21e8",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ca622c-a7d5-4f69-8f0c-efd6520e6a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a71a32f-a12f-4df4-bc31-dfd76875b0da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "655c8e5f-9354-49ab-9b46-278065e933c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a8eda75a-f4d3-4104-9111-21bc1cc8c466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0c7259-1178-4374-aef1-bc375dff2021",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b3293ca-b19c-45aa-9669-f5d7cc0d0b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e1af4bf-a9d4-48fc-84e2-473861c92132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b8f4f1a-5077-4def-9024-ca938b323770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7d793e3-73f0-4fca-a8a3-d3664359e8b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a56d3c1e-e249-4c56-90aa-92ee8cb90937",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb89755f-ad79-4d46-87b0-f2fc152b9792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cf6d61a-5c28-4db4-9afb-61ef15dc60ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aec64c3-e9ed-4486-97f1-fd1e3dd6d2ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "68dd57e5-a454-44a9-80ba-01b3253902a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcae4fb1-aedd-43dc-a26c-7f0fda3ab882",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e855fc2-cd59-4a82-8f93-84c506ff44db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98a32b8d-ee7e-4389-b119-2a9fd949a4ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2cc610d-b17b-4a5f-9418-4058f5285bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6252031-de27-4bd2-b847-62c230e608be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075f55b6-822d-4627-8e81-2f71f398127e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7220303a-e997-4bc6-a782-508372410ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bfbdfb9-7b07-4782-a1a1-77ed237f3ba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0796a6e1-c700-407d-8677-ab081eb0f586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "878e5ccd-36c6-4463-bcdb-b8dccd78dabb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d45e3812-cedd-48d8-9c59-af34ba10636c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bee1a52-a6ca-4920-a1f2-83b06e81bd61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92ec6a69-65ff-4956-92a8-7875b242a0e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec6c36a-0466-4d51-937d-5f0fdfdf90af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c46dbba0-0184-4e8c-82f4-a831fc87fa8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab351df0-4baa-4b6b-9863-bf0bfee14ac8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67618a4-0f8c-4f69-b96f-6d63e21dc5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16c38b69-360b-4e45-bf5c-62795595b5cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5964a396-e980-4521-a0b8-1fc5eb39e4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c79ef40f-dd15-4875-a0fb-1be2712ba96b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a43c3b-423e-4217-9b10-1634f91e8633",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee624ac-e914-4092-bd07-a2fe09f3401a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4ab5857f-5b6a-4b94-b34a-1c272e60e5c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f63bbe22-7335-4f05-8def-258d4605714e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5370320d-a7c8-41c0-99d3-e80981b7f65b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "aa826e53-b73c-4115-94b7-1bc2b44a0bed",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6cd22339-7055-496f-aaa8-703031ec5a2b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1797d40-6762-4328-b902-5a51370ae355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "859e59bd-4323-4049-8ab5-2e4a64344d12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f907bf-1a94-465d-89ef-4a8f439d2138",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "bd183aa5-9191-436a-94d3-8d6f1e1e49ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b00e500-42f1-4ce3-9fc6-9b9714da6ffb",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2efb588b-0ea7-4b70-b30f-bbb4f55230a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e3297e0-6c85-4c5d-bb0b-16e894734787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55bc6fba-4890-4d3c-96a4-444545ce0ab0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "2824d420-5a1a-4d61-a43a-40c95783d011"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6d02ac11-cff1-4618-ba40-0d1845222dc0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6e252b2-c354-4832-bb33-c0543dfaa13f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "92b047d4-9447-45d5-a402-3fdb27afd78b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "98f54aa5-d119-4263-aedb-7e330564df62"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dd8cb65d-fa3d-48ca-a874-a1e4c24fddfb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c43b1c08-3948-4598-9ce1-ee8ca7271753"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a4251cb3-076c-471e-9e28-cbca92cce2be",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "303dd486-e565-4005-b995-158ed3b498a1"
                }
              }
            ]
          },
          {
            "id": "dc48c1de-8aa5-4fb0-94f4-f91f5a877000",
            "name": "Positive Testing",
            "item": [
              {
                "id": "db17ce2a-00e7-42bd-be28-0bdbb7640d44",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "924f7313-a93c-4c46-ae1b-7020a1e55475",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1cf37c2a-7a41-4e44-acf2-220a092fadb6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "511133d4-55a5-4304-a178-432fe55f1470",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6b6715d5-69a1-426c-9c0c-f1b2a5f5f183"
                    }
                  }
                ]
              },
              {
                "id": "193d192b-8a7b-45b4-8142-198c1ebffe35",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "62a6fc94-374f-4fe7-ae18-a33626109526",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1fbbf524-60f7-4f05-8950-d6bdfc6f6db1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "397d084b-7b9b-42fe-bf4f-d77bc7c84280",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5a1a51dd-cc20-4171-a0c7-07cbb7e3c4ad"
                    }
                  }
                ]
              },
              {
                "id": "3628a363-ef78-4abb-a71c-8f0f50840a63",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "848b24e9-adff-4667-9691-e7bb36ee7a08",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b8416761-0d9b-4320-8249-88a88d5cfeaf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04e671b3-b5d0-4565-af63-c1ba5ea9b521",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c7a845cb-5fc8-4843-945d-d88ef89c31a2"
                    }
                  }
                ]
              },
              {
                "id": "03380a99-7ddc-4c00-8f3c-3e5909a960a3",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4870e8c4-80d5-4b86-b1d0-cebde9d387f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb351c89-0a5c-4445-a127-2251e7b71831"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2947c5fa-7bd1-4555-abab-7e9218c8d83a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6103e265-0797-441b-80b0-0d20eb2edc0a"
                    }
                  }
                ]
              },
              {
                "id": "54fe1979-3ca9-499a-88a6-ca04b87e6f86",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9f13665-3d94-4bc9-82f7-c7e5687055bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "56f3ab39-c6c7-4d2e-8c3f-fe569647a6dc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8fe30b89-ca69-4396-90cb-60278684169f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ee06e022-9224-4456-aa36-0ae4ece2d8d9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "720d7147-b5e8-4ad0-9b1e-56bef5963bb1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "af3b88b5-5852-4b48-bdd5-d2cf4ed98124"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2c510ea6-d062-4a50-99c1-4299c9cd989c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0944662f-41a7-434a-9d3e-fc861a83d908"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28d39079-3cd3-4383-b3a9-b2108dc32080",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "24e3f977-28fb-4fed-9206-9d373512b1b1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d57d49c8-6e4f-40ce-9f1c-3b049b02ad30",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "699808dc-8c33-4aad-bcbf-4c6ddb15e93a"
            }
          }
        ]
      },
      {
        "id": "f9958d1f-1588-47d1-b455-84c4f660f8fd",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0d74bbaa-5fe8-4417-9b28-d9649d958d03",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4ea32b8a-61e8-4776-8d5f-71b1504f0e68",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f4aaa0cc-f6e8-46f7-b906-3d20e34eac7c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2b4242-c870-4307-843a-13eb39be0163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43a5a912-9746-47d3-8751-3bf33b260754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1201c9bd-09f5-427e-a18d-86f3167e02d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "85b92344-cc87-466c-a522-2c9ef96c6b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6812760-b14b-4f8e-8b1e-d27a5bbc7df8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9b1f17-da1d-4510-87d4-1147f6e7b7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8912504c-2b2e-4a35-8343-61a199beba0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec17378-4d4c-491e-b0b2-d700b24f0bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d6e0035-adbf-42a9-8185-33112058ba73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d195602-94ed-470a-b37b-2354fda1ff54",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da91843-f606-4e5d-8a83-75c67c2276f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87c2de6e-a498-4af6-bd65-1ea7af32d60a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a37482-079c-46fd-9b38-8486c0513453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2b462e5-2c8a-47d1-a8cd-f39a424e0f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f18d43b-b79d-4a7f-948e-b76e279039b2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "660751c6-b917-4381-8f0f-2f6836be5738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f10d07-99eb-4e8e-94a5-938e79769444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ca121e-0a7e-4a5f-a322-4971603b73dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "239d1b38-e77c-47fe-92c5-a57979711c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7141f8-f71d-4f15-8ed7-9d33b4481228",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e0d14b-3654-4f3d-ab98-8cd5d4898760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49c85a92-5493-48f6-9bc7-ab0427801bf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d45a2c3-e55c-45b9-a41e-5d2c7cb8e86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e58948fb-cdb3-4db0-beb7-c11c2519990e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "578f8bca-434e-43ed-8341-e37467213a14",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d37379-e2ec-47c9-a795-9cc2fe741b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6dc9a0e-d9f6-4d0f-980b-acdc2f8d30af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3784fba5-1bb4-4da4-a685-29dcbc1ace61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "62f229e7-c785-4e3f-a039-3500e8eba857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ce000a-29ed-440a-a6c1-40f1036750c2",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eca1536c-03b1-40a3-bf03-d6970ee1898b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bd72717-b874-4beb-869b-2fbcfc92c499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "971b1605-8718-47ab-9e42-f4e1a50d0bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "56b989e2-42d8-43bf-928b-96bfb5443bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "267c28e1-6e62-4bf7-9902-c516333fb2d3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05eb7b7-edb0-4756-8a05-973273d228c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a101e4ec-0fc4-41ea-9381-a9b92cc7259e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8edb3b2-685a-49a1-a3c6-9781a57bdf02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed02f5f5-f6f7-41b9-b5b3-5e247cf03a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c64b9c37-6ddf-4584-a523-4c1c482a580e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be54a8e9-a4b1-49fd-8e2d-26d0fd0cfc7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ccd2c1c-7916-4f6f-850a-544474d4907d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4836ff6b-746d-4c6a-b428-c7628b3e610e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe148e1b-269f-4608-be0b-d38dd5b1ddac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a3c399-35ea-48e0-9f43-1fac608701ef",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5588b113-024c-4dce-9415-b71edf55c244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00bb1a9b-e68d-4305-a3a9-ea0855202af0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f949ec0d-d6de-40ec-8b3c-3ee15dc6229c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c43d5d81-d27d-40b0-be5e-384ec128b20f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "841cd609-b06b-48dc-802c-3f1a3004011a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6cddbbf-e160-41ca-8ffc-9bfc4c9a268a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32714591-dc3e-4a84-8909-29a0152d9ebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "397b8d43-92b9-4d91-89d2-3573fd233761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e6049e-902c-4d57-9137-6c993d9eab91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dfe1824-df39-4eeb-a59b-0baece17dbf5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec899a2a-f268-4cef-961c-01dd17d8fb76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54d30276-95dd-4c39-af1d-8908908d38f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7f9dac-63a1-49d6-8e9a-be03469d3baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b054047f-dd48-46f5-9447-a803476eec27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9989f3e-0d23-4b76-9da0-67c8757e60c8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "521f3951-b1c1-4934-89d5-42f82bb97608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46414b35-757c-4f51-9bb0-03dad52d02e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc99b01-64a6-4738-951b-132c7a1c14c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b421fd35-3b2c-41a8-b4b0-4e66658b2dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3085c59-afc9-4634-b650-1367d6faafa0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "255d4064-f645-4690-8c67-53a0179d3dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "548837ca-f3c6-44be-a046-259a112d0968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8bb99c-fb16-44c2-a855-2f05f2ff8b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cea60d2-4f50-4445-a595-8832a8425839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b140dd4a-7f5a-481e-a6e1-474c681b6c2a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e388178-8214-4a08-802e-328b42e5394e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d96c97f5-8033-4c3f-a2ba-5b69f6e36bfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376f09b0-c2d3-4a7c-9b06-5caa48be1c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2098550c-0faa-4232-86b1-6be6becc7046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa636242-6ef6-4a32-92ad-28a2fd5a0132",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a12e36c-7387-44be-90df-9392d9f88fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7699efc3-79cd-43f6-a1dd-87499da8edac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f482da97-20ca-4924-84cb-8ead432c323d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e1ebb86-9443-4214-9685-b893b5150d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94649461-9cbd-4e1b-a06e-6ee37c48bc4b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16805f23-8cc2-4b6a-b490-90edeb10dd4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca6e44ec-5e07-4ba1-82d8-17211737dce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2dba4bd-a581-4148-b689-825c8dd76271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8dea730-f5a2-4443-acb7-95539c2dc80f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af2f989-ec89-47e7-bbbd-8b5b777a1fbc",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6343d1-2977-46e8-b390-1e86b2610e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fb08bf5-f720-4383-9c9e-5bc89d96020b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce59ec7-9236-4490-bc81-c711040ccdba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b055c13c-fdfc-43de-a1b9-047fc5e232ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb7dee63-9eb2-4ae4-bf00-a8eb94fc55f0",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40175b2a-b2a0-45ef-837a-e40a962a87ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53881d8b-4fae-4146-93e7-f0126b07e00a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "291a36d5-319d-40fc-85cb-3b50ea341998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18e8af51-052a-42c7-8057-611cce6c0186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce6ebcb-3e6f-4b27-8814-a7a9ca8eb226",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "571270df-cb9e-46dc-b5f2-a6c48a832997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "438a8cc5-bdeb-403e-8c7e-3c2f1a2d96a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f45a4ab-9487-4a12-b310-9db88a285d26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04aaf2bd-31c1-44fc-a826-4f03d3909091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676bffcf-df02-4ee4-8084-411cb9c782ae",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b05cb08-412f-4c73-ba07-48546ebc68f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b56d62f-07b4-4422-bb2a-d52f9777cad9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7d3010-1d99-4c5f-bbd6-365016198c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a807bc58-c7a1-4994-b39f-77253b592d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac5a6e4f-bc14-440c-a19d-150b47b26a73",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a22e1db-c376-499e-97ff-0b1e89f53b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af8e4a56-ea54-4123-8eef-cd979028e2a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f02dc6-3b23-4d9f-ab74-f67c18e95e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbce1a07-a73e-4bad-924b-87bd6ecde76d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ed6ab0-c7a8-4496-baf7-5f7053fb5f64",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab53ed9-4c5e-4d04-892c-84c6c3600d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd03a393-afff-40c1-88e7-66a5657e3199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46057d75-a592-47b0-828d-bc788a3c18f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8401cbd-27aa-43ab-adc9-e1bfc5cc69da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd480d1b-8a84-4179-9af0-77f71a3c5cd9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da139c5a-f29e-4942-8c37-cb72783d9d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80419e48-8123-46fc-89a6-cc3761811d5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f7f2c11-e4d7-486d-9424-7d3e4c939860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b63a2d9-718e-476f-a6e4-8c20f2fca2b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27671224-71fb-48a4-b8db-15df7da8bc11",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6824da-9a68-4f97-9d1f-a6180b585a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3b2c6de-52ac-4392-bd8d-2527927d8153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50e15a4-95e9-47bc-b54d-49dbbc0a7e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49047c4d-09c9-4b5f-b2cf-20e35871347d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6362b08e-d337-45f5-b73f-6090d27c33c9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be468faa-b31b-46d5-82e4-6c25eb7a3bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb97098c-68ef-4eeb-9fb2-4fe4b3b89864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d8e45d-372c-497a-8154-95366c37d109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa92edd1-c2fc-4c01-8df6-c46913db123f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab5a319-a554-465f-a3aa-ea8bd6bd7d93",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab6e6263-46f2-44e7-b078-33548b7615cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "966199cd-0549-4054-8ac9-7fa650d43298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8346bee4-2427-4207-bfa7-c9e4db6997fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "222ec335-7f66-47d6-9f83-8941da198e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6542713f-ccac-4661-aea7-afc7423cdd36",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b40043-4c3f-477f-8b65-6f3472fccfb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "008e98c3-ec3b-4b77-ac5f-5adedfc6822d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd88ca7-bd85-44e4-9af0-395b17bd54dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e811f6f-3b9c-460d-aeb9-10a8bac8522a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd1e61d-2e8a-4423-ad77-ccf3c31288f6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0622a6c-6701-410c-b83d-4f3051068110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dddc26f-80ff-443d-86f3-db37fd264a00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7229919-78f2-4c9c-afd7-e06f09551483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c69b1da-11cf-46ab-a5d2-ab8abfcdb00c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd534766-01dd-4aa6-8dc0-1e0730ca949a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bdce2e9-cbb1-4659-a26f-cdbf26ef3b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "923332a2-ded8-4ccc-a7a6-6068db1d1a1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e7c84d-1d2d-4f9f-a61d-ef8f3ca2c237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d909f61-07b5-4652-94df-92a1a92ca81a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b9b4c0a-ebae-4a12-a6bf-cee089a011e8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8a46b9-697d-4c2d-9965-8eefcb813c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "487377cd-7540-464e-a0ac-72328f1af6e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689381e5-35f0-4e60-87c6-a992a1d0bf77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bdb6dd9-f216-48fc-bb2b-cb802ea3a9fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2da1f7f-dd40-406e-83f9-9c690ad1e972",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f19ed5-9b7d-4c8a-8811-b2523edf8f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "021a71db-1405-4421-8ba5-351ea2b93261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "722d53dc-10c9-4309-98da-0fcc5c8f2bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d624e6c-470b-4ec6-bdd3-9cb99653a6e2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "54f95454-4017-4645-932f-fbd2730dfd49",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4c5c425a-5571-4924-9c2b-edfa64e433db",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83743f2c-cc0e-44e9-838d-8676cf2ae65b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebea102c-19da-4c6a-bb54-6509103368f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a9a65f1-0d10-4de2-a248-b68dd808c459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a94720ab-ded3-481c-928e-9da05bb6cd4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625a5841-2dd8-4960-b472-1cda5436d64a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eedf5d3-fa8f-46c7-b4ba-2b7a5e458127",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "440eda87-befd-4d87-9979-383658f1ea8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ed7426-7433-4902-a5f8-e37b49fdcebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a17cf73-6006-4ff3-9bf1-284ab8a4c410"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "416a74b8-3469-46aa-8565-092f78816a22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5732102-5e06-4429-a0e7-87a380f8214a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "13e795fa-186d-446c-869f-b8d6666061b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27ef7604-b6a5-466e-9f74-0218af28aef1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "487d5399-8f31-409a-8957-3bf04f5faf3f",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "37d12b27-4eaf-42b9-a0df-7a20251e12db"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "abc31880-9317-4b08-9968-70257a628330",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "50312f16-0b6a-4e8b-9983-04cc1878742e"
            }
          }
        ]
      },
      {
        "id": "4ffa9e5b-3d14-42ec-a322-c6f0533179b7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "22d78f0f-b6e1-444b-adaa-da573522c105",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9352ec0e-bf68-4d5a-8210-767003ec0dde",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "df338e08-9e90-4053-b176-d3c0841a27c3",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7df3d83-7cee-4362-b62c-5671be2c6d5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5306d030-554e-4c9f-91b7-930653332683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed05e024-bf40-4501-8c12-9c9a678385e6",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bef822b-997c-4fab-9669-bb4c9d773b2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf13a794-6a23-4276-8810-4707b814cabf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c8e511b-3e46-4104-85ec-4df3b90d215c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "417cda3e-e7d7-432e-84d9-66b800fe81a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0753580c-0634-4ce5-bf5e-afd8b290f404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b85d11f6-f516-4ddb-ad36-78397f022d26",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "446a4b32-3d18-4977-b66c-2ded8576ef3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8992b6d3-1bd5-4550-9d08-bee7a6a4d085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf84bdc-fa82-4a24-9308-30edb4b846e3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9cc2ce7-0c77-4680-8b4e-354a2e9cecce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b90b8008-485a-4252-9253-20ac8f21dc4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e20532e-2f77-484d-ba55-a95be7c3731d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c74d83cb-cf33-41d7-a4c0-3495c42a2208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdf1fd16-1ef2-4b9e-9a16-13cebe701886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5517acce-ed9d-4892-83de-a94edf29e18d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857bea80-6f32-4553-b6d0-9098d006ba00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a24a8c26-d6bd-4400-9e55-9ec4c7d45658"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb244a2-e2f1-4cdd-8405-86c38cb72a98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a85f0f7-0939-4fc2-8094-c24f3f5ffad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34c4869-afe3-42be-a1f9-40f16cb81d41",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f526c7-9f30-4728-91f6-3e9db3e6b1a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70451c26-77b9-4e46-a6ef-5896eabee152"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4d31c3-a315-4589-adea-56b0422da3b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38ebecd0-5c17-4d3d-af26-d78c114dd454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f30e6a-75e1-4c56-9b09-0d6fb1d929b4",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5809b23-8d5c-46c8-8b19-732818c9b487",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e92b8a21-259a-4e59-a06f-1a50cc6cbde7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d337b88-4cda-4703-b0a0-5736752f728f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff0735cd-0131-4bb6-8e49-bf3d445200a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43da24e0-6cbb-4645-ad45-8ae3bd1f37f4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf91a8f6-9cc7-47c9-9fdb-bb262fb6760b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c663989d-5cbc-47ca-b014-b927a0dc5784"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb8fc9e-9be5-433a-b37f-b7a9d9b24e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d795edd-ff59-4aa1-95c8-1cde1bae2262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81063f61-7813-49d3-b9bd-2bd7465ceaf0",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f80222a-40ff-4e17-9721-abd62ca5a315",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb56dc98-1966-46b8-a68f-9d7ba2303429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59d64a9-669a-4659-bd00-1ebfddc5eaab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a615d683-ad06-4bc3-b508-8459ea08515c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fedb7c6-fe41-473a-be9a-ec1440748546",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbe612a-219b-4c61-a393-99de7569101b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dbc8325-c361-4c72-b491-8a845f56fbdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c286e4-e50c-4d29-8bd6-b1c48c79df5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0113338-813c-4040-8914-d7beacdba565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a82c7d67-a7c9-4195-9659-ec99db14504c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "667e526b-e2a9-46f7-b976-e4ec734782a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8c61b45-3706-48e2-a2e1-7fd40a041c1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "021b0c8b-197e-4c26-aac0-acd28e19dea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a8253a0-6095-4b5b-bdc2-fa1a9439350a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd567ae5-31bd-49ce-babb-dc0ef9ef124f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ea1989-b426-41e8-a6f5-b18895f1c746",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bd945c3-9eba-4285-b86b-0ed8bf43ab51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "109e8db1-19a2-4fe8-82a1-f2e31c590226",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb0d79a6-b43b-4822-b63c-070fb859a298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfcb1707-cfd4-4a66-885c-02836cc02eeb",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1057ead-bf1c-4c75-99f5-b38a1a4e8d68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0958561-fb51-4ec6-bdf2-d6afe0d8945d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91bcb2ef-c077-4aa0-b4f3-707876b2cbb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf21822b-fd80-4750-8826-5719b57fec9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b494e997-33fc-4e52-adba-b246ed09200f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1275dc-50e0-4b0b-afe5-1216c73a7af9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d4dbd2c-cf65-4aba-b57b-d4c28ca5d5dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "489fd0e1-d2e2-4605-8ea8-1ed47df6a163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "654de258-25e4-4918-874a-b56f5fe0d5af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5701c68-9a9a-455d-9c61-de38de4b40a8",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48764f55-635a-4bdd-80ca-feae4c284abf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d80434f-a4e8-41ab-8bf0-bf7f715c4c01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d86a02-c66b-45a4-836f-6ec713568b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc6ca0f7-dc61-4882-9200-6e4564ee0cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bbba7af-4597-4bd9-aeec-2328d27b3211",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2862198-5bd8-41d2-9ac3-76eb6547b35b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb593932-ae73-4f39-a685-c41b847a9213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc423e69-38c5-4f7d-b44a-436d4b5c8120",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6714219d-2ea6-4c79-80b4-506f37efd058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0674a6ef-16c4-4c8d-b88d-64b8de3f0e4c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa4fd95-b754-45b4-8a44-3c546203188d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d36e1974-9f9c-43e3-9159-5b8cede06f11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9806d4c5-186a-49fd-afc5-2b9b811d8d26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fd5e5a9-1ea6-4230-a68e-ee26493f5601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bbb3dd6-7176-4547-9de9-80061c2b1a66",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49af891-63f0-45b1-bba6-27e611f56d5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c738b35-4b7a-4139-9e36-374adbcfde82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e39868-7e98-4516-902c-d6603971a8fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42adb57e-c35b-49ab-a116-58091dcd8aa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9290b363-2ce2-403f-9b67-4c7fd7928404",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bb836b6-0431-4ba5-b8cd-f8c12880a5e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a0adcee-d23f-4963-9239-24202bf39022"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2999549f-189c-469c-bf7d-0ffc9cbbf674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cda9e15-8e69-485e-8026-5d521b30cf4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d1fc937-5b7c-439c-b6cc-00e55102c4ac",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d0d079-2b9d-447a-b03f-6a3c3075e12f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1b4cdb0-cd98-4693-ac07-b71c8fbc5310"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64099900-88c6-4c5e-95bf-d54e20a6d269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5126277-5410-4bfa-9c83-f30d78bf7e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6cee9c-8ab9-4b77-8896-88b193ce48fc",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adbc223c-b8f8-49b3-8470-aeb53dced309",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbe680fa-bf2d-46b5-a7fa-e33de5b66c9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f993c4-e390-4f91-83a3-8d2d4abfe146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569ca159-68f5-4b1b-a892-a39e34d1e8ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ed13a6-063c-4730-80b5-080091e975b4",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "094e757d-1428-4eaa-b044-6697170c8822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03fc1b20-9bf9-4708-a223-4aa184c0831e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc1fe49-625b-4ca1-9a29-68f8aa8e04eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "975996e1-2c9f-4f7b-83cb-80c13d85961e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8269a8-674e-45ce-8b6d-4a9d40357cc1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2911c8d0-4be9-4a17-9d42-9b7a3b7b5039",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26af8ffb-6d35-43ed-bf4a-4c0097a7cd63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32635a9-d2a9-46e8-aaef-bb020046b8ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f49f44f4-1c52-43bb-bb4e-12982daf1344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93479c87-5df3-4770-bebc-4af1d91f1e1d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "136e4f65-c0fd-49c5-be3d-f16c3d8f1fbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12a449ac-67b8-4948-9b1b-1e27b589c09e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a07cbb5-a435-46d8-9a30-4c49c73cbdde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36ba60e3-077b-413f-8f1e-183d6638ad9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2117aee9-23c0-4d49-979c-a8374eda3c59",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea10bcf-e889-4863-a417-89d74b044b83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eef502c-77cc-4a26-a5e7-4db9fab232de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e25605e-0e5d-4394-963a-8f9cfb0e6280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfa27558-d9c1-45ec-b86e-9ca7e2ba4f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44418c2d-d307-499c-82dc-0b1cf7706033",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cadf907e-1db2-4cd6-b963-fce655b9209e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0066c57d-2ec6-48b3-95e6-f91d18e60931"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2a2412-772d-4a8e-b024-947b4870e467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68d02592-6cd8-446c-818b-e3074e09f60e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd1a2ef-d237-4904-9756-c3ecb43ee48b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ce816e-bac7-4598-9708-764d25718db5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fefce740-e75b-4354-8d26-5e5a379773e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "625349ab-44e1-4493-8b4e-8fbb4bb1cec4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18b2892d-99ab-43a7-8198-56b6d1c40c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a97eb53-4bce-4583-8b24-553d91824c3f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ac3c46-8552-4729-a9ff-09e9789cb988",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c34d6ec4-4dcc-4156-aa74-c490387f5f73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f67a3c4-6afa-4b2d-92fb-d2d620c979e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7575b599-b915-4263-aea2-7065d7bd65d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d654fb8b-6426-4f27-bc90-557b11cc9488",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e98aed-069c-4ad1-955d-ef768a76fcc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "314d9443-1624-4ced-846f-ef11d1378402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "659f298c-7daf-4897-9354-affe19149c55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd65ce63-b326-4e73-9595-f34e71907ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98cf7279-8aae-415e-9226-94ff9b340515",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29c03560-3fa5-445c-a7c3-b4ae03990d83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "136184bb-946e-47e1-b6a9-5a09c595d0bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5025bb84-d17a-4f0a-8f25-0b0096c7baf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddbaabf7-29d7-4e17-ac93-e30d7ce6f37f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21336b78-5315-489b-b32e-46a11e22a0bf",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8144ccc4-1bcf-4ca0-ae10-2e34d7000bb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f59a2ab0-e770-489d-ad0c-9e0505c87523"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b10e4d8-a218-443b-80ef-b3cf5547ea1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69a883a4-fc38-4123-a36c-04f5adfa2736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8982e658-8aa5-4ecd-8ab8-295cd197dfaf",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e080a6c2-6ba9-4b95-8831-b3e5589185f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8eeac7e8-59c9-46da-bed7-f72233d9f757"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f11a5b0e-b366-4c4e-94f8-db8d928e2f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfba3df9-07d9-473b-aba7-193b217087e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "924016bd-bc7c-4758-a0dc-7438ad3510e6",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84edd664-cd9d-424d-8112-2b6e741907d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d187d9ed-3928-4969-8310-60f71ffe91c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "788ec442-264b-4974-b0c5-7e6c3cff7265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d88c168d-9bf7-4c2f-a177-2068fdf5f229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b06fa7-3979-41d2-8659-deb0b52545ea",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceaf2d29-d07e-405f-93be-af9a6953796c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2882e6b-f229-48bf-97bb-167b39a2c5ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38dc5ada-2588-43f5-86f4-d62856e3c0d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a3b225d-8e73-4b90-9ea4-3808f531de41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41eb09cb-1f55-4c9a-b4cb-6dbd0d5dc0ff",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1fea1cb-6cb1-45bb-82cc-fbfc6e5189c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6418259-35c6-4468-8fe3-4dffc3945186"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a2f66a4-ce50-487b-885d-06c1379dfa70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a63edac-050a-4690-9e17-7e867841899e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "686f88a7-1a3a-4d6a-9e82-9973a4e45793",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ab20aa-6ea0-4215-aac7-381fad356386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8241f21e-6008-4002-8db5-cc7edd73beed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e2210c-c8d1-413f-9bc0-21d96869f2b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd2e4554-d2aa-4547-8f4c-779096ae7f4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a868e45e-09d5-4299-a164-17e1a408a834",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb579c4-8073-4ccd-873e-8f6f24a0dca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f77f1f8-1f65-4a5f-a203-2eafb9f55dca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f9f8f81-edba-44ba-a4af-6b111aabc47b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fef83086-f165-412f-9579-305fae5176b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb85f3c-53bd-4262-9664-fd0f2647fb89",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fbbed5a-bd11-4ad0-8ac3-faf9976e0da7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac9119b9-c031-4e2b-8a98-8523092682bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd91816-5bda-4b3d-8b70-d525f0a38932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99f2a785-627e-4728-aa82-0a9c563cd53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c3c69a-27d4-4235-9d18-0f4a05d638d3",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1320d84f-f23d-49e6-ba5e-0d0dce014fc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15168bd7-39bb-4447-bcd8-1f14201b8f61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88dbdcc7-cea1-4519-a78a-e4b1eb81d7ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18908cca-1020-4b84-9585-424ab478c5eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c15290-0218-44fe-a43c-801175ab6e85",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995abb62-c51b-4100-888a-bbccad8aac19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "415ca97a-4c45-4dc4-93e5-17f8018342ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2529428-b3e1-4815-a664-8c12ab7c048b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7e22aba-301a-4c5a-991d-edc9c6fdaac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4266d80-a449-4687-bac8-c72e78eac6a0",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec50fd55-59e0-4c03-af42-b0188667aaa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6ac5e09-a183-4ebf-a6ac-68ded5bdb981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c97daa47-db1a-414a-a78b-cc731dfdcd68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af631639-8905-4efa-9b1b-4fcc8170b055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bfa989b-18ff-476d-9034-cd0b24cb0e44",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab519e0-b28f-4ea3-bfda-984fedcaa288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e356d84-ef46-4708-9908-e64d3f2c318d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf46e6d3-a078-4e14-88ed-520fa3989d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ed39a48-934d-47c7-be5e-6c33150a35ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2fe7f48-418d-4906-98fd-75aa71dfa28f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abb3c4b6-6991-47af-b482-b8bb452733f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca30da9b-703b-4f97-9cd2-772ae8ef8017"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d0515f-2448-4784-b9b2-ecba07df485b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "291c713e-8e77-414e-86bd-e6551a155281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24540b9d-ac3f-48be-8647-fcf61cdca1d5",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c289f86-ef6c-4f26-ad3f-6748ec288118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fa34019-74e3-40d4-9840-4e80608c8927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df56c7ac-208d-4b40-8541-fb3c04568c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27ee61c2-9620-477f-9b77-4c164667dad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b50cfef2-7263-4d3a-9673-c638bfb6d9b9",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232859cc-33ab-4926-bd5e-fed1048f8f3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b29c9c7-2e93-4f5c-a360-00943b0a7690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b23b086-c006-4694-8a25-f2e39ae10a66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0826c376-a988-423e-821e-70c104abd80b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e99a0d9-b66d-47c6-92fd-75945e557f2b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34dc097b-d168-460f-8954-07aa163ea8dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65e1d70f-7446-46c8-8172-5bf0d89a99f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7744535-5577-48c7-8465-2b1a7543c87e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a631dcfb-c67e-44a1-ae2c-7bec1610e113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f440590-aa38-4172-ba0b-12aba5817488",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb6b4afd-a5d7-4569-985d-adbb16790895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01f9d5cd-c78b-479a-9454-2bab399dfb09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdccfc51-56c6-4302-b190-2c84d4f6eb2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95b6be44-62f9-42d0-84be-9a2d528b54ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9733a1-787c-477c-bfbf-e91c5a5f4622",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bda3645-3583-4d88-845f-20024a3e7872",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98c0715e-bb89-4877-9178-a8cd1e50723c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6435ade0-c67f-4edb-be53-a137d8b36e47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5bbe915-e5c2-4259-996c-0214b2bc2f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52e698b3-6188-42e7-ad39-437c55b19f61",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35571631-c080-4ca5-9681-885dc3d21d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7185cef0-3659-4f04-9d50-d6d032b393d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b6a79bf-e2ec-4db2-8f2e-2f773b8a22d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd5b481e-0410-43e7-b57d-fcdd63f56f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f31010-c4cb-4c84-82ae-3685621e2ee3",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07fdf86d-c5ee-417f-83fe-37221073dac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "614a393e-2140-4362-80aa-26d33a85dff0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2765ffca-b2a0-4837-85b0-4c04c475d18b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8915b75d-abbc-40a2-b5a4-97f230e5532c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b798b0-1e56-4699-8bab-120cd414f1c5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04afe6f-6af2-4d67-b848-3f89c4e90bc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98ea3ba2-34e0-4039-afb8-924cc44674e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e881562f-537f-4ec6-86d3-01a4cab11729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5ce96a3-9e6c-49f1-9fc5-7accfa54b4dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95790074-c833-401f-a9ce-314a4c4e1696",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac177227-d479-44ab-9371-39c6a1e5d7cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db2ca3ae-66a9-4989-9d24-7c22aafb6c75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c23274-e3e9-4e8f-aa45-829ca3aaf139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dc2460b-5254-4096-bf40-5fdfb2a27b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c29b8b53-d3d3-44d0-a3f1-522d2ff3510f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "505de518-4b23-4f51-bfe1-7fbaf3f7092d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "178adb5e-6050-4548-bb01-ad21c2edf0ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "124e2bce-03fa-4057-9f1f-0047134fe997",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ca1a60a-7bac-4075-97b2-e6aa92628422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0b614d2-a2ee-41ae-ba00-008ac4c1dc01",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a20548-7f83-45e5-a6c1-823f7b454b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "567250d4-cbab-4efb-b8ae-ed9e8d4775c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca3bf88-b62c-4144-8246-0709622ea021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81fb418d-b2d0-4f24-8337-ea69a34815a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb236d2-0738-41fb-8a22-5397b5ad5017",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ee1088-8ac2-4940-aa71-98480ce40cbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "761b26de-c5b0-4a64-b58a-950cee8dda4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e642ac-0590-4744-b54d-5fb6c3fb245a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8be6dd3-8fc7-48ae-92f5-db041feba58a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "810716ea-4ba5-4ec2-b464-a362f9b4d52c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b9daffd-5bff-4dc5-84dc-ed0e84ce32ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "670c818e-6b89-48ac-88bb-0ca5b53b203b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c11659-e9bc-4109-ad38-51435b8a8dcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fbf0a71-4d55-43da-9614-24b210ceffdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b148970-23ca-4896-8c5b-d77d4c46d10c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea57e486-b7c8-476c-941f-12698b3d3a0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d8d8fa7-ab02-435c-ac82-2a246e5eb6ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0868e30-0078-4162-9bb7-3fcaccd9d375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14866576-a2af-4633-9b25-ea7d774715b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "887c55c9-2da2-43fd-bc16-8ae0d4253519",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b5b6a7c-10c0-4fc2-8b2d-af913511f0af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cd89368-bbe9-47a1-9b05-cf2e5bf4d09b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e175cc0d-c08d-42c6-bd93-6627c8a63060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fbf6644-31e4-43fe-9842-dd584ef05710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a745905d-2d20-49da-a9e1-6e784ff781ea",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f32648-75cb-4c2b-9e25-402048c45a36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad456805-803f-483e-9d52-0bc52a887e9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b73550-17ad-4ab3-a77a-f72854e73902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87121eba-b0d5-4ff7-9a2e-f4cadb7108ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "607a752d-57b0-4be3-8710-6496cd8c72a3",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62aac902-0901-4a92-8a6e-f2f382c2c27e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3685bfe8-9819-49b3-b431-3d3fa5df52b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "542b12dc-9ed8-4fa6-ab03-310c03da897d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69cf7d24-90a3-4137-aa8f-d295e4f2d24c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3584a1e7-2f74-4c3c-b4f4-4c14376a608c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb013ae-5b31-4648-98fa-1d349bd806e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1a16c1a-c890-4688-9ce4-9d230748236e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74361e53-9c4a-49f1-970c-29e881769fe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3227d25-2b96-4d92-a082-bbc78dc014dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d852ac7b-9693-44fd-97ab-e48bc5b4dbb2",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94442c9-2d07-4cc1-91e9-4d3610b7e3ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bf02736-79bf-4440-8138-c11779daae2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7259937e-a31f-43f5-85b2-74ed477d023b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ca9d48e-6ee2-40d9-8c1c-7f8b26c1f57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05743217-4143-4c76-bbc8-48ee0c777b7c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d906634f-9ba7-461d-bcc6-b2b467137364",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "269b9db0-8a9e-45bc-a88b-e51d666688e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "567ffb89-e7cd-4f69-948a-096d0bfd1982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b108ff7-2b2b-4812-8e2b-c261aee40f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52899ce3-aa9b-4d25-be24-ffc00ab19cae",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e99eee3d-f0ce-4814-a033-2e89304f6deb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebabd331-2f1d-4ee1-8e80-be5566b1e5aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37fe735d-55bb-4778-b553-dd1c977b0e5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b67dd57-ce6e-4688-a967-816bf5568e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64820cb4-7f51-4755-b37e-e697853523c5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd68093d-ffd2-4d90-8f72-2ce79abce4f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ac967e3-0c54-4e8a-9a2e-8d97e84677aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96abf05-867e-40a9-a962-919a4365210b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5111759f-96e5-4ce3-9290-c466401988d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "572d8469-6de2-4e00-8202-7567098524e7",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a89922a-bd10-441a-b386-9e74b06827cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd22eb82-cf63-43b4-8c3d-e48f9e46d0d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "937a144f-b797-4992-83bd-ddecad8def2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5d736e0-4297-41bd-a345-350dd4b2ebdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984d3bc0-2644-45ab-ac50-212293c32c3d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a456ad-eff8-4f75-8710-c1a302d63922",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01d79433-b83a-43de-94cb-ee20e4a45d04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed92514-a677-4adf-b89c-409f0d57b8b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3494f00a-d43c-48b4-bea2-a9b9d4af83ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8cfa705-9adf-47a8-ab7d-b2ad9bbdfcfb",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3109da1-28f8-4d2f-8f56-87595576a6fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "198b06cd-0938-4efb-a8b0-1f537f243ebd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59edab10-501c-45ae-ac8a-fc529f952c48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9df311b-6437-47bb-8a82-386fede2fec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47901103-2f35-4385-ab99-2654f8ee75cf",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79fa14f3-8fc4-45e6-a262-81d672aba508",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0834dd3c-d396-4c92-bd1c-bc1d50504483"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13cb0dda-b818-4587-9e56-76eb3ae8c518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dd9075e-111f-47ba-9017-3f02ba6d3f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c96a0fd-2610-44f8-8581-38215615ae8e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5e84f5-4389-4a9a-a08e-060ee60416c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85be639c-f066-430f-832d-64477ab7eae9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33026c5-f9fc-4887-93d8-134236ddc932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cbb024b-a040-47d6-9f3b-72ab428478ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9568d141-3dbe-4939-bdd6-0f70bbcc09af",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6efe35b4-9f00-4115-931f-0c7a76668cc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "758f913d-4827-4f0d-97e7-d8522607a7b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50411ad-91f2-4044-9fae-201ca46111c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b1f0754-f3d1-48d6-9997-9e8ae7eff717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2c34566-8d91-4951-bf94-e9eca6802633",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16dcae32-4bae-49f8-8c74-3dcd9c2337a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c1b8164-2c08-409b-a5ea-7835d43d7f5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4974155-2ca6-468c-a097-a81581e548a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "535d2cdb-7fce-4b3a-97f5-325be78b4787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00f08d2c-8cf8-4774-b175-31ab0609ba2c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be804482-7cd8-48b8-b2e7-8e32e1aae180",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ab69e93-cdb8-47bc-ae17-18309247e918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f82958-91d5-4dd3-867a-476e41849f86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fa73384-2bf7-4bac-8bcb-b90ee973138a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23713e3f-4a7f-4ec1-8c1c-026c42ea6165",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1059582f-57b8-4f7d-98d8-aded7c9d0c16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caab0c6b-a081-47f6-a3c8-c30ad7ad4526"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "609aac94-a8c1-4db4-a6e4-a6f132ee6a07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46199a16-24cd-415c-b8df-d219d3d6cb7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80910974-c9b3-4143-a886-6d3f8fc6e7c6",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd3cba3-531a-4ca0-8d33-e50b58d217e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ba14cea-fc52-4858-852c-fc95efbd8584"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4780accc-c083-43ea-a068-e526841346d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d255e115-e9cd-48ec-bbb5-6efceb742c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb85daf-9ba1-4415-90ef-9118d4473f66",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c2ce671-c578-4720-8ac6-ee2af0580f43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6deef3f5-c162-4ec6-b57c-32dce4e2865d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c1c6dd0-db28-4e24-9365-ad6f1e2e1b5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53e165e7-925d-4a19-aab7-d81d64de20a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3d5403-e1a1-4008-b783-713e23bbe79d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49278b94-1280-44d5-85f1-95719a0ed09e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c53ddcff-d0c3-4cad-b536-84e252f548a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82574c8-b7f5-4c59-b3fb-0f1182666633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b728dc91-9a40-435a-95da-167b0b5de2df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8abf08-9351-4f0f-b50f-1e987410c6ad",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60ace99-d277-44f4-beaf-196f1fe07d3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36d66a4d-ab8f-40be-a226-aecacf7808e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5988ed24-db47-4cc4-87e8-3233535e9f3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e99957-ba9a-4f8b-9749-00cab3aaffca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f2ea5e-0cec-47cf-ab15-b8ba94af5142",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d8a805-4da6-4891-823d-dff94d26d96a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd4c7eab-7670-4df9-b79d-80972b2426cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c370d260-b570-44fc-bc71-a7d8d21f83e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48b516d7-d2e5-453b-95ef-68f260b2c380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69b5310-db0a-4e09-8b9c-63d890b8b11e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511f435f-4389-45dd-8910-12a7ad9484ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d38f28b-d889-41c4-9905-aad35e1a3681"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da2efb92-34ae-4172-8130-bcc8f8375128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a60c2536-6d94-4161-8262-22dea936619f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5705548-fe86-4205-b8fa-3b5d742eb4f9",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97fa2dac-9346-481a-a587-ac90623164e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c371841-6196-45f3-8848-e7cc65f7ba40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b3c098-bc98-4433-8950-8bc636baaaa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fd6e6ba-b749-483a-a652-be3c829fa9fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1a440b-8ef3-4fdf-a09d-20114d23b0fe",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e067086c-199f-41ed-9128-1159744a894d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5709aa0-23d8-4cec-844b-46f69cdbfa07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b69b312-f282-4bf7-be13-ec5878ffc178",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "826ae7b1-1e68-4047-b6ba-9a2573b0e390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9c0ced-97d7-41b3-97d1-d25486d0f0ee",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4716eec-f399-4a25-a055-a4acac52916c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da202dcf-c777-47fd-8554-e18db1097060"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa39b839-c5d1-43d7-b433-4877bf2499cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bbd2273-374d-4abf-800b-556d9654c0d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511ae90e-0730-4d12-8b63-43f1a98f79af",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d45aa61-51e4-4f8f-b192-b2c5e587c9a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed0a9c18-d8d6-4283-8b26-11ae019959e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f329ad-3ef8-467b-9d1f-53312249a157",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d5d839b-315c-4abd-8510-76c5ba4fcf9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "037597ae-c14f-44fd-97dc-665e8b26a325",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0041d7-a1ae-431b-98b7-ae02529455e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ec428e2-ca43-47d2-a9cd-0c0a56e5fca5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f0fe2c-9cad-47f2-84fd-8e583e3f28f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9d848a4-9854-46a0-adc4-4840f56123b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40060050-c06a-4af8-bc4b-15e33f2fc17f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67095248-b89f-4a9e-add7-765084fc0e14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78428531-7e29-4835-a421-27571946e384"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "371c21bf-b5be-43fb-b87f-7379ea917b34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfea8311-87e5-46e6-b1fe-2f41197abcd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc6e307a-4d66-4572-91b1-6039df521fbb",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319ccfc1-7cb2-464c-b791-803d529da01a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c82729c3-6573-43c8-aaa4-acdeaddd35db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39937cc4-132f-4dea-8306-d891783010b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87893585-bc06-44f6-b081-204d807c3729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9eee512-7709-4d16-9e7a-984a025b5e95",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94f8b500-8e15-4f8e-9023-6f3ba75220b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a676cc5f-a4d7-44e4-851b-653610216215"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "042a99c6-6134-4bd0-84b3-541b7fa02e22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bda705d-b1bd-42d4-99dd-9d6b5062844e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d50f6798-cb11-4435-8319-396a680fa582",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e31471-e0ef-43b8-a6bb-e6113b66a7a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03429534-3099-4096-a91b-bc95e1ee73ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "581e6390-de4d-4296-a706-a8a5003e5547",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f0bf0d4-4ee8-44cb-b116-456624c1572f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faf854bd-ca28-4eae-84bc-83a901da0819",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ba5335-6d8a-496b-85f8-578794d64c20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab71a541-9481-48bc-a7a6-2c3c72792ccd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd81e516-a9b8-43f1-8b34-da4fc91d9195",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "743eecb4-5784-4bea-bfa8-23bde6fd6171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab1d6a3-1be7-4dea-b0a0-0ada2d47ae22",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d21289e-665d-40d0-b61a-a6995ef5cb54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b425570-e3e1-4a5f-92d3-179059b49f2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e0ab41-289b-4fe5-a101-f259e35613c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa0a0996-d662-48f4-8809-e358c1e92f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae23d876-844d-4627-90be-931c0b30fdf4",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "441303dd-1252-4dee-a81b-da3c1fa9be5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6642835f-6985-4b0d-96e7-a06aa3f9d290"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e527724d-34cd-4509-973a-71abf7954495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8525ef8f-9028-4e28-8351-41939912a852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b589b3f-4c6d-4143-beb6-c57d33c1e471",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaed1c08-6835-4ebf-9c05-9f581cdda7b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5ccb90e-281c-4335-b961-4995abcee80c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d399460-f120-467d-b34e-9e402bd53d8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85871952-edb2-470b-8a31-63db46fb873b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6be7ec0-f5dd-4508-b4c7-6627bac24cae",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2423b081-9f05-4e29-9c10-7dad42ca5b44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "556efbda-e913-4582-84d5-0599071f5e3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1287e90e-ca99-4233-9b41-98ddfae872fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90369f2c-eb1d-4f41-ace8-b6462ecf0340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc62d7d2-12e8-4273-b945-a7a2992d2b08",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61bf38b5-a826-4cd3-a3ca-00a120159617",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71b4c3c1-c6bc-4ceb-a99c-bb47da7cdc98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13de81b8-3787-485e-9bf0-8c284f761ce0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55066f00-597c-4f05-b40b-364edfbe95c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "710f9d0d-ba7d-4bf7-8fbf-42cce35c89f8",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f062e1d-0c05-42c9-ac78-cd7e9bb2f452",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "804dfb1d-193b-48a2-8b16-e5fb226aa4a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf1df11-8fbb-4cba-804d-16832669fc9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6728b5a5-7c50-4248-8910-214ca9a231cf"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f983094-2271-4138-978f-a91cef84a29f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d711af7-ed7f-4c6d-8859-e4f77650415a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ceea604-e907-4bf9-8027-3d6e80a81983",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9d881ed6-e893-400e-8264-b06e4415abd4"
                    }
                  }
                ]
              },
              {
                "id": "c6e1d33c-5df1-491d-a624-604c13d3e214",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1d1ee7cb-99ff-4afd-ba86-f781551b074d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30d0fc20-7d34-4563-bdb3-a0f0932bb082",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "41edc127-38eb-4218-b680-eaae17e95c7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "946d6949-f8e6-4b1b-b383-18bb2695690d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf4acec2-d98f-461a-9f4b-f47ec0177466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a74c39a3-836c-45aa-8964-8531d4113c02",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8872e256-d5fa-4fcb-9d5a-8af1afd51b2d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "97051cc1-9cd0-400a-b879-4dbb103b1643"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b269d09-9dff-42d2-ad9a-14b1aa601868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c219922-3b73-42ca-b4bd-b8a338eedde0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76995fe7-56f3-42b5-abe2-8351b19d00c2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aca54238-04a6-404e-8236-74ec3f7915ce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a554f05f-f066-4e51-ac8b-1fbb6449d679",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "58e57ffc-8216-44bf-877c-3a17a4a9d9b1"
                    }
                  }
                ]
              },
              {
                "id": "c977e93f-c5af-4cfe-bd26-91cbb7644a55",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1e328408-708f-4693-8c37-2ce4ff81e7f3",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc6e057d-7193-4b56-b97b-5a016f4f0b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "153b1c9b-f592-458a-bb16-6fce87ee583c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c785ba2d-bd0a-4676-902c-f0800f19b4e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbfa34bf-09ee-4403-99e7-4fb046cf0dca"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7025830d-ed12-43bb-a696-f381fa34132c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2499331b-2f22-4fd5-9068-dccbc17a8d92",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2570557d-32a0-490e-b929-7b6fe53c43cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "51e2573a-c3b2-407c-a025-0eafcb59b09b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0001b399-2620-4da3-9837-aee2ec99ee83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0e39c4b-1b07-4add-b716-2f474fe823e6"
                    }
                  }
                ]
              },
              {
                "id": "0e1814a8-a44d-4284-9817-07fc0e9bb74c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f2c0fb7-8ba4-421b-b241-b9c662255ab1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c59b5438-9f58-440f-b66e-f6091831d547"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "661e4584-e4da-46fc-ae0c-e3b5dfa177b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4786706d-b229-4c9c-9efe-ced0e97dcf1d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "917c6aae-f29b-424a-87ac-1b3c82b9728d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5d0433ed-a89e-4223-b905-b424cb349250"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "249d5c99-0d0d-4b17-824b-7d68627315cc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "98a5b5df-2655-438c-bffa-eec81136de3b"
            }
          }
        ]
      },
      {
        "id": "b9e85e7d-5e8c-4b91-9488-82bf544e546e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "fe1e73c4-4498-420b-9bc1-935be4418064",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3ebf8f39-cc57-4ec9-9497-52181d195cda",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "89ddf950-371f-4a73-ad56-24c1844fea75",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "216a63d3-3325-4c44-a6e3-162fd865ef2a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7acb17f6-89e1-470d-9ffb-61eb7a7c864f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4fcf6a3-f8ea-43eb-a57d-f85f1cefb51c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0508ff94-adaf-4a8f-9163-b07cd06a6f4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdb46bd8-4025-485c-a117-a6b9ffc996db",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd3351c-f06f-4b77-9f9c-c6cb622dc675",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7d31fed3-170b-4834-8592-2a02d9a67df1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd4c7697-36fc-4c77-821f-01ff61d31743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4ded155-f358-4e57-932d-c1bc13379f9b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d7b9b85-2915-416e-aa8a-e13c01576289",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1caa33ba-e4be-4fda-ae65-86c26d78d6c2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "72ca8c9b-c52b-4d04-94ca-fb55e39a3346",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7afb52b3-ddf2-47d4-b88d-54b6be5dca67"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "89799330-3329-4bab-92aa-3d4cc2ec3eb7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0b7e7346-c7c6-4a82-8d51-2d66f8cd899b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "129b2cd5-60c9-4744-b583-bd51d44c777d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "72b1f21d-40c6-4fda-8084-ebb31de07455"
            }
          }
        ]
      },
      {
        "id": "f799e79b-3b34-456a-bcd8-0c4b4ddb6c8a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f692c6b3-2c54-423d-85d6-0b9bc630e19d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "921765f9-8237-4b64-a245-956695039899",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ce1878e1-327e-4cb4-97d3-9ae00740a741",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7341bd1b-8d69-43e7-893f-1aa8aee54ec4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "61da63ae-d5a1-4c2a-b3b1-4af7fd7a3612"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a236fa-d511-4f9b-b5a5-54e2a25e235c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9268795a-c230-4db1-ae5f-efdbc7d49a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e3bdc3-6b67-490e-b7ac-454b5c30ba7e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5214265-fce9-4d4b-8bf0-2e0f3990f13f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7eb3e2ad-90f4-4f75-aae2-2759582de88d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a97ae3e-0956-40dc-a97c-6b9700bb14a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df6d2830-8bfa-44d5-8871-693898c84154"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de459ce8-4a93-4a32-8e68-6d70a0c73e18",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a909b251-2d3e-498c-bdbd-91c341594798"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9aa45656-6152-4ab5-85b2-073e0bf3bc3c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b593deab-2981-4821-b788-0045c04d5c9b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd66e13a-4853-481a-9e77-2de7ccf9c7da",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "50bc2e59-7c40-42b7-bbc1-7739be7f9774"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77c12622-8cf6-4c4e-803c-31648edc8891",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "16027fd3-2f3c-41b3-855c-b59c8ff5920c"
            }
          }
        ]
      },
      {
        "id": "5bd99f61-fd17-42e5-8ba7-6071d4ec3e49",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "88b538cc-7fed-47f2-ad08-e2e7391f3b96",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d95e7e19-28e5-4ac6-9e9c-9664ad23d3b7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aaaaa6b7-8f7c-4cf1-975d-6d87b8b50011",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b4b3c17-671e-4d15-bcd3-7006d4403152",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "71cd7213-0302-4f4e-9da7-13a4e6ca344c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9fd82f1-2932-41ad-a838-09161a7268e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c0171ef-2051-4793-9481-8ca92dc3b0ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abbab650-e61e-49b8-94ec-34f8a6104bbe",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51cc0645-66c8-4a18-a2bd-392729e22459",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dd342023-7bb5-47b3-9c26-095bef443001"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9db8e59-75a7-4e18-9771-c3f992854250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82c32ffc-9cb5-4819-9724-7374c2b3c6ec"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17901010-8f2d-49fc-85e2-be4b7ad01197",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4e834f0-2cff-4698-8460-d83b4411635d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "adeeaa9e-6085-4fec-8c07-edd17e7dc13e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9bc891d-bf15-446d-88b2-813d81cabc78"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f98ae6cd-7d5c-4cd5-a5b6-0359a6abf18e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5550afe0-a867-452c-8c8a-81042937febf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5cc70641-0973-4fd3-a06c-39ef246de06d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8309f36e-1fda-416c-a5c9-11bf842cf423"
            }
          }
        ]
      },
      {
        "id": "473f7557-aa4d-4210-b419-b3cc451af6a2",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b977d6af-dc48-4a2b-a371-a59765cb4e7f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "121050bb-3c5f-4f4c-9557-bac3a1593b12",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "05754756-34bd-4436-9332-c4e20b39202e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "45a07d0b-ede7-4f2d-af44-9b5060099c16",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "74ee7efa-2e48-49fe-9485-067700343b3d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 153.54961832061062,
      "responseMin": 7,
      "responseMax": 2758,
      "responseSd": 231.95573129043453,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1672706268271,
      "completed": 1672706321811
    },
    "executions": [
      {
        "id": "7bd88a96-d829-4cfc-92fa-e572865dbf9a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e429e430-1ff0-46fb-ad91-4a3fd1bd2846",
          "httpRequestId": "5e2692a1-125a-4b83-b35c-e099bdbe57a4"
        },
        "item": {
          "id": "7bd88a96-d829-4cfc-92fa-e572865dbf9a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "017eb225-4de1-459e-bc48-f7e8f9a4bd1c",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 0
        }
      },
      {
        "id": "1e5c4b51-7b46-433c-bd8d-bbbfaf585609",
        "cursor": {
          "ref": "df2abe32-3788-4671-88e9-af957816a0c4",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8bfa0d29-2bf8-4262-a96c-4ddad672e8d4"
        },
        "item": {
          "id": "1e5c4b51-7b46-433c-bd8d-bbbfaf585609",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b0dd9e2f-cfb7-4f12-8f08-b09dc64f0876",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "076b2a8b-f60e-4dee-a0af-6202ebb5ddfd",
        "cursor": {
          "ref": "5454ea0f-9cbe-4748-8298-7b70b0f81209",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "086816ea-1417-4b1b-9153-168965eef5a1"
        },
        "item": {
          "id": "076b2a8b-f60e-4dee-a0af-6202ebb5ddfd",
          "name": "did_json"
        },
        "response": {
          "id": "044fc9ce-2162-41da-a277-e659214ec71b",
          "status": "OK",
          "code": 200,
          "responseTime": 215,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b6a262-23de-40a2-9446-df3c75ec5abc",
        "cursor": {
          "ref": "9d246436-52b3-4411-ac47-6d30aa677801",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "659bd7ab-3eaf-4a55-aaa1-3895a54292cd"
        },
        "item": {
          "id": "b1b6a262-23de-40a2-9446-df3c75ec5abc",
          "name": "did:invalid"
        },
        "response": {
          "id": "ce9ceffc-d80d-465e-9e68-8da95af43f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b6a262-23de-40a2-9446-df3c75ec5abc",
        "cursor": {
          "ref": "9d246436-52b3-4411-ac47-6d30aa677801",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "659bd7ab-3eaf-4a55-aaa1-3895a54292cd"
        },
        "item": {
          "id": "b1b6a262-23de-40a2-9446-df3c75ec5abc",
          "name": "did:invalid"
        },
        "response": {
          "id": "ce9ceffc-d80d-465e-9e68-8da95af43f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d471af9-3248-456b-b50a-314587e2ec9e",
        "cursor": {
          "ref": "58986f19-14d2-4bd9-b704-f079620bd89a",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "aaa5cf94-4073-4e98-827d-b016a28fe469"
        },
        "item": {
          "id": "3d471af9-3248-456b-b50a-314587e2ec9e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5049108d-0757-4e4d-a0b0-2a2a2f39d1ec",
          "status": "Not Found",
          "code": 404,
          "responseTime": 103,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f98ba15-f1e8-41fe-a533-a3bc3bbb70d4",
        "cursor": {
          "ref": "5e1382e8-2f3b-49cd-92a7-2367c85800f9",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ffdb364e-f9d4-425f-a469-1bc9d7f8a2aa"
        },
        "item": {
          "id": "8f98ba15-f1e8-41fe-a533-a3bc3bbb70d4",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a2ddae08-68e3-4cec-b056-ab178b6f19bf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc39573-2629-4ea2-a4e9-23b92a2e9f47",
        "cursor": {
          "ref": "bc407c16-8281-41b2-b228-efc68bc7281e",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b7f5c973-2ee7-457b-9e27-d3cf5b9c30ca"
        },
        "item": {
          "id": "abc39573-2629-4ea2-a4e9-23b92a2e9f47",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7c0edf54-6f62-4883-9091-82c6275e3b0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13811b05-3291-4a38-b4bd-c94a89899419",
        "cursor": {
          "ref": "a55ea32d-bb3d-4dcd-9490-a41f578b4ef7",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "19bb2563-4f22-48d5-a6f4-5823fa08d6fe"
        },
        "item": {
          "id": "13811b05-3291-4a38-b4bd-c94a89899419",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b34e822c-e108-47bb-b427-9408be1812c7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13811b05-3291-4a38-b4bd-c94a89899419",
        "cursor": {
          "ref": "a55ea32d-bb3d-4dcd-9490-a41f578b4ef7",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "19bb2563-4f22-48d5-a6f4-5823fa08d6fe"
        },
        "item": {
          "id": "13811b05-3291-4a38-b4bd-c94a89899419",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b34e822c-e108-47bb-b427-9408be1812c7",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1909c0b-2aa3-40e6-9806-272365794639",
        "cursor": {
          "ref": "03e584b5-c32a-4570-bc0f-b418a9260929",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3f0760d8-7a00-48b8-a6e9-80411cd11118"
        },
        "item": {
          "id": "e1909c0b-2aa3-40e6-9806-272365794639",
          "name": "identifiers"
        },
        "response": {
          "id": "a5b63a88-3a9f-40a3-a240-41c14db8fb65",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c03e052-8e59-4314-a2d6-b97e9926c55e",
        "cursor": {
          "ref": "5d588583-d914-47ef-a70b-d2c5a58d2cea",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "84690c89-f2e8-4c90-ac3a-68cc3df7bb52"
        },
        "item": {
          "id": "9c03e052-8e59-4314-a2d6-b97e9926c55e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6438aab9-102a-4d79-8f5d-ef462801df3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c03e052-8e59-4314-a2d6-b97e9926c55e",
        "cursor": {
          "ref": "5d588583-d914-47ef-a70b-d2c5a58d2cea",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "84690c89-f2e8-4c90-ac3a-68cc3df7bb52"
        },
        "item": {
          "id": "9c03e052-8e59-4314-a2d6-b97e9926c55e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6438aab9-102a-4d79-8f5d-ef462801df3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08ba6758-4cab-46d8-9c52-3ea04c0e5453",
        "cursor": {
          "ref": "e9558561-edc0-4746-9c41-1dfd5da7e80f",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ff6eaf2b-4917-4b87-88e5-01c5f078f0a2"
        },
        "item": {
          "id": "08ba6758-4cab-46d8-9c52-3ea04c0e5453",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "aea45825-05b6-4cfa-b553-983efdd47c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed2f1f8-a37d-403e-9817-5d66d0062058",
        "cursor": {
          "ref": "2c90f83d-c785-4fe3-be70-ebeae8e1745d",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2f618cb1-3e37-47ef-a90e-f677c427c5c4"
        },
        "item": {
          "id": "7ed2f1f8-a37d-403e-9817-5d66d0062058",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "2029128c-7a9e-4e27-999a-bdb6f09fb2fd",
          "status": "Created",
          "code": 201,
          "responseTime": 2758,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "11d02e92-3314-4871-a0ae-b0c046fad9a4",
        "cursor": {
          "ref": "230bf590-881e-4c49-93ea-acfca92c3537",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1825d321-07fa-47a0-a7ae-f18da92f54b6"
        },
        "item": {
          "id": "11d02e92-3314-4871-a0ae-b0c046fad9a4",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "73573b79-3c9f-4ff3-b04f-c06f054d0577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80eab2c5-42c8-4d95-866f-ec5cea96f7fe",
        "cursor": {
          "ref": "172642d4-d760-4699-93d3-2c3449a7e967",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2fe5ca6b-7942-4523-972a-67e3f86cf5a5"
        },
        "item": {
          "id": "80eab2c5-42c8-4d95-866f-ec5cea96f7fe",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a23a50a8-c4d3-4575-9e30-d6a8e76a5aeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ea69be-0ed5-4fb6-bb1c-116b4c82ce1b",
        "cursor": {
          "ref": "6190fb72-f357-4879-812b-d111bb836414",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "390ce070-5d64-471c-b35b-23f0a1d4070f"
        },
        "item": {
          "id": "15ea69be-0ed5-4fb6-bb1c-116b4c82ce1b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "77379cae-50e9-498b-b80d-d4b70c1f2b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "202c0b5e-753c-4baf-99c2-76f44e3d2ecd",
        "cursor": {
          "ref": "4784d806-5b7b-4267-b5e0-2916896c6001",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f9dbcdc6-8205-42dc-817b-dfe339c6f916"
        },
        "item": {
          "id": "202c0b5e-753c-4baf-99c2-76f44e3d2ecd",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "81b4d494-f66d-4b14-af8e-08a707d0e032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24acb519-2503-490c-9f44-603493f962fb",
        "cursor": {
          "ref": "c471a156-74cc-4871-9227-a5e82487d355",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "52659575-f9b9-4cf5-ae36-f41b261c02ac"
        },
        "item": {
          "id": "24acb519-2503-490c-9f44-603493f962fb",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a42a0ce9-a683-4eb7-88f5-32eb808563e4",
          "status": "Created",
          "code": 201,
          "responseTime": 555,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "fd65e9fe-3dc9-4b16-a566-a29f045ab823",
        "cursor": {
          "ref": "e1106d70-3937-4cea-bc86-a2218b131cbb",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b9b8d809-ec2d-46c5-86dc-6c23efd77e16"
        },
        "item": {
          "id": "fd65e9fe-3dc9-4b16-a566-a29f045ab823",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d38b9971-bf95-4e0b-b951-007d5bf9462a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c773cf90-b3de-48d7-ab28-7db263f86551",
        "cursor": {
          "ref": "3ef4b594-46db-4a7b-8d77-f61b0979390c",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b8470629-3520-4a45-8b9c-4ee059cb79ca"
        },
        "item": {
          "id": "c773cf90-b3de-48d7-ab28-7db263f86551",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4b758e28-54c4-41a8-9cc3-aa626236a9b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5a0fedb-34f3-475a-928f-922aaba1186e",
        "cursor": {
          "ref": "be2716d2-e374-4f58-80f7-ce373111caa1",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9c72e485-1af8-4a50-b642-b1785d92dc5d"
        },
        "item": {
          "id": "c5a0fedb-34f3-475a-928f-922aaba1186e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b5014a64-5a5f-49d4-b775-37c19c42c19e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c72123-8e55-485c-8595-15868d9f9f6c",
        "cursor": {
          "ref": "ef4ae754-223f-480d-985a-4dff5a928e3e",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3ada1e58-2c63-4a2e-9de6-bb3afe196bf6"
        },
        "item": {
          "id": "12c72123-8e55-485c-8595-15868d9f9f6c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "9cd037d7-331d-45ef-8da9-e0bbd97a1773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196b35f0-ebe2-4a8b-9d0b-3507f8ea9673",
        "cursor": {
          "ref": "4a5ac3f2-e4b6-4059-b012-0e86ae7b8ae9",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b1986bdd-0898-4f92-bea7-b40f5d24ef37"
        },
        "item": {
          "id": "196b35f0-ebe2-4a8b-9d0b-3507f8ea9673",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0706ff06-d523-4107-be13-54338e1782c4",
          "status": "Created",
          "code": 201,
          "responseTime": 545,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "17e092c2-1fae-4d3d-b8f9-fba61129a8d0",
        "cursor": {
          "ref": "4ade7ec1-ed05-4363-b2a9-9cd5e32f1ff8",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "27614803-32ea-4334-9898-a4e48d5a2791"
        },
        "item": {
          "id": "17e092c2-1fae-4d3d-b8f9-fba61129a8d0",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "d0e391d9-b499-45f8-847f-c88ec6f9f608",
          "status": "Created",
          "code": 201,
          "responseTime": 1027,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "96c5a282-65bd-4d65-9a03-5aabdc2f2cc9",
        "cursor": {
          "ref": "229664ab-9c90-4c74-81e6-5343caaab84a",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "44d6dbf3-4d1c-4bc2-a177-c31ad865997d"
        },
        "item": {
          "id": "96c5a282-65bd-4d65-9a03-5aabdc2f2cc9",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0a9a9567-b50d-4af5-9f2a-e2584ac28a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c963fc3-e450-4952-bb7d-8f7f4b76603a",
        "cursor": {
          "ref": "3514c71d-c2a3-4ede-8dc5-760a065ecdda",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0d32e784-f216-4383-a0e1-4999e6b52c40"
        },
        "item": {
          "id": "9c963fc3-e450-4952-bb7d-8f7f4b76603a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "7e4b82b1-7278-469c-8198-4748e6cf632e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b232c7e1-9098-40b3-9e2c-d7c59e74f26b",
        "cursor": {
          "ref": "cc3f1031-7fe1-4117-8570-8622532e3b44",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "99001f16-68e9-4b87-8af9-444cec6c216e"
        },
        "item": {
          "id": "b232c7e1-9098-40b3-9e2c-d7c59e74f26b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5eb1d38e-34be-4616-8d80-896841c6d4a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d79a19a-eedd-4295-b011-8ed84fa388d6",
        "cursor": {
          "ref": "36c5bb36-f402-464a-b044-f1814832dbdd",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "42f19f15-18d0-480a-bdd2-6b7bc5294acc"
        },
        "item": {
          "id": "7d79a19a-eedd-4295-b011-8ed84fa388d6",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "8523b828-c329-4082-b381-28941f26c24a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb38c909-c3a6-4767-8101-3b68bfc3c3b7",
        "cursor": {
          "ref": "3fc6a3ef-7349-475c-9061-e5b16fb70393",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5c9803b1-52e8-413e-bd65-a09bac6dd8b1"
        },
        "item": {
          "id": "eb38c909-c3a6-4767-8101-3b68bfc3c3b7",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c2b9b571-6974-4749-aa53-aa5a26e965cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d70a3675-f2fa-4d2b-bcaa-21e2d9facc37",
        "cursor": {
          "ref": "f962ecb3-7d5b-4219-a753-7efb3c3df3fd",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "09310c37-03a9-4f29-9937-e0ca98c6a664"
        },
        "item": {
          "id": "d70a3675-f2fa-4d2b-bcaa-21e2d9facc37",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "dd1d3ed3-f451-4b10-97a9-5a9fa75b6ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d72f5ab-91a6-494d-bc03-1bc7d900878c",
        "cursor": {
          "ref": "3855280b-d784-4f7f-b174-d64d063dd2e9",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8d8e1e99-0af7-4b82-aa8d-a570ed0948b2"
        },
        "item": {
          "id": "3d72f5ab-91a6-494d-bc03-1bc7d900878c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "dba45898-4e85-4165-bba0-15ad5884d873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d79e344e-4911-47ec-8d65-e5204ac92605",
        "cursor": {
          "ref": "30967b57-6636-4dae-a998-dcda3c321c8c",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4477fb26-2fde-4e7c-b49f-cba13f5ea710"
        },
        "item": {
          "id": "d79e344e-4911-47ec-8d65-e5204ac92605",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a49f6ef6-dfa7-402d-898b-d6af37942afb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ba8cc8-ba27-491f-8d53-697bd6ec5bd8",
        "cursor": {
          "ref": "cea74fe4-f5bb-4710-825a-5fd732bae6f9",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9499290a-950e-4c80-b9c1-bf2be4b74f10"
        },
        "item": {
          "id": "c3ba8cc8-ba27-491f-8d53-697bd6ec5bd8",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f62f1100-fca0-4179-afcb-a229d1ba8102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4921ef65-affc-4d7c-9c7c-0973bc93451a",
        "cursor": {
          "ref": "b28976dc-21da-43e6-814e-6528f4e3858e",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3dc8cb76-f508-4961-bc53-64f856644fb0"
        },
        "item": {
          "id": "4921ef65-affc-4d7c-9c7c-0973bc93451a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b62aa727-b2d0-4cde-a5f9-ad406b9608e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2151400-663c-4297-8c9c-304dc4b3330f",
        "cursor": {
          "ref": "3d29cc02-edf4-438b-b6ee-e17924ac71ed",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c6cd2dae-8914-4407-b6a2-b208cea99656"
        },
        "item": {
          "id": "d2151400-663c-4297-8c9c-304dc4b3330f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3f5e14ba-5cae-4ffe-958c-8720819c971e",
          "status": "Created",
          "code": 201,
          "responseTime": 687,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "61672a6f-175c-4909-8979-e6bf97eddd88",
        "cursor": {
          "ref": "e6c3b101-3faf-44a1-82f0-08aeaace3337",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a95229f5-4afc-43a9-96cd-1828ef20adb8"
        },
        "item": {
          "id": "61672a6f-175c-4909-8979-e6bf97eddd88",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "29ad21b9-e184-4aed-b75f-f95a90e2007f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ca5298-11cc-46e5-ba53-af0060035f7f",
        "cursor": {
          "ref": "bbff4612-752d-4f14-898b-af1e5a9fb08d",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e66598a6-d206-4f73-ad40-eda84337f0b6"
        },
        "item": {
          "id": "b1ca5298-11cc-46e5-ba53-af0060035f7f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "38de1f06-322e-4ccc-b4d1-833dee6c1330",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0560c3a7-1bc7-4d5e-a247-707784560017",
        "cursor": {
          "ref": "59b3c3c2-5f12-42dd-9c24-727e43820d3c",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "33458f78-6bee-4c12-9ffa-4be6c0a21ad7"
        },
        "item": {
          "id": "0560c3a7-1bc7-4d5e-a247-707784560017",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0b04d3a8-539a-4cb2-9285-00d60448549a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ad7e26-367c-4315-844d-e79e4c638590",
        "cursor": {
          "ref": "959e6031-eedb-4a85-8091-25a6e96623e5",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e9ed4810-a759-4a8d-827a-c6460b65a4c9"
        },
        "item": {
          "id": "62ad7e26-367c-4315-844d-e79e4c638590",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0049692b-6151-4fd8-ba61-acd1ffd077fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "febfae19-10ae-4fd8-a733-9be77447196f",
        "cursor": {
          "ref": "5d14c9d3-6be3-4cb6-988e-b131985123ca",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8f1d0649-c361-4703-a1b4-9c31375f5f44"
        },
        "item": {
          "id": "febfae19-10ae-4fd8-a733-9be77447196f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "8c3e77e9-5ff1-4205-9634-60790e2ad57a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9484d5d-e680-4cdc-9168-5684a7b1ca0d",
        "cursor": {
          "ref": "9e760a7d-7096-437a-b163-bf67cac8f08c",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8fd36d63-7499-4df2-846b-a83ee560dcbd"
        },
        "item": {
          "id": "c9484d5d-e680-4cdc-9168-5684a7b1ca0d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "069e0492-76c1-4a56-acfe-2e724686fcbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9887ce83-d9b7-4249-861c-6c6bad23f09e",
        "cursor": {
          "ref": "d5370254-f4d4-4740-b551-8da894eeb729",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "26616d7b-d7b2-4044-bbc2-db5c021c694e"
        },
        "item": {
          "id": "9887ce83-d9b7-4249-861c-6c6bad23f09e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a9e9a1a7-fe15-4b89-a706-f4562c3f42e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80084ec1-e6d7-4a17-8a95-550777e2f431",
        "cursor": {
          "ref": "85d20c46-779b-47d3-8aa4-8825faf0c348",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "19b29c4f-96bc-4d49-9592-a37b5adce54c"
        },
        "item": {
          "id": "80084ec1-e6d7-4a17-8a95-550777e2f431",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9f131da3-ed84-4f44-bb71-4eba1633858f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a233963-e433-49c1-8254-78cdac0dcbdb",
        "cursor": {
          "ref": "d7f6cdb5-c1b0-46e4-87fb-0339304f81de",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ed3afe94-f505-4259-83f3-2fde0073bd93"
        },
        "item": {
          "id": "3a233963-e433-49c1-8254-78cdac0dcbdb",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b9b7e7fb-c5bb-4b51-a546-7e7fb85f8a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f539d791-4c26-42f0-8dff-05eb334571bf",
        "cursor": {
          "ref": "fd35013f-d582-479b-a65f-59ac52970545",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "68b38ce0-406c-4bb3-9b48-f4a01e9cf2d1"
        },
        "item": {
          "id": "f539d791-4c26-42f0-8dff-05eb334571bf",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d882a0b3-98f7-488f-8059-2a7e93d93f9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe186cb-e8d5-4402-a6b2-da242e34ee49",
        "cursor": {
          "ref": "0b3593c8-d59a-48f4-857a-cbbc35d36661",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "5d2761e5-929e-4699-9680-f920ecd0fc4d"
        },
        "item": {
          "id": "1fe186cb-e8d5-4402-a6b2-da242e34ee49",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "bdeba01a-d7db-4707-bc2c-87edf6f95b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1153783c-e125-44e1-9b68-b346fc5bb9f6",
        "cursor": {
          "ref": "2889abc3-f446-445d-a81e-681a3bb580ef",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "cb437703-a091-4094-bc52-1f6b61f74bb3"
        },
        "item": {
          "id": "1153783c-e125-44e1-9b68-b346fc5bb9f6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "16fea46a-35ac-44e2-b7a4-50de4a24c573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32b3b9d-c454-4115-956d-9528b1adb8fb",
        "cursor": {
          "ref": "9342192d-18a1-4478-9624-28032b4e145f",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6421a11b-c508-4cfb-8c34-6b1abbc2e82b"
        },
        "item": {
          "id": "b32b3b9d-c454-4115-956d-9528b1adb8fb",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b9e2511b-ca32-41ac-b880-178eb9c2d1f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 386,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "fc0637f3-2256-461d-a20e-245b906aef7f",
        "cursor": {
          "ref": "8fde7653-9640-4c04-b0c2-cf0c736c4d09",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3a7d0ce3-8aaf-4f4f-ae12-290096843fdf"
        },
        "item": {
          "id": "fc0637f3-2256-461d-a20e-245b906aef7f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "588f4b1a-8dff-4e79-be72-b743d349da57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ce3bab-a5d3-4e35-9cea-055aff431821",
        "cursor": {
          "ref": "d1f360db-c3bf-4a1c-9ca6-de0832c8e76a",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "1ca7f7f0-38f5-45be-a5ce-5c4f0f094e19"
        },
        "item": {
          "id": "c5ce3bab-a5d3-4e35-9cea-055aff431821",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "55f76bad-45fa-45bc-9238-0f2d3aad3fbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b8595d9-0aa8-432e-af02-104d794b0987",
        "cursor": {
          "ref": "151a16a2-13a6-4d95-9e93-245e8d1f3e84",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0fe07a76-67f4-4517-a357-7ac3ad9d72b8"
        },
        "item": {
          "id": "2b8595d9-0aa8-432e-af02-104d794b0987",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "845c4a12-40aa-4b53-b327-a491ade390da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8478be46-d78e-4e84-a685-11613ae71e92",
        "cursor": {
          "ref": "330a0726-c765-43b5-8419-102157c59e71",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "db1f67f4-3380-424c-9a1a-bec156e2ab16"
        },
        "item": {
          "id": "8478be46-d78e-4e84-a685-11613ae71e92",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "76a9b84c-12e8-4295-9fab-f747d2a60457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5984c184-cdcc-4cae-b08a-b74334a3a748",
        "cursor": {
          "ref": "67b9ceaa-5f04-4f75-82ce-46f5779360b5",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "980301d3-17d1-439c-b64a-af58d1592888"
        },
        "item": {
          "id": "5984c184-cdcc-4cae-b08a-b74334a3a748",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "0e081215-2873-4028-938f-98b685412c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36566475-1183-4de6-abc0-3c376c4d2dde",
        "cursor": {
          "ref": "cf2e1840-5bd0-439b-902a-ee56bd63aa39",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "7cd94314-b530-40e3-8ee3-e7e11d6f4c88"
        },
        "item": {
          "id": "36566475-1183-4de6-abc0-3c376c4d2dde",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "f547b00f-f4aa-46bd-a3d3-422d589b7043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd89b4f-10f7-4a37-af7f-c632aaa7d206",
        "cursor": {
          "ref": "7d638563-839e-4c9a-9446-246bf8342e4b",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1b1d13c3-7d0b-4fcf-b92d-eb69fb32f5dc"
        },
        "item": {
          "id": "5fd89b4f-10f7-4a37-af7f-c632aaa7d206",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c155a0ff-80a5-4b09-b2e0-027c428eb0db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 388,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "9fd189ce-6f5b-4aa7-8401-b54780db0dd9",
        "cursor": {
          "ref": "234a439a-c620-4b94-a29d-01cee991e9d6",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "072d37e8-9173-414b-8baf-1fc3140762b0"
        },
        "item": {
          "id": "9fd189ce-6f5b-4aa7-8401-b54780db0dd9",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "4a88d5b4-b52d-4570-9e12-168d4b648b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75860367-a7ad-42cd-91e8-0247c02dac7d",
        "cursor": {
          "ref": "7301e50f-183d-4178-9662-82a62861a899",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "96a4f381-856c-4c5d-96a7-70798c66d555"
        },
        "item": {
          "id": "75860367-a7ad-42cd-91e8-0247c02dac7d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b8e2e78a-f7ce-4eb1-92e5-d14586f9631d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0df6a36-6f20-48d9-927f-4cadbc19580d",
        "cursor": {
          "ref": "62c307bd-3179-436f-a95b-dca4029634ee",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8314d14c-1024-44a6-912f-57c4165b6230"
        },
        "item": {
          "id": "c0df6a36-6f20-48d9-927f-4cadbc19580d",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4c79ad42-7f56-4a98-b6ac-62251036a01d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e249e5b-99b6-4af4-bbda-b08e2525da7f",
        "cursor": {
          "ref": "8d14d39b-f888-4300-8531-9533b7c0efd7",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0eceaf0c-e5c7-43ec-8fc8-5cd0d3823828"
        },
        "item": {
          "id": "5e249e5b-99b6-4af4-bbda-b08e2525da7f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "2275d2b8-13aa-44a3-8cef-665dd65e2a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df9d8e37-6c90-42f5-80be-960153537d73",
        "cursor": {
          "ref": "92035c75-cc68-49e6-8940-67684ac9cee2",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a4347487-e77b-4384-80e7-3402c4f3b6ad"
        },
        "item": {
          "id": "df9d8e37-6c90-42f5-80be-960153537d73",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8969c228-1197-48f0-ab5c-686e1f20966f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "022db41b-3421-45e9-a0c2-5afc02086799",
        "cursor": {
          "ref": "0920531b-179c-43d8-a7d6-ff2706ba73dc",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "046c9b29-7cc8-4b7d-904a-093d0c39c5f1"
        },
        "item": {
          "id": "022db41b-3421-45e9-a0c2-5afc02086799",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c9a15cb7-b296-4088-a6c9-f2e44960f475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "553ed20e-1d52-46a1-9f67-aff4630f7399",
        "cursor": {
          "ref": "80d0e85f-8016-4f05-9f21-b12d3e8737fe",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "8f726f39-ca5d-4355-8f26-8e02f4680581"
        },
        "item": {
          "id": "553ed20e-1d52-46a1-9f67-aff4630f7399",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "cff86818-0ef3-4886-9cae-092774561814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5037bb7b-86a0-4eca-867e-ec6549e36ef0",
        "cursor": {
          "ref": "9d50088e-b039-404c-8b63-97a4bb08f279",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f235d39f-9eaf-42f5-a024-f19834a9504b"
        },
        "item": {
          "id": "5037bb7b-86a0-4eca-867e-ec6549e36ef0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6b337206-786a-4ed2-9d37-de2f4c380a0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cd9b976-ad4a-464f-bef2-5c9ee852490b",
        "cursor": {
          "ref": "03df9e3a-662b-4c59-af38-66346302a740",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "43e0cb20-1179-4c0b-a619-e8ed094a6678"
        },
        "item": {
          "id": "7cd9b976-ad4a-464f-bef2-5c9ee852490b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d8bfe42b-ecc4-46f9-8012-327d7e7af142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa2e7b4-da35-4a3f-87eb-a5755aff8ba0",
        "cursor": {
          "ref": "70ab679c-deac-4e51-86c5-df7afe7eef8b",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8a8d0b4f-1711-48f5-a644-677394a3fc3e"
        },
        "item": {
          "id": "caa2e7b4-da35-4a3f-87eb-a5755aff8ba0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d2b43f51-f019-4ba3-ba0f-6bb1db5cc64f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f0372ac-413a-41b8-8bee-15b9bac350fd",
        "cursor": {
          "ref": "8b61280b-dbee-4388-a943-031740fdb59e",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "6ac28b33-acfd-4414-9953-1718046a90e1"
        },
        "item": {
          "id": "4f0372ac-413a-41b8-8bee-15b9bac350fd",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ddba1f2a-cf29-4b58-bde8-1fb3ae4ce418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b7ce07c-87cb-4d8d-9cb4-a865963b4adf",
        "cursor": {
          "ref": "11cee920-68a4-4b53-a9d5-05654a7bce4f",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "1d15272f-4b83-45c2-895b-5a0e3972e35a"
        },
        "item": {
          "id": "8b7ce07c-87cb-4d8d-9cb4-a865963b4adf",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "687440ce-395a-47f5-bc1f-4fee5c929fd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1882c0e-c61b-49d5-b4ff-09fdaf266b8a",
        "cursor": {
          "ref": "a226c78a-26ae-4b3b-8919-b5c8795f0b6f",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "270c09d4-4943-4b8f-aef0-691cd0504707"
        },
        "item": {
          "id": "a1882c0e-c61b-49d5-b4ff-09fdaf266b8a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d0180537-6aa8-41ff-84eb-98f09f05686c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce0a4f0-ec6e-473f-9a2e-b37cda36bde4",
        "cursor": {
          "ref": "1b0af18c-3398-4d31-bc6a-e84225ae5f3e",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5cac4bef-a8da-408f-a88a-184528a778f1"
        },
        "item": {
          "id": "5ce0a4f0-ec6e-473f-9a2e-b37cda36bde4",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "26a4b6a7-3345-424a-b29f-23f0f8734471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ab631f-2f5c-43d6-9a6c-666edad284ee",
        "cursor": {
          "ref": "ea54c65b-70d4-47d9-bea0-fbcaa43bce9c",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "896c7f32-f276-4e83-8a58-bc58f2079899"
        },
        "item": {
          "id": "59ab631f-2f5c-43d6-9a6c-666edad284ee",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "70f0b8f7-b9c7-4d77-a21a-58a3e3f22da1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e72f077-6112-409e-9e62-8344a3ff1672",
        "cursor": {
          "ref": "7a48108b-148d-4283-a644-9d64d7fa29d4",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "00531390-428c-4c07-9b9b-363cb1fc7e44"
        },
        "item": {
          "id": "5e72f077-6112-409e-9e62-8344a3ff1672",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "73960afb-c131-4a63-b1cd-7299d7a39293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e81f7978-1a6d-430f-868a-bdb4f506cf90",
        "cursor": {
          "ref": "38b88c89-debd-44f1-859c-928cda4f2db9",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f713d4b1-b05d-4e98-99a5-fb927f8a9444"
        },
        "item": {
          "id": "e81f7978-1a6d-430f-868a-bdb4f506cf90",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "cc266510-396d-4b01-87b6-a304f0398a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7066da5-8d04-44ea-8f42-df7c1ae9ab3b",
        "cursor": {
          "ref": "6a2989d3-0966-42ff-8dc4-9d3fac6521ad",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1afe553b-9562-44fa-8f43-fdc70e69a541"
        },
        "item": {
          "id": "f7066da5-8d04-44ea-8f42-df7c1ae9ab3b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "35e8cf5b-e040-479b-a06b-b90127560462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ff481d-cfed-4138-9e1a-a254865acca1",
        "cursor": {
          "ref": "4c3ff392-f1af-405e-aadd-4b373b6ee379",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4bc4f064-1807-498c-aef9-f74618c9bbcf"
        },
        "item": {
          "id": "d4ff481d-cfed-4138-9e1a-a254865acca1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f4ebb2d6-4b66-4d59-ab15-d3f54ae58ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28830c22-f0f6-4152-9a74-fde4b417e51e",
        "cursor": {
          "ref": "805a739a-4677-4ef8-93b1-c5a53724e6b8",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "0ab253d9-c561-4e4d-92ed-4dc6454abe52"
        },
        "item": {
          "id": "28830c22-f0f6-4152-9a74-fde4b417e51e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "545ad7a3-5854-4cb5-aa05-8994e8263563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba7c3d00-3e1b-40b2-9b45-1cfbaa5a1da1",
        "cursor": {
          "ref": "129fce73-6977-42b1-b4e6-9944bea4c4fd",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0f29ed9d-ce0c-4dec-a5b5-b2523d5d0493"
        },
        "item": {
          "id": "ba7c3d00-3e1b-40b2-9b45-1cfbaa5a1da1",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e517271d-d96b-40b6-8e26-1154160ce309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8bef70b-efac-4ecb-b65c-994c4636b60e",
        "cursor": {
          "ref": "4949a659-9ce5-4fde-9099-37e1ad0f9403",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "971d3ab0-16f2-4afc-81cb-683e3a9e573a"
        },
        "item": {
          "id": "e8bef70b-efac-4ecb-b65c-994c4636b60e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2f256cba-d14e-408f-b757-da862cf938cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "debf3ae7-d8d4-45de-86ba-395c41bc8d34",
        "cursor": {
          "ref": "4e8e54a9-404e-4bfd-8e13-efe3a358852e",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "dc582a57-0923-4402-b968-167e04d642e6"
        },
        "item": {
          "id": "debf3ae7-d8d4-45de-86ba-395c41bc8d34",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1e1aeb14-674f-4971-b98e-3a2be2c9d66b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f854231-e2d8-4e75-ba82-06b2d83800dc",
        "cursor": {
          "ref": "196a56de-edd4-48d3-86e5-81238ff5bedd",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ef719dac-6714-47fb-9c78-365b5ca9999b"
        },
        "item": {
          "id": "2f854231-e2d8-4e75-ba82-06b2d83800dc",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8f5d3972-4f47-48d7-9613-2de34dc092b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "383ef7a0-59c1-4c1a-a335-4d43ec8a39cd",
        "cursor": {
          "ref": "c98b9490-11c2-421d-b7ef-8d63f1f44bea",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "adade6d4-9a54-4c37-a152-3c6fe0e9ab61"
        },
        "item": {
          "id": "383ef7a0-59c1-4c1a-a335-4d43ec8a39cd",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c412cb7a-406e-42a0-8c52-f029f4d3bd40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4977e1a-4a87-4433-8969-51cbd8b9e345",
        "cursor": {
          "ref": "c2b1d2e4-8d89-4cfc-bdd6-a03b6b7c40c4",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f7dbb4de-5ac0-4f9b-9ee3-5e8a8cb5a050"
        },
        "item": {
          "id": "b4977e1a-4a87-4433-8969-51cbd8b9e345",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5324355c-0ccb-4536-9ad7-fb199f7f82e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c64c9f0-87d5-4a64-8bca-6d3d070250cb",
        "cursor": {
          "ref": "4b531494-9dec-41c7-a913-1ea42bbd0782",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c8f61d15-c185-49db-929b-099031a319ab"
        },
        "item": {
          "id": "9c64c9f0-87d5-4a64-8bca-6d3d070250cb",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "749c90ca-bdee-433a-9cab-934513521a56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a407a749-c217-44a7-99f3-96301ba89e88",
        "cursor": {
          "ref": "0a38b5d0-25f1-431b-b621-afa1b88340d8",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d5b42b91-032f-44d4-b95b-cbe55f36ef06"
        },
        "item": {
          "id": "a407a749-c217-44a7-99f3-96301ba89e88",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a2110d46-b659-41a4-afb8-b0db8ea6bee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb4029c-5b7f-4f69-8ccd-e28d800eb078",
        "cursor": {
          "ref": "6e9a494e-fbe4-491d-954e-98d1fc0b6999",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "dfca4d2d-2a7e-4edc-b00f-a0002a8840f3"
        },
        "item": {
          "id": "1fb4029c-5b7f-4f69-8ccd-e28d800eb078",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "d6302309-72f6-4774-b3d1-372374f31cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c773668f-ec6f-4bd0-bda9-36a943a6b4d2",
        "cursor": {
          "ref": "73ca9e17-0798-4ee6-8980-7495378c5fb1",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "54990fae-bfc3-4150-8a36-9168dae57f98"
        },
        "item": {
          "id": "c773668f-ec6f-4bd0-bda9-36a943a6b4d2",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f2735efc-890c-4dbf-a448-12f8f4183f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac82eb6-cb5c-4f68-9dbd-f633ae6051a3",
        "cursor": {
          "ref": "4af84615-bfc5-4cc9-9aa2-87d0c6741d7c",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1b690e64-caf3-4173-ba41-e133e5ccc9ca"
        },
        "item": {
          "id": "bac82eb6-cb5c-4f68-9dbd-f633ae6051a3",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e167a6cb-046e-4ff2-81ec-59a1e1987493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 371,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25516413-8958-4983-96d1-6a2c6167d7e0",
        "cursor": {
          "ref": "d770d7e6-72b6-4446-a8b3-dbde00d1c1fb",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b6fad004-7b73-4169-a959-75768f070af8"
        },
        "item": {
          "id": "25516413-8958-4983-96d1-6a2c6167d7e0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a07324a5-d0f8-4f9b-a3d6-c2d6b8d22912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f6f09a-fd00-4cfe-9797-2a09ea08b85c",
        "cursor": {
          "ref": "617e6b93-de3b-4cfa-9b80-553cb5e4c445",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8ed9901e-1511-4099-a357-182983473bb5"
        },
        "item": {
          "id": "a7f6f09a-fd00-4cfe-9797-2a09ea08b85c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4d09f9c4-62a5-450f-b116-82a81bb1c0d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3783173a-7b20-4fac-b459-d741da1eba3c",
        "cursor": {
          "ref": "8c5e8706-5a0f-450b-9306-6a6842ec35b4",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c1d0acb1-ad62-4ed0-bc3f-1fb80498c125"
        },
        "item": {
          "id": "3783173a-7b20-4fac-b459-d741da1eba3c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f5ada158-892a-4b78-848f-8de3ec8af795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de7d3c9-9ba7-40aa-a83e-0f140a176341",
        "cursor": {
          "ref": "a8db20b8-ae46-4575-a6fd-822fe5a5eb57",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ca5d267b-5a30-489b-a352-93755b13a1ce"
        },
        "item": {
          "id": "9de7d3c9-9ba7-40aa-a83e-0f140a176341",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "198d4b28-90e0-487b-a9a8-d5487521dc1d",
          "status": "Created",
          "code": 201,
          "responseTime": 694,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "8cb4e454-eca3-44da-bfa8-098e342fd4e3",
        "cursor": {
          "ref": "5539975d-1d94-4bfd-95f2-943295ea32e6",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e3851ae2-ce67-4265-93a8-af5971680c7d"
        },
        "item": {
          "id": "8cb4e454-eca3-44da-bfa8-098e342fd4e3",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "12dcfb5d-8682-4235-9d9f-3824fc8b38b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "107fb881-8806-4e2c-a0f7-3a2fea873600",
        "cursor": {
          "ref": "744d8c67-67b4-4a7e-9286-db7afe350a34",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "49446cc6-adc4-4e6d-b978-0b086b41cd58"
        },
        "item": {
          "id": "107fb881-8806-4e2c-a0f7-3a2fea873600",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4b13426f-104d-4d69-9fc5-bef207915ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "286cdd29-6131-4b99-a5eb-77069c55f38d",
        "cursor": {
          "ref": "c89ff1a1-525f-4478-a832-3f895eabeb6a",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3f5e3c8b-a5f2-4b2a-a9ea-fdc0713341e6"
        },
        "item": {
          "id": "286cdd29-6131-4b99-a5eb-77069c55f38d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "78355b83-5d04-4909-bf66-7f8831e47467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a83f49-90f5-4fb6-b88b-0eddc615522e",
        "cursor": {
          "ref": "9108f7d1-7188-48f1-9310-53519c07dd91",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f5999850-577b-4042-a089-5758dbc42dfb"
        },
        "item": {
          "id": "49a83f49-90f5-4fb6-b88b-0eddc615522e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "199144c7-a807-43f3-b88c-e502c9a948c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1fef686-2886-445e-9a46-835c4148bda7",
        "cursor": {
          "ref": "32fc3b71-685d-45e0-9ac4-f952538053e5",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "a77a0e96-b5e0-411a-b18c-1702097c6897"
        },
        "item": {
          "id": "e1fef686-2886-445e-9a46-835c4148bda7",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8d116dc8-a9a6-494c-a8b0-4bcd7efc7ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040d876c-851f-42df-ae7c-3c7d72e2d58c",
        "cursor": {
          "ref": "eeb96dfb-4a62-4868-b3c2-914ff01a82b7",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "446e9caf-af82-4209-a744-b3b0e7b06b76"
        },
        "item": {
          "id": "040d876c-851f-42df-ae7c-3c7d72e2d58c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "bbf6ca60-8c0e-48fc-be86-87bfce0bd2c0",
          "status": "Created",
          "code": 201,
          "responseTime": 681,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "c308bda7-363e-41fa-8307-e3be79ec21e8",
        "cursor": {
          "ref": "e1035d57-41c9-43b4-be6f-4cadd9082a5c",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "bc734b58-fddc-41d1-8b07-f02814ee537a"
        },
        "item": {
          "id": "c308bda7-363e-41fa-8307-e3be79ec21e8",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c4ced2cd-93fa-4414-b6d8-c9783beaa038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0c7259-1178-4374-aef1-bc375dff2021",
        "cursor": {
          "ref": "9cf7255a-266c-4917-91b3-4eb1d3f81cff",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "910b49fe-1f53-4c7d-8016-88b7d813b424"
        },
        "item": {
          "id": "7c0c7259-1178-4374-aef1-bc375dff2021",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "bbfde74a-c78b-4011-9f54-de3a892a0a65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a56d3c1e-e249-4c56-90aa-92ee8cb90937",
        "cursor": {
          "ref": "896a2d25-9b01-4efd-8e0a-3b4d91cf7e54",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d6a22c46-b407-472f-8035-31b173e37cc6"
        },
        "item": {
          "id": "a56d3c1e-e249-4c56-90aa-92ee8cb90937",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a1a650df-4ba9-447a-ae28-6e2a187ff712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcae4fb1-aedd-43dc-a26c-7f0fda3ab882",
        "cursor": {
          "ref": "450f53d3-872a-445e-b258-05dfabea943d",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2e58a36a-3ca1-45da-b817-08b1480f007a"
        },
        "item": {
          "id": "dcae4fb1-aedd-43dc-a26c-7f0fda3ab882",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4fde8311-ef88-46d0-bc35-dfed2cc350ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "075f55b6-822d-4627-8e81-2f71f398127e",
        "cursor": {
          "ref": "3e6daf43-7ee8-487b-a723-dd2fb32bf662",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "dc9a461d-5c4b-40c0-a238-9899bcabdd87"
        },
        "item": {
          "id": "075f55b6-822d-4627-8e81-2f71f398127e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ea253e44-f12d-4606-b604-5be486dc0d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d45e3812-cedd-48d8-9c59-af34ba10636c",
        "cursor": {
          "ref": "228fc05a-6a53-4c66-b6d7-e21013f06085",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "76366e58-ba74-491c-827c-2cfd14cd7bca"
        },
        "item": {
          "id": "d45e3812-cedd-48d8-9c59-af34ba10636c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ddfe9820-610e-4b60-9acf-8734ca3e5d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab351df0-4baa-4b6b-9863-bf0bfee14ac8",
        "cursor": {
          "ref": "95422fd8-6adc-41f3-bce8-4e292f2ac8a8",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "682c6e8e-68c5-44ed-97ba-91c50c60d604"
        },
        "item": {
          "id": "ab351df0-4baa-4b6b-9863-bf0bfee14ac8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e8108c36-0918-4db7-bdf3-04267404f743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a43c3b-423e-4217-9b10-1634f91e8633",
        "cursor": {
          "ref": "1f8994d2-69b3-4a7e-b956-138a91a245ac",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c7f75f0c-d5b8-4521-a73f-45c36ca1b4b2"
        },
        "item": {
          "id": "91a43c3b-423e-4217-9b10-1634f91e8633",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "7221493a-1ae1-44ff-83a6-f6354af4b893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cd22339-7055-496f-aaa8-703031ec5a2b",
        "cursor": {
          "ref": "32614fdb-3026-4d3f-8b3b-bb3e0cb9391b",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d0149b25-52d7-4bfb-922a-4faef86990b4"
        },
        "item": {
          "id": "6cd22339-7055-496f-aaa8-703031ec5a2b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a4ecd483-45f5-4e9e-8ad9-de645ca69461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "8b00e500-42f1-4ce3-9fc6-9b9714da6ffb",
        "cursor": {
          "ref": "c2d086eb-9f5c-4adc-9517-537b096f2e8b",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d2d60d75-749b-4991-8eaa-5713e54798df"
        },
        "item": {
          "id": "8b00e500-42f1-4ce3-9fc6-9b9714da6ffb",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "522656e0-6fd2-4264-8564-253f121274a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "db17ce2a-00e7-42bd-be28-0bdbb7640d44",
        "cursor": {
          "ref": "86dc94fb-0154-4d2f-9742-49acf12cab51",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f30087e4-0cb1-4153-810b-8ec1eba290f6"
        },
        "item": {
          "id": "db17ce2a-00e7-42bd-be28-0bdbb7640d44",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c0923da4-6a9c-4964-ac2b-045924e6f652",
          "status": "Created",
          "code": 201,
          "responseTime": 748,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "193d192b-8a7b-45b4-8142-198c1ebffe35",
        "cursor": {
          "ref": "f32f995d-13d0-40a8-9c12-eeeea5e26044",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "83333105-850c-4b34-b762-864d1cf49f96"
        },
        "item": {
          "id": "193d192b-8a7b-45b4-8142-198c1ebffe35",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "84d69c53-60c4-4e6d-b4d7-0bc14af87a9f",
          "status": "Created",
          "code": 201,
          "responseTime": 672,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3628a363-ef78-4abb-a71c-8f0f50840a63",
        "cursor": {
          "ref": "1666970b-a5c1-498f-9b61-1d90a4a2f143",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a489959f-81e6-4a8d-a98b-f232aa8b0364"
        },
        "item": {
          "id": "3628a363-ef78-4abb-a71c-8f0f50840a63",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "25efcb26-9eed-4f01-bb8e-a7ee18a627aa",
          "status": "Created",
          "code": 201,
          "responseTime": 707,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "03380a99-7ddc-4c00-8f3c-3e5909a960a3",
        "cursor": {
          "ref": "5aebda02-7083-4211-ae0b-f5ef9a3ca45a",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "26aa69d2-6230-4fdc-ac16-1960376afb6b"
        },
        "item": {
          "id": "03380a99-7ddc-4c00-8f3c-3e5909a960a3",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "de2b8a4a-5e52-4694-ad9f-7431cc53e843",
          "status": "Created",
          "code": 201,
          "responseTime": 712,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "54fe1979-3ca9-499a-88a6-ca04b87e6f86",
        "cursor": {
          "ref": "62795656-6772-4b7a-8dd8-a7988dd7dc17",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5ddc3e7a-ab7c-4a79-ac89-ce9fb8157492"
        },
        "item": {
          "id": "54fe1979-3ca9-499a-88a6-ca04b87e6f86",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "93c0a711-2810-4ad4-a00c-608ff84c15a2",
          "status": "Created",
          "code": 201,
          "responseTime": 703,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4aaa0cc-f6e8-46f7-b906-3d20e34eac7c",
        "cursor": {
          "ref": "c766f493-ec00-4774-a708-c13b31ec3adf",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1f2c023f-cd5a-44eb-95fd-27d24c33c2b5"
        },
        "item": {
          "id": "f4aaa0cc-f6e8-46f7-b906-3d20e34eac7c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4d5d9244-2a0b-42ba-afe0-5b4f29ab7f59",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "f4aaa0cc-f6e8-46f7-b906-3d20e34eac7c",
        "cursor": {
          "ref": "c766f493-ec00-4774-a708-c13b31ec3adf",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1f2c023f-cd5a-44eb-95fd-27d24c33c2b5"
        },
        "item": {
          "id": "f4aaa0cc-f6e8-46f7-b906-3d20e34eac7c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4d5d9244-2a0b-42ba-afe0-5b4f29ab7f59",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "e6812760-b14b-4f8e-8b1e-d27a5bbc7df8",
        "cursor": {
          "ref": "af78da1d-66a1-47db-b315-ad437ec26ee9",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4eb11374-93ef-47ee-b23e-466500db8d53"
        },
        "item": {
          "id": "e6812760-b14b-4f8e-8b1e-d27a5bbc7df8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "af1e136f-66ea-401f-8220-ab23836faca7",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "1d195602-94ed-470a-b37b-2354fda1ff54",
        "cursor": {
          "ref": "ee833b9b-8a48-4596-9d9a-a4dcdb8a18c2",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "6736bc8b-0f31-4a71-9240-8c7ed4401060"
        },
        "item": {
          "id": "1d195602-94ed-470a-b37b-2354fda1ff54",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e473bd44-ed30-413b-9927-1285ea0b835e",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "3f18d43b-b79d-4a7f-948e-b76e279039b2",
        "cursor": {
          "ref": "115d57ad-63d1-4dfb-894d-9f6ab1cad5db",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e7b5ff5e-58fe-4a23-90ff-d14931760c6d"
        },
        "item": {
          "id": "3f18d43b-b79d-4a7f-948e-b76e279039b2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "627ecb9d-f0f3-4a32-856c-d7b2e9369354",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "ca7141f8-f71d-4f15-8ed7-9d33b4481228",
        "cursor": {
          "ref": "eef25c0f-0b3c-4f58-9d45-8315901ed586",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "61123fab-1381-4e65-a254-e10095e992a2"
        },
        "item": {
          "id": "ca7141f8-f71d-4f15-8ed7-9d33b4481228",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "50a00029-a2a5-46c9-946e-11ec08eb5761",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "578f8bca-434e-43ed-8341-e37467213a14",
        "cursor": {
          "ref": "37c1eecf-6d93-43be-b082-d92795734d0e",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "db85aa34-8571-49ca-86e2-f426110f335d"
        },
        "item": {
          "id": "578f8bca-434e-43ed-8341-e37467213a14",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "afa191d6-218f-4eb7-88d6-60aea66b1761",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "90ce000a-29ed-440a-a6c1-40f1036750c2",
        "cursor": {
          "ref": "82374e04-af05-4c56-b48c-c9b553e99114",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a90e30c9-d9b9-4ce6-ba98-dfd9954ce355"
        },
        "item": {
          "id": "90ce000a-29ed-440a-a6c1-40f1036750c2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7de73e2e-38de-4837-9f1f-57a313632873",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "267c28e1-6e62-4bf7-9902-c516333fb2d3",
        "cursor": {
          "ref": "4980ca7f-fd18-42cd-a53a-1fc2881ba5fa",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9a8bbf6b-36c5-43fb-aef4-80a90715eda3"
        },
        "item": {
          "id": "267c28e1-6e62-4bf7-9902-c516333fb2d3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a38e78ed-c624-4642-93bb-7b2f3f46c343",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "c64b9c37-6ddf-4584-a523-4c1c482a580e",
        "cursor": {
          "ref": "5bb64cc7-0f5a-45d4-b1ca-21965fcc6bb2",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "19ef6810-da20-49a3-8c2b-62ff6943743a"
        },
        "item": {
          "id": "c64b9c37-6ddf-4584-a523-4c1c482a580e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0c7a55ac-e46b-4f70-81e0-c1bb44165a89",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "68a3c399-35ea-48e0-9f43-1fac608701ef",
        "cursor": {
          "ref": "c7f43e5f-b7e2-4439-b70a-a65355a9ee0d",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f355a299-4139-47a0-8cad-67a0a42e7bb3"
        },
        "item": {
          "id": "68a3c399-35ea-48e0-9f43-1fac608701ef",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "89d55aaa-65e5-479c-a613-50d76006117e",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "841cd609-b06b-48dc-802c-3f1a3004011a",
        "cursor": {
          "ref": "ea5a251a-7f81-4b87-89fa-e5168fea7b91",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b5659f09-88c6-47f4-b33b-7e762ce507d7"
        },
        "item": {
          "id": "841cd609-b06b-48dc-802c-3f1a3004011a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "aba631ed-bc67-4d17-9ba5-95dd5cd514e6",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "1dfe1824-df39-4eeb-a59b-0baece17dbf5",
        "cursor": {
          "ref": "c401a0d2-b9cd-48d2-8068-5aa2cf9622a5",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c969980a-cb2c-486b-b570-24fbddad4d8d"
        },
        "item": {
          "id": "1dfe1824-df39-4eeb-a59b-0baece17dbf5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "450f4cd0-216f-46ff-9585-6e1fe5087950",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "e9989f3e-0d23-4b76-9da0-67c8757e60c8",
        "cursor": {
          "ref": "b5d38c74-5b7a-4bdd-bfa0-ad0db47f70c5",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0edc3f6f-764e-429e-b170-232d0445bf23"
        },
        "item": {
          "id": "e9989f3e-0d23-4b76-9da0-67c8757e60c8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0a64361f-25d8-43f6-9c72-4195558f7e43",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "c3085c59-afc9-4634-b650-1367d6faafa0",
        "cursor": {
          "ref": "32a20606-517d-4702-b356-0db8740bda6a",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "dfe3ef3b-d397-4923-97fe-d5454c431447"
        },
        "item": {
          "id": "c3085c59-afc9-4634-b650-1367d6faafa0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "cdb0c062-af90-4c1c-9049-1211bc71ad4e",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "b140dd4a-7f5a-481e-a6e1-474c681b6c2a",
        "cursor": {
          "ref": "9ce2a854-28c8-4c15-b026-991f2176cb5e",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4e62f674-f5fe-445d-b1b7-3f39959f26fb"
        },
        "item": {
          "id": "b140dd4a-7f5a-481e-a6e1-474c681b6c2a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "cc2bb0d9-f489-41b7-b557-c9b1460b1473",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "aa636242-6ef6-4a32-92ad-28a2fd5a0132",
        "cursor": {
          "ref": "b1d00e7c-ab4a-4f63-81ac-dcfb7fe93a7b",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f8fae66f-3306-4b84-be83-fc503583456f"
        },
        "item": {
          "id": "aa636242-6ef6-4a32-92ad-28a2fd5a0132",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "385246fe-a2cf-4bfa-86b2-67104bea39e8",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "94649461-9cbd-4e1b-a06e-6ee37c48bc4b",
        "cursor": {
          "ref": "4b5b8655-d320-402c-9641-307af2e98a6f",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7a66b13f-50a9-4919-9af9-64c8a2e6d7a8"
        },
        "item": {
          "id": "94649461-9cbd-4e1b-a06e-6ee37c48bc4b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0e32d00c-0f75-4e08-933b-307eeff12fc7",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "4af2f989-ec89-47e7-bbbd-8b5b777a1fbc",
        "cursor": {
          "ref": "a5b6f1e3-3587-4c56-92f2-9087b3f472e3",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "45f0afa2-c37b-4eac-a52b-d4ca5048bc24"
        },
        "item": {
          "id": "4af2f989-ec89-47e7-bbbd-8b5b777a1fbc",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e320626b-889b-4ecf-b4d3-3b71acf532f1",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "eb7dee63-9eb2-4ae4-bf00-a8eb94fc55f0",
        "cursor": {
          "ref": "cad6fdd2-4134-4380-9b8f-3e4b954ddc6b",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "96f56466-cd03-422a-b946-57ca3ede75de"
        },
        "item": {
          "id": "eb7dee63-9eb2-4ae4-bf00-a8eb94fc55f0",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e0e30be7-a4c7-4c1a-901a-9c1f3896b191",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "bce6ebcb-3e6f-4b27-8814-a7a9ca8eb226",
        "cursor": {
          "ref": "3a9d7524-405c-4093-845d-015fb184156f",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ac53f264-3d73-4dba-adc9-5be4573e885b"
        },
        "item": {
          "id": "bce6ebcb-3e6f-4b27-8814-a7a9ca8eb226",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9f2be7db-3894-4992-8510-116f79aba49a",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "676bffcf-df02-4ee4-8084-411cb9c782ae",
        "cursor": {
          "ref": "3349b1ce-5a0b-48a5-9ba6-82a8c0a59d10",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c025b195-d283-4223-b175-24c4783b4664"
        },
        "item": {
          "id": "676bffcf-df02-4ee4-8084-411cb9c782ae",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "16f3cd95-2b0b-4a37-8943-03ffa8df46ba",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "ac5a6e4f-bc14-440c-a19d-150b47b26a73",
        "cursor": {
          "ref": "00b284ff-f32c-40b8-aae8-6ac76ff6bd26",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "26f431d4-a7df-4e28-9643-577f93383184"
        },
        "item": {
          "id": "ac5a6e4f-bc14-440c-a19d-150b47b26a73",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0125daa2-976b-4ef9-848b-547eb2e6f165",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "18ed6ab0-c7a8-4496-baf7-5f7053fb5f64",
        "cursor": {
          "ref": "4601dd3c-7d3c-4af2-988e-d36540b99928",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0d64b56f-dc6d-4ef5-b526-c93c3260e757"
        },
        "item": {
          "id": "18ed6ab0-c7a8-4496-baf7-5f7053fb5f64",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a168b12f-9108-43de-983e-762d228d7822",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "cd480d1b-8a84-4179-9af0-77f71a3c5cd9",
        "cursor": {
          "ref": "02e7e77d-721e-4f52-b96b-11cd9e79107a",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5dd7e3e5-91d7-40c9-9012-a5c63e09deed"
        },
        "item": {
          "id": "cd480d1b-8a84-4179-9af0-77f71a3c5cd9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b25d21f7-2ff6-4eee-9a0c-55944d32022b",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "27671224-71fb-48a4-b8db-15df7da8bc11",
        "cursor": {
          "ref": "41325caa-615b-4313-9ba8-6b538f5b807a",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d6e3270e-124c-401c-89d3-43d016514760"
        },
        "item": {
          "id": "27671224-71fb-48a4-b8db-15df7da8bc11",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2dd3a0f5-0832-42b6-a254-313db6708378",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "6362b08e-d337-45f5-b73f-6090d27c33c9",
        "cursor": {
          "ref": "cea588fa-0211-4a70-8959-255c7946d3f6",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f6b90e83-286b-4ab1-9583-bc3f2617f3b7"
        },
        "item": {
          "id": "6362b08e-d337-45f5-b73f-6090d27c33c9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3886a60b-490d-4285-b89a-8fa9c2df044f",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "2ab5a319-a554-465f-a3aa-ea8bd6bd7d93",
        "cursor": {
          "ref": "8da951fa-10a4-4541-9758-b01ff676fb4f",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "27c5ae83-bb44-4b7d-9206-407ee0bccd83"
        },
        "item": {
          "id": "2ab5a319-a554-465f-a3aa-ea8bd6bd7d93",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "384bbbd8-0be7-470b-bb35-31e9e499218d",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "6542713f-ccac-4661-aea7-afc7423cdd36",
        "cursor": {
          "ref": "96fda2d1-d08c-4103-a035-2176e861af9b",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d5fb032e-a67a-40ad-a691-63033cd4e4ba"
        },
        "item": {
          "id": "6542713f-ccac-4661-aea7-afc7423cdd36",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3a70f6cb-801e-4da5-bbc8-34454bcf615d",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "6cd1e61d-2e8a-4423-ad77-ccf3c31288f6",
        "cursor": {
          "ref": "e264abeb-db63-44f4-8ba6-660b20367a84",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c4eaccd4-1fb2-4c95-8083-6e4f9bd3773b"
        },
        "item": {
          "id": "6cd1e61d-2e8a-4423-ad77-ccf3c31288f6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4bd3914c-c5a7-4ae1-bdcb-4112327b42b8",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "cd534766-01dd-4aa6-8dc0-1e0730ca949a",
        "cursor": {
          "ref": "f134dbd9-9b4c-4c02-b287-0a4449645cb2",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9d629a3c-12dd-4c2c-9f7b-c29e25fb11e2"
        },
        "item": {
          "id": "cd534766-01dd-4aa6-8dc0-1e0730ca949a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "59b71b1a-80ae-4730-a76e-cb67a5a841e9",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "8b9b4c0a-ebae-4a12-a6bf-cee089a011e8",
        "cursor": {
          "ref": "5cd9e0f8-a33b-40d1-9d02-6bd2dd4396a1",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "992f621a-d0dc-4eef-8a6d-5824ca311994"
        },
        "item": {
          "id": "8b9b4c0a-ebae-4a12-a6bf-cee089a011e8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c55ff584-c2e8-4eef-8e54-50ed1c2362eb",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "b2da1f7f-dd40-406e-83f9-9c690ad1e972",
        "cursor": {
          "ref": "7d2ca9f4-5b82-4787-8a16-19e6ebb4fe47",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "528cecdb-6c82-4f86-8ffc-4d7bbc73324e"
        },
        "item": {
          "id": "b2da1f7f-dd40-406e-83f9-9c690ad1e972",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b90c9886-ba67-4271-9504-6fd74675a89e",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "4c5c425a-5571-4924-9c2b-edfa64e433db",
        "cursor": {
          "ref": "c815870f-7da5-44cd-a974-a0b6a832772d",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "5f2a5428-30d1-42f4-bfcd-b540a4c1e0e3"
        },
        "item": {
          "id": "4c5c425a-5571-4924-9c2b-edfa64e433db",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "69e89475-cb4d-44b5-97d3-423db4549768",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625a5841-2dd8-4960-b472-1cda5436d64a",
        "cursor": {
          "ref": "06da053a-5a1b-4ae3-8da9-25eddd860f3e",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b38a30bf-3890-4a44-b4d6-e0acdf73fb9b"
        },
        "item": {
          "id": "625a5841-2dd8-4960-b472-1cda5436d64a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "40f8ed9a-46da-4f63-a199-4569e110c41a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df338e08-9e90-4053-b176-d3c0841a27c3",
        "cursor": {
          "ref": "287bc82d-e6ec-472b-a3e9-98dfbf55fc0f",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "48ca7231-3049-4361-adff-2d2190d0c0b0"
        },
        "item": {
          "id": "df338e08-9e90-4053-b176-d3c0841a27c3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b22639e0-2769-4aea-ae58-d0a11d656457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df338e08-9e90-4053-b176-d3c0841a27c3",
        "cursor": {
          "ref": "287bc82d-e6ec-472b-a3e9-98dfbf55fc0f",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "48ca7231-3049-4361-adff-2d2190d0c0b0"
        },
        "item": {
          "id": "df338e08-9e90-4053-b176-d3c0841a27c3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b22639e0-2769-4aea-ae58-d0a11d656457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed05e024-bf40-4501-8c12-9c9a678385e6",
        "cursor": {
          "ref": "536e4d3f-5393-4576-82bb-28c5dacf7335",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8fa96d63-b5b8-452f-a441-8586081d567b"
        },
        "item": {
          "id": "ed05e024-bf40-4501-8c12-9c9a678385e6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "de7da153-eb94-4072-96e5-acb9533bedcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c8e511b-3e46-4104-85ec-4df3b90d215c",
        "cursor": {
          "ref": "7a4ad042-da67-48eb-b995-cd37655a5e2a",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a80d7eca-14a2-4363-92d2-298f0b6ddbfd"
        },
        "item": {
          "id": "1c8e511b-3e46-4104-85ec-4df3b90d215c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2c01ebfc-3bc8-4a7f-849b-afb8ece45d57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b85d11f6-f516-4ddb-ad36-78397f022d26",
        "cursor": {
          "ref": "d53d0057-a8d4-471a-babf-6b5c5c4ca58b",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "5ec70dfc-5220-4182-8f4a-6746aca7afce"
        },
        "item": {
          "id": "b85d11f6-f516-4ddb-ad36-78397f022d26",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "2eea6ad4-f012-4b61-843c-eb048e57c78f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf84bdc-fa82-4a24-9308-30edb4b846e3",
        "cursor": {
          "ref": "9507b7c1-5f17-4b12-b999-547a605fa9de",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "eb185ca3-ec45-4707-960f-a166f9ee963b"
        },
        "item": {
          "id": "abf84bdc-fa82-4a24-9308-30edb4b846e3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "087c1d94-3c63-4130-aad4-b60482d495a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e20532e-2f77-484d-ba55-a95be7c3731d",
        "cursor": {
          "ref": "637e03f7-868e-4760-9ccc-c1526d3966b0",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7a80e8ac-1b98-44de-ba6e-70098bd9546d"
        },
        "item": {
          "id": "4e20532e-2f77-484d-ba55-a95be7c3731d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "97b19eba-3002-4652-8039-0ffdc19fed8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5517acce-ed9d-4892-83de-a94edf29e18d",
        "cursor": {
          "ref": "04e3ca63-89b9-4a08-8e84-71d5fdbf3b3c",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f930f784-d9f1-442c-8343-408a87ce1bfe"
        },
        "item": {
          "id": "5517acce-ed9d-4892-83de-a94edf29e18d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2fc241cf-5f71-4c66-8860-bfa574630d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c34c4869-afe3-42be-a1f9-40f16cb81d41",
        "cursor": {
          "ref": "072e4d85-2006-4566-86cf-991d9f579942",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "2b0d9e5b-1aed-49c6-9ef4-8422c4fe3679"
        },
        "item": {
          "id": "c34c4869-afe3-42be-a1f9-40f16cb81d41",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "05cca9e2-e882-4e4a-83ae-e2fd1d4cc332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f30e6a-75e1-4c56-9b09-0d6fb1d929b4",
        "cursor": {
          "ref": "d2a1c2b8-d80d-49bf-b9da-b685676ec6ed",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4840d269-1819-4e7e-9ac8-f6f0643076a9"
        },
        "item": {
          "id": "73f30e6a-75e1-4c56-9b09-0d6fb1d929b4",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "09f2d336-e95d-4e75-acaa-4b1d917761e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43da24e0-6cbb-4645-ad45-8ae3bd1f37f4",
        "cursor": {
          "ref": "8bb194de-c889-4837-87ad-176304b07505",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "df842e76-0e0d-4c45-89c9-0160005670b9"
        },
        "item": {
          "id": "43da24e0-6cbb-4645-ad45-8ae3bd1f37f4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "447ac714-1db4-48ad-85b8-679e23b7e736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81063f61-7813-49d3-b9bd-2bd7465ceaf0",
        "cursor": {
          "ref": "739acef9-b8f1-4103-a0d1-8345f2ffa682",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ec9e71f3-9ce8-4b30-81bb-5b084bd2722f"
        },
        "item": {
          "id": "81063f61-7813-49d3-b9bd-2bd7465ceaf0",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ddc33fe8-6cd6-4218-9e67-e982513c9f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fedb7c6-fe41-473a-be9a-ec1440748546",
        "cursor": {
          "ref": "ba5ee32e-6217-45da-9323-6a37dc5121e4",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "51e7c6f2-ae75-4704-a7da-af52e841f72e"
        },
        "item": {
          "id": "2fedb7c6-fe41-473a-be9a-ec1440748546",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a22402a0-cb5c-4764-807c-f648673d82fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a82c7d67-a7c9-4195-9659-ec99db14504c",
        "cursor": {
          "ref": "4c9eb33a-8825-45b3-94dc-a3c423112119",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9edcb30a-d69b-4249-896f-df51b7f08d1c"
        },
        "item": {
          "id": "a82c7d67-a7c9-4195-9659-ec99db14504c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5e194bb5-86f7-4fc2-b816-261243e24fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd567ae5-31bd-49ce-babb-dc0ef9ef124f",
        "cursor": {
          "ref": "db2b7f1d-6526-466c-a332-355e9954f8c5",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d2a83075-fc8e-40ca-b770-01898bb0e39d"
        },
        "item": {
          "id": "bd567ae5-31bd-49ce-babb-dc0ef9ef124f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f6b94929-4b56-4d8d-856b-50c3c0455cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfcb1707-cfd4-4a66-885c-02836cc02eeb",
        "cursor": {
          "ref": "575fb549-b407-4a40-b0d6-f07be9b0dd9b",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "91ee44ed-e117-4851-981a-ecbf540f660a"
        },
        "item": {
          "id": "bfcb1707-cfd4-4a66-885c-02836cc02eeb",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1925b928-01bf-48c7-b2d7-b2dc7af533d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b494e997-33fc-4e52-adba-b246ed09200f",
        "cursor": {
          "ref": "0e0dc696-5682-43ec-828b-792dbb5e1fa3",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "70a81f6b-58ee-4e3a-a0fb-d6a63c172976"
        },
        "item": {
          "id": "b494e997-33fc-4e52-adba-b246ed09200f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f5eac8a4-7aa6-4e3b-9ff0-bd14b55dc2e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5701c68-9a9a-455d-9c61-de38de4b40a8",
        "cursor": {
          "ref": "eebf074d-d5ec-4bb4-b7ec-8b06720e5ad5",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1c288a7a-ad39-4d2f-abab-e037a3386c7e"
        },
        "item": {
          "id": "e5701c68-9a9a-455d-9c61-de38de4b40a8",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d3aa4d1b-7e91-4d40-8791-29429483c9fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bbba7af-4597-4bd9-aeec-2328d27b3211",
        "cursor": {
          "ref": "ceba2c23-faa5-4615-b78f-81b4e8d6b925",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "6ca980f2-4af0-41da-975b-38631292faf5"
        },
        "item": {
          "id": "5bbba7af-4597-4bd9-aeec-2328d27b3211",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "505b6b7c-7755-4ac2-88cb-43db7c767881",
          "status": "OK",
          "code": 200,
          "responseTime": 694,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "0674a6ef-16c4-4c8d-b88d-64b8de3f0e4c",
        "cursor": {
          "ref": "2e846e01-af2e-41a9-8f6b-cadac74be407",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "746fb7c9-8108-442f-b1b7-c544dc4b14e2"
        },
        "item": {
          "id": "0674a6ef-16c4-4c8d-b88d-64b8de3f0e4c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "153ec376-b5ef-4c4d-9221-f7b980b129aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 325,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bbb3dd6-7176-4547-9de9-80061c2b1a66",
        "cursor": {
          "ref": "85333a20-fa30-4d4b-929a-139ab5477cfe",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2fd75fc0-ba3d-4948-aee7-fd4eb81d8833"
        },
        "item": {
          "id": "6bbb3dd6-7176-4547-9de9-80061c2b1a66",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "451c83a8-7675-4bd9-ad5d-a102b5616bb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 352,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9290b363-2ce2-403f-9b67-4c7fd7928404",
        "cursor": {
          "ref": "ca8e46d3-9ff6-49f7-a237-bd4fd22441e2",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "dcb33870-5ab8-4e91-b8bf-2ed89e793607"
        },
        "item": {
          "id": "9290b363-2ce2-403f-9b67-4c7fd7928404",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5a5e416f-fc95-41d8-bed0-d633adece425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d1fc937-5b7c-439c-b6cc-00e55102c4ac",
        "cursor": {
          "ref": "aa4462dd-8494-45c3-a4f9-208f6485e0a6",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b4995fde-babf-4fd5-9afd-ed622b129a0f"
        },
        "item": {
          "id": "5d1fc937-5b7c-439c-b6cc-00e55102c4ac",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ecd3cc57-b03c-4233-8d41-fc1a71c9806f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 349,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6cee9c-8ab9-4b77-8896-88b193ce48fc",
        "cursor": {
          "ref": "4228e35d-af63-49da-8769-8420d6ff924a",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e048dc8c-6891-4ddd-89bb-16a635453d0e"
        },
        "item": {
          "id": "7b6cee9c-8ab9-4b77-8896-88b193ce48fc",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "9957286e-b15c-4913-af4b-b86c66daa2aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 333,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7ed13a6-063c-4730-80b5-080091e975b4",
        "cursor": {
          "ref": "f2ecdf99-8082-4e74-ba20-d69d47d14f8e",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "56ef1c87-016e-41c1-87f2-5c2236325cf1"
        },
        "item": {
          "id": "f7ed13a6-063c-4730-80b5-080091e975b4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "0e7de80c-3ce6-4fc5-bd46-7a5abb9da81f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 331,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8269a8-674e-45ce-8b6d-4a9d40357cc1",
        "cursor": {
          "ref": "9ee36746-bdb7-4f8c-981e-e99b922ff9fc",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f7a07ebe-8b17-46fd-bf24-d8e84cab1cb6"
        },
        "item": {
          "id": "6f8269a8-674e-45ce-8b6d-4a9d40357cc1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6565a418-21f6-41b9-b9ac-ae48a5abd5a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93479c87-5df3-4770-bebc-4af1d91f1e1d",
        "cursor": {
          "ref": "ae95645e-214d-4feb-b52a-a8b60c8534a8",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7791289e-c559-4fe1-9350-4bcf3c104d17"
        },
        "item": {
          "id": "93479c87-5df3-4770-bebc-4af1d91f1e1d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "2000d3bb-770a-4942-8f6a-a7cfdb4a2237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2117aee9-23c0-4d49-979c-a8374eda3c59",
        "cursor": {
          "ref": "2c6836d9-529c-4f30-b959-b41ab80d203a",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c947dac0-6011-4661-940f-7b4b0a9dffaa"
        },
        "item": {
          "id": "2117aee9-23c0-4d49-979c-a8374eda3c59",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "98243e44-b163-4bb6-b74b-ef8c581ec5a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 311,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44418c2d-d307-499c-82dc-0b1cf7706033",
        "cursor": {
          "ref": "8740c16a-3c0d-4147-98b0-31561b7301b5",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0de6f041-7967-41c0-bb7b-63495ba9ac20"
        },
        "item": {
          "id": "44418c2d-d307-499c-82dc-0b1cf7706033",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "222d8afa-3bfd-43ac-b91a-9ee3091f40c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd1a2ef-d237-4904-9756-c3ecb43ee48b",
        "cursor": {
          "ref": "3bdfabeb-e52d-4895-8166-01a3d2b423c6",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7ad725dd-ed39-4454-b90b-6cb6ccec757a"
        },
        "item": {
          "id": "ecd1a2ef-d237-4904-9756-c3ecb43ee48b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e5934ef0-b98c-4d55-8a53-6802f12e41a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a97eb53-4bce-4583-8b24-553d91824c3f",
        "cursor": {
          "ref": "e279e29a-5802-4e77-beb2-61bee2d42e59",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "23049e90-4eab-4d09-b2de-8bc85085d23a"
        },
        "item": {
          "id": "4a97eb53-4bce-4583-8b24-553d91824c3f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "3e5da54c-1a42-4d03-8e8d-0aecf76beb6c",
          "status": "OK",
          "code": 200,
          "responseTime": 290,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "d654fb8b-6426-4f27-bc90-557b11cc9488",
        "cursor": {
          "ref": "124e3487-9a2d-45d9-ac58-1d0975cb4d11",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a0e5a94a-2295-4702-a8b2-6a0561f34330"
        },
        "item": {
          "id": "d654fb8b-6426-4f27-bc90-557b11cc9488",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "cbbd3479-526c-4a5f-b556-b7b76a0c2d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98cf7279-8aae-415e-9226-94ff9b340515",
        "cursor": {
          "ref": "15e18c0e-cdbb-46d0-aa6d-9431f606fd5c",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9aa42f50-02e2-49a3-95fb-c9389d24bed7"
        },
        "item": {
          "id": "98cf7279-8aae-415e-9226-94ff9b340515",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6f5e8efb-47b9-4595-a32e-0dc4f46762f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21336b78-5315-489b-b32e-46a11e22a0bf",
        "cursor": {
          "ref": "03d20c10-cb09-42f1-aa69-1a8850da3a85",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b1515370-fd31-42ba-835a-79aa62ed6b97"
        },
        "item": {
          "id": "21336b78-5315-489b-b32e-46a11e22a0bf",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "576a7a10-7129-40af-83f2-57f62c979ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8982e658-8aa5-4ecd-8ab8-295cd197dfaf",
        "cursor": {
          "ref": "79071f9c-ece6-4a0b-804a-ffc50799451a",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "88e9afdd-5c4f-43b4-afaf-17a35f63210b"
        },
        "item": {
          "id": "8982e658-8aa5-4ecd-8ab8-295cd197dfaf",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "74d2253c-d628-44c8-b107-66c1380559fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 292,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "924016bd-bc7c-4758-a0dc-7438ad3510e6",
        "cursor": {
          "ref": "0c23f048-49f9-4bad-adbd-0342b766b3d7",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "86470f32-cbfb-409a-b5cd-9cd3b90c84af"
        },
        "item": {
          "id": "924016bd-bc7c-4758-a0dc-7438ad3510e6",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "61a9e397-785e-47f9-b995-54d0470dd8ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b06fa7-3979-41d2-8659-deb0b52545ea",
        "cursor": {
          "ref": "5067c47d-2412-4613-be61-009efe5afad9",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e4380c3c-8df6-4d98-b498-9b3b8ff201c9"
        },
        "item": {
          "id": "c7b06fa7-3979-41d2-8659-deb0b52545ea",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "fe16e6a5-9c12-4eed-b687-b0bb963534a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 366,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41eb09cb-1f55-4c9a-b4cb-6dbd0d5dc0ff",
        "cursor": {
          "ref": "37f1e118-b4e6-44f2-b572-ae13a1314884",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9778a1db-b048-43d5-bba3-0cab0f595d11"
        },
        "item": {
          "id": "41eb09cb-1f55-4c9a-b4cb-6dbd0d5dc0ff",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e50c44af-0c7c-482e-bf96-0a3b5c0bc76a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 352,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "686f88a7-1a3a-4d6a-9e82-9973a4e45793",
        "cursor": {
          "ref": "f7c836d5-2a2f-4906-b232-8a5447c078ed",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3463cc1f-c1bd-4d7f-8dc3-8f2e28a47017"
        },
        "item": {
          "id": "686f88a7-1a3a-4d6a-9e82-9973a4e45793",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3a68f62d-4957-417c-8add-54ac6a53b530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 335,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a868e45e-09d5-4299-a164-17e1a408a834",
        "cursor": {
          "ref": "4a64e6c0-6a03-4fa5-b003-ce5d93a335c7",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "575da530-315a-4680-a389-01fb39daa350"
        },
        "item": {
          "id": "a868e45e-09d5-4299-a164-17e1a408a834",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5d5afba8-6a23-423f-953a-61fce4920fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 360,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fb85f3c-53bd-4262-9664-fd0f2647fb89",
        "cursor": {
          "ref": "239642f9-885c-4e5b-91cc-05b9848903df",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9719e250-538d-41dd-99d0-be984750722f"
        },
        "item": {
          "id": "4fb85f3c-53bd-4262-9664-fd0f2647fb89",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ae6bb2c1-f1ab-43de-9fb5-7437055b2ad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 342,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c3c69a-27d4-4235-9d18-0f4a05d638d3",
        "cursor": {
          "ref": "ffc4b3ab-229b-427f-91bc-c905647bc548",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2eee6d32-a469-4476-a956-e513bea58c5c"
        },
        "item": {
          "id": "78c3c69a-27d4-4235-9d18-0f4a05d638d3",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "31c3408a-6747-4872-b820-ceb1266b9a15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 333,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c15290-0218-44fe-a43c-801175ab6e85",
        "cursor": {
          "ref": "ec79bc29-f7c2-4986-94bb-438bccc47458",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "20396599-4560-4431-a56b-edc28bddfccc"
        },
        "item": {
          "id": "b0c15290-0218-44fe-a43c-801175ab6e85",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "02b1379f-5810-4eff-9a04-ead2ffc03c9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4266d80-a449-4687-bac8-c72e78eac6a0",
        "cursor": {
          "ref": "8f9d270b-24ae-40d7-8b51-cd4ef564f3ad",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ebc1185a-cfca-4e61-85e3-1e74f40e391d"
        },
        "item": {
          "id": "b4266d80-a449-4687-bac8-c72e78eac6a0",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "45cae187-cc5a-40bc-8e4c-9fb660315d5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 498,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bfa989b-18ff-476d-9034-cd0b24cb0e44",
        "cursor": {
          "ref": "6756626d-423d-4912-8353-952419f51867",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "30104645-e1d7-4f91-9361-4184939d3399"
        },
        "item": {
          "id": "4bfa989b-18ff-476d-9034-cd0b24cb0e44",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "3637d883-ff1e-464c-9ecf-454c8c15d313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 347,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2fe7f48-418d-4906-98fd-75aa71dfa28f",
        "cursor": {
          "ref": "d05828c7-a25d-4174-b86a-7a107a64e0d2",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0479ca7a-cd53-4540-becd-61956dd55517"
        },
        "item": {
          "id": "a2fe7f48-418d-4906-98fd-75aa71dfa28f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c36d2d90-1ec7-4b9f-8253-00ef0583c3c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 330,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24540b9d-ac3f-48be-8647-fcf61cdca1d5",
        "cursor": {
          "ref": "bfafec1a-8c88-48ae-ae03-825410f0e0e6",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d138bcec-6af8-4a58-bf05-8e3837e40480"
        },
        "item": {
          "id": "24540b9d-ac3f-48be-8647-fcf61cdca1d5",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "fba381a7-30de-4ca7-8608-f8163bbf95f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 330,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b50cfef2-7263-4d3a-9673-c638bfb6d9b9",
        "cursor": {
          "ref": "ee60e6b0-49f0-4e29-963e-e665ec840e2d",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "44d70609-a34a-4a96-b0d8-75e3c5478999"
        },
        "item": {
          "id": "b50cfef2-7263-4d3a-9673-c638bfb6d9b9",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "790c6116-ea13-4bc2-bc3c-4673f678b348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 333,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e99a0d9-b66d-47c6-92fd-75945e557f2b",
        "cursor": {
          "ref": "87c1862f-719c-4702-a037-1d58ba0c1adb",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0b956278-c8f9-41fe-94ca-8e63cf909a57"
        },
        "item": {
          "id": "3e99a0d9-b66d-47c6-92fd-75945e557f2b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c7345235-8ade-425b-8932-010038561a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f440590-aa38-4172-ba0b-12aba5817488",
        "cursor": {
          "ref": "fc2dfabd-dde5-484b-97fc-b46351736cf5",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "28c800ca-6c2d-4846-8c41-673966ada054"
        },
        "item": {
          "id": "4f440590-aa38-4172-ba0b-12aba5817488",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c3e50f0f-c419-4d37-a971-bceb8ce7798d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 330,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9733a1-787c-477c-bfbf-e91c5a5f4622",
        "cursor": {
          "ref": "8060f9b1-7b55-40de-ae9b-b8eda2df21bd",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "aaff8155-ef6f-462c-a8e1-d87c2f5b6522"
        },
        "item": {
          "id": "eb9733a1-787c-477c-bfbf-e91c5a5f4622",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "990eed5d-d759-4a7e-a4b0-e79a23a6d051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 487,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52e698b3-6188-42e7-ad39-437c55b19f61",
        "cursor": {
          "ref": "1edf4eb4-1990-48d3-a3a9-f443fdfe2357",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c80fb5fa-cc6a-4479-a569-6041b1a502e5"
        },
        "item": {
          "id": "52e698b3-6188-42e7-ad39-437c55b19f61",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3617fd9f-cef1-4b83-ac6e-98618379c971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 394,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f31010-c4cb-4c84-82ae-3685621e2ee3",
        "cursor": {
          "ref": "7e395257-22d6-4a0a-9e16-b88f30734c15",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "314e1152-43ab-4a4a-b26e-8e5475104fda"
        },
        "item": {
          "id": "92f31010-c4cb-4c84-82ae-3685621e2ee3",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e68a6904-d4fa-40b2-803b-f08c55864c4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 331,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b798b0-1e56-4699-8bab-120cd414f1c5",
        "cursor": {
          "ref": "29456f02-41d6-4973-858f-85c11b85e3bf",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d5f13a6a-2a46-4c29-8068-4de58574eeab"
        },
        "item": {
          "id": "a3b798b0-1e56-4699-8bab-120cd414f1c5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ec391ecc-6598-4e25-9545-e9560ae82d55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95790074-c833-401f-a9ce-314a4c4e1696",
        "cursor": {
          "ref": "a439b192-4016-48eb-a2de-eb3048914e60",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "29af60f5-2035-444a-8e68-ac4f1fe829d0"
        },
        "item": {
          "id": "95790074-c833-401f-a9ce-314a4c4e1696",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "cd30e829-d9c0-4f46-88c4-8b6c4bd801e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 329,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29b8b53-d3d3-44d0-a3f1-522d2ff3510f",
        "cursor": {
          "ref": "5902f3a5-aff9-45ff-a478-a3c074cf52e2",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "2d750678-ef51-4774-b740-0822bea90273"
        },
        "item": {
          "id": "c29b8b53-d3d3-44d0-a3f1-522d2ff3510f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "fb3611a6-94f8-4e73-8081-aef8a7a46ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0b614d2-a2ee-41ae-ba00-008ac4c1dc01",
        "cursor": {
          "ref": "930ec6c6-2108-425b-b029-bc24225e8e24",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8511ba41-df97-4c66-8d82-28980493edb5"
        },
        "item": {
          "id": "c0b614d2-a2ee-41ae-ba00-008ac4c1dc01",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9fed7fc1-5626-475e-9ee8-439fe752d57e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb236d2-0738-41fb-8a22-5397b5ad5017",
        "cursor": {
          "ref": "30683d10-8bb7-4969-8220-3fc739255b28",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "74beabd2-1f47-4378-9891-1d71887a2cda"
        },
        "item": {
          "id": "3fb236d2-0738-41fb-8a22-5397b5ad5017",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f1c3751b-66f6-4001-bfcc-74956d41cb36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "810716ea-4ba5-4ec2-b464-a362f9b4d52c",
        "cursor": {
          "ref": "3d859dd6-5649-4a28-b003-95b67e215e17",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "c112e0d5-1642-417b-b2c6-6f63685939dc"
        },
        "item": {
          "id": "810716ea-4ba5-4ec2-b464-a362f9b4d52c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8ad900cc-bae8-4ff2-ae50-7936f024a3c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 337,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b148970-23ca-4896-8c5b-d77d4c46d10c",
        "cursor": {
          "ref": "05359a8b-a32c-46ea-a088-83cf6fe17468",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8a9dc3c5-34f0-44b4-b332-2b1d426d9659"
        },
        "item": {
          "id": "4b148970-23ca-4896-8c5b-d77d4c46d10c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b695381f-2e45-423b-a230-94f9ab6ba74b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "887c55c9-2da2-43fd-bc16-8ae0d4253519",
        "cursor": {
          "ref": "236cdb3a-c91d-43ae-8451-2bebcf3dbbef",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "8ad0911a-42da-4c75-a4f3-b46a9f8bbf29"
        },
        "item": {
          "id": "887c55c9-2da2-43fd-bc16-8ae0d4253519",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5a4b5ffc-f83e-41b9-bf02-ba16c2684004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a745905d-2d20-49da-a9e1-6e784ff781ea",
        "cursor": {
          "ref": "2dfaae6d-5cfd-4ebb-aeae-fe943613a5e4",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "137d3d50-b7b3-4b99-8e25-cfd4e9555c66"
        },
        "item": {
          "id": "a745905d-2d20-49da-a9e1-6e784ff781ea",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "1bf8f47f-cc77-463b-b9de-fbf744dec8dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "607a752d-57b0-4be3-8710-6496cd8c72a3",
        "cursor": {
          "ref": "1d4c0c7b-5f28-49a5-9861-c502ba981b8e",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2b7fff46-e396-472d-b23b-0bf4d69c1ef7"
        },
        "item": {
          "id": "607a752d-57b0-4be3-8710-6496cd8c72a3",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2ea7cd8c-a972-4859-a57f-8537c5697f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3584a1e7-2f74-4c3c-b4f4-4c14376a608c",
        "cursor": {
          "ref": "09e8b8a5-4ba9-4b4e-9424-5b11198de051",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "44c693a2-a9f0-40b0-b220-d858b56caf83"
        },
        "item": {
          "id": "3584a1e7-2f74-4c3c-b4f4-4c14376a608c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "80dfb1ce-04aa-447b-ad34-611ee0e0d891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 342,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d852ac7b-9693-44fd-97ab-e48bc5b4dbb2",
        "cursor": {
          "ref": "aff890c1-f45c-40dc-8cd2-54035521eefe",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f9f9b926-4b5c-4f74-b040-8492a586be10"
        },
        "item": {
          "id": "d852ac7b-9693-44fd-97ab-e48bc5b4dbb2",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "7f55d605-2ca7-4cd3-b182-e6f59ae8cd2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05743217-4143-4c76-bbc8-48ee0c777b7c",
        "cursor": {
          "ref": "ae85fdbc-3034-43dc-8227-5320b149a928",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "679a1009-eceb-4453-bbfa-3afa853cc6a0"
        },
        "item": {
          "id": "05743217-4143-4c76-bbc8-48ee0c777b7c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b458ce41-dd44-4ce8-9c55-57bb42b8afca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52899ce3-aa9b-4d25-be24-ffc00ab19cae",
        "cursor": {
          "ref": "084b043d-632a-4fcf-91b8-d93f3122aa6e",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "78b543f6-77e1-4d9b-94c6-588b4286ecb3"
        },
        "item": {
          "id": "52899ce3-aa9b-4d25-be24-ffc00ab19cae",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "dc6e8621-1485-4906-bb61-03c7559797ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64820cb4-7f51-4755-b37e-e697853523c5",
        "cursor": {
          "ref": "44aa010d-d9af-418f-b481-aeb2326b5644",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "820bc4a3-e800-4107-844a-c278796022bd"
        },
        "item": {
          "id": "64820cb4-7f51-4755-b37e-e697853523c5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "20c01c43-20dc-4f7e-ae10-37349859a65e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "572d8469-6de2-4e00-8202-7567098524e7",
        "cursor": {
          "ref": "0eda080a-170b-411b-8250-3c24141e068f",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7a4a27bf-9c53-46ee-acb0-51e945ba7710"
        },
        "item": {
          "id": "572d8469-6de2-4e00-8202-7567098524e7",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "878d0fde-6139-4add-9650-c8e0e1ba31cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984d3bc0-2644-45ab-ac50-212293c32c3d",
        "cursor": {
          "ref": "35daa22e-f3fe-423a-bd2e-4e3e0dc94e1b",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "22610055-5e8e-4f6a-b679-a1b0eb9aebff"
        },
        "item": {
          "id": "984d3bc0-2644-45ab-ac50-212293c32c3d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "434fe3d9-03b0-46d4-a1f9-6fd1bf15fa12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8cfa705-9adf-47a8-ab7d-b2ad9bbdfcfb",
        "cursor": {
          "ref": "ae3f1bc5-9ff4-4dbd-96b9-da9e13da7f29",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6d8f1223-c7aa-403d-99c1-cbc6834fb367"
        },
        "item": {
          "id": "f8cfa705-9adf-47a8-ab7d-b2ad9bbdfcfb",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "9cf6f2d7-3753-4ded-9372-f1398bd99bf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47901103-2f35-4385-ab99-2654f8ee75cf",
        "cursor": {
          "ref": "fe76ce32-9c67-4638-b254-1239453a9228",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "7211d0d2-42d3-44e3-aa52-97a717e6ef40"
        },
        "item": {
          "id": "47901103-2f35-4385-ab99-2654f8ee75cf",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b2dabf05-03c7-47dc-81e4-0f5684a9b84d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c96a0fd-2610-44f8-8581-38215615ae8e",
        "cursor": {
          "ref": "d5f8807b-fec2-40b6-adae-4c9a2528bd80",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "3c74234f-9a29-4931-8f90-15a9182b8142"
        },
        "item": {
          "id": "2c96a0fd-2610-44f8-8581-38215615ae8e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "81235822-c28e-4bbe-a06d-d1ca321399e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9568d141-3dbe-4939-bdd6-0f70bbcc09af",
        "cursor": {
          "ref": "04e133db-e651-405a-b328-b90d13b1134b",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "33907097-69ad-46fa-a90f-78ec1a738d51"
        },
        "item": {
          "id": "9568d141-3dbe-4939-bdd6-0f70bbcc09af",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "785e4d25-811a-4512-b68d-ca1ece485d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2c34566-8d91-4951-bf94-e9eca6802633",
        "cursor": {
          "ref": "674c7dd8-b482-4068-8c68-c3ba4e69a30c",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "eeaf903f-ea8f-45f2-aac2-be0b90faa43a"
        },
        "item": {
          "id": "d2c34566-8d91-4951-bf94-e9eca6802633",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "13bff563-f611-4f22-b196-a70e4067ea17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00f08d2c-8cf8-4774-b175-31ab0609ba2c",
        "cursor": {
          "ref": "e8290481-99b3-4b46-b87c-d3a1db22c936",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "dc2ead45-ceea-41ba-9657-c6e39153e12e"
        },
        "item": {
          "id": "00f08d2c-8cf8-4774-b175-31ab0609ba2c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "85c3efcf-c215-4b86-bbb8-00d50962010f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23713e3f-4a7f-4ec1-8c1c-026c42ea6165",
        "cursor": {
          "ref": "60d64c35-38ac-4b5f-8a7e-441beac37549",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "66c4c91d-2a04-4d93-b5ee-5cbf4f657c4b"
        },
        "item": {
          "id": "23713e3f-4a7f-4ec1-8c1c-026c42ea6165",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7e092978-2e96-40cf-bf6c-c6b7b44344c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80910974-c9b3-4143-a886-6d3f8fc6e7c6",
        "cursor": {
          "ref": "d46ca992-56e9-4e7c-99a6-505917c76359",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "95ec8bd2-e445-436a-8434-b76af0dd55a3"
        },
        "item": {
          "id": "80910974-c9b3-4143-a886-6d3f8fc6e7c6",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "61388254-3af8-45e1-95b4-1484b0cc5b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb85daf-9ba1-4415-90ef-9118d4473f66",
        "cursor": {
          "ref": "7b608138-1592-4a96-a4a4-e4aba6c61632",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "15e1acd5-e419-4866-9a6b-eb190e448f2e"
        },
        "item": {
          "id": "2bb85daf-9ba1-4415-90ef-9118d4473f66",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "dc83f6a9-34e2-44a9-b7bc-52c7c0bb0d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b3d5403-e1a1-4008-b783-713e23bbe79d",
        "cursor": {
          "ref": "fb82a721-88f0-4661-bba3-2787e3f18731",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "08bdab66-f81a-4035-b4b7-6ad66dfc815e"
        },
        "item": {
          "id": "3b3d5403-e1a1-4008-b783-713e23bbe79d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "cc8b97d9-e517-4f36-bec8-8ec7e2fe8ebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8abf08-9351-4f0f-b50f-1e987410c6ad",
        "cursor": {
          "ref": "78ceecbe-556c-4e60-b1f3-cf19a953c97a",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e58b764a-391c-4c69-bee5-4da0306af6f9"
        },
        "item": {
          "id": "6f8abf08-9351-4f0f-b50f-1e987410c6ad",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "36397746-5bbd-4370-9ccd-85d1a4faf288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f2ea5e-0cec-47cf-ab15-b8ba94af5142",
        "cursor": {
          "ref": "34c91e6d-7a23-4cc4-abd1-ab319d1e85cf",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d6d49b15-4a10-4ca3-a6dd-d481cd1f8813"
        },
        "item": {
          "id": "05f2ea5e-0cec-47cf-ab15-b8ba94af5142",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5b3f078f-62cf-4ec9-9531-72b758d4f711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69b5310-db0a-4e09-8b9c-63d890b8b11e",
        "cursor": {
          "ref": "27820899-b6b2-42be-bac2-c3e03756175e",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "12bb8f09-dea4-49ef-87df-46c2d682d406"
        },
        "item": {
          "id": "c69b5310-db0a-4e09-8b9c-63d890b8b11e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ac8970e4-8545-4597-b2a2-3c15b025ed87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5705548-fe86-4205-b8fa-3b5d742eb4f9",
        "cursor": {
          "ref": "91b8e628-aa0f-46f5-9c22-17c065d7e100",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ef2eec19-5341-4b0e-9326-2edcab610503"
        },
        "item": {
          "id": "b5705548-fe86-4205-b8fa-3b5d742eb4f9",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "3756c5fd-6cba-4032-b6ff-7602579a7e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1a440b-8ef3-4fdf-a09d-20114d23b0fe",
        "cursor": {
          "ref": "04ce9d3d-6ca8-48df-a5ce-07fc62cade19",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "04238ccc-acfe-4b52-807e-48b8ac2cd6b8"
        },
        "item": {
          "id": "2a1a440b-8ef3-4fdf-a09d-20114d23b0fe",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e9f042b8-61f8-4016-8fa6-c5ae230ced2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e9c0ced-97d7-41b3-97d1-d25486d0f0ee",
        "cursor": {
          "ref": "7aeff41e-84bb-4da9-ac0d-8f75f3077f42",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5f6321a0-ad40-461b-8d29-40e7166fcb85"
        },
        "item": {
          "id": "8e9c0ced-97d7-41b3-97d1-d25486d0f0ee",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "5e733d73-7365-47ad-adb7-f8e5f0719831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511ae90e-0730-4d12-8b63-43f1a98f79af",
        "cursor": {
          "ref": "aef90d7d-a6e4-4b3b-b00c-efb0e7f4541b",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "392cd7d0-52e7-4451-a89d-23992248fe29"
        },
        "item": {
          "id": "511ae90e-0730-4d12-8b63-43f1a98f79af",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "6e04a967-ec71-4f7d-b373-38ce6bdf584c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "037597ae-c14f-44fd-97dc-665e8b26a325",
        "cursor": {
          "ref": "2ed94beb-0821-4e7b-90ec-8f99b04c3ecb",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c4467acf-2a68-4bcf-8acf-0a0f3b2d58b3"
        },
        "item": {
          "id": "037597ae-c14f-44fd-97dc-665e8b26a325",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ffe93b65-8e8b-4390-ade8-51a6ae4597d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40060050-c06a-4af8-bc4b-15e33f2fc17f",
        "cursor": {
          "ref": "d39f47fc-6be9-49e0-b27c-cc19f11afec3",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a7f8a926-db63-4c75-9522-aa1903710bc6"
        },
        "item": {
          "id": "40060050-c06a-4af8-bc4b-15e33f2fc17f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "725925b5-f29b-4bb4-82d1-103fe9015e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc6e307a-4d66-4572-91b1-6039df521fbb",
        "cursor": {
          "ref": "40576e0a-b996-4347-93cb-fe331516bb71",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "5b570c24-d782-4a75-8300-976b1fbb53d1"
        },
        "item": {
          "id": "bc6e307a-4d66-4572-91b1-6039df521fbb",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f4a1e2fc-4107-4d1a-b46b-73bf8c744d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9eee512-7709-4d16-9e7a-984a025b5e95",
        "cursor": {
          "ref": "59470f51-fb82-4930-a380-509b1137b246",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2280866f-c1d7-40d1-9eb9-0c8040c3f2f2"
        },
        "item": {
          "id": "e9eee512-7709-4d16-9e7a-984a025b5e95",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6fdbc8d8-16d4-4ba4-98ea-ee9cc097a3f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d50f6798-cb11-4435-8319-396a680fa582",
        "cursor": {
          "ref": "81477cd9-329d-4fff-b9a1-deb69b3ebfa3",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c6cbdce9-7be0-4548-b2cc-df12d1da634f"
        },
        "item": {
          "id": "d50f6798-cb11-4435-8319-396a680fa582",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f60b50b4-668d-4423-83ee-dfde822e22d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faf854bd-ca28-4eae-84bc-83a901da0819",
        "cursor": {
          "ref": "ba35bbbf-d4e8-4c19-b2ec-8e2f76043e8e",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "58a3c581-c5a8-45d0-aa28-3569bd5e968c"
        },
        "item": {
          "id": "faf854bd-ca28-4eae-84bc-83a901da0819",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7ddaab89-1a93-493f-895d-4adee2cec36d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab1d6a3-1be7-4dea-b0a0-0ada2d47ae22",
        "cursor": {
          "ref": "fe7d857b-f506-4c8a-b02e-01d41567e3cb",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "4a4d9899-5c4d-49a3-b64b-b45543af85d0"
        },
        "item": {
          "id": "aab1d6a3-1be7-4dea-b0a0-0ada2d47ae22",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "39b9af33-1d75-4480-b58b-53f8150e03ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae23d876-844d-4627-90be-931c0b30fdf4",
        "cursor": {
          "ref": "974d8f8b-298e-499e-bd27-56a61a16dd91",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "478b9430-d8fa-4d31-9ab6-0eafd3111f1f"
        },
        "item": {
          "id": "ae23d876-844d-4627-90be-931c0b30fdf4",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "faedbf2e-9d7d-4e06-a23e-843ae40793ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b589b3f-4c6d-4143-beb6-c57d33c1e471",
        "cursor": {
          "ref": "f76a91e4-3af7-4551-8c41-60f54aecd387",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "55823285-083d-42ea-8365-dea35dbd9e18"
        },
        "item": {
          "id": "1b589b3f-4c6d-4143-beb6-c57d33c1e471",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "70647aaf-5d00-417d-9c6f-370a0dd23486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6be7ec0-f5dd-4508-b4c7-6627bac24cae",
        "cursor": {
          "ref": "54adfcb3-6e9d-4ea5-b282-3613d8fd2e9d",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b76342dd-3add-4a07-a9cd-58c45982a8f0"
        },
        "item": {
          "id": "f6be7ec0-f5dd-4508-b4c7-6627bac24cae",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "bcece01b-7009-4eee-aec2-85534c9d585e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc62d7d2-12e8-4273-b945-a7a2992d2b08",
        "cursor": {
          "ref": "ac715ee5-a7df-44f2-8dbb-e9f5d2b53f70",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "dc964015-6a47-474a-bc1f-a60830570475"
        },
        "item": {
          "id": "cc62d7d2-12e8-4273-b945-a7a2992d2b08",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "dc65175b-2ec8-45c0-b4ae-21a69eaa9dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "710f9d0d-ba7d-4bf7-8fbf-42cce35c89f8",
        "cursor": {
          "ref": "bddfcad9-08ad-43ec-85df-8066190502cb",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8ac38d24-21d3-4650-ba4d-7308ebd27c9b"
        },
        "item": {
          "id": "710f9d0d-ba7d-4bf7-8fbf-42cce35c89f8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "3c6fb3c5-70ed-47c7-954e-e9538ba0bf5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1ee7cb-99ff-4afd-ba86-f781551b074d",
        "cursor": {
          "ref": "4a55f8bf-8905-4eb0-8559-66a55f7a02c8",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "dee53558-8bd6-4876-bf97-c4b36bfad75c"
        },
        "item": {
          "id": "1d1ee7cb-99ff-4afd-ba86-f781551b074d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ce3d98c1-0b49-4199-8292-cd536ae5aab1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a74c39a3-836c-45aa-8964-8531d4113c02",
        "cursor": {
          "ref": "823c82b8-e988-45c4-9ad5-8dac92ecc64d",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2334e12d-62dc-4016-a11f-e9e9829b56f9"
        },
        "item": {
          "id": "a74c39a3-836c-45aa-8964-8531d4113c02",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "fcf617de-6f0a-44ac-ac57-4d4366bc1a73",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e328408-708f-4693-8c37-2ce4ff81e7f3",
        "cursor": {
          "ref": "081c7219-4650-4d72-8321-3187eabc5da7",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a7b60e72-4780-4977-80ea-5cc85c9f41e9"
        },
        "item": {
          "id": "1e328408-708f-4693-8c37-2ce4ff81e7f3",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e44a1886-ed43-4716-bcf0-1f6ee468bc16",
          "status": "OK",
          "code": 200,
          "responseTime": 290,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "2499331b-2f22-4fd5-9068-dccbc17a8d92",
        "cursor": {
          "ref": "4c984bca-1b79-4cca-9d3b-bfe28e0e663a",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b5437512-8698-4f91-8674-bdf662feadfe"
        },
        "item": {
          "id": "2499331b-2f22-4fd5-9068-dccbc17a8d92",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e8d5b592-5067-43a4-9779-9fafa9a3d535",
          "status": "OK",
          "code": 200,
          "responseTime": 650,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e1814a8-a44d-4284-9817-07fc0e9bb74c",
        "cursor": {
          "ref": "13048bba-ef42-4921-ab68-6ffcc82c9435",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "707ca269-34e1-4de7-b237-63604a24fd6b"
        },
        "item": {
          "id": "0e1814a8-a44d-4284-9817-07fc0e9bb74c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "aee485e2-0af1-4ddd-b056-abb2049581dd",
          "status": "OK",
          "code": 200,
          "responseTime": 661,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ddf950-371f-4a73-ad56-24c1844fea75",
        "cursor": {
          "ref": "ca085720-3804-421e-8277-918779c37499",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "49a3776a-1428-4d83-ad30-a92bcfd71d03"
        },
        "item": {
          "id": "89ddf950-371f-4a73-ad56-24c1844fea75",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "43b5758e-4bb4-4722-a8cb-d4617a47c192",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ddf950-371f-4a73-ad56-24c1844fea75",
        "cursor": {
          "ref": "ca085720-3804-421e-8277-918779c37499",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "49a3776a-1428-4d83-ad30-a92bcfd71d03"
        },
        "item": {
          "id": "89ddf950-371f-4a73-ad56-24c1844fea75",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "43b5758e-4bb4-4722-a8cb-d4617a47c192",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ddf950-371f-4a73-ad56-24c1844fea75",
        "cursor": {
          "ref": "ca085720-3804-421e-8277-918779c37499",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "49a3776a-1428-4d83-ad30-a92bcfd71d03"
        },
        "item": {
          "id": "89ddf950-371f-4a73-ad56-24c1844fea75",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "43b5758e-4bb4-4722-a8cb-d4617a47c192",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdb46bd8-4025-485c-a117-a6b9ffc996db",
        "cursor": {
          "ref": "b03790ef-fbaf-4150-a11e-00cd41a2b29f",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "37615d23-23ff-4332-8a1a-53dd61e5cbfc"
        },
        "item": {
          "id": "cdb46bd8-4025-485c-a117-a6b9ffc996db",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "ae8b1c39-cbb7-4ca7-8427-5195b78091b3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce1878e1-327e-4cb4-97d3-9ae00740a741",
        "cursor": {
          "ref": "8b4059e1-6d93-46d0-a321-e4a2a0578b34",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0e875f1a-5b6f-4cbe-a217-22c415d57c07"
        },
        "item": {
          "id": "ce1878e1-327e-4cb4-97d3-9ae00740a741",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7793f08f-c75d-47ca-a86d-6fa7a28d7d6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "ce1878e1-327e-4cb4-97d3-9ae00740a741",
        "cursor": {
          "ref": "8b4059e1-6d93-46d0-a321-e4a2a0578b34",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0e875f1a-5b6f-4cbe-a217-22c415d57c07"
        },
        "item": {
          "id": "ce1878e1-327e-4cb4-97d3-9ae00740a741",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7793f08f-c75d-47ca-a86d-6fa7a28d7d6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "90e3bdc3-6b67-490e-b7ac-454b5c30ba7e",
        "cursor": {
          "ref": "e89cade4-fced-4a24-b582-945d4260ab6d",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3b5a40cf-ebe7-453b-acc9-115bce1a5700"
        },
        "item": {
          "id": "90e3bdc3-6b67-490e-b7ac-454b5c30ba7e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "ee1d347c-9236-46ca-8136-757e1fda68a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "aaaaa6b7-8f7c-4cf1-975d-6d87b8b50011",
        "cursor": {
          "ref": "cb185654-43b8-491c-ad02-9d70d4f77f4a",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "0c7c83fd-3f3c-4b46-b0c9-286986cbb2a4"
        },
        "item": {
          "id": "aaaaa6b7-8f7c-4cf1-975d-6d87b8b50011",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7db40ec9-4ef4-42fe-88f1-e20eda89685a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "aaaaa6b7-8f7c-4cf1-975d-6d87b8b50011",
        "cursor": {
          "ref": "cb185654-43b8-491c-ad02-9d70d4f77f4a",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "0c7c83fd-3f3c-4b46-b0c9-286986cbb2a4"
        },
        "item": {
          "id": "aaaaa6b7-8f7c-4cf1-975d-6d87b8b50011",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7db40ec9-4ef4-42fe-88f1-e20eda89685a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "abbab650-e61e-49b8-94ec-34f8a6104bbe",
        "cursor": {
          "ref": "c05dae46-2f55-4a4e-b45e-acb523206f09",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "b5a9a4be-8c9f-4f71-8981-a2ec6f0a2253"
        },
        "item": {
          "id": "abbab650-e61e-49b8-94ec-34f8a6104bbe",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "d102dce3-107b-4d30-af5f-6bf84b6bb907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}